
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000452  00800100  00003a6e  00003b22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a6e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000242  00800552  00800552  00003f74  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  00003f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  00003f82  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  00003fde  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006743  00000000  00000000  000043c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017b9  00000000  00000000  0000ab09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019aa  00000000  00000000  0000c2c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cb4  00000000  00000000  0000dc6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c84  00000000  00000000  0000e920  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004366  00000000  00000000  0000f5a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0001390a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#include <avr/io.h>
#include "defines.h"
#include "Geocalc.h"

uint16_t calculate_bearing(double lat1, double lon1, double lat2, double lon2)
{
       0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__ctors_end>
       4:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       8:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
       c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      10:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      14:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      18:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      1c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      20:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      24:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      28:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      2c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      30:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      34:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
      38:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <__vector_14>
      3c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      40:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      44:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      48:	0c 94 d7 0e 	jmp	0x1dae	; 0x1dae <__vector_18>
      4c:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__vector_19>
      50:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      54:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      58:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      5c:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      60:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      64:	0c 94 0f 01 	jmp	0x21e	; 0x21e <__bad_interrupt>
      68:	a5 09       	sbc	r26, r5
      6a:	b6 09       	sbc	r27, r6
      6c:	db 09       	sbc	r29, r11
      6e:	14 0a       	sbc	r1, r20
      70:	4d 0a       	sbc	r4, r29
      72:	ae 0a       	sbc	r10, r30
      74:	16 0b       	sbc	r17, r22
      76:	69 0b       	sbc	r22, r25
	lon1 = dtor(lon1);
	lat2 = dtor(lat2);
	lon2 = dtor(lon2);

	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
      78:	08 4a       	sbci	r16, 0xA8	; 168
      7a:	d7 3b       	cpi	r29, 0xB7	; 183
      7c:	3b ce       	rjmp	.-906    	; 0xfffffcf4 <__eeprom_end+0xff7efce6>
      7e:	01 6e       	ori	r16, 0xE1	; 225
      80:	84 bc       	out	0x24, r8	; 36
      82:	bf fd       	.word	0xfdbf	; ????
      84:	c1 2f       	mov	r28, r17
      86:	3d 6c       	ori	r19, 0xCD	; 205
      88:	74 31       	cpi	r23, 0x14	; 20
      8a:	9a bd       	out	0x2a, r25	; 42
      8c:	56 83       	std	Z+6, r21	; 0x06
      8e:	3d da       	rcall	.-2950   	; 0xfffff50a <__eeprom_end+0xff7ef4fc>
      90:	3d 00       	.word	0x003d	; ????
      92:	c7 7f       	andi	r28, 0xF7	; 247
      94:	11 be       	out	0x31, r1	; 49
      96:	d9 e4       	ldi	r29, 0x49	; 73
      98:	bb 4c       	sbci	r27, 0xCB	; 203
      9a:	3e 91       	ld	r19, -X
      9c:	6b aa       	std	Y+51, r6	; 0x33
      9e:	aa be       	out	0x3a, r10	; 58
      a0:	00 00       	nop
      a2:	00 80       	ld	r0, Z
      a4:	3f 00       	.word	0x003f	; ????

000000a6 <__trampolines_end>:
      a6:	6e 61       	ori	r22, 0x1E	; 30
      a8:	6e 00       	.word	0x006e	; ????

000000aa <__c.2159>:
      aa:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      ba:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
      ca:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      da:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ea:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      fa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
	lon1 = dtor(lon1);
	lat2 = dtor(lat2);
	lon2 = dtor(lon2);

	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
     10a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     11a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     12a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     13a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     14a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     15a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     16a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     17a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
}

//Convert radians to degrees
double rtod(double fradians)
{
	return (fradians * 180.0 / PI);
     18a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     19a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001a8 <pstr_nan>:
	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
	//convert to degrees
	bearing = rtod(bearing);
	//use mod to turn -90 = 270
	bearing = fmod((bearing + 360.0), 360);
     1a8:	4e 41 4e                                            NAN

000001ab <pstr_inity>:
     1ab:	49 4e 49 54 59                                      INITY

000001b0 <pstr_inf>:
     1b0:	49 4e 46                                            INF

000001b3 <pwr_m10>:
     1b3:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
	return (int) bearing + 0.5;
     1c3:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000001cb <pwr_p10>:
     1cb:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
}
     1db:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000001e4 <__ctors_end>:
     1e4:	11 24       	eor	r1, r1
     1e6:	1f be       	out	0x3f, r1	; 63
     1e8:	cf ef       	ldi	r28, 0xFF	; 255
     1ea:	d8 e0       	ldi	r29, 0x08	; 8
     1ec:	de bf       	out	0x3e, r29	; 62
     1ee:	cd bf       	out	0x3d, r28	; 61

000001f0 <__do_copy_data>:
     1f0:	15 e0       	ldi	r17, 0x05	; 5
     1f2:	a0 e0       	ldi	r26, 0x00	; 0
     1f4:	b1 e0       	ldi	r27, 0x01	; 1
     1f6:	ee e6       	ldi	r30, 0x6E	; 110
     1f8:	fa e3       	ldi	r31, 0x3A	; 58
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <__do_copy_data+0x10>
     1fc:	05 90       	lpm	r0, Z+
     1fe:	0d 92       	st	X+, r0
     200:	a2 35       	cpi	r26, 0x52	; 82
     202:	b1 07       	cpc	r27, r17
     204:	d9 f7       	brne	.-10     	; 0x1fc <__do_copy_data+0xc>

00000206 <__do_clear_bss>:
     206:	27 e0       	ldi	r18, 0x07	; 7
     208:	a2 e5       	ldi	r26, 0x52	; 82
     20a:	b5 e0       	ldi	r27, 0x05	; 5
     20c:	01 c0       	rjmp	.+2      	; 0x210 <.do_clear_bss_start>

0000020e <.do_clear_bss_loop>:
     20e:	1d 92       	st	X+, r1

00000210 <.do_clear_bss_start>:
     210:	a4 39       	cpi	r26, 0x94	; 148
     212:	b2 07       	cpc	r27, r18
     214:	e1 f7       	brne	.-8      	; 0x20e <.do_clear_bss_loop>
     216:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <main>
     21a:	0c 94 35 1d 	jmp	0x3a6a	; 0x3a6a <_exit>

0000021e <__bad_interrupt>:
     21e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000222 <read_button>:
	}
}

uint8_t read_button(void)
{
	if(debug_on)
     222:	80 91 56 05 	lds	r24, 0x0556
     226:	88 23       	and	r24, r24
     228:	81 f0       	breq	.+32     	; 0x24a <read_button+0x28>
	{
		uart_puts("Button state = ");
     22a:	84 e2       	ldi	r24, 0x24	; 36
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		print_int(SW_STATUS, 1);
     232:	89 b1       	in	r24, 0x09	; 9
     234:	80 78       	andi	r24, 0x80	; 128
     236:	61 e0       	ldi	r22, 0x01	; 1
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
		
		if (!SW_STATUS)	// If pressed, pulled low
     23e:	4f 99       	sbic	0x09, 7	; 9
     240:	04 c0       	rjmp	.+8      	; 0x24a <read_button+0x28>
		{
			uart_puts("Pressed\n");
     242:	84 e3       	ldi	r24, 0x34	; 52
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		}
	}
	
	return (!SW_STATUS);
     24a:	89 b1       	in	r24, 0x09	; 9
     24c:	80 95       	com	r24
}
     24e:	88 1f       	adc	r24, r24
     250:	88 27       	eor	r24, r24
     252:	88 1f       	adc	r24, r24
     254:	08 95       	ret

00000256 <read_charge_status>:

uint8_t read_charge_status(void)
{
	if (!CHARGE_PIN_STATUS) // If 0
     256:	32 99       	sbic	0x06, 2	; 6
     258:	0a c0       	rjmp	.+20     	; 0x26e <read_charge_status+0x18>
	{
		if(debug_on) uart_puts("Charge status: CHARGING\n");
     25a:	80 91 56 05 	lds	r24, 0x0556
     25e:	88 23       	and	r24, r24
     260:	81 f0       	breq	.+32     	; 0x282 <read_charge_status+0x2c>
     262:	8d e3       	ldi	r24, 0x3D	; 61
     264:	91 e0       	ldi	r25, 0x01	; 1
     266:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		return CHARGING;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	08 95       	ret
	}
	else
	{
		if(debug_on) uart_puts("Charge status: FULL\n");
     26e:	80 91 56 05 	lds	r24, 0x0556
     272:	88 23       	and	r24, r24
     274:	41 f0       	breq	.+16     	; 0x286 <read_charge_status+0x30>
     276:	86 e5       	ldi	r24, 0x56	; 86
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		return FULL;
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 95       	ret
uint8_t read_charge_status(void)
{
	if (!CHARGE_PIN_STATUS) // If 0
	{
		if(debug_on) uart_puts("Charge status: CHARGING\n");
		return CHARGING;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	08 95       	ret
	}
	else
	{
		if(debug_on) uart_puts("Charge status: FULL\n");
		return FULL;
     286:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     288:	08 95       	ret

0000028a <check_device_status>:
		PWR_OFF;	// Device turn off
	}
}

void check_device_status(void)
{
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
	device.buttonstate = read_button();				// 1=pressed
     28e:	0e 94 11 01 	call	0x222	; 0x222 <read_button>
     292:	c0 e2       	ldi	r28, 0x20	; 32
     294:	d6 e0       	ldi	r29, 0x06	; 6
     296:	88 83       	st	Y, r24
	device.chargingstate = read_charge_status();
     298:	0e 94 2b 01 	call	0x256	; 0x256 <read_charge_status>
     29c:	80 93 1f 06 	sts	0x061F, r24
	//device.battery = read_battery();
	
	if ((device.buttonstate==BUTTON_PRESSED))	// set state
     2a0:	88 81       	ld	r24, Y
     2a2:	81 30       	cpi	r24, 0x01	; 1
     2a4:	89 f4       	brne	.+34     	; 0x2c8 <check_device_status+0x3e>
	{
		if ((device.status!=BUTTON_PRESSED))
     2a6:	80 91 24 06 	lds	r24, 0x0624
     2aa:	81 30       	cpi	r24, 0x01	; 1
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <check_device_status+0x26>
     2ae:	4e c0       	rjmp	.+156    	; 0x34c <check_device_status+0xc2>
		{
			uart_puts("Button pressed\n");
     2b0:	8b e6       	ldi	r24, 0x6B	; 107
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			device.previousstatus = device.status;
     2b8:	e4 e2       	ldi	r30, 0x24	; 36
     2ba:	f6 e0       	ldi	r31, 0x06	; 6
     2bc:	80 81       	ld	r24, Z
     2be:	80 93 23 06 	sts	0x0623, r24
			device.status = BUTTON_PRESSED;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
     2c6:	42 c0       	rjmp	.+132    	; 0x34c <check_device_status+0xc2>
		}
	}
	else
	{
		if ((device.buttonstate==BUTTON_NOT_PRESSED)&&(device.status==BUTTON_PRESSED)) // reset state
     2c8:	81 11       	cpse	r24, r1
     2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <check_device_status+0x58>
     2cc:	80 91 24 06 	lds	r24, 0x0624
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	39 f4       	brne	.+14     	; 0x2e2 <check_device_status+0x58>
		{
			uart_puts("Button released\n");
     2d4:	8b e7       	ldi	r24, 0x7B	; 123
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			device.status = BUTTON_NOT_PRESSED;	// released
     2dc:	10 92 24 06 	sts	0x0624, r1
     2e0:	35 c0       	rjmp	.+106    	; 0x34c <check_device_status+0xc2>
		}
		else if (device.status==BUTTON_NOT_PRESSED)
     2e2:	20 91 24 06 	lds	r18, 0x0624
     2e6:	21 11       	cpse	r18, r1
     2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <check_device_status+0x6a>
		{
			device.status = device.previousstatus;
     2ea:	80 91 23 06 	lds	r24, 0x0623
     2ee:	80 93 24 06 	sts	0x0624, r24
     2f2:	2c c0       	rjmp	.+88     	; 0x34c <check_device_status+0xc2>
		}
		else
		{
			if (timeout_timer<TIMEOUT_TIME) // still ok
     2f4:	80 91 57 05 	lds	r24, 0x0557
     2f8:	90 91 58 05 	lds	r25, 0x0558
     2fc:	88 38       	cpi	r24, 0x88	; 136
     2fe:	33 e1       	ldi	r19, 0x13	; 19
     300:	93 07       	cpc	r25, r19
     302:	30 f4       	brcc	.+12     	; 0x310 <check_device_status+0x86>
			{
				//device.status = NAVIGATING;
				timeout_timer++;
     304:	01 96       	adiw	r24, 0x01	; 1
     306:	90 93 58 05 	sts	0x0558, r25
     30a:	80 93 57 05 	sts	0x0557, r24
     30e:	11 c0       	rjmp	.+34     	; 0x332 <check_device_status+0xa8>
			}
			else //time-out
			{
				timeout_timer = 40;
     310:	88 e2       	ldi	r24, 0x28	; 40
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 58 05 	sts	0x0558, r25
     318:	80 93 57 05 	sts	0x0557, r24
				if (device.status!=NO_CONNECTION)
     31c:	23 30       	cpi	r18, 0x03	; 3
     31e:	49 f0       	breq	.+18     	; 0x332 <check_device_status+0xa8>
				{
					device.previousstatus = device.status;
     320:	20 93 23 06 	sts	0x0623, r18
					device.status = NO_CONNECTION;
     324:	83 e0       	ldi	r24, 0x03	; 3
     326:	80 93 24 06 	sts	0x0624, r24
					uart_puts("We have NO Connection (time-out)..\n");
     32a:	8c e8       	ldi	r24, 0x8C	; 140
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
				}
			}
			
			if (device.newdata)
     332:	80 91 22 06 	lds	r24, 0x0622
     336:	88 23       	and	r24, r24
     338:	49 f0       	breq	.+18     	; 0x34c <check_device_status+0xc2>
			{
				device.status = NAVIGATING;
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	80 93 24 06 	sts	0x0624, r24
				device.newdata = FALSE;
     340:	10 92 22 06 	sts	0x0622, r1
				timeout_timer = 0;	// reset timer
     344:	10 92 58 05 	sts	0x0558, r1
     348:	10 92 57 05 	sts	0x0557, r1
			}
		}
	}
}
     34c:	df 91       	pop	r29
     34e:	cf 91       	pop	r28
     350:	08 95       	ret

00000352 <read_battery>:
		return FULL;
	}
}

uint16_t read_battery(void)
{
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
	*   Min val = 3.14*0.5 = 1.57V*1024/3V3 = 487
	*	Min val = 4.2*0.5 = 2.1V*1024/3V3 = 651
	*/
	static uint16_t MIN_BAT_ADC = 487, MAX_BAT_ADC = 660;	
	
	BATT_PWR_ON;
     356:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     358:	8f e0       	ldi	r24, 0x0F	; 15
     35a:	97 e2       	ldi	r25, 0x27	; 39
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <read_battery+0xa>
     360:	00 c0       	rjmp	.+0      	; 0x362 <read_battery+0x10>
     362:	00 00       	nop
	_delay_ms(5);	// Stabilize power supply
	battery_val = read_adc(BATT_PIN);
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	0e 94 af 0c 	call	0x195e	; 0x195e <read_adc>
	battery_percentage = (battery_val - MIN_BAT_ADC) * (100-0) / (MAX_BAT_ADC - MIN_BAT_ADC) + 0;
     36a:	87 5e       	subi	r24, 0xE7	; 231
     36c:	91 40       	sbci	r25, 0x01	; 1
     36e:	24 e6       	ldi	r18, 0x64	; 100
     370:	28 9f       	mul	r18, r24
     372:	a0 01       	movw	r20, r0
     374:	29 9f       	mul	r18, r25
     376:	50 0d       	add	r21, r0
     378:	11 24       	eor	r1, r1
     37a:	9a 01       	movw	r18, r20
     37c:	a3 ed       	ldi	r26, 0xD3	; 211
     37e:	ba e7       	ldi	r27, 0x7A	; 122
     380:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
     384:	48 1b       	sub	r20, r24
     386:	59 0b       	sbc	r21, r25
     388:	ea 01       	movw	r28, r20
     38a:	d6 95       	lsr	r29
     38c:	c7 95       	ror	r28
     38e:	8c 0f       	add	r24, r28
     390:	9d 1f       	adc	r25, r29
	BATT_PWR_OFF;
     392:	22 e0       	ldi	r18, 0x02	; 2
     394:	28 b9       	out	0x08, r18	; 8
     396:	ec 01       	movw	r28, r24
     398:	cc 0f       	add	r28, r28
     39a:	cd 2f       	mov	r28, r29
     39c:	cc 1f       	adc	r28, r28
     39e:	dd 0b       	sbc	r29, r29
     3a0:	d1 95       	neg	r29
     3a2:	c5 36       	cpi	r28, 0x65	; 101
     3a4:	d1 05       	cpc	r29, r1
     3a6:	10 f0       	brcs	.+4      	; 0x3ac <read_battery+0x5a>
     3a8:	c4 e6       	ldi	r28, 0x64	; 100
     3aa:	d0 e0       	ldi	r29, 0x00	; 0
	
	if (battery_percentage>100) {battery_percentage=100;}
	
	if (debug_on)
     3ac:	80 91 56 05 	lds	r24, 0x0556
     3b0:	88 23       	and	r24, r24
     3b2:	61 f0       	breq	.+24     	; 0x3cc <read_battery+0x7a>
	{
		uart_puts("Battery = ");
     3b4:	80 eb       	ldi	r24, 0xB0	; 176
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		print_int(battery_percentage, 0);
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	ce 01       	movw	r24, r28
     3c0:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
		uart_puts("%\n");
     3c4:	8b eb       	ldi	r24, 0xBB	; 187
     3c6:	91 e0       	ldi	r25, 0x01	; 1
     3c8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>

	
	//battery_percentage = (battery_percentage>=100) ? 100: battery_percentage;	/* limit */
	//uart_puts("TODO:battery percentage should still be mapped!!\n");
	return (battery_percentage);
}
     3cc:	ce 01       	movw	r24, r28
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <read_data_raw>:
	i2c_stop();*/
}

// Returns a set of acceleration and raw magnetic readings from the cmp01a.
void read_data_raw(vector *a, vector *m)
{
     3d4:	4f 92       	push	r4
     3d6:	5f 92       	push	r5
     3d8:	6f 92       	push	r6
     3da:	7f 92       	push	r7
     3dc:	8f 92       	push	r8
     3de:	9f 92       	push	r9
     3e0:	af 92       	push	r10
     3e2:	bf 92       	push	r11
     3e4:	cf 92       	push	r12
     3e6:	df 92       	push	r13
     3e8:	ef 92       	push	r14
     3ea:	ff 92       	push	r15
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	7c 01       	movw	r14, r24
     3f6:	eb 01       	movw	r28, r22
	//i2c_start(0x32);
	//i2c_write(0x28 | 1<<7);
	//i2c_start(0x33);
	
	// read accelerometer values
	i2c_start(0x32);
     3f8:	82 e3       	ldi	r24, 0x32	; 50
     3fa:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	i2c_write(0xA8);
     3fe:	88 ea       	ldi	r24, 0xA8	; 168
     400:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_start(0x33);
     404:	83 e3       	ldi	r24, 0x33	; 51
     406:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	
	uint8_t axl = i2c_readAck();
     40a:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     40e:	48 2e       	mov	r4, r24
	uint8_t axh = i2c_readAck();
     410:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     414:	58 2e       	mov	r5, r24
	uint8_t ayl = i2c_readAck();
     416:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     41a:	68 2e       	mov	r6, r24
	uint8_t ayh = i2c_readAck();
     41c:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     420:	78 2e       	mov	r7, r24
	uint8_t azl = i2c_readAck();
     422:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     426:	88 2e       	mov	r8, r24
	uint8_t azh = i2c_readNak();
     428:	0e 94 8b 05 	call	0xb16	; 0xb16 <i2c_readNak>
     42c:	98 2e       	mov	r9, r24
	i2c_stop();
     42e:	0e 94 65 05 	call	0xaca	; 0xaca <i2c_stop>
	//i2c_write(0x03); // OUTXH_M
	//i2c_start(0x3D);		  // repeated start
	//i2c_write(0x3D); // read mag
	
	// read magnetometer values
	i2c_start(0x3C);
     432:	8c e3       	ldi	r24, 0x3C	; 60
     434:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	i2c_write(0x03);
     438:	83 e0       	ldi	r24, 0x03	; 3
     43a:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_start(0x3D);
     43e:	8d e3       	ldi	r24, 0x3D	; 61
     440:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	
	uint8_t mxh = i2c_readAck();	/* LSM303DLHC A data = XYZ */
     444:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     448:	b8 2e       	mov	r11, r24
	uint8_t mxl = i2c_readAck();
     44a:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     44e:	a8 2e       	mov	r10, r24
	uint8_t mzh = i2c_readAck();	
     450:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     454:	18 2f       	mov	r17, r24
	uint8_t mzl = i2c_readAck();	/* LSM303DLHC M data = XZY */
     456:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     45a:	08 2f       	mov	r16, r24
	uint8_t myh = i2c_readAck();
     45c:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     460:	d8 2e       	mov	r13, r24
	uint8_t myl = i2c_readNak();
     462:	0e 94 8b 05 	call	0xb16	; 0xb16 <i2c_readNak>
     466:	c8 2e       	mov	r12, r24
	i2c_stop();
     468:	0e 94 65 05 	call	0xaca	; 0xaca <i2c_stop>

	//a->x = (int16_t)((axh << 8) | axl);
	//a->y = (int16_t)((ayh << 8) | ayl);
	//a->z = (int16_t)((azh << 8) | azl);
	a->x = axh << 8 | axl;
     46c:	64 2d       	mov	r22, r4
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	75 29       	or	r23, r5
     472:	88 27       	eor	r24, r24
     474:	77 fd       	sbrc	r23, 7
     476:	80 95       	com	r24
     478:	98 2f       	mov	r25, r24
     47a:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     47e:	f7 01       	movw	r30, r14
     480:	60 83       	st	Z, r22
     482:	71 83       	std	Z+1, r23	; 0x01
     484:	82 83       	std	Z+2, r24	; 0x02
     486:	93 83       	std	Z+3, r25	; 0x03
	a->y = ayh << 8 | ayl;
     488:	66 2d       	mov	r22, r6
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	77 29       	or	r23, r7
     48e:	88 27       	eor	r24, r24
     490:	77 fd       	sbrc	r23, 7
     492:	80 95       	com	r24
     494:	98 2f       	mov	r25, r24
     496:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     49a:	f7 01       	movw	r30, r14
     49c:	64 83       	std	Z+4, r22	; 0x04
     49e:	75 83       	std	Z+5, r23	; 0x05
     4a0:	86 83       	std	Z+6, r24	; 0x06
     4a2:	97 83       	std	Z+7, r25	; 0x07
	a->z = azh << 8 | azl;
     4a4:	68 2d       	mov	r22, r8
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	79 29       	or	r23, r9
     4aa:	88 27       	eor	r24, r24
     4ac:	77 fd       	sbrc	r23, 7
     4ae:	80 95       	com	r24
     4b0:	98 2f       	mov	r25, r24
     4b2:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     4b6:	f7 01       	movw	r30, r14
     4b8:	60 87       	std	Z+8, r22	; 0x08
     4ba:	71 87       	std	Z+9, r23	; 0x09
     4bc:	82 87       	std	Z+10, r24	; 0x0a
     4be:	93 87       	std	Z+11, r25	; 0x0b
	m->x = mxh << 8 | mxl;
     4c0:	6a 2d       	mov	r22, r10
     4c2:	70 e0       	ldi	r23, 0x00	; 0
     4c4:	7b 29       	or	r23, r11
     4c6:	88 27       	eor	r24, r24
     4c8:	77 fd       	sbrc	r23, 7
     4ca:	80 95       	com	r24
     4cc:	98 2f       	mov	r25, r24
     4ce:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     4d2:	68 83       	st	Y, r22
     4d4:	79 83       	std	Y+1, r23	; 0x01
     4d6:	8a 83       	std	Y+2, r24	; 0x02
     4d8:	9b 83       	std	Y+3, r25	; 0x03
	m->y = myh << 8 | myl;
     4da:	6c 2d       	mov	r22, r12
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	7d 29       	or	r23, r13
     4e0:	88 27       	eor	r24, r24
     4e2:	77 fd       	sbrc	r23, 7
     4e4:	80 95       	com	r24
     4e6:	98 2f       	mov	r25, r24
     4e8:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     4ec:	6c 83       	std	Y+4, r22	; 0x04
     4ee:	7d 83       	std	Y+5, r23	; 0x05
     4f0:	8e 83       	std	Y+6, r24	; 0x06
     4f2:	9f 83       	std	Y+7, r25	; 0x07
	m->z = mzh << 8 | mzl;
     4f4:	60 2f       	mov	r22, r16
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	71 2b       	or	r23, r17
     4fa:	88 27       	eor	r24, r24
     4fc:	77 fd       	sbrc	r23, 7
     4fe:	80 95       	com	r24
     500:	98 2f       	mov	r25, r24
     502:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     506:	68 87       	std	Y+8, r22	; 0x08
     508:	79 87       	std	Y+9, r23	; 0x09
     50a:	8a 87       	std	Y+10, r24	; 0x0a
     50c:	9b 87       	std	Y+11, r25	; 0x0b
	//m->x = (mxl | (mxh << 8));
	//m->y = (myl | (myh << 8));
	//m->z = (mzl | (mzh << 8));
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	ef 90       	pop	r14
     51a:	df 90       	pop	r13
     51c:	cf 90       	pop	r12
     51e:	bf 90       	pop	r11
     520:	af 90       	pop	r10
     522:	9f 90       	pop	r9
     524:	8f 90       	pop	r8
     526:	7f 90       	pop	r7
     528:	6f 90       	pop	r6
     52a:	5f 90       	pop	r5
     52c:	4f 90       	pop	r4
     52e:	08 95       	ret

00000530 <read_data>:

// Returns a set of acceleration and adjusted magnetic readings from the cmp01a.
void read_data(vector *a, vector *m)
{
     530:	8f 92       	push	r8
     532:	9f 92       	push	r9
     534:	af 92       	push	r10
     536:	bf 92       	push	r11
     538:	cf 92       	push	r12
     53a:	df 92       	push	r13
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	eb 01       	movw	r28, r22
	read_data_raw(a, m);
     546:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <read_data_raw>

	// shift and scale
	m->x = (m->x - m_min.x) / (m_max.x - m_min.x) * 2 - 1.0;
     54a:	c0 90 0c 01 	lds	r12, 0x010C
     54e:	d0 90 0d 01 	lds	r13, 0x010D
     552:	e0 90 0e 01 	lds	r14, 0x010E
     556:	f0 90 0f 01 	lds	r15, 0x010F
     55a:	a7 01       	movw	r20, r14
     55c:	96 01       	movw	r18, r12
     55e:	68 81       	ld	r22, Y
     560:	79 81       	ldd	r23, Y+1	; 0x01
     562:	8a 81       	ldd	r24, Y+2	; 0x02
     564:	9b 81       	ldd	r25, Y+3	; 0x03
     566:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     56a:	4b 01       	movw	r8, r22
     56c:	5c 01       	movw	r10, r24
     56e:	a7 01       	movw	r20, r14
     570:	96 01       	movw	r18, r12
     572:	60 91 00 01 	lds	r22, 0x0100
     576:	70 91 01 01 	lds	r23, 0x0101
     57a:	80 91 02 01 	lds	r24, 0x0102
     57e:	90 91 03 01 	lds	r25, 0x0103
     582:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     586:	9b 01       	movw	r18, r22
     588:	ac 01       	movw	r20, r24
     58a:	c5 01       	movw	r24, r10
     58c:	b4 01       	movw	r22, r8
     58e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     592:	9b 01       	movw	r18, r22
     594:	ac 01       	movw	r20, r24
     596:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	40 e8       	ldi	r20, 0x80	; 128
     5a0:	5f e3       	ldi	r21, 0x3F	; 63
     5a2:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     5a6:	68 83       	st	Y, r22
     5a8:	79 83       	std	Y+1, r23	; 0x01
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	9b 83       	std	Y+3, r25	; 0x03
	m->y = (m->y - m_min.y) / (m_max.y - m_min.y) * 2 - 1.0;
     5ae:	c0 90 10 01 	lds	r12, 0x0110
     5b2:	d0 90 11 01 	lds	r13, 0x0111
     5b6:	e0 90 12 01 	lds	r14, 0x0112
     5ba:	f0 90 13 01 	lds	r15, 0x0113
     5be:	a7 01       	movw	r20, r14
     5c0:	96 01       	movw	r18, r12
     5c2:	6c 81       	ldd	r22, Y+4	; 0x04
     5c4:	7d 81       	ldd	r23, Y+5	; 0x05
     5c6:	8e 81       	ldd	r24, Y+6	; 0x06
     5c8:	9f 81       	ldd	r25, Y+7	; 0x07
     5ca:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     5ce:	4b 01       	movw	r8, r22
     5d0:	5c 01       	movw	r10, r24
     5d2:	a7 01       	movw	r20, r14
     5d4:	96 01       	movw	r18, r12
     5d6:	60 91 04 01 	lds	r22, 0x0104
     5da:	70 91 05 01 	lds	r23, 0x0105
     5de:	80 91 06 01 	lds	r24, 0x0106
     5e2:	90 91 07 01 	lds	r25, 0x0107
     5e6:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     5ea:	9b 01       	movw	r18, r22
     5ec:	ac 01       	movw	r20, r24
     5ee:	c5 01       	movw	r24, r10
     5f0:	b4 01       	movw	r22, r8
     5f2:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     5f6:	9b 01       	movw	r18, r22
     5f8:	ac 01       	movw	r20, r24
     5fa:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e8       	ldi	r20, 0x80	; 128
     604:	5f e3       	ldi	r21, 0x3F	; 63
     606:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     60a:	6c 83       	std	Y+4, r22	; 0x04
     60c:	7d 83       	std	Y+5, r23	; 0x05
     60e:	8e 83       	std	Y+6, r24	; 0x06
     610:	9f 83       	std	Y+7, r25	; 0x07
	m->z = (m->z - m_min.z) / (m_max.z - m_min.z) * 2 - 1.0;
     612:	c0 90 14 01 	lds	r12, 0x0114
     616:	d0 90 15 01 	lds	r13, 0x0115
     61a:	e0 90 16 01 	lds	r14, 0x0116
     61e:	f0 90 17 01 	lds	r15, 0x0117
     622:	a7 01       	movw	r20, r14
     624:	96 01       	movw	r18, r12
     626:	68 85       	ldd	r22, Y+8	; 0x08
     628:	79 85       	ldd	r23, Y+9	; 0x09
     62a:	8a 85       	ldd	r24, Y+10	; 0x0a
     62c:	9b 85       	ldd	r25, Y+11	; 0x0b
     62e:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     632:	4b 01       	movw	r8, r22
     634:	5c 01       	movw	r10, r24
     636:	a7 01       	movw	r20, r14
     638:	96 01       	movw	r18, r12
     63a:	60 91 08 01 	lds	r22, 0x0108
     63e:	70 91 09 01 	lds	r23, 0x0109
     642:	80 91 0a 01 	lds	r24, 0x010A
     646:	90 91 0b 01 	lds	r25, 0x010B
     64a:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     64e:	9b 01       	movw	r18, r22
     650:	ac 01       	movw	r20, r24
     652:	c5 01       	movw	r24, r10
     654:	b4 01       	movw	r22, r8
     656:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     65a:	9b 01       	movw	r18, r22
     65c:	ac 01       	movw	r20, r24
     65e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	5f e3       	ldi	r21, 0x3F	; 63
     66a:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     66e:	68 87       	std	Y+8, r22	; 0x08
     670:	79 87       	std	Y+9, r23	; 0x09
     672:	8a 87       	std	Y+10, r24	; 0x0a
     674:	9b 87       	std	Y+11, r25	; 0x0b
}
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	bf 90       	pop	r11
     684:	af 90       	pop	r10
     686:	9f 90       	pop	r9
     688:	8f 90       	pop	r8
     68a:	08 95       	ret

0000068c <get_heading>:

// Returns a heading (in degrees) given an acceleration vector a due to gravity, a magnetic vector m, and a facing vector p.
int get_heading(const vector *a, const vector *m, const vector *p)
{
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	68 97       	sbiw	r28, 0x18	; 24
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	7c 01       	movw	r14, r24
     6ae:	cb 01       	movw	r24, r22
     6b0:	8a 01       	movw	r16, r20
	vector E;
	vector N;

	// cross magnetic vector (magnetic north + inclination) with "down" (acceleration vector) to produce "east"
	vector_cross(m, a, &E);
     6b2:	ae 01       	movw	r20, r28
     6b4:	4f 5f       	subi	r20, 0xFF	; 255
     6b6:	5f 4f       	sbci	r21, 0xFF	; 255
     6b8:	b7 01       	movw	r22, r14
     6ba:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <vector_cross>
	vector_normalize(&E);
     6be:	ce 01       	movw	r24, r28
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	0e 94 4a 10 	call	0x2094	; 0x2094 <vector_normalize>

	// cross "down" with "east" to produce "north" (parallel to the ground)
	vector_cross(a, &E, &N);
     6c6:	ae 01       	movw	r20, r28
     6c8:	43 5f       	subi	r20, 0xF3	; 243
     6ca:	5f 4f       	sbci	r21, 0xFF	; 255
     6cc:	be 01       	movw	r22, r28
     6ce:	6f 5f       	subi	r22, 0xFF	; 255
     6d0:	7f 4f       	sbci	r23, 0xFF	; 255
     6d2:	c7 01       	movw	r24, r14
     6d4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <vector_cross>
	vector_normalize(&N);
     6d8:	ce 01       	movw	r24, r28
     6da:	0d 96       	adiw	r24, 0x0d	; 13
     6dc:	0e 94 4a 10 	call	0x2094	; 0x2094 <vector_normalize>

	// compute heading
	int heading = (round(atan2(vector_dot(&E, p), vector_dot(&N, p)) * 180 / M_PI))-PCB_COMPASS_CORR;
     6e0:	b8 01       	movw	r22, r16
     6e2:	ce 01       	movw	r24, r28
     6e4:	0d 96       	adiw	r24, 0x0d	; 13
     6e6:	0e 94 06 10 	call	0x200c	; 0x200c <vector_dot>
     6ea:	6b 01       	movw	r12, r22
     6ec:	7c 01       	movw	r14, r24
     6ee:	b8 01       	movw	r22, r16
     6f0:	ce 01       	movw	r24, r28
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	0e 94 06 10 	call	0x200c	; 0x200c <vector_dot>
     6f8:	a7 01       	movw	r20, r14
     6fa:	96 01       	movw	r18, r12
     6fc:	0e 94 be 14 	call	0x297c	; 0x297c <atan2>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	44 e3       	ldi	r20, 0x34	; 52
     706:	53 e4       	ldi	r21, 0x43	; 67
     708:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
     70c:	2b ed       	ldi	r18, 0xDB	; 219
     70e:	3f e0       	ldi	r19, 0x0F	; 15
     710:	49 e4       	ldi	r20, 0x49	; 73
     712:	50 e4       	ldi	r21, 0x40	; 64
     714:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     718:	0e 94 01 17 	call	0x2e02	; 0x2e02 <round>
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	44 eb       	ldi	r20, 0xB4	; 180
     722:	52 e4       	ldi	r21, 0x42	; 66
     724:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
     728:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__fixsfsi>
     72c:	9b 01       	movw	r18, r22
	if (heading < 0) heading += 360;
     72e:	77 23       	and	r23, r23
     730:	14 f4       	brge	.+4      	; 0x736 <get_heading+0xaa>
     732:	28 59       	subi	r18, 0x98	; 152
     734:	3e 4f       	sbci	r19, 0xFE	; 254
	return heading;
}
     736:	c9 01       	movw	r24, r18
     738:	68 96       	adiw	r28, 0x18	; 24
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	08 95       	ret

00000756 <get_heading_avg>:

/**/
int get_heading_avg(uint8_t number_of_avg)
{
     756:	6f 92       	push	r6
     758:	7f 92       	push	r7
     75a:	8f 92       	push	r8
     75c:	9f 92       	push	r9
     75e:	af 92       	push	r10
     760:	bf 92       	push	r11
     762:	cf 92       	push	r12
     764:	df 92       	push	r13
     766:	ef 92       	push	r14
     768:	ff 92       	push	r15
     76a:	0f 93       	push	r16
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	cd b7       	in	r28, 0x3d	; 61
     774:	de b7       	in	r29, 0x3e	; 62
     776:	68 97       	sbiw	r28, 0x18	; 24
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
     782:	19 82       	std	Y+1, r1	; 0x01
     784:	1a 82       	std	Y+2, r1	; 0x02
     786:	1b 82       	std	Y+3, r1	; 0x03
     788:	1c 82       	std	Y+4, r1	; 0x04
     78a:	1d 82       	std	Y+5, r1	; 0x05
     78c:	1e 82       	std	Y+6, r1	; 0x06
     78e:	1f 82       	std	Y+7, r1	; 0x07
     790:	18 86       	std	Y+8, r1	; 0x08
     792:	19 86       	std	Y+9, r1	; 0x09
     794:	1a 86       	std	Y+10, r1	; 0x0a
     796:	1b 86       	std	Y+11, r1	; 0x0b
     798:	1c 86       	std	Y+12, r1	; 0x0c
     79a:	1d 86       	std	Y+13, r1	; 0x0d
     79c:	1e 86       	std	Y+14, r1	; 0x0e
     79e:	1f 86       	std	Y+15, r1	; 0x0f
     7a0:	18 8a       	std	Y+16, r1	; 0x10
     7a2:	19 8a       	std	Y+17, r1	; 0x11
     7a4:	1a 8a       	std	Y+18, r1	; 0x12
     7a6:	1b 8a       	std	Y+19, r1	; 0x13
     7a8:	1c 8a       	std	Y+20, r1	; 0x14
     7aa:	1d 8a       	std	Y+21, r1	; 0x15
     7ac:	1e 8a       	std	Y+22, r1	; 0x16
     7ae:	1f 8a       	std	Y+23, r1	; 0x17
     7b0:	18 8e       	std	Y+24, r1	; 0x18
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
     7b2:	e8 2e       	mov	r14, r24
     7b4:	f1 2c       	mov	r15, r1
     7b6:	1e 14       	cp	r1, r14
     7b8:	1f 04       	cpc	r1, r15
     7ba:	0c f0       	brlt	.+2      	; 0x7be <get_heading_avg+0x68>
     7bc:	86 c0       	rjmp	.+268    	; 0x8ca <get_heading_avg+0x174>
     7be:	00 e0       	ldi	r16, 0x00	; 0
     7c0:	10 e0       	ldi	r17, 0x00	; 0
	{
		read_data(&a, &m);
		
		a_avg.x += a.x;
		a_avg.y += a.y;
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f7 e5       	ldi	r31, 0x57	; 87
     7c6:	8f 2e       	mov	r8, r31
     7c8:	f7 e0       	ldi	r31, 0x07	; 7
     7ca:	9f 2e       	mov	r9, r31
     7cc:	f0 2d       	mov	r31, r0
		a_avg.z += a.z;
     7ce:	0f 2e       	mov	r0, r31
     7d0:	fb e5       	ldi	r31, 0x5B	; 91
     7d2:	af 2e       	mov	r10, r31
     7d4:	f7 e0       	ldi	r31, 0x07	; 7
     7d6:	bf 2e       	mov	r11, r31
     7d8:	f0 2d       	mov	r31, r0
		m_avg.x += m.x;
		m_avg.y += m.y;
     7da:	0f 2e       	mov	r0, r31
     7dc:	f3 e6       	ldi	r31, 0x63	; 99
     7de:	cf 2e       	mov	r12, r31
     7e0:	f7 e0       	ldi	r31, 0x07	; 7
     7e2:	df 2e       	mov	r13, r31
     7e4:	f0 2d       	mov	r31, r0
		m_avg.z += m.z;
     7e6:	0f 2e       	mov	r0, r31
     7e8:	f7 e6       	ldi	r31, 0x67	; 103
     7ea:	6f 2e       	mov	r6, r31
     7ec:	f7 e0       	ldi	r31, 0x07	; 7
     7ee:	7f 2e       	mov	r7, r31
     7f0:	f0 2d       	mov	r31, r0
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
	{
		read_data(&a, &m);
     7f2:	6f e5       	ldi	r22, 0x5F	; 95
     7f4:	77 e0       	ldi	r23, 0x07	; 7
     7f6:	83 e5       	ldi	r24, 0x53	; 83
     7f8:	97 e0       	ldi	r25, 0x07	; 7
     7fa:	0e 94 98 02 	call	0x530	; 0x530 <read_data>
		
		a_avg.x += a.x;
     7fe:	20 91 53 07 	lds	r18, 0x0753
     802:	30 91 54 07 	lds	r19, 0x0754
     806:	40 91 55 07 	lds	r20, 0x0755
     80a:	50 91 56 07 	lds	r21, 0x0756
     80e:	69 81       	ldd	r22, Y+1	; 0x01
     810:	7a 81       	ldd	r23, Y+2	; 0x02
     812:	8b 81       	ldd	r24, Y+3	; 0x03
     814:	9c 81       	ldd	r25, Y+4	; 0x04
     816:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
		a_avg.y += a.y;
     822:	f4 01       	movw	r30, r8
     824:	20 81       	ld	r18, Z
     826:	31 81       	ldd	r19, Z+1	; 0x01
     828:	42 81       	ldd	r20, Z+2	; 0x02
     82a:	53 81       	ldd	r21, Z+3	; 0x03
     82c:	6d 81       	ldd	r22, Y+5	; 0x05
     82e:	7e 81       	ldd	r23, Y+6	; 0x06
     830:	8f 81       	ldd	r24, Y+7	; 0x07
     832:	98 85       	ldd	r25, Y+8	; 0x08
     834:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     838:	6d 83       	std	Y+5, r22	; 0x05
     83a:	7e 83       	std	Y+6, r23	; 0x06
     83c:	8f 83       	std	Y+7, r24	; 0x07
     83e:	98 87       	std	Y+8, r25	; 0x08
		a_avg.z += a.z;
     840:	f5 01       	movw	r30, r10
     842:	20 81       	ld	r18, Z
     844:	31 81       	ldd	r19, Z+1	; 0x01
     846:	42 81       	ldd	r20, Z+2	; 0x02
     848:	53 81       	ldd	r21, Z+3	; 0x03
     84a:	69 85       	ldd	r22, Y+9	; 0x09
     84c:	7a 85       	ldd	r23, Y+10	; 0x0a
     84e:	8b 85       	ldd	r24, Y+11	; 0x0b
     850:	9c 85       	ldd	r25, Y+12	; 0x0c
     852:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     856:	69 87       	std	Y+9, r22	; 0x09
     858:	7a 87       	std	Y+10, r23	; 0x0a
     85a:	8b 87       	std	Y+11, r24	; 0x0b
     85c:	9c 87       	std	Y+12, r25	; 0x0c
		m_avg.x += m.x;
     85e:	20 91 5f 07 	lds	r18, 0x075F
     862:	30 91 60 07 	lds	r19, 0x0760
     866:	40 91 61 07 	lds	r20, 0x0761
     86a:	50 91 62 07 	lds	r21, 0x0762
     86e:	6d 85       	ldd	r22, Y+13	; 0x0d
     870:	7e 85       	ldd	r23, Y+14	; 0x0e
     872:	8f 85       	ldd	r24, Y+15	; 0x0f
     874:	98 89       	ldd	r25, Y+16	; 0x10
     876:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     87a:	6d 87       	std	Y+13, r22	; 0x0d
     87c:	7e 87       	std	Y+14, r23	; 0x0e
     87e:	8f 87       	std	Y+15, r24	; 0x0f
     880:	98 8b       	std	Y+16, r25	; 0x10
		m_avg.y += m.y;
     882:	f6 01       	movw	r30, r12
     884:	20 81       	ld	r18, Z
     886:	31 81       	ldd	r19, Z+1	; 0x01
     888:	42 81       	ldd	r20, Z+2	; 0x02
     88a:	53 81       	ldd	r21, Z+3	; 0x03
     88c:	69 89       	ldd	r22, Y+17	; 0x11
     88e:	7a 89       	ldd	r23, Y+18	; 0x12
     890:	8b 89       	ldd	r24, Y+19	; 0x13
     892:	9c 89       	ldd	r25, Y+20	; 0x14
     894:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     898:	69 8b       	std	Y+17, r22	; 0x11
     89a:	7a 8b       	std	Y+18, r23	; 0x12
     89c:	8b 8b       	std	Y+19, r24	; 0x13
     89e:	9c 8b       	std	Y+20, r25	; 0x14
		m_avg.z += m.z;
     8a0:	f3 01       	movw	r30, r6
     8a2:	20 81       	ld	r18, Z
     8a4:	31 81       	ldd	r19, Z+1	; 0x01
     8a6:	42 81       	ldd	r20, Z+2	; 0x02
     8a8:	53 81       	ldd	r21, Z+3	; 0x03
     8aa:	6d 89       	ldd	r22, Y+21	; 0x15
     8ac:	7e 89       	ldd	r23, Y+22	; 0x16
     8ae:	8f 89       	ldd	r24, Y+23	; 0x17
     8b0:	98 8d       	ldd	r25, Y+24	; 0x18
     8b2:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
     8b6:	6d 8b       	std	Y+21, r22	; 0x15
     8b8:	7e 8b       	std	Y+22, r23	; 0x16
     8ba:	8f 8b       	std	Y+23, r24	; 0x17
     8bc:	98 8f       	std	Y+24, r25	; 0x18
int get_heading_avg(uint8_t number_of_avg)
{
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
     8be:	0f 5f       	subi	r16, 0xFF	; 255
     8c0:	1f 4f       	sbci	r17, 0xFF	; 255
     8c2:	0e 15       	cp	r16, r14
     8c4:	1f 05       	cpc	r17, r15
     8c6:	0c f4       	brge	.+2      	; 0x8ca <get_heading_avg+0x174>
     8c8:	94 cf       	rjmp	.-216    	; 0x7f2 <get_heading_avg+0x9c>
		a_avg.z += a.z;
		m_avg.x += m.x;
		m_avg.y += m.y;
		m_avg.z += m.z;
	}
	a_avg.x /= number_of_avg;
     8ca:	b7 01       	movw	r22, r14
     8cc:	88 27       	eor	r24, r24
     8ce:	77 fd       	sbrc	r23, 7
     8d0:	80 95       	com	r24
     8d2:	98 2f       	mov	r25, r24
     8d4:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
     8d8:	6b 01       	movw	r12, r22
     8da:	7c 01       	movw	r14, r24
     8dc:	9b 01       	movw	r18, r22
     8de:	ac 01       	movw	r20, r24
     8e0:	69 81       	ldd	r22, Y+1	; 0x01
     8e2:	7a 81       	ldd	r23, Y+2	; 0x02
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	9c 81       	ldd	r25, Y+4	; 0x04
     8e8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     8ec:	69 83       	std	Y+1, r22	; 0x01
     8ee:	7a 83       	std	Y+2, r23	; 0x02
     8f0:	8b 83       	std	Y+3, r24	; 0x03
     8f2:	9c 83       	std	Y+4, r25	; 0x04
	a_avg.y /= number_of_avg;
     8f4:	a7 01       	movw	r20, r14
     8f6:	96 01       	movw	r18, r12
     8f8:	6d 81       	ldd	r22, Y+5	; 0x05
     8fa:	7e 81       	ldd	r23, Y+6	; 0x06
     8fc:	8f 81       	ldd	r24, Y+7	; 0x07
     8fe:	98 85       	ldd	r25, Y+8	; 0x08
     900:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     904:	6d 83       	std	Y+5, r22	; 0x05
     906:	7e 83       	std	Y+6, r23	; 0x06
     908:	8f 83       	std	Y+7, r24	; 0x07
     90a:	98 87       	std	Y+8, r25	; 0x08
	a_avg.z /= number_of_avg;
     90c:	a7 01       	movw	r20, r14
     90e:	96 01       	movw	r18, r12
     910:	69 85       	ldd	r22, Y+9	; 0x09
     912:	7a 85       	ldd	r23, Y+10	; 0x0a
     914:	8b 85       	ldd	r24, Y+11	; 0x0b
     916:	9c 85       	ldd	r25, Y+12	; 0x0c
     918:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     91c:	69 87       	std	Y+9, r22	; 0x09
     91e:	7a 87       	std	Y+10, r23	; 0x0a
     920:	8b 87       	std	Y+11, r24	; 0x0b
     922:	9c 87       	std	Y+12, r25	; 0x0c
	m_avg.x /= number_of_avg;
     924:	a7 01       	movw	r20, r14
     926:	96 01       	movw	r18, r12
     928:	6d 85       	ldd	r22, Y+13	; 0x0d
     92a:	7e 85       	ldd	r23, Y+14	; 0x0e
     92c:	8f 85       	ldd	r24, Y+15	; 0x0f
     92e:	98 89       	ldd	r25, Y+16	; 0x10
     930:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     934:	6d 87       	std	Y+13, r22	; 0x0d
     936:	7e 87       	std	Y+14, r23	; 0x0e
     938:	8f 87       	std	Y+15, r24	; 0x0f
     93a:	98 8b       	std	Y+16, r25	; 0x10
	m_avg.y /= number_of_avg;
     93c:	a7 01       	movw	r20, r14
     93e:	96 01       	movw	r18, r12
     940:	69 89       	ldd	r22, Y+17	; 0x11
     942:	7a 89       	ldd	r23, Y+18	; 0x12
     944:	8b 89       	ldd	r24, Y+19	; 0x13
     946:	9c 89       	ldd	r25, Y+20	; 0x14
     948:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     94c:	69 8b       	std	Y+17, r22	; 0x11
     94e:	7a 8b       	std	Y+18, r23	; 0x12
     950:	8b 8b       	std	Y+19, r24	; 0x13
     952:	9c 8b       	std	Y+20, r25	; 0x14
	m_avg.z /= number_of_avg;
     954:	a7 01       	movw	r20, r14
     956:	96 01       	movw	r18, r12
     958:	6d 89       	ldd	r22, Y+21	; 0x15
     95a:	7e 89       	ldd	r23, Y+22	; 0x16
     95c:	8f 89       	ldd	r24, Y+23	; 0x17
     95e:	98 8d       	ldd	r25, Y+24	; 0x18
     960:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
     964:	6d 8b       	std	Y+21, r22	; 0x15
     966:	7e 8b       	std	Y+22, r23	; 0x16
     968:	8f 8b       	std	Y+23, r24	; 0x17
     96a:	98 8f       	std	Y+24, r25	; 0x18
	
	heading = get_heading(&a_avg, &m_avg, &p); 
     96c:	48 e1       	ldi	r20, 0x18	; 24
     96e:	51 e0       	ldi	r21, 0x01	; 1
     970:	be 01       	movw	r22, r28
     972:	63 5f       	subi	r22, 0xF3	; 243
     974:	7f 4f       	sbci	r23, 0xFF	; 255
     976:	ce 01       	movw	r24, r28
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	0e 94 46 03 	call	0x68c	; 0x68c <get_heading>
	return heading; 
}
     97e:	68 96       	adiw	r28, 0x18	; 24
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	af 90       	pop	r10
     99e:	9f 90       	pop	r9
     9a0:	8f 90       	pop	r8
     9a2:	7f 90       	pop	r7
     9a4:	6f 90       	pop	r6
     9a6:	08 95       	ret

000009a8 <writeAccReg>:
	print_int(calibrate_lsm303(Z_AXIS,MAX),FALSE);
	uart_puts(" (Rotate device until all axis are at their min/max)\n");
}

void writeAccReg(uint8_t reg, uint8_t value)
{
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	d8 2f       	mov	r29, r24
     9ae:	c6 2f       	mov	r28, r22
	i2c_start(0x32);	// ACC address
     9b0:	82 e3       	ldi	r24, 0x32	; 50
     9b2:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	i2c_write(reg);	
     9b6:	8d 2f       	mov	r24, r29
     9b8:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_write(value);
     9bc:	8c 2f       	mov	r24, r28
     9be:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_stop();
     9c2:	0e 94 65 05 	call	0xaca	; 0xaca <i2c_stop>
}
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <writeMagReg>:

void writeMagReg(uint8_t reg, uint8_t value)
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	d8 2f       	mov	r29, r24
     9d2:	c6 2f       	mov	r28, r22
	i2c_start(0x3C);	// Mag address
     9d4:	8c e3       	ldi	r24, 0x3C	; 60
     9d6:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	i2c_write(reg);	
     9da:	8d 2f       	mov	r24, r29
     9dc:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_write(value);
     9e0:	8c 2f       	mov	r24, r28
     9e2:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_stop();
     9e6:	0e 94 65 05 	call	0xaca	; 0xaca <i2c_stop>
}
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
     9ee:	08 95       	ret

000009f0 <init_lsm303>:
vector m_max = {650, 529, 591};		// calibration
vector a, m;

void init_lsm303(void)
{
	i2c_init();
     9f0:	0e 94 38 05 	call	0xa70	; 0xa70 <i2c_init>
	
	/* TEST */
	
	// 0x08 = 0b00001000
	// FS = 00 (+/- 2 g full scale); HR = 1 (high resolution enable)
	writeAccReg(CTRL_REG4_A, 0x08);
     9f4:	68 e0       	ldi	r22, 0x08	; 8
     9f6:	83 e2       	ldi	r24, 0x23	; 35
     9f8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <writeAccReg>
	
	// lsm303dlhc sensor
	//enable accelerometer
	// 0x47 = 0b01000111
	// ODR = 0100 (50 Hz ODR); LPen = 0 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)
	writeAccReg(CTRL_REG1_A, 0x47);
     9fc:	67 e4       	ldi	r22, 0x47	; 71
     9fe:	80 e2       	ldi	r24, 0x20	; 32
     a00:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <writeAccReg>
	//enable magnetometer

	// 0x0C = 0b00001100
	// DO = 011 (7.5 Hz ODR)
	/* Enable temp sensor in LSM303 */
	writeMagReg(CRA_REG_M, 0x8C);	// Enable temp sensor, 7.5Hz
     a04:	6c e8       	ldi	r22, 0x8C	; 140
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	0e 94 e6 04 	call	0x9cc	; 0x9cc <writeMagReg>
	i2c_write(0x0C); // hertz output 7.5
	i2c_stop();*/

	// 0x20 = 0b00100000
	// GN = 001 (+/- 1.3 gauss full scale)
	writeMagReg(CRB_REG_M, 0x20);
     a0c:	60 e2       	ldi	r22, 0x20	; 32
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	0e 94 e6 04 	call	0x9cc	; 0x9cc <writeMagReg>
	i2c_write(0x20); // continuous conversion mode
	i2c_stop();*/

	// 0x00 = 0b00000000
	// MD = 00 (continuous-conversion mode)
	writeMagReg(MR_REG_M, 0x00);
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	0e 94 e6 04 	call	0x9cc	; 0x9cc <writeMagReg>
     a1c:	08 95       	ret

00000a1e <get_temp>:
	i2c_write(value);
	i2c_stop();
}

int get_temp(void)
{
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
	// Enable sensor first (in init)!
	//Temperature data (8LSB/deg - 12-bit resolution).
	i2c_start(0x3C);			// Its in the Mag address
     a22:	8c e3       	ldi	r24, 0x3C	; 60
     a24:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>
	i2c_write(TEMP_OUT_H_M);	// Set pointer
     a28:	81 e3       	ldi	r24, 0x31	; 49
     a2a:	0e 94 6e 05 	call	0xadc	; 0xadc <i2c_write>
	i2c_start(0x3D);			// Start reading
     a2e:	8d e3       	ldi	r24, 0x3D	; 61
     a30:	0e 94 3e 05 	call	0xa7c	; 0xa7c <i2c_start>

	uint8_t mth = i2c_readAck();
     a34:	0e 94 80 05 	call	0xb00	; 0xb00 <i2c_readAck>
     a38:	c8 2f       	mov	r28, r24
	uint8_t mtl = i2c_readNak();
     a3a:	0e 94 8b 05 	call	0xb16	; 0xb16 <i2c_readNak>
     a3e:	d8 2f       	mov	r29, r24
	
	i2c_stop();
     a40:	0e 94 65 05 	call	0xaca	; 0xaca <i2c_stop>
	return (((mth << 8 | mtl)>>4)/4);
     a44:	2d 2f       	mov	r18, r29
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	c9 01       	movw	r24, r18
     a4a:	9c 2b       	or	r25, r28
     a4c:	95 95       	asr	r25
     a4e:	87 95       	ror	r24
     a50:	95 95       	asr	r25
     a52:	87 95       	ror	r24
     a54:	95 95       	asr	r25
     a56:	87 95       	ror	r24
     a58:	95 95       	asr	r25
     a5a:	87 95       	ror	r24
     a5c:	99 23       	and	r25, r25
     a5e:	0c f4       	brge	.+2      	; 0xa62 <get_temp+0x44>
     a60:	03 96       	adiw	r24, 0x03	; 3
}
     a62:	95 95       	asr	r25
     a64:	87 95       	ror	r24
     a66:	95 95       	asr	r25
     a68:	87 95       	ror	r24
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	08 95       	ret

00000a70 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
     a70:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	80 93 b8 00 	sts	0x00B8, r24
     a7a:	08 95       	ret

00000a7c <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     a7c:	94 ea       	ldi	r25, 0xA4	; 164
     a7e:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     a82:	ec eb       	ldi	r30, 0xBC	; 188
     a84:	f0 e0       	ldi	r31, 0x00	; 0
     a86:	90 81       	ld	r25, Z
     a88:	99 23       	and	r25, r25
     a8a:	ec f7       	brge	.-6      	; 0xa86 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     a8c:	90 91 b9 00 	lds	r25, 0x00B9
     a90:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     a92:	98 30       	cpi	r25, 0x08	; 8
     a94:	11 f0       	breq	.+4      	; 0xa9a <i2c_start+0x1e>
     a96:	90 31       	cpi	r25, 0x10	; 16
     a98:	a1 f4       	brne	.+40     	; 0xac2 <i2c_start+0x46>

	// send device address
	TWDR = address;
     a9a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     a9e:	84 e8       	ldi	r24, 0x84	; 132
     aa0:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
     aa4:	ec eb       	ldi	r30, 0xBC	; 188
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	88 23       	and	r24, r24
     aac:	ec f7       	brge	.-6      	; 0xaa8 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     aae:	90 91 b9 00 	lds	r25, 0x00B9
     ab2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
     ab4:	98 31       	cpi	r25, 0x18	; 24
     ab6:	39 f0       	breq	.+14     	; 0xac6 <i2c_start+0x4a>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	90 34       	cpi	r25, 0x40	; 64
     abc:	29 f4       	brne	.+10     	; 0xac8 <i2c_start+0x4c>
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
     ac6:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     ac8:	08 95       	ret

00000aca <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     aca:	84 e9       	ldi	r24, 0x94	; 148
     acc:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     ad0:	ec eb       	ldi	r30, 0xBC	; 188
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	80 81       	ld	r24, Z
     ad6:	84 fd       	sbrc	r24, 4
     ad8:	fd cf       	rjmp	.-6      	; 0xad4 <i2c_stop+0xa>

}/* i2c_stop */
     ada:	08 95       	ret

00000adc <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     adc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     ae0:	84 e8       	ldi	r24, 0x84	; 132
     ae2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     ae6:	ec eb       	ldi	r30, 0xBC	; 188
     ae8:	f0 e0       	ldi	r31, 0x00	; 0
     aea:	80 81       	ld	r24, Z
     aec:	88 23       	and	r24, r24
     aee:	ec f7       	brge	.-6      	; 0xaea <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     af0:	90 91 b9 00 	lds	r25, 0x00B9
     af4:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	98 32       	cpi	r25, 0x28	; 40
     afa:	09 f4       	brne	.+2      	; 0xafe <i2c_write+0x22>
     afc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
     afe:	08 95       	ret

00000b00 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     b00:	84 ec       	ldi	r24, 0xC4	; 196
     b02:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
     b06:	ec eb       	ldi	r30, 0xBC	; 188
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	88 23       	and	r24, r24
     b0e:	ec f7       	brge	.-6      	; 0xb0a <i2c_readAck+0xa>

    return TWDR;
     b10:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
     b14:	08 95       	ret

00000b16 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
     b16:	84 e8       	ldi	r24, 0x84	; 132
     b18:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
     b1c:	ec eb       	ldi	r30, 0xBC	; 188
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	88 23       	and	r24, r24
     b24:	ec f7       	brge	.-6      	; 0xb20 <i2c_readNak+0xa>
	
    return TWDR;
     b26:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
     b2a:	08 95       	ret

00000b2c <print_int>:
		return 0;
	}
}

void print_int(int c, uint8_t ln)
{
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
     b32:	cd b7       	in	r28, 0x3d	; 61
     b34:	de b7       	in	r29, 0x3e	; 62
     b36:	28 97       	sbiw	r28, 0x08	; 8
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	f8 94       	cli
     b3c:	de bf       	out	0x3e, r29	; 62
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	cd bf       	out	0x3d, r28	; 61
     b42:	16 2f       	mov	r17, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b44:	4a e0       	ldi	r20, 0x0A	; 10
     b46:	be 01       	movw	r22, r28
     b48:	6f 5f       	subi	r22, 0xFF	; 255
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__itoa_ncheck>
	char buffer[8];
	itoa( c, buffer, 10);
	uart_puts(buffer);
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	
	if (ln)	// if add line end
     b58:	11 23       	and	r17, r17
     b5a:	21 f0       	breq	.+8      	; 0xb64 <print_int+0x38>
	{
		uart_puts("\n");
     b5c:	8c e8       	ldi	r24, 0x8C	; 140
     b5e:	93 e0       	ldi	r25, 0x03	; 3
     b60:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	}
}
     b64:	28 96       	adiw	r28, 0x08	; 8
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	08 95       	ret

00000b78 <print_float>:

void print_float(double c, uint8_t ln)
{
     b78:	ff 92       	push	r15
     b7a:	0f 93       	push	r16
     b7c:	1f 93       	push	r17
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	64 97       	sbiw	r28, 0x14	; 20
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	f4 2e       	mov	r15, r20
	char buffer[20];
	dtostrf(c, 10, 7, buffer);
     b94:	8e 01       	movw	r16, r28
     b96:	0f 5f       	subi	r16, 0xFF	; 255
     b98:	1f 4f       	sbci	r17, 0xFF	; 255
     b9a:	27 e0       	ldi	r18, 0x07	; 7
     b9c:	4a e0       	ldi	r20, 0x0A	; 10
     b9e:	0e 94 88 17 	call	0x2f10	; 0x2f10 <dtostrf>
	uart_puts(buffer);
     ba2:	c8 01       	movw	r24, r16
     ba4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	
	if (ln)	// if add line end
     ba8:	ff 20       	and	r15, r15
     baa:	21 f0       	breq	.+8      	; 0xbb4 <print_float+0x3c>
	{
		uart_puts("\n");
     bac:	8c e8       	ldi	r24, 0x8C	; 140
     bae:	93 e0       	ldi	r25, 0x03	; 3
     bb0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	}
}
     bb4:	64 96       	adiw	r28, 0x14	; 20
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	f8 94       	cli
     bba:	de bf       	out	0x3e, r29	; 62
     bbc:	0f be       	out	0x3f, r0	; 63
     bbe:	cd bf       	out	0x3d, r28	; 61
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	08 95       	ret

00000bcc <print_value>:
	uart_puts(buffer);
	uart_puts("\n");
}*/

void print_value (char id, int value)
{
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	28 97       	sbiw	r28, 0x08	; 8
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	18 2f       	mov	r17, r24
     be4:	cb 01       	movw	r24, r22
     be6:	4a e0       	ldi	r20, 0x0A	; 10
     be8:	be 01       	movw	r22, r28
     bea:	6f 5f       	subi	r22, 0xFF	; 255
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__itoa_ncheck>
	char buffer[8];
	itoa(value, buffer, 10);
	uart_putc(id);
     bf2:	81 2f       	mov	r24, r17
     bf4:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uart_putc>
	uart_putc('=');
     bf8:	8d e3       	ldi	r24, 0x3D	; 61
     bfa:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uart_putc>
	uart_puts(buffer);
     bfe:	ce 01       	movw	r24, r28
     c00:	01 96       	adiw	r24, 0x01	; 1
     c02:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	uart_putc('\n');
     c06:	8a e0       	ldi	r24, 0x0A	; 10
     c08:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uart_putc>
}
     c0c:	28 96       	adiw	r28, 0x08	; 8
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	cd bf       	out	0x3d, r28	; 61
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	08 95       	ret

00000c20 <parse_assignment>:
		memset(data_in2[0], 0, 8);
	}
}*/

unsigned long parse_assignment ()
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	60 97       	sbiw	r28, 0x10	; 16
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '=');
     c34:	6d e3       	ldi	r22, 0x3D	; 61
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	86 e2       	ldi	r24, 0x26	; 38
     c3a:	96 e0       	ldi	r25, 0x06	; 6
     c3c:	0e 94 b3 18 	call	0x3166	; 0x3166 <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
     c40:	bc 01       	movw	r22, r24
     c42:	6f 5f       	subi	r22, 0xFF	; 255
     c44:	7f 4f       	sbci	r23, 0xFF	; 255
     c46:	ce 01       	movw	r24, r28
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	0e 94 be 18 	call	0x317c	; 0x317c <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <atoi>
     c56:	bc 01       	movw	r22, r24
     c58:	88 27       	eor	r24, r24
     c5a:	77 fd       	sbrc	r23, 7
     c5c:	80 95       	com	r24
     c5e:	98 2f       	mov	r25, r24
}
     c60:	60 96       	adiw	r28, 0x10	; 16
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <receive_gps>:
	}
	command_ready = FALSE;
}

uint8_t receive_gps(void)
{
     c72:	2f 92       	push	r2
     c74:	3f 92       	push	r3
     c76:	4f 92       	push	r4
     c78:	5f 92       	push	r5
     c7a:	6f 92       	push	r6
     c7c:	7f 92       	push	r7
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	c6 54       	subi	r28, 0x46	; 70
     c9c:	d1 09       	sbc	r29, r1
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	f8 94       	cli
     ca2:	de bf       	out	0x3e, r29	; 62
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	cd bf       	out	0x3d, r28	; 61
	char value[50];
	char buffer[20];
	uint8_t i = 1;
	char *pch;
	
	memset(value, 0, sizeof(value));	// set command to 0
     ca8:	fe 01       	movw	r30, r28
     caa:	31 96       	adiw	r30, 0x01	; 1
     cac:	82 e3       	ldi	r24, 0x32	; 50
     cae:	df 01       	movw	r26, r30
     cb0:	1d 92       	st	X+, r1
     cb2:	8a 95       	dec	r24
     cb4:	e9 f7       	brne	.-6      	; 0xcb0 <receive_gps+0x3e>
	
	for(uint8_t j=0; j<data_count-3; j++) {
     cb6:	80 91 25 06 	lds	r24, 0x0625
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	03 97       	sbiw	r24, 0x03	; 3
     cbe:	18 16       	cp	r1, r24
     cc0:	19 06       	cpc	r1, r25
     cc2:	d4 f4       	brge	.+52     	; 0xcf8 <receive_gps+0x86>
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	40 e0       	ldi	r20, 0x00	; 0
		value[j] = command_in[j+1];
     cca:	e1 e0       	ldi	r30, 0x01	; 1
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	ec 0f       	add	r30, r28
     cd0:	fd 1f       	adc	r31, r29
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	dc 01       	movw	r26, r24
     cd8:	aa 5d       	subi	r26, 0xDA	; 218
     cda:	b9 4f       	sbci	r27, 0xF9	; 249
     cdc:	11 96       	adiw	r26, 0x01	; 1
     cde:	8c 91       	ld	r24, X
     ce0:	80 83       	st	Z, r24
	uint8_t i = 1;
	char *pch;
	
	memset(value, 0, sizeof(value));	// set command to 0
	
	for(uint8_t j=0; j<data_count-3; j++) {
     ce2:	4f 5f       	subi	r20, 0xFF	; 255
     ce4:	84 2f       	mov	r24, r20
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	20 91 25 06 	lds	r18, 0x0625
     cec:	30 e0       	ldi	r19, 0x00	; 0
     cee:	23 50       	subi	r18, 0x03	; 3
     cf0:	31 09       	sbc	r19, r1
     cf2:	82 17       	cp	r24, r18
     cf4:	93 07       	cpc	r25, r19
     cf6:	4c f3       	brlt	.-46     	; 0xcca <receive_gps+0x58>
		value[j] = command_in[j+1];
	}

	uart_puts("in b =<");
     cf8:	8f ee       	ldi	r24, 0xEF	; 239
     cfa:	92 e0       	ldi	r25, 0x02	; 2
     cfc:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
     d00:	8e 01       	movw	r16, r28
     d02:	0f 5f       	subi	r16, 0xFF	; 255
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	7e 01       	movw	r14, r28
     d08:	b3 e3       	ldi	r27, 0x33	; 51
     d0a:	eb 0e       	add	r14, r27
     d0c:	f1 1c       	adc	r15, r1
	for( i=0; i<50; i++) {
		//value[i] = command_in[i+1];	// copy
		uart_putc(value[i]);
     d0e:	f8 01       	movw	r30, r16
     d10:	81 91       	ld	r24, Z+
     d12:	8f 01       	movw	r16, r30
     d14:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uart_putc>
	for(uint8_t j=0; j<data_count-3; j++) {
		value[j] = command_in[j+1];
	}

	uart_puts("in b =<");
	for( i=0; i<50; i++) {
     d18:	0e 15       	cp	r16, r14
     d1a:	1f 05       	cpc	r17, r15
     d1c:	c1 f7       	brne	.-16     	; 0xd0e <receive_gps+0x9c>
		//value[i] = command_in[i+1];	// copy
		uart_putc(value[i]);
	}
	uart_puts(">\n");
     d1e:	87 ef       	ldi	r24, 0xF7	; 247
     d20:	92 e0       	ldi	r25, 0x02	; 2
     d22:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	
	if ((command_in[strlen(command_in)-3]) != 'e')	// Check end of string 'e'
     d26:	e6 e2       	ldi	r30, 0x26	; 38
     d28:	f6 e0       	ldi	r31, 0x06	; 6
     d2a:	01 90       	ld	r0, Z+
     d2c:	00 20       	and	r0, r0
     d2e:	e9 f7       	brne	.-6      	; 0xd2a <receive_gps+0xb8>
     d30:	34 97       	sbiw	r30, 0x04	; 4
     d32:	80 81       	ld	r24, Z
     d34:	85 36       	cpi	r24, 0x65	; 101
     d36:	29 f0       	breq	.+10     	; 0xd42 <receive_gps+0xd0>
	{
		uart_puts("Error in format\n");
     d38:	8a ef       	ldi	r24, 0xFA	; 250
     d3a:	92 e0       	ldi	r25, 0x02	; 2
     d3c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		return FALSE;
     d40:	84 c0       	rjmp	.+264    	; 0xe4a <receive_gps+0x1d8>
	}
	
	pch = strtok (value,",");	// return pointer to next token
     d42:	6a e2       	ldi	r22, 0x2A	; 42
     d44:	72 e0       	ldi	r23, 0x02	; 2
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	0e 94 ae 18 	call	0x315c	; 0x315c <strtok>
	lat_current_temp = atof(pch);
     d4e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <atof>
     d52:	16 2f       	mov	r17, r22
     d54:	07 2f       	mov	r16, r23
     d56:	38 2e       	mov	r3, r24
     d58:	29 2e       	mov	r2, r25
	
	pch = strtok (NULL,";");	// return pointer to next token
     d5a:	6b e0       	ldi	r22, 0x0B	; 11
     d5c:	73 e0       	ldi	r23, 0x03	; 3
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 ae 18 	call	0x315c	; 0x315c <strtok>
	lon_current_temp = atof(pch);
     d66:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <atof>
     d6a:	76 2e       	mov	r7, r22
     d6c:	67 2e       	mov	r6, r23
     d6e:	58 2e       	mov	r5, r24
     d70:	49 2e       	mov	r4, r25
	
	pch = strtok (NULL,",");	// return pointer to next token
     d72:	6a e2       	ldi	r22, 0x2A	; 42
     d74:	72 e0       	ldi	r23, 0x02	; 2
     d76:	80 e0       	ldi	r24, 0x00	; 0
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 ae 18 	call	0x315c	; 0x315c <strtok>
	lat_dest_temp = atof(pch);
     d7e:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <atof>
     d82:	b6 2e       	mov	r11, r22
     d84:	a7 2e       	mov	r10, r23
     d86:	98 2e       	mov	r9, r24
     d88:	89 2e       	mov	r8, r25
	
	pch = strtok (NULL,",");	// return pointer to next token
     d8a:	6a e2       	ldi	r22, 0x2A	; 42
     d8c:	72 e0       	ldi	r23, 0x02	; 2
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 ae 18 	call	0x315c	; 0x315c <strtok>
	lon_dest_temp = atof(pch);
     d96:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <atof>
     d9a:	f6 2e       	mov	r15, r22
     d9c:	e7 2e       	mov	r14, r23
     d9e:	d8 2e       	mov	r13, r24
     da0:	c9 2e       	mov	r12, r25
	
	//sprintf(lat_current_temp, "value = %f");
	sprintf(buffer, "Lat curr = %0.5f", lat_current_temp);
     da2:	2f 92       	push	r2
     da4:	3f 92       	push	r3
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	2d e0       	ldi	r18, 0x0D	; 13
     dac:	33 e0       	ldi	r19, 0x03	; 3
     dae:	3f 93       	push	r19
     db0:	2f 93       	push	r18
     db2:	8e 01       	movw	r16, r28
     db4:	0d 5c       	subi	r16, 0xCD	; 205
     db6:	1f 4f       	sbci	r17, 0xFF	; 255
     db8:	1f 93       	push	r17
     dba:	0f 93       	push	r16
     dbc:	0e 94 56 19 	call	0x32ac	; 0x32ac <sprintf>
	uart_puts(buffer);
     dc0:	c8 01       	movw	r24, r16
     dc2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	uart_puts("\n");
     dc6:	8c e8       	ldi	r24, 0x8C	; 140
     dc8:	93 e0       	ldi	r25, 0x03	; 3
     dca:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	sprintf(buffer, "Lon curr = %0.5f", lon_current_temp);
     dce:	4f 92       	push	r4
     dd0:	5f 92       	push	r5
     dd2:	6f 92       	push	r6
     dd4:	7f 92       	push	r7
     dd6:	2e e1       	ldi	r18, 0x1E	; 30
     dd8:	33 e0       	ldi	r19, 0x03	; 3
     dda:	3f 93       	push	r19
     ddc:	2f 93       	push	r18
     dde:	1f 93       	push	r17
     de0:	0f 93       	push	r16
     de2:	0e 94 56 19 	call	0x32ac	; 0x32ac <sprintf>
	uart_puts(buffer);
     de6:	c8 01       	movw	r24, r16
     de8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	uart_puts("\n");
     dec:	8c e8       	ldi	r24, 0x8C	; 140
     dee:	93 e0       	ldi	r25, 0x03	; 3
     df0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	sprintf(buffer, "Lat dest = %0.5f", lat_dest_temp);
     df4:	8f 92       	push	r8
     df6:	9f 92       	push	r9
     df8:	af 92       	push	r10
     dfa:	bf 92       	push	r11
     dfc:	2f e2       	ldi	r18, 0x2F	; 47
     dfe:	33 e0       	ldi	r19, 0x03	; 3
     e00:	3f 93       	push	r19
     e02:	2f 93       	push	r18
     e04:	1f 93       	push	r17
     e06:	0f 93       	push	r16
     e08:	0e 94 56 19 	call	0x32ac	; 0x32ac <sprintf>
	uart_puts(buffer);
     e0c:	c8 01       	movw	r24, r16
     e0e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	uart_puts("\n");
     e12:	8c e8       	ldi	r24, 0x8C	; 140
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	sprintf(buffer, "Lon dest =  %0.5f", lon_dest_temp);
     e1a:	cf 92       	push	r12
     e1c:	df 92       	push	r13
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	80 e4       	ldi	r24, 0x40	; 64
     e24:	93 e0       	ldi	r25, 0x03	; 3
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	1f 93       	push	r17
     e2c:	0f 93       	push	r16
     e2e:	0e 94 56 19 	call	0x32ac	; 0x32ac <sprintf>
	uart_puts(buffer);
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	c8 01       	movw	r24, r16
     e3e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	uart_puts("\n");
     e42:	8c e8       	ldi	r24, 0x8C	; 140
     e44:	93 e0       	ldi	r25, 0x03	; 3
     e46:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		print_float(lat_current_temp, TRUE);
		
	}*/
	
	return 0;
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	ca 5b       	subi	r28, 0xBA	; 186
     e4e:	df 4f       	sbci	r29, 0xFF	; 255
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	df 90       	pop	r13
     e68:	cf 90       	pop	r12
     e6a:	bf 90       	pop	r11
     e6c:	af 90       	pop	r10
     e6e:	9f 90       	pop	r9
     e70:	8f 90       	pop	r8
     e72:	7f 90       	pop	r7
     e74:	6f 90       	pop	r6
     e76:	5f 90       	pop	r5
     e78:	4f 90       	pop	r4
     e7a:	3f 90       	pop	r3
     e7c:	2f 90       	pop	r2
     e7e:	08 95       	ret

00000e80 <process_command>:
}

void process_command()
{
	static unsigned int test;
	switch (command_in[0]) {
     e80:	80 91 26 06 	lds	r24, 0x0626
     e84:	83 35       	cpi	r24, 0x53	; 83
     e86:	59 f0       	breq	.+22     	; 0xe9e <process_command+0x1e>
     e88:	20 f4       	brcc	.+8      	; 0xe92 <process_command+0x12>
     e8a:	8d 34       	cpi	r24, 0x4D	; 77
     e8c:	09 f4       	brne	.+2      	; 0xe90 <process_command+0x10>
     e8e:	54 c0       	rjmp	.+168    	; 0xf38 <process_command+0xb8>
     e90:	4f c0       	rjmp	.+158    	; 0xf30 <process_command+0xb0>
     e92:	86 35       	cpi	r24, 0x56	; 86
     e94:	41 f1       	breq	.+80     	; 0xee6 <process_command+0x66>
     e96:	82 36       	cpi	r24, 0x62	; 98
     e98:	09 f4       	brne	.+2      	; 0xe9c <process_command+0x1c>
     e9a:	47 c0       	rjmp	.+142    	; 0xf2a <process_command+0xaa>
     e9c:	49 c0       	rjmp	.+146    	; 0xf30 <process_command+0xb0>
		case 'S':
		if (command_in[1] == '?') {
     e9e:	80 91 27 06 	lds	r24, 0x0627
     ea2:	8f 33       	cpi	r24, 0x3F	; 63
     ea4:	61 f4       	brne	.+24     	; 0xebe <process_command+0x3e>
			// Do the query action for S
			uart_puts("Asked S value\n");
     ea6:	82 e5       	ldi	r24, 0x52	; 82
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			print_value('S',test);
     eae:	60 91 54 05 	lds	r22, 0x0554
     eb2:	70 91 55 05 	lds	r23, 0x0555
     eb6:	83 e5       	ldi	r24, 0x53	; 83
     eb8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <print_value>
     ebc:	3d c0       	rjmp	.+122    	; 0xf38 <process_command+0xb8>
			} else if (command_in[1] == '=') {
     ebe:	8d 33       	cpi	r24, 0x3D	; 61
     ec0:	d9 f5       	brne	.+118    	; 0xf38 <process_command+0xb8>
			test = parse_assignment();
     ec2:	0e 94 10 06 	call	0xc20	; 0xc20 <parse_assignment>
     ec6:	70 93 55 05 	sts	0x0555, r23
     eca:	60 93 54 05 	sts	0x0554, r22
			uart_puts("Received S value\n");
     ece:	81 e6       	ldi	r24, 0x61	; 97
     ed0:	93 e0       	ldi	r25, 0x03	; 3
     ed2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			print_value('S',test);
     ed6:	60 91 54 05 	lds	r22, 0x0554
     eda:	70 91 55 05 	lds	r23, 0x0555
     ede:	83 e5       	ldi	r24, 0x53	; 83
     ee0:	0e 94 e6 05 	call	0xbcc	; 0xbcc <print_value>
     ee4:	29 c0       	rjmp	.+82     	; 0xf38 <process_command+0xb8>
			// Do the set action for M
		}
		break;
		
		case 'V':	// Vibrate
		if (command_in[1] == '1') 
     ee6:	80 91 27 06 	lds	r24, 0x0627
     eea:	81 33       	cpi	r24, 0x31	; 49
     eec:	11 f4       	brne	.+4      	; 0xef2 <process_command+0x72>
		{
			PWR_ON;
     eee:	80 e4       	ldi	r24, 0x40	; 64
     ef0:	8b b9       	out	0x0b, r24	; 11
		}
		
		if (command_in[1] == '0')
     ef2:	80 91 27 06 	lds	r24, 0x0627
     ef6:	80 33       	cpi	r24, 0x30	; 48
     ef8:	09 f4       	brne	.+2      	; 0xefc <process_command+0x7c>
		{
			PWR_OFF;
     efa:	5e 98       	cbi	0x0b, 6	; 11
		}
		
		if (command_in[1] == 'S')
     efc:	80 91 27 06 	lds	r24, 0x0627
     f00:	83 35       	cpi	r24, 0x53	; 83
     f02:	39 f4       	brne	.+14     	; 0xf12 <process_command+0x92>
		{
			uart_puts("Vibrate!\n");
     f04:	83 e7       	ldi	r24, 0x73	; 115
     f06:	93 e0       	ldi	r25, 0x03	; 3
     f08:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			vibrate(VIBRATE_SHORT);	
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vibrate>
		}
		
		if (command_in[1] == 'L')
     f12:	80 91 27 06 	lds	r24, 0x0627
     f16:	8c 34       	cpi	r24, 0x4C	; 76
     f18:	79 f4       	brne	.+30     	; 0xf38 <process_command+0xb8>
		{
			uart_puts("Vibrate!\n");
     f1a:	83 e7       	ldi	r24, 0x73	; 115
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			vibrate(VIBRATE_LONG);
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vibrate>
     f28:	07 c0       	rjmp	.+14     	; 0xf38 <process_command+0xb8>
		}
		
		break;
		
		case 'b':
		receive_gps();
     f2a:	0e 94 39 06 	call	0xc72	; 0xc72 <receive_gps>
		break;
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <process_command+0xb8>
		
		default:
		uart_puts("NOT RECOGNISED\r\n");
     f30:	8d e7       	ldi	r24, 0x7D	; 125
     f32:	93 e0       	ldi	r25, 0x03	; 3
     f34:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		break;
	}
	command_ready = FALSE;
     f38:	10 92 ee 06 	sts	0x06EE, r1
     f3c:	08 95       	ret

00000f3e <get_serial>:
	uart_puts(buffer);
	uart_putc('\n');
}

void get_serial(void)
{
     f3e:	cf 93       	push	r28
	unsigned int c = uart_getc();
     f40:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <uart_getc>
     f44:	9c 01       	movw	r18, r24
     f46:	22 27       	eor	r18, r18
     f48:	31 71       	andi	r19, 0x11	; 17
	if (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
     f4a:	23 2b       	or	r18, r19
     f4c:	09 f0       	breq	.+2      	; 0xf50 <get_serial+0x12>
     f4e:	40 c0       	rjmp	.+128    	; 0xfd0 <get_serial+0x92>
     f50:	9c 01       	movw	r18, r24
     f52:	22 27       	eor	r18, r18
     f54:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
     f56:	23 2b       	or	r18, r19
     f58:	d9 f5       	brne	.+118    	; 0xfd0 <get_serial+0x92>
	)
	{
		command_in[data_count] = c;
     f5a:	e0 91 25 06 	lds	r30, 0x0625
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	ea 5d       	subi	r30, 0xDA	; 218
     f62:	f9 4f       	sbci	r31, 0xF9	; 249
     f64:	80 83       	st	Z, r24
		if (command_in[data_count] == '\n')
     f66:	e0 91 25 06 	lds	r30, 0x0625
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	ea 5d       	subi	r30, 0xDA	; 218
     f6e:	f9 4f       	sbci	r31, 0xF9	; 249
     f70:	80 81       	ld	r24, Z
     f72:	8a 30       	cpi	r24, 0x0A	; 10
     f74:	41 f5       	brne	.+80     	; 0xfc6 <get_serial+0x88>
		{
			uart_puts("Received =<");
     f76:	8e e8       	ldi	r24, 0x8E	; 142
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			for(uint8_t i=0; i<data_count; i++) {
     f7e:	80 91 25 06 	lds	r24, 0x0625
     f82:	88 23       	and	r24, r24
     f84:	69 f0       	breq	.+26     	; 0xfa0 <get_serial+0x62>
     f86:	c0 e0       	ldi	r28, 0x00	; 0
				uart_putc(command_in[i]);
     f88:	ec 2f       	mov	r30, r28
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	ea 5d       	subi	r30, 0xDA	; 218
     f8e:	f9 4f       	sbci	r31, 0xF9	; 249
     f90:	80 81       	ld	r24, Z
     f92:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uart_putc>
	{
		command_in[data_count] = c;
		if (command_in[data_count] == '\n')
		{
			uart_puts("Received =<");
			for(uint8_t i=0; i<data_count; i++) {
     f96:	cf 5f       	subi	r28, 0xFF	; 255
     f98:	80 91 25 06 	lds	r24, 0x0625
     f9c:	c8 17       	cp	r28, r24
     f9e:	a0 f3       	brcs	.-24     	; 0xf88 <get_serial+0x4a>
				uart_putc(command_in[i]);
			}
			uart_puts(">\n");
     fa0:	87 ef       	ldi	r24, 0xF7	; 247
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			
			command_ready = TRUE;
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	80 93 ee 06 	sts	0x06EE, r24
			process_command();
     fae:	0e 94 40 07 	call	0xe80	; 0xe80 <process_command>
			data_count = 0;	// reset
     fb2:	10 92 25 06 	sts	0x0625, r1
			memset(command_in, 0, sizeof(command_in));	// set command to 0
     fb6:	84 e6       	ldi	r24, 0x64	; 100
     fb8:	e6 e2       	ldi	r30, 0x26	; 38
     fba:	f6 e0       	ldi	r31, 0x06	; 6
     fbc:	df 01       	movw	r26, r30
     fbe:	1d 92       	st	X+, r1
     fc0:	8a 95       	dec	r24
     fc2:	e9 f7       	brne	.-6      	; 0xfbe <get_serial+0x80>
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <get_serial+0x92>
		}
		else
		{
			data_count++;
     fc6:	80 91 25 06 	lds	r24, 0x0625
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	80 93 25 06 	sts	0x0625, r24
		}
	}	
}
     fd0:	cf 91       	pop	r28
     fd2:	08 95       	ret

00000fd4 <clearBuffer>:
	//}
}

void clearBuffer(void)
{
	memset(uiBuffer, 0, sizeof uiBuffer);	
     fd4:	84 e3       	ldi	r24, 0x34	; 52
     fd6:	e4 ec       	ldi	r30, 0xC4	; 196
     fd8:	f5 e0       	ldi	r31, 0x05	; 5
     fda:	df 01       	movw	r26, r30
     fdc:	1d 92       	st	X+, r1
     fde:	8a 95       	dec	r24
     fe0:	e9 f7       	brne	.-6      	; 0xfdc <clearBuffer+0x8>
     fe2:	08 95       	ret

00000fe4 <delay>:
	writeFrame(0, wait);
}

void delay(uint16_t wait_ms)
{
	for (uint16_t i = 0; i < wait_ms; i++) {
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	69 f0       	breq	.+26     	; 0x1002 <delay+0x1e>
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	ef ec       	ldi	r30, 0xCF	; 207
     fee:	f7 e0       	ldi	r31, 0x07	; 7
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <delay+0xc>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <delay+0x12>
     ff6:	00 00       	nop
     ff8:	2f 5f       	subi	r18, 0xFF	; 255
     ffa:	3f 4f       	sbci	r19, 0xFF	; 255
     ffc:	28 17       	cp	r18, r24
     ffe:	39 07       	cpc	r19, r25
    1000:	a9 f7       	brne	.-22     	; 0xfec <delay+0x8>
    1002:	08 95       	ret

00001004 <setPixelColor>:

// Set pixel color from 'packed' 32-bit RGB color:
void setPixelColor(uint16_t n, uint32_t c) 
{
	uint16_t r,g,b;
	if(n < PIXELS+1) 
    1004:	8d 30       	cpi	r24, 0x0D	; 13
    1006:	91 05       	cpc	r25, r1
    1008:	28 f5       	brcc	.+74     	; 0x1054 <setPixelColor+0x50>
	{
		r = (uint8_t)(c >> 16),
		g = (uint8_t)(c >>  8),
		b = (uint8_t)c;
		
		if(UI.brightness) 
    100a:	20 91 fa 05 	lds	r18, 0x05FA
    100e:	22 23       	and	r18, r18
    1010:	09 f1       	breq	.+66     	; 0x1054 <setPixelColor+0x50>
		{
			led[n-1].r = (r * UI.brightness) >> 8;
    1012:	fc 01       	movw	r30, r24
    1014:	31 97       	sbiw	r30, 0x01	; 1
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	df 01       	movw	r26, r30
    101a:	aa 0f       	add	r26, r26
    101c:	bb 1f       	adc	r27, r27
    101e:	ea 0f       	add	r30, r26
    1020:	fb 1f       	adc	r31, r27
    1022:	e5 59       	subi	r30, 0x95	; 149
    1024:	f8 4f       	sbci	r31, 0xF8	; 248
    1026:	62 9f       	mul	r22, r18
    1028:	d0 01       	movw	r26, r0
    102a:	63 9f       	mul	r22, r19
    102c:	b0 0d       	add	r27, r0
    102e:	11 24       	eor	r1, r1
    1030:	b1 83       	std	Z+1, r27	; 0x01
			led[n-1].g = (g * UI.brightness) >> 8;
    1032:	52 9f       	mul	r21, r18
    1034:	b0 01       	movw	r22, r0
    1036:	53 9f       	mul	r21, r19
    1038:	70 0d       	add	r23, r0
    103a:	11 24       	eor	r1, r1
    103c:	70 83       	st	Z, r23
			led[n-1].b = (b * UI.brightness) >> 8;	
    103e:	42 9f       	mul	r20, r18
    1040:	b0 01       	movw	r22, r0
    1042:	43 9f       	mul	r20, r19
    1044:	70 0d       	add	r23, r0
    1046:	11 24       	eor	r1, r1
    1048:	72 83       	std	Z+2, r23	; 0x02
			ws2812_setleds(led,n);
    104a:	bc 01       	movw	r22, r24
    104c:	8b e6       	ldi	r24, 0x6B	; 107
    104e:	97 e0       	ldi	r25, 0x07	; 7
    1050:	0e 94 49 0c 	call	0x1892	; 0x1892 <ws2812_setleds>
    1054:	08 95       	ret

00001056 <writeFrame>:
uint8_t button_counter = 0;
uint8_t ui_counter = 0;
uint16_t timeout_timer = 0;		// timeout timer for ui

void writeFrame(uint16_t degrees, uint16_t wait_ms)	/* Write buffer to display */
{
    1056:	ef 92       	push	r14
    1058:	ff 92       	push	r15
    105a:	0f 93       	push	r16
    105c:	1f 93       	push	r17
    105e:	cf 93       	push	r28
    1060:	df 93       	push	r29
    1062:	8b 01       	movw	r16, r22
    1064:	89 36       	cpi	r24, 0x69	; 105
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	92 07       	cpc	r25, r18
    106a:	10 f0       	brcs	.+4      	; 0x1070 <writeFrame+0x1a>
    106c:	88 e6       	ldi	r24, 0x68	; 104
    106e:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t buffer_nr = 1;
	uint8_t pixel_offset = 0;
	
	if (degrees>360)	{degrees=360;}					// if degrees=360
	
	if (degrees)	// if not 0
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	49 f4       	brne	.+18     	; 0x1086 <writeFrame+0x30>
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1074:	cc e0       	ldi	r28, 0x0C	; 12
    1076:	d0 e0       	ldi	r29, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	ff 24       	eor	r15, r15
    107e:	f3 94       	inc	r15
    1080:	ee 24       	eor	r14, r14
    1082:	e3 94       	inc	r14
    1084:	16 c0       	rjmp	.+44     	; 0x10b2 <writeFrame+0x5c>
	
	if (degrees>360)	{degrees=360;}					// if degrees=360
	
	if (degrees)	// if not 0
	{
		pixel_offset = (degrees/DEGREE_PER_PIXEL);	// rotation of display
    1086:	9c 01       	movw	r18, r24
    1088:	a9 e8       	ldi	r26, 0x89	; 137
    108a:	b8 e8       	ldi	r27, 0x88	; 136
    108c:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
    1090:	ec 01       	movw	r28, r24
    1092:	d2 95       	swap	r29
    1094:	c2 95       	swap	r28
    1096:	cf 70       	andi	r28, 0x0F	; 15
    1098:	cd 27       	eor	r28, r29
    109a:	df 70       	andi	r29, 0x0F	; 15
    109c:	cd 27       	eor	r28, r29
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    109e:	fc 2e       	mov	r15, r28
    10a0:	f3 94       	inc	r15
    10a2:	8f 2d       	mov	r24, r15
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	dd 27       	eor	r29, r29
    10a8:	2c 96       	adiw	r28, 0x0c	; 12
    10aa:	c8 17       	cp	r28, r24
    10ac:	d9 07       	cpc	r29, r25
    10ae:	44 f7       	brge	.-48     	; 0x1080 <writeFrame+0x2a>
    10b0:	2d c0       	rjmp	.+90     	; 0x110c <writeFrame+0xb6>
			
		if (i>PIXELS)
    10b2:	2c e0       	ldi	r18, 0x0C	; 12
    10b4:	2f 15       	cp	r18, r15
    10b6:	80 f4       	brcc	.+32     	; 0x10d8 <writeFrame+0x82>
		{
			//uart_puts("to big, rescale\n");
			setPixelColor(i-PIXELS,uiBuffer[buffer_nr]);
    10b8:	ee 2d       	mov	r30, r14
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	ee 0f       	add	r30, r30
    10c2:	ff 1f       	adc	r31, r31
    10c4:	ec 53       	subi	r30, 0x3C	; 60
    10c6:	fa 4f       	sbci	r31, 0xFA	; 250
    10c8:	40 81       	ld	r20, Z
    10ca:	51 81       	ldd	r21, Z+1	; 0x01
    10cc:	62 81       	ldd	r22, Z+2	; 0x02
    10ce:	73 81       	ldd	r23, Z+3	; 0x03
    10d0:	0c 97       	sbiw	r24, 0x0c	; 12
    10d2:	0e 94 02 08 	call	0x1004	; 0x1004 <setPixelColor>
    10d6:	10 c0       	rjmp	.+32     	; 0x10f8 <writeFrame+0xa2>
		}
		else
		{
			//uart_puts("printpixel\n");
			setPixelColor(i,uiBuffer[buffer_nr]);
    10d8:	ee 2d       	mov	r30, r14
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	ee 0f       	add	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	ee 0f       	add	r30, r30
    10e2:	ff 1f       	adc	r31, r31
    10e4:	ec 53       	subi	r30, 0x3C	; 60
    10e6:	fa 4f       	sbci	r31, 0xFA	; 250
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	62 81       	ldd	r22, Z+2	; 0x02
    10ee:	73 81       	ldd	r23, Z+3	; 0x03
    10f0:	8f 2d       	mov	r24, r15
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 02 08 	call	0x1004	; 0x1004 <setPixelColor>
		}
		buffer_nr++;
    10f8:	e3 94       	inc	r14
		delay(wait_ms);
    10fa:	c8 01       	movw	r24, r16
    10fc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1100:	f3 94       	inc	r15
    1102:	8f 2d       	mov	r24, r15
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	c8 17       	cp	r28, r24
    1108:	d9 07       	cpc	r29, r25
    110a:	9c f6       	brge	.-90     	; 0x10b2 <writeFrame+0x5c>
		//print_int(i,1);
	}

	//if (buffer_ready_flag)
	//clearBuffer();	// empty the buffer
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	08 95       	ret

0000111a <Color>:
	}
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	96 2f       	mov	r25, r22
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
    1120:	50 e0       	ldi	r21, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	59 2b       	or	r21, r25
    1128:	8a 01       	movw	r16, r20
    112a:	9b 01       	movw	r18, r22
    112c:	28 2b       	or	r18, r24
    112e:	c9 01       	movw	r24, r18
    1130:	b8 01       	movw	r22, r16
}
    1132:	1f 91       	pop	r17
    1134:	0f 91       	pop	r16
    1136:	08 95       	ret

00001138 <setBrightness>:
		}
		brightness = newBrightness;
	}*/
	if(b>=0 && b<=255)
	{
		UI.brightness = b;
    1138:	80 93 fa 05 	sts	0x05FA, r24
	}
	else
	{
		return FALSE;
	}
}
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	08 95       	ret

00001140 <getBrightness>:

uint8_t getBrightness(void)
{
	return UI.brightness;
}
    1140:	80 91 fa 05 	lds	r24, 0x05FA
    1144:	08 95       	ret

00001146 <clearLeds>:
		break;
	}
	color_counter = (color_counter>=7) ? 0 : color_counter+1;
}

void clearLeds() {
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
	clearBuffer();	// clearBuffer and writeFrame is more neat but slower..
    114a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clearBuffer>
    114e:	c0 e0       	ldi	r28, 0x00	; 0
    1150:	d0 e0       	ldi	r29, 0x00	; 0
	//writeFrame(0,0);
	//TODO:memset(pixels, 0, numBytes);
	for (uint8_t i = 0; i < PIXELS+1; i++) {
		setPixelColor(i, Color(0,0,0));
    1152:	40 e0       	ldi	r20, 0x00	; 0
    1154:	50 e0       	ldi	r21, 0x00	; 0
    1156:	ba 01       	movw	r22, r20
    1158:	ce 01       	movw	r24, r28
    115a:	0e 94 02 08 	call	0x1004	; 0x1004 <setPixelColor>
    115e:	21 96       	adiw	r28, 0x01	; 1

void clearLeds() {
	clearBuffer();	// clearBuffer and writeFrame is more neat but slower..
	//writeFrame(0,0);
	//TODO:memset(pixels, 0, numBytes);
	for (uint8_t i = 0; i < PIXELS+1; i++) {
    1160:	cd 30       	cpi	r28, 0x0D	; 13
    1162:	d1 05       	cpc	r29, r1
    1164:	b1 f7       	brne	.-20     	; 0x1152 <clearLeds+0xc>
		setPixelColor(i, Color(0,0,0));
	}
}
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <setUIMode>:

uint8_t setUIMode(uint8_t mode)
{
	if(mode>=0 && mode<=MAX_UI_MODES)
    116c:	88 30       	cpi	r24, 0x08	; 8
    116e:	30 f4       	brcc	.+12     	; 0x117c <setUIMode+0x10>
	{
		UI.displaymode = mode;
    1170:	80 93 f9 05 	sts	0x05F9, r24
		ui_counter = 0;			/* Clear counter for visuals */
    1174:	10 92 59 05 	sts	0x0559, r1
		return TRUE;
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	08 95       	ret
	}
	else
	{
		return FALSE;
    117c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    117e:	08 95       	ret

00001180 <getUIMode>:
}

uint8_t getUIMode(void)
{
	return UI.displaymode;
}
    1180:	80 91 f9 05 	lds	r24, 0x05F9
    1184:	08 95       	ret

00001186 <setLedPercentage>:
{
	UI.shownorth = var;
}

void setLedPercentage(uint8_t percent,  uint8_t mode, uint32_t color, uint8_t wait)
{
    1186:	0f 93       	push	r16
    1188:	85 36       	cpi	r24, 0x65	; 101
    118a:	08 f0       	brcs	.+2      	; 0x118e <setLedPercentage+0x8>
    118c:	84 e6       	ldi	r24, 0x64	; 100
	uint8_t nr_of_leds = 0;
	if (percent>100)	{percent=100;}
		
	nr_of_leds = percent/PERCENT_PER_PIXEL;
    118e:	e8 2f       	mov	r30, r24
    1190:	e6 95       	lsr	r30
    1192:	e6 95       	lsr	r30
    1194:	e6 95       	lsr	r30
		
	if (mode==SINGLE)	// set just 1 led
    1196:	61 11       	cpse	r22, r1
    1198:	1e c0       	rjmp	.+60     	; 0x11d6 <setLedPercentage+0x50>
	{
		if (percent==100)
    119a:	84 36       	cpi	r24, 0x64	; 100
    119c:	49 f4       	brne	.+18     	; 0x11b0 <setLedPercentage+0x2a>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    119e:	20 93 c8 05 	sts	0x05C8, r18
    11a2:	30 93 c9 05 	sts	0x05C9, r19
    11a6:	40 93 ca 05 	sts	0x05CA, r20
    11aa:	50 93 cb 05 	sts	0x05CB, r21
    11ae:	0c c0       	rjmp	.+24     	; 0x11c8 <setLedPercentage+0x42>
		{
			writeBuffer(1, color);	
		}
		else
		{
			writeBuffer(nr_of_leds+1, color);
    11b0:	ef 5f       	subi	r30, 0xFF	; 255
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	ec 53       	subi	r30, 0x3C	; 60
    11be:	fa 4f       	sbci	r31, 0xFA	; 250
    11c0:	20 83       	st	Z, r18
    11c2:	31 83       	std	Z+1, r19	; 0x01
    11c4:	42 83       	std	Z+2, r20	; 0x02
    11c6:	53 83       	std	Z+3, r21	; 0x03
		}
		else
		{
			writeBuffer(nr_of_leds+1, color);
		}
		writeFrame(0, wait);
    11c8:	60 2f       	mov	r22, r16
    11ca:	70 e0       	ldi	r23, 0x00	; 0
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 2b 08 	call	0x1056	; 0x1056 <writeFrame>
    11d4:	25 c0       	rjmp	.+74     	; 0x1220 <setLedPercentage+0x9a>
	}
	
	if (mode==MULTIPLE)	// do a color wipe until the last led reached
    11d6:	61 30       	cpi	r22, 0x01	; 1
    11d8:	19 f5       	brne	.+70     	; 0x1220 <setLedPercentage+0x9a>
	{
		if (percent==100)
    11da:	84 36       	cpi	r24, 0x64	; 100
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <setLedPercentage+0x5a>
		{
			nr_of_leds--;
    11de:	e1 50       	subi	r30, 0x01	; 1
		}
		for (uint8_t i = 1; i < (nr_of_leds)+2; i++) {
    11e0:	ae 2f       	mov	r26, r30
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	a2 30       	cpi	r26, 0x02	; 2
    11e8:	b1 05       	cpc	r27, r1
    11ea:	a4 f0       	brlt	.+40     	; 0x1214 <setLedPercentage+0x8e>
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	71 e0       	ldi	r23, 0x01	; 1
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    11f2:	fc 01       	movw	r30, r24
    11f4:	ee 0f       	add	r30, r30
    11f6:	ff 1f       	adc	r31, r31
    11f8:	ee 0f       	add	r30, r30
    11fa:	ff 1f       	adc	r31, r31
    11fc:	ec 53       	subi	r30, 0x3C	; 60
    11fe:	fa 4f       	sbci	r31, 0xFA	; 250
    1200:	20 83       	st	Z, r18
    1202:	31 83       	std	Z+1, r19	; 0x01
    1204:	42 83       	std	Z+2, r20	; 0x02
    1206:	53 83       	std	Z+3, r21	; 0x03
	{
		if (percent==100)
		{
			nr_of_leds--;
		}
		for (uint8_t i = 1; i < (nr_of_leds)+2; i++) {
    1208:	7f 5f       	subi	r23, 0xFF	; 255
    120a:	87 2f       	mov	r24, r23
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	8a 17       	cp	r24, r26
    1210:	9b 07       	cpc	r25, r27
    1212:	7c f3       	brlt	.-34     	; 0x11f2 <setLedPercentage+0x6c>
			writeBuffer(i, color);
		}
		writeFrame(0, wait);
    1214:	60 2f       	mov	r22, r16
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	0e 94 2b 08 	call	0x1056	; 0x1056 <writeFrame>
	}
}
    1220:	0f 91       	pop	r16
    1222:	08 95       	ret

00001224 <refreshDisplay>:
		writeFrame(0, wait);	// Write to display
	}
}

void refreshDisplay(uint16_t north_deg, uint16_t destination_deg, uint8_t status)
{
    1224:	8f 92       	push	r8
    1226:	9f 92       	push	r9
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	8b 01       	movw	r16, r22
    123e:	f4 2e       	mov	r15, r20
	uint16_t rotation_deg = 0;
	uint8_t x = 0;
	/* Calculate rotation */
	//rotation_deg = (north_deg + destination_deg);	/* 45 = 45 + 45*/
	//rotation_deg = (north_deg - destination_deg);	/* 330 = 10 - 20*/
	if (destination_deg>= north_deg)	// 25 - 20
    1240:	68 17       	cp	r22, r24
    1242:	79 07       	cpc	r23, r25
    1244:	20 f0       	brcs	.+8      	; 0x124e <refreshDisplay+0x2a>
	{
		rotation_deg = destination_deg-north_deg;
    1246:	eb 01       	movw	r28, r22
    1248:	c8 1b       	sub	r28, r24
    124a:	d9 0b       	sbc	r29, r25
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <refreshDisplay+0x34>
	}	// 10 - 20
	else
	{
		rotation_deg = (destination_deg+360)-north_deg;
    124e:	eb 01       	movw	r28, r22
    1250:	c8 1b       	sub	r28, r24
    1252:	d9 0b       	sbc	r29, r25
    1254:	c8 59       	subi	r28, 0x98	; 152
    1256:	de 4f       	sbci	r29, 0xFE	; 254
	}
	
	clearBuffer();	/* Clear buffer with colors */
    1258:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <clearBuffer>
	
	/* Fill frame buffer with data */	
	switch (status)
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	f8 16       	cp	r15, r24
    1260:	09 f1       	breq	.+66     	; 0x12a4 <refreshDisplay+0x80>
    1262:	f8 16       	cp	r15, r24
    1264:	08 f4       	brcc	.+2      	; 0x1268 <refreshDisplay+0x44>
    1266:	5a c0       	rjmp	.+180    	; 0x131c <refreshDisplay+0xf8>
    1268:	82 e0       	ldi	r24, 0x02	; 2
    126a:	f8 16       	cp	r15, r24
    126c:	09 f4       	brne	.+2      	; 0x1270 <refreshDisplay+0x4c>
    126e:	61 c0       	rjmp	.+194    	; 0x1332 <refreshDisplay+0x10e>
    1270:	83 e0       	ldi	r24, 0x03	; 3
    1272:	f8 12       	cpse	r15, r24
    1274:	be c2       	rjmp	.+1404   	; 0x17f2 <refreshDisplay+0x5ce>
	{
		case NO_CONNECTION:
			togglebit = (togglebit) ? FALSE : TRUE;
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 91 5b 05 	lds	r25, 0x055B
    127c:	91 11       	cpse	r25, r1
    127e:	80 e0       	ldi	r24, 0x00	; 0
    1280:	80 93 5b 05 	sts	0x055B, r24
			if (togglebit)
    1284:	88 23       	and	r24, r24
    1286:	09 f4       	brne	.+2      	; 0x128a <refreshDisplay+0x66>
    1288:	b8 c2       	rjmp	.+1392   	; 0x17fa <refreshDisplay+0x5d6>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	af ef       	ldi	r26, 0xFF	; 255
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	80 93 c8 05 	sts	0x05C8, r24
    1296:	90 93 c9 05 	sts	0x05C9, r25
    129a:	a0 93 ca 05 	sts	0x05CA, r26
    129e:	b0 93 cb 05 	sts	0x05CB, r27
    12a2:	ab c2       	rjmp	.+1366   	; 0x17fa <refreshDisplay+0x5d6>
			{writeBuffer(1,RED);		/* NO connection */}
		break;
		
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
    12a4:	80 91 20 06 	lds	r24, 0x0620
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	a9 f5       	brne	.+106    	; 0x1316 <refreshDisplay+0xf2>
			{
				for(uint8_t i=0; i<=button_counter; i++) {
    12ac:	10 91 5a 05 	lds	r17, 0x055A
    12b0:	31 e0       	ldi	r19, 0x01	; 1
    12b2:	20 e0       	ldi	r18, 0x00	; 0
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    12b4:	40 e0       	ldi	r20, 0x00	; 0
    12b6:	54 e6       	ldi	r21, 0x64	; 100
    12b8:	6f ef       	ldi	r22, 0xFF	; 255
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	8f ef       	ldi	r24, 0xFF	; 255
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a0 e0       	ldi	r26, 0x00	; 0
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
			{
				for(uint8_t i=0; i<=button_counter; i++) {
					if (i<=6)
    12c4:	27 30       	cpi	r18, 0x07	; 7
    12c6:	68 f4       	brcc	.+26     	; 0x12e2 <refreshDisplay+0xbe>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    12c8:	e3 2f       	mov	r30, r19
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	ee 0f       	add	r30, r30
    12ce:	ff 1f       	adc	r31, r31
    12d0:	ee 0f       	add	r30, r30
    12d2:	ff 1f       	adc	r31, r31
    12d4:	ec 53       	subi	r30, 0x3C	; 60
    12d6:	fa 4f       	sbci	r31, 0xFA	; 250
    12d8:	80 83       	st	Z, r24
    12da:	91 83       	std	Z+1, r25	; 0x01
    12dc:	a2 83       	std	Z+2, r26	; 0x02
    12de:	b3 83       	std	Z+3, r27	; 0x03
    12e0:	0c c0       	rjmp	.+24     	; 0x12fa <refreshDisplay+0xd6>
    12e2:	e3 2f       	mov	r30, r19
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	ee 0f       	add	r30, r30
    12e8:	ff 1f       	adc	r31, r31
    12ea:	ee 0f       	add	r30, r30
    12ec:	ff 1f       	adc	r31, r31
    12ee:	ec 53       	subi	r30, 0x3C	; 60
    12f0:	fa 4f       	sbci	r31, 0xFA	; 250
    12f2:	40 83       	st	Z, r20
    12f4:	51 83       	std	Z+1, r21	; 0x01
    12f6:	62 83       	std	Z+2, r22	; 0x02
    12f8:	73 83       	std	Z+3, r23	; 0x03
		
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
			{
				for(uint8_t i=0; i<=button_counter; i++) {
    12fa:	2f 5f       	subi	r18, 0xFF	; 255
    12fc:	3f 5f       	subi	r19, 0xFF	; 255
    12fe:	12 17       	cp	r17, r18
    1300:	08 f7       	brcc	.-62     	; 0x12c4 <refreshDisplay+0xa0>
					else
					{
						writeBuffer(i+1,ORANGE);		/*  */
					}
				}
				button_counter++;
    1302:	1f 5f       	subi	r17, 0xFF	; 255
    1304:	10 93 5a 05 	sts	0x055A, r17
					
				if (button_counter>12)	/* Counter full, reset */
    1308:	1d 30       	cpi	r17, 0x0D	; 13
    130a:	28 f0       	brcs	.+10     	; 0x1316 <refreshDisplay+0xf2>
				{
					device.buttonaction = LONG_PRESS;
    130c:	83 e0       	ldi	r24, 0x03	; 3
    130e:	80 93 21 06 	sts	0x0621, r24
					//uart_puts("Long press action\n");
					//device.status = device.previousstatus;		/* Go to earlier state */
					button_counter=0;
    1312:	10 92 5a 05 	sts	0x055A, r1
				}
			}	
			ui_counter = 0;
    1316:	10 92 59 05 	sts	0x0559, r1
		break;
    131a:	6f c2       	rjmp	.+1246   	; 0x17fa <refreshDisplay+0x5d6>
		
		case BUTTON_NOT_PRESSED:	/* Button released */
			{
				if (button_counter<=6)
    131c:	80 91 5a 05 	lds	r24, 0x055A
    1320:	87 30       	cpi	r24, 0x07	; 7
    1322:	08 f0       	brcs	.+2      	; 0x1326 <refreshDisplay+0x102>
    1324:	72 c2       	rjmp	.+1252   	; 0x180a <refreshDisplay+0x5e6>
				{
					device.buttonaction = SHORT_PRESS;	/* short press action */
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	80 93 21 06 	sts	0x0621, r24
					device.buttonaction = MIDDLE_PRESS;	/* Middle press action */
					//uart_puts("Middle press action\n");
				}
				//device.status = device.previousstatus;	/* Go to earlier state */
				//device.status = NAVIGATING;
				button_counter = 0;							/* Released button */
    132c:	10 92 5a 05 	sts	0x055A, r1
			}
		break;
    1330:	64 c2       	rjmp	.+1224   	; 0x17fa <refreshDisplay+0x5d6>
		
		case NAVIGATING:
			switch (UI.displaymode)
    1332:	40 91 f9 05 	lds	r20, 0x05F9
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	48 30       	cpi	r20, 0x08	; 8
    133a:	51 05       	cpc	r21, r1
    133c:	08 f0       	brcs	.+2      	; 0x1340 <refreshDisplay+0x11c>
    133e:	4c c2       	rjmp	.+1176   	; 0x17d8 <refreshDisplay+0x5b4>
    1340:	fa 01       	movw	r30, r20
    1342:	ec 5c       	subi	r30, 0xCC	; 204
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__tablejump2__>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    134a:	80 91 fb 05 	lds	r24, 0x05FB
    134e:	90 91 fc 05 	lds	r25, 0x05FC
    1352:	a0 91 fd 05 	lds	r26, 0x05FD
    1356:	b0 91 fe 05 	lds	r27, 0x05FE
    135a:	80 93 c8 05 	sts	0x05C8, r24
    135e:	90 93 c9 05 	sts	0x05C9, r25
    1362:	a0 93 ca 05 	sts	0x05CA, r26
    1366:	b0 93 cb 05 	sts	0x05CB, r27
    136a:	3a c2       	rjmp	.+1140   	; 0x17e0 <refreshDisplay+0x5bc>
    136c:	80 91 fb 05 	lds	r24, 0x05FB
    1370:	90 91 fc 05 	lds	r25, 0x05FC
    1374:	a0 91 fd 05 	lds	r26, 0x05FD
    1378:	b0 91 fe 05 	lds	r27, 0x05FE
    137c:	80 93 c8 05 	sts	0x05C8, r24
    1380:	90 93 c9 05 	sts	0x05C9, r25
    1384:	a0 93 ca 05 	sts	0x05CA, r26
    1388:	b0 93 cb 05 	sts	0x05CB, r27
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	94 e6       	ldi	r25, 0x64	; 100
    1390:	af ef       	ldi	r26, 0xFF	; 255
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	80 93 cc 05 	sts	0x05CC, r24
    1398:	90 93 cd 05 	sts	0x05CD, r25
    139c:	a0 93 ce 05 	sts	0x05CE, r26
    13a0:	b0 93 cf 05 	sts	0x05CF, r27
    13a4:	80 93 f4 05 	sts	0x05F4, r24
    13a8:	90 93 f5 05 	sts	0x05F5, r25
    13ac:	a0 93 f6 05 	sts	0x05F6, r26
    13b0:	b0 93 f7 05 	sts	0x05F7, r27
    13b4:	15 c2       	rjmp	.+1066   	; 0x17e0 <refreshDisplay+0x5bc>
    13b6:	80 91 fb 05 	lds	r24, 0x05FB
    13ba:	90 91 fc 05 	lds	r25, 0x05FC
    13be:	a0 91 fd 05 	lds	r26, 0x05FD
    13c2:	b0 91 fe 05 	lds	r27, 0x05FE
    13c6:	80 93 c8 05 	sts	0x05C8, r24
    13ca:	90 93 c9 05 	sts	0x05C9, r25
    13ce:	a0 93 ca 05 	sts	0x05CA, r26
    13d2:	b0 93 cb 05 	sts	0x05CB, r27
					writeBuffer(12,ORANGE);		/*  */
				break;
				
				case EXTEND_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					x = ((destination_deg+(DEGREE_PER_PIXEL/2))/DEGREE_PER_PIXEL);	// Make use of rounding numbers
    13d6:	98 01       	movw	r18, r16
    13d8:	21 5f       	subi	r18, 0xF1	; 241
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	a9 e8       	ldi	r26, 0x89	; 137
    13de:	b8 e8       	ldi	r27, 0x88	; 136
    13e0:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
    13e4:	92 95       	swap	r25
    13e6:	82 95       	swap	r24
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	89 27       	eor	r24, r25
    13ec:	9f 70       	andi	r25, 0x0F	; 15
    13ee:	89 27       	eor	r24, r25
					if (x%2)	// Higher led (even)
    13f0:	80 ff       	sbrs	r24, 0
    13f2:	0d c0       	rjmp	.+26     	; 0x140e <refreshDisplay+0x1ea>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    13f4:	80 e0       	ldi	r24, 0x00	; 0
    13f6:	94 e6       	ldi	r25, 0x64	; 100
    13f8:	af ef       	ldi	r26, 0xFF	; 255
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	80 93 f4 05 	sts	0x05F4, r24
    1400:	90 93 f5 05 	sts	0x05F5, r25
    1404:	a0 93 f6 05 	sts	0x05F6, r26
    1408:	b0 93 f7 05 	sts	0x05F7, r27
    140c:	e9 c1       	rjmp	.+978    	; 0x17e0 <refreshDisplay+0x5bc>
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	94 e6       	ldi	r25, 0x64	; 100
    1412:	af ef       	ldi	r26, 0xFF	; 255
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	80 93 cc 05 	sts	0x05CC, r24
    141a:	90 93 cd 05 	sts	0x05CD, r25
    141e:	a0 93 ce 05 	sts	0x05CE, r26
    1422:	b0 93 cf 05 	sts	0x05CF, r27
    1426:	dc c1       	rjmp	.+952    	; 0x17e0 <refreshDisplay+0x5bc>
						writeBuffer(2,ORANGE);		/*  */
					}
				break;
				
				case ARROW:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    1428:	80 91 fb 05 	lds	r24, 0x05FB
    142c:	90 91 fc 05 	lds	r25, 0x05FC
    1430:	a0 91 fd 05 	lds	r26, 0x05FD
    1434:	b0 91 fe 05 	lds	r27, 0x05FE
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    1438:	80 93 c8 05 	sts	0x05C8, r24
    143c:	90 93 c9 05 	sts	0x05C9, r25
    1440:	a0 93 ca 05 	sts	0x05CA, r26
    1444:	b0 93 cb 05 	sts	0x05CB, r27
    1448:	80 93 d8 05 	sts	0x05D8, r24
    144c:	90 93 d9 05 	sts	0x05D9, r25
    1450:	a0 93 da 05 	sts	0x05DA, r26
    1454:	b0 93 db 05 	sts	0x05DB, r27
    1458:	80 93 dc 05 	sts	0x05DC, r24
    145c:	90 93 dd 05 	sts	0x05DD, r25
    1460:	a0 93 de 05 	sts	0x05DE, r26
    1464:	b0 93 df 05 	sts	0x05DF, r27
    1468:	80 93 e0 05 	sts	0x05E0, r24
    146c:	90 93 e1 05 	sts	0x05E1, r25
    1470:	a0 93 e2 05 	sts	0x05E2, r26
    1474:	b0 93 e3 05 	sts	0x05E3, r27
    1478:	80 93 e4 05 	sts	0x05E4, r24
    147c:	90 93 e5 05 	sts	0x05E5, r25
    1480:	a0 93 e6 05 	sts	0x05E6, r26
    1484:	b0 93 e7 05 	sts	0x05E7, r27
    1488:	80 93 e8 05 	sts	0x05E8, r24
    148c:	90 93 e9 05 	sts	0x05E9, r25
    1490:	a0 93 ea 05 	sts	0x05EA, r26
    1494:	b0 93 eb 05 	sts	0x05EB, r27
    1498:	a3 c1       	rjmp	.+838    	; 0x17e0 <refreshDisplay+0x5bc>
					writeBuffer(8,UI.navigationcolor);		/*  */
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case ARROW_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    149a:	c0 90 fb 05 	lds	r12, 0x05FB
    149e:	d0 90 fc 05 	lds	r13, 0x05FC
    14a2:	e0 90 fd 05 	lds	r14, 0x05FD
    14a6:	f0 90 fe 05 	lds	r15, 0x05FE
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    14aa:	c0 92 c8 05 	sts	0x05C8, r12
    14ae:	d0 92 c9 05 	sts	0x05C9, r13
    14b2:	e0 92 ca 05 	sts	0x05CA, r14
    14b6:	f0 92 cb 05 	sts	0x05CB, r15
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case ARROW_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					x = ((destination_deg+(DEGREE_PER_PIXEL/2))/DEGREE_PER_PIXEL);	// Make use of rounding numbers
    14ba:	98 01       	movw	r18, r16
    14bc:	21 5f       	subi	r18, 0xF1	; 241
    14be:	3f 4f       	sbci	r19, 0xFF	; 255
    14c0:	a9 e8       	ldi	r26, 0x89	; 137
    14c2:	b8 e8       	ldi	r27, 0x88	; 136
    14c4:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
    14c8:	92 95       	swap	r25
    14ca:	82 95       	swap	r24
    14cc:	8f 70       	andi	r24, 0x0F	; 15
    14ce:	89 27       	eor	r24, r25
    14d0:	9f 70       	andi	r25, 0x0F	; 15
    14d2:	89 27       	eor	r24, r25
					if (x%2)	// Higher led (even)
    14d4:	80 ff       	sbrs	r24, 0
    14d6:	0d c0       	rjmp	.+26     	; 0x14f2 <refreshDisplay+0x2ce>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	94 e6       	ldi	r25, 0x64	; 100
    14dc:	af ef       	ldi	r26, 0xFF	; 255
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	80 93 f4 05 	sts	0x05F4, r24
    14e4:	90 93 f5 05 	sts	0x05F5, r25
    14e8:	a0 93 f6 05 	sts	0x05F6, r26
    14ec:	b0 93 f7 05 	sts	0x05F7, r27
    14f0:	0c c0       	rjmp	.+24     	; 0x150a <refreshDisplay+0x2e6>
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	94 e6       	ldi	r25, 0x64	; 100
    14f6:	af ef       	ldi	r26, 0xFF	; 255
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	80 93 cc 05 	sts	0x05CC, r24
    14fe:	90 93 cd 05 	sts	0x05CD, r25
    1502:	a0 93 ce 05 	sts	0x05CE, r26
    1506:	b0 93 cf 05 	sts	0x05CF, r27
    150a:	c0 92 d8 05 	sts	0x05D8, r12
    150e:	d0 92 d9 05 	sts	0x05D9, r13
    1512:	e0 92 da 05 	sts	0x05DA, r14
    1516:	f0 92 db 05 	sts	0x05DB, r15
    151a:	c0 92 dc 05 	sts	0x05DC, r12
    151e:	d0 92 dd 05 	sts	0x05DD, r13
    1522:	e0 92 de 05 	sts	0x05DE, r14
    1526:	f0 92 df 05 	sts	0x05DF, r15
    152a:	c0 92 e0 05 	sts	0x05E0, r12
    152e:	d0 92 e1 05 	sts	0x05E1, r13
    1532:	e0 92 e2 05 	sts	0x05E2, r14
    1536:	f0 92 e3 05 	sts	0x05E3, r15
    153a:	c0 92 e4 05 	sts	0x05E4, r12
    153e:	d0 92 e5 05 	sts	0x05E5, r13
    1542:	e0 92 e6 05 	sts	0x05E6, r14
    1546:	f0 92 e7 05 	sts	0x05E7, r15
    154a:	c0 92 e8 05 	sts	0x05E8, r12
    154e:	d0 92 e9 05 	sts	0x05E9, r13
    1552:	e0 92 ea 05 	sts	0x05EA, r14
    1556:	f0 92 eb 05 	sts	0x05EB, r15
    155a:	42 c1       	rjmp	.+644    	; 0x17e0 <refreshDisplay+0x5bc>
					writeBuffer(8,UI.navigationcolor);		/*  */
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case BARR:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    155c:	c0 90 fb 05 	lds	r12, 0x05FB
    1560:	d0 90 fc 05 	lds	r13, 0x05FC
    1564:	e0 90 fd 05 	lds	r14, 0x05FD
    1568:	f0 90 fe 05 	lds	r15, 0x05FE
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    156c:	c0 92 c8 05 	sts	0x05C8, r12
    1570:	d0 92 c9 05 	sts	0x05C9, r13
    1574:	e0 92 ca 05 	sts	0x05CA, r14
    1578:	f0 92 cb 05 	sts	0x05CB, r15
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case BARR:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					if (device.distance>=1)
    157c:	80 90 19 06 	lds	r8, 0x0619
    1580:	90 90 1a 06 	lds	r9, 0x061A
    1584:	a0 90 1b 06 	lds	r10, 0x061B
    1588:	b0 90 1c 06 	lds	r11, 0x061C
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	c5 01       	movw	r24, r10
    1596:	b4 01       	movw	r22, r8
    1598:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__gesf2>
    159c:	88 23       	and	r24, r24
    159e:	84 f0       	brlt	.+32     	; 0x15c0 <refreshDisplay+0x39c>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    15a0:	c0 92 cc 05 	sts	0x05CC, r12
    15a4:	d0 92 cd 05 	sts	0x05CD, r13
    15a8:	e0 92 ce 05 	sts	0x05CE, r14
    15ac:	f0 92 cf 05 	sts	0x05CF, r15
    15b0:	c0 92 f4 05 	sts	0x05F4, r12
    15b4:	d0 92 f5 05 	sts	0x05F5, r13
    15b8:	e0 92 f6 05 	sts	0x05F6, r14
    15bc:	f0 92 f7 05 	sts	0x05F7, r15
					if (device.distance>=1)
					{
						writeBuffer(2,UI.navigationcolor);		/*  */
						writeBuffer(12,UI.navigationcolor);		/*  */
					}
					if(device.distance>=2.5)
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e2       	ldi	r20, 0x20	; 32
    15c6:	50 e4       	ldi	r21, 0x40	; 64
    15c8:	c5 01       	movw	r24, r10
    15ca:	b4 01       	movw	r22, r8
    15cc:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__gesf2>
    15d0:	88 23       	and	r24, r24
    15d2:	84 f0       	brlt	.+32     	; 0x15f4 <refreshDisplay+0x3d0>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    15d4:	c0 92 d0 05 	sts	0x05D0, r12
    15d8:	d0 92 d1 05 	sts	0x05D1, r13
    15dc:	e0 92 d2 05 	sts	0x05D2, r14
    15e0:	f0 92 d3 05 	sts	0x05D3, r15
    15e4:	c0 92 f0 05 	sts	0x05F0, r12
    15e8:	d0 92 f1 05 	sts	0x05F1, r13
    15ec:	e0 92 f2 05 	sts	0x05F2, r14
    15f0:	f0 92 f3 05 	sts	0x05F3, r15
					if(device.distance>=2.5)
					{
						writeBuffer(3,UI.navigationcolor);		/*  */
						writeBuffer(11,UI.navigationcolor);		/*  */
					}
					if(device.distance>=5)
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 ea       	ldi	r20, 0xA0	; 160
    15fa:	50 e4       	ldi	r21, 0x40	; 64
    15fc:	c5 01       	movw	r24, r10
    15fe:	b4 01       	movw	r22, r8
    1600:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__gesf2>
    1604:	88 23       	and	r24, r24
    1606:	0c f4       	brge	.+2      	; 0x160a <refreshDisplay+0x3e6>
    1608:	eb c0       	rjmp	.+470    	; 0x17e0 <refreshDisplay+0x5bc>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    160a:	c0 92 d4 05 	sts	0x05D4, r12
    160e:	d0 92 d5 05 	sts	0x05D5, r13
    1612:	e0 92 d6 05 	sts	0x05D6, r14
    1616:	f0 92 d7 05 	sts	0x05D7, r15
    161a:	c0 92 ec 05 	sts	0x05EC, r12
    161e:	d0 92 ed 05 	sts	0x05ED, r13
    1622:	e0 92 ee 05 	sts	0x05EE, r14
    1626:	f0 92 ef 05 	sts	0x05EF, r15
    162a:	da c0       	rjmp	.+436    	; 0x17e0 <refreshDisplay+0x5bc>
					}
				break;
				
				/* UI modes which depends on animations/cycles */
				case ANIMATION_1:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    162c:	80 91 fb 05 	lds	r24, 0x05FB
    1630:	90 91 fc 05 	lds	r25, 0x05FC
    1634:	a0 91 fd 05 	lds	r26, 0x05FD
    1638:	b0 91 fe 05 	lds	r27, 0x05FE
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    163c:	80 93 c8 05 	sts	0x05C8, r24
    1640:	90 93 c9 05 	sts	0x05C9, r25
    1644:	a0 93 ca 05 	sts	0x05CA, r26
    1648:	b0 93 cb 05 	sts	0x05CB, r27
				break;
				
				/* UI modes which depends on animations/cycles */
				case ANIMATION_1:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					switch(ui_counter)
    164c:	20 91 59 05 	lds	r18, 0x0559
    1650:	21 30       	cpi	r18, 0x01	; 1
    1652:	a9 f0       	breq	.+42     	; 0x167e <refreshDisplay+0x45a>
    1654:	18 f0       	brcs	.+6      	; 0x165c <refreshDisplay+0x438>
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	19 f1       	breq	.+70     	; 0x16a0 <refreshDisplay+0x47c>
    165a:	34 c0       	rjmp	.+104    	; 0x16c4 <refreshDisplay+0x4a0>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    165c:	80 93 d4 05 	sts	0x05D4, r24
    1660:	90 93 d5 05 	sts	0x05D5, r25
    1664:	a0 93 d6 05 	sts	0x05D6, r26
    1668:	b0 93 d7 05 	sts	0x05D7, r27
    166c:	80 93 ec 05 	sts	0x05EC, r24
    1670:	90 93 ed 05 	sts	0x05ED, r25
    1674:	a0 93 ee 05 	sts	0x05EE, r26
    1678:	b0 93 ef 05 	sts	0x05EF, r27
    167c:	ca c0       	rjmp	.+404    	; 0x1812 <refreshDisplay+0x5ee>
    167e:	80 93 d0 05 	sts	0x05D0, r24
    1682:	90 93 d1 05 	sts	0x05D1, r25
    1686:	a0 93 d2 05 	sts	0x05D2, r26
    168a:	b0 93 d3 05 	sts	0x05D3, r27
    168e:	80 93 f0 05 	sts	0x05F0, r24
    1692:	90 93 f1 05 	sts	0x05F1, r25
    1696:	a0 93 f2 05 	sts	0x05F2, r26
    169a:	b0 93 f3 05 	sts	0x05F3, r27
    169e:	b9 c0       	rjmp	.+370    	; 0x1812 <refreshDisplay+0x5ee>
    16a0:	80 93 cc 05 	sts	0x05CC, r24
    16a4:	90 93 cd 05 	sts	0x05CD, r25
    16a8:	a0 93 ce 05 	sts	0x05CE, r26
    16ac:	b0 93 cf 05 	sts	0x05CF, r27
    16b0:	80 93 f4 05 	sts	0x05F4, r24
    16b4:	90 93 f5 05 	sts	0x05F5, r25
    16b8:	a0 93 f6 05 	sts	0x05F6, r26
    16bc:	b0 93 f7 05 	sts	0x05F7, r27
						
						default:
						break;
					}
					ui_counter++;
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <refreshDisplay+0x4a8>
						break;
						
						default:
						break;
					}
					ui_counter++;
    16c4:	2f 5f       	subi	r18, 0xFF	; 255
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
    16c6:	23 30       	cpi	r18, 0x03	; 3
    16c8:	08 f0       	brcs	.+2      	; 0x16cc <refreshDisplay+0x4a8>
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	20 93 59 05 	sts	0x0559, r18
				break;
    16d0:	87 c0       	rjmp	.+270    	; 0x17e0 <refreshDisplay+0x5bc>
				
				case ANIMATION_2:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    16d2:	80 91 fb 05 	lds	r24, 0x05FB
    16d6:	90 91 fc 05 	lds	r25, 0x05FC
    16da:	a0 91 fd 05 	lds	r26, 0x05FD
    16de:	b0 91 fe 05 	lds	r27, 0x05FE
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    16e2:	80 93 c8 05 	sts	0x05C8, r24
    16e6:	90 93 c9 05 	sts	0x05C9, r25
    16ea:	a0 93 ca 05 	sts	0x05CA, r26
    16ee:	b0 93 cb 05 	sts	0x05CB, r27
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
				break;
				
				case ANIMATION_2:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					switch(ui_counter)
    16f2:	20 91 59 05 	lds	r18, 0x0559
    16f6:	21 30       	cpi	r18, 0x01	; 1
    16f8:	b1 f1       	breq	.+108    	; 0x1766 <refreshDisplay+0x542>
    16fa:	20 f0       	brcs	.+8      	; 0x1704 <refreshDisplay+0x4e0>
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	09 f4       	brne	.+2      	; 0x1702 <refreshDisplay+0x4de>
    1700:	53 c0       	rjmp	.+166    	; 0x17a8 <refreshDisplay+0x584>
    1702:	63 c0       	rjmp	.+198    	; 0x17ca <refreshDisplay+0x5a6>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    1704:	80 93 cc 05 	sts	0x05CC, r24
    1708:	90 93 cd 05 	sts	0x05CD, r25
    170c:	a0 93 ce 05 	sts	0x05CE, r26
    1710:	b0 93 cf 05 	sts	0x05CF, r27
    1714:	80 93 d0 05 	sts	0x05D0, r24
    1718:	90 93 d1 05 	sts	0x05D1, r25
    171c:	a0 93 d2 05 	sts	0x05D2, r26
    1720:	b0 93 d3 05 	sts	0x05D3, r27
    1724:	80 93 d4 05 	sts	0x05D4, r24
    1728:	90 93 d5 05 	sts	0x05D5, r25
    172c:	a0 93 d6 05 	sts	0x05D6, r26
    1730:	b0 93 d7 05 	sts	0x05D7, r27
    1734:	80 93 ec 05 	sts	0x05EC, r24
    1738:	90 93 ed 05 	sts	0x05ED, r25
    173c:	a0 93 ee 05 	sts	0x05EE, r26
    1740:	b0 93 ef 05 	sts	0x05EF, r27
    1744:	80 93 f0 05 	sts	0x05F0, r24
    1748:	90 93 f1 05 	sts	0x05F1, r25
    174c:	a0 93 f2 05 	sts	0x05F2, r26
    1750:	b0 93 f3 05 	sts	0x05F3, r27
    1754:	80 93 f4 05 	sts	0x05F4, r24
    1758:	90 93 f5 05 	sts	0x05F5, r25
    175c:	a0 93 f6 05 	sts	0x05F6, r26
    1760:	b0 93 f7 05 	sts	0x05F7, r27
    1764:	58 c0       	rjmp	.+176    	; 0x1816 <refreshDisplay+0x5f2>
    1766:	80 93 cc 05 	sts	0x05CC, r24
    176a:	90 93 cd 05 	sts	0x05CD, r25
    176e:	a0 93 ce 05 	sts	0x05CE, r26
    1772:	b0 93 cf 05 	sts	0x05CF, r27
    1776:	80 93 d0 05 	sts	0x05D0, r24
    177a:	90 93 d1 05 	sts	0x05D1, r25
    177e:	a0 93 d2 05 	sts	0x05D2, r26
    1782:	b0 93 d3 05 	sts	0x05D3, r27
    1786:	80 93 f0 05 	sts	0x05F0, r24
    178a:	90 93 f1 05 	sts	0x05F1, r25
    178e:	a0 93 f2 05 	sts	0x05F2, r26
    1792:	b0 93 f3 05 	sts	0x05F3, r27
    1796:	80 93 f4 05 	sts	0x05F4, r24
    179a:	90 93 f5 05 	sts	0x05F5, r25
    179e:	a0 93 f6 05 	sts	0x05F6, r26
    17a2:	b0 93 f7 05 	sts	0x05F7, r27
    17a6:	37 c0       	rjmp	.+110    	; 0x1816 <refreshDisplay+0x5f2>
    17a8:	80 93 cc 05 	sts	0x05CC, r24
    17ac:	90 93 cd 05 	sts	0x05CD, r25
    17b0:	a0 93 ce 05 	sts	0x05CE, r26
    17b4:	b0 93 cf 05 	sts	0x05CF, r27
    17b8:	80 93 f4 05 	sts	0x05F4, r24
    17bc:	90 93 f5 05 	sts	0x05F5, r25
    17c0:	a0 93 f6 05 	sts	0x05F6, r26
    17c4:	b0 93 f7 05 	sts	0x05F7, r27
    17c8:	26 c0       	rjmp	.+76     	; 0x1816 <refreshDisplay+0x5f2>
						break;
						
						default:
						break;
					}
					ui_counter++;
    17ca:	2f 5f       	subi	r18, 0xFF	; 255
					ui_counter = (ui_counter>=4) ? 0 : ui_counter;
    17cc:	24 30       	cpi	r18, 0x04	; 4
    17ce:	08 f0       	brcs	.+2      	; 0x17d2 <refreshDisplay+0x5ae>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	20 93 59 05 	sts	0x0559, r18
				break;
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <refreshDisplay+0x5bc>
				
				default:
					uart_puts("default error in UI case!\n");
    17d8:	86 eb       	ldi	r24, 0xB6	; 182
    17da:	93 e0       	ldi	r25, 0x03	; 3
    17dc:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
			if (UI.shownorth)		/* Add north to display */
			{
				//????writeBuffer(1-(rotation_deg/DEGREE_PER_PIXEL), BLUE, TRUE);
			}
			
			if (UI.showdistance)	/* Add distance (KM's) to display */
    17e0:	80 91 00 06 	lds	r24, 0x0600
    17e4:	88 23       	and	r24, r24
    17e6:	49 f0       	breq	.+18     	; 0x17fa <refreshDisplay+0x5d6>
			{
				/*for (uint8_t i = 2; i < (device.distance/PERCENT_PER_PIXEL)+1; i++) {
					writeBuffer(i, VIOLET, TRUE);
				}*/
				uart_puts("TODO SHOW UI DISTANCE\n");	
    17e8:	81 ed       	ldi	r24, 0xD1	; 209
    17ea:	93 e0       	ldi	r25, 0x03	; 3
    17ec:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <refreshDisplay+0x5d6>
			}
		break;
		
		default:
		uart_puts("UNKNOWN status!\n");
    17f2:	88 ee       	ldi	r24, 0xE8	; 232
    17f4:	93 e0       	ldi	r25, 0x03	; 3
    17f6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		uart_puts(" calc rotation = ");
		print_int(rotation_deg,1);*/
		// 45 = 0 + 45
		// 165 = 120 + 45
		// 400 (wanted = ) = 355 + 45
		writeFrame(rotation_deg, 0);	/* Write buffer to display */
    17fa:	60 e0       	ldi	r22, 0x00	; 0
    17fc:	70 e0       	ldi	r23, 0x00	; 0
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 2b 08 	call	0x1056	; 0x1056 <writeFrame>
		UI.refresh = FALSE;
    1804:	10 92 f8 05 	sts	0x05F8, r1
    1808:	08 c0       	rjmp	.+16     	; 0x181a <refreshDisplay+0x5f6>
					device.buttonaction = SHORT_PRESS;	/* short press action */
					//uart_puts("Short press action\n");
				}
				if (button_counter>6)
				{
					device.buttonaction = MIDDLE_PRESS;	/* Middle press action */
    180a:	82 e0       	ldi	r24, 0x02	; 2
    180c:	80 93 21 06 	sts	0x0621, r24
    1810:	8d cd       	rjmp	.-1254   	; 0x132c <refreshDisplay+0x108>
						break;
						
						default:
						break;
					}
					ui_counter++;
    1812:	2f 5f       	subi	r18, 0xFF	; 255
    1814:	5b cf       	rjmp	.-330    	; 0x16cc <refreshDisplay+0x4a8>
						break;
						
						default:
						break;
					}
					ui_counter++;
    1816:	2f 5f       	subi	r18, 0xFF	; 255
    1818:	dc cf       	rjmp	.-72     	; 0x17d2 <refreshDisplay+0x5ae>
		// 45 = 0 + 45
		// 165 = 120 + 45
		// 400 (wanted = ) = 355 + 45
		writeFrame(rotation_deg, 0);	/* Write buffer to display */
		UI.refresh = FALSE;
}
    181a:	df 91       	pop	r29
    181c:	cf 91       	pop	r28
    181e:	1f 91       	pop	r17
    1820:	0f 91       	pop	r16
    1822:	ff 90       	pop	r15
    1824:	ef 90       	pop	r14
    1826:	df 90       	pop	r13
    1828:	cf 90       	pop	r12
    182a:	bf 90       	pop	r11
    182c:	af 90       	pop	r10
    182e:	9f 90       	pop	r9
    1830:	8f 90       	pop	r8
    1832:	08 95       	ret

00001834 <vibrate>:

void vibrate(uint8_t status)
{
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
	uint8_t i;
	
	switch (status)
    1838:	81 30       	cpi	r24, 0x01	; 1
    183a:	31 f0       	breq	.+12     	; 0x1848 <vibrate+0x14>
    183c:	38 f0       	brcs	.+14     	; 0x184c <vibrate+0x18>
    183e:	82 30       	cpi	r24, 0x02	; 2
    1840:	41 f0       	breq	.+16     	; 0x1852 <vibrate+0x1e>
    1842:	83 30       	cpi	r24, 0x03	; 3
    1844:	a9 f0       	breq	.+42     	; 0x1870 <vibrate+0x3c>
    1846:	22 c0       	rjmp	.+68     	; 0x188c <vibrate+0x58>
	{
		case VIBRATE_ON:
			PWR_OFF;
    1848:	5e 98       	cbi	0x0b, 6	; 11
		break;
    184a:	20 c0       	rjmp	.+64     	; 0x188c <vibrate+0x58>
		
		case VIBRATE_OFF:
			PWR_ON;
    184c:	80 e4       	ldi	r24, 0x40	; 64
    184e:	8b b9       	out	0x0b, r24	; 11
		break;
    1850:	1d c0       	rjmp	.+58     	; 0x188c <vibrate+0x58>

void vibrate(uint8_t status)
{
	uint8_t i;
	
	switch (status)
    1852:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		
		case VIBRATE_SHORT:
			for(i=0; i<3; i++)
			{
				PWR_ON;
    1854:	d0 e4       	ldi	r29, 0x40	; 64
    1856:	db b9       	out	0x0b, r29	; 11
				delay(500);
    1858:	84 ef       	ldi	r24, 0xF4	; 244
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
				PWR_OFF;
    1860:	5e 98       	cbi	0x0b, 6	; 11
				delay(500);
    1862:	84 ef       	ldi	r24, 0xF4	; 244
    1864:	91 e0       	ldi	r25, 0x01	; 1
    1866:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
    186a:	c1 50       	subi	r28, 0x01	; 1
		case VIBRATE_OFF:
			PWR_ON;
		break;
		
		case VIBRATE_SHORT:
			for(i=0; i<3; i++)
    186c:	a1 f7       	brne	.-24     	; 0x1856 <vibrate+0x22>
    186e:	0e c0       	rjmp	.+28     	; 0x188c <vibrate+0x58>

void vibrate(uint8_t status)
{
	uint8_t i;
	
	switch (status)
    1870:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		
		case VIBRATE_LONG:
		for(i=0; i<3; i++)
			{
				PWR_ON;
    1872:	d0 e4       	ldi	r29, 0x40	; 64
    1874:	db b9       	out	0x0b, r29	; 11
				delay(1000);
    1876:	88 ee       	ldi	r24, 0xE8	; 232
    1878:	93 e0       	ldi	r25, 0x03	; 3
    187a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
				PWR_OFF;
    187e:	5e 98       	cbi	0x0b, 6	; 11
				delay(500);
    1880:	84 ef       	ldi	r24, 0xF4	; 244
    1882:	91 e0       	ldi	r25, 0x01	; 1
    1884:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
    1888:	c1 50       	subi	r28, 0x01	; 1
				delay(500);
			}
		break;
		
		case VIBRATE_LONG:
		for(i=0; i<3; i++)
    188a:	a1 f7       	brne	.-24     	; 0x1874 <vibrate+0x40>
		break;
		
		default:
		break;
	}
}
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret

00001892 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    1892:	9b 01       	movw	r18, r22
    1894:	22 0f       	add	r18, r18
    1896:	33 1f       	adc	r19, r19
    1898:	62 0f       	add	r22, r18
    189a:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    189c:	20 9a       	sbi	0x04, 0	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
    189e:	35 b1       	in	r19, 0x05	; 5
    18a0:	3e 7f       	andi	r19, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
    18a2:	45 b1       	in	r20, 0x05	; 5
    18a4:	41 60       	ori	r20, 0x01	; 1
  
  sreg_prev=SREG;
    18a6:	af b7       	in	r26, 0x3f	; 63
  cli();  
    18a8:	f8 94       	cli

  while (datlen--) {
    18aa:	61 15       	cp	r22, r1
    18ac:	71 05       	cpc	r23, r1
    18ae:	89 f0       	breq	.+34     	; 0x18d2 <loop56+0x18>
    18b0:	fc 01       	movw	r30, r24
    18b2:	86 0f       	add	r24, r22
    18b4:	97 1f       	adc	r25, r23
    curbyte=*data++;
    18b6:	21 91       	ld	r18, Z+
    
    asm volatile(
    18b8:	58 e0       	ldi	r21, 0x08	; 8

000018ba <loop56>:
    18ba:	45 b9       	out	0x05, r20	; 5
    18bc:	27 ff       	sbrs	r18, 7
    18be:	35 b9       	out	0x05, r19	; 5
    18c0:	22 0f       	add	r18, r18
    18c2:	00 00       	nop
    18c4:	00 c0       	rjmp	.+0      	; 0x18c6 <loop56+0xc>
    18c6:	35 b9       	out	0x05, r19	; 5
    18c8:	5a 95       	dec	r21
    18ca:	b9 f7       	brne	.-18     	; 0x18ba <loop56>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    18cc:	e8 17       	cp	r30, r24
    18ce:	f9 07       	cpc	r31, r25
    18d0:	91 f7       	brne	.-28     	; 0x18b6 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    18d2:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18d4:	85 e8       	ldi	r24, 0x85	; 133
    18d6:	8a 95       	dec	r24
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <loop56+0x1c>
    18da:	00 00       	nop
    18dc:	08 95       	ret

000018de <__vector_14>:
double mx = 0;
double my = 0;
double mz = 0;*/

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
    18de:	1f 92       	push	r1
    18e0:	0f 92       	push	r0
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	0f 92       	push	r0
    18e6:	11 24       	eor	r1, r1
    18e8:	8f 93       	push	r24
	volatile static uint8_t refresh_counter;
	refresh_counter++;
    18ea:	80 91 5e 05 	lds	r24, 0x055E
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	80 93 5e 05 	sts	0x055E, r24
	if (refresh_counter>=(DISPLAY_REFRESH_MS/INTERRUPT_DISPLAY_MS))
    18f4:	80 91 5e 05 	lds	r24, 0x055E
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	28 f0       	brcs	.+10     	; 0x1906 <__vector_14+0x28>
	{
		UI.refresh = TRUE;
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	80 93 f8 05 	sts	0x05F8, r24
		refresh_counter = 0;
    1902:	10 92 5e 05 	sts	0x055E, r1
		//TEST_TOGGLE;
	}
}
    1906:	8f 91       	pop	r24
    1908:	0f 90       	pop	r0
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	0f 90       	pop	r0
    190e:	1f 90       	pop	r1
    1910:	18 95       	reti

00001912 <init_io>:
	//DDRC &= ~(1 << PORTC4) | (1 << PORTC5);
	//PORTC = (1 << PORTC4) | (1 << PORTC5); // enable pull-ups on SDA and SCL, respectively
	
	//PWR_ON_INIT;				// Init power on pin
	
	SW_PIN_DDR &= ~(1<<SW_PIN);	// Buttons/switches as input
    1912:	57 98       	cbi	0x0a, 7	; 10
	SW_PIN_PORT |= (1<<SW_PIN);	// With pullups on
    1914:	5f 9a       	sbi	0x0b, 7	; 11
	
	CHARGE_ST_DDR &= ~(1<<CHARGE_ST_PIN);	// Charge status pin as input
    1916:	3a 98       	cbi	0x07, 2	; 7
	
	DDRC |= (1<<TEST_PIN);	// Init test pin as output
    1918:	3b 9a       	sbi	0x07, 3	; 7
	DDRB |= (1<<0);	// PB0 AS OUTPUT
    191a:	20 9a       	sbi	0x04, 0	; 4
	BATT_PWR_INIT;	// Leds as output
    191c:	39 9a       	sbi	0x07, 1	; 7
	BATT_PWR_OFF;	// Leds off
    191e:	82 e0       	ldi	r24, 0x02	; 2
    1920:	88 b9       	out	0x08, r24	; 8
    1922:	08 95       	ret

00001924 <init_int>:
void init_int(void)
{
	//OCRn =  [ (clock_speed / Prescaler_value) * Desired_time_in_Seconds ] - 1
	
	//print_int((((F_CPU/1024)*(DISPLAY_REFRESH_MS/1000))-1),TRUE);
	TCCR0A |= (1 << WGM01);		// Set the Timer Mode to CTC
    1924:	84 b5       	in	r24, 0x24	; 36
    1926:	82 60       	ori	r24, 0x02	; 2
    1928:	84 bd       	out	0x24, r24	; 36
	//OCR0A = 125;				// Set the value that you want to count to 16ms
	OCR0A = (((((F_CPU/1024)*INTERRUPT_DISPLAY_MS)/1000))-1);
    192a:	88 ef       	ldi	r24, 0xF8	; 248
    192c:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);			//Set the ISR COMPA vect
    192e:	ee e6       	ldi	r30, 0x6E	; 110
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	82 60       	ori	r24, 0x02	; 2
    1936:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS00)|(1<<CS02);	// set prescaler to 1024 and start the timer
    1938:	85 b5       	in	r24, 0x25	; 37
    193a:	85 60       	ori	r24, 0x05	; 5
    193c:	85 bd       	out	0x25, r24	; 37
	sei();								//enable global interrupts
    193e:	78 94       	sei
    1940:	08 95       	ret

00001942 <init_adc>:
}

void init_adc(void)
{
	ADMUX |= (1<<REFS0);						/* Select Vref=AVcc */
    1942:	ec e7       	ldi	r30, 0x7C	; 124
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	80 64       	ori	r24, 0x40	; 64
    194a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	/* set prescaller to 128  */
    194c:	ea e7       	ldi	r30, 0x7A	; 122
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	87 60       	ori	r24, 0x07	; 7
    1954:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN);						/* Enable ADC */
    1956:	80 81       	ld	r24, Z
    1958:	80 68       	ori	r24, 0x80	; 128
    195a:	80 83       	st	Z, r24
    195c:	08 95       	ret

0000195e <read_adc>:
	* the binary representations of the numbers of the pins so we can
	* just 'OR' the pin's number with ADMUX to select that pin.
	* We first zero the four bits by setting ADMUX equal to its higher
	* four bits. */
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (adcx & 0x0F);
    195e:	ec e7       	ldi	r30, 0x7C	; 124
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	90 81       	ld	r25, Z
    1964:	8f 70       	andi	r24, 0x0F	; 15
    1966:	90 7f       	andi	r25, 0xF0	; 240
    1968:	98 2b       	or	r25, r24
    196a:	90 83       	st	Z, r25
	
	/* This starts the conversion. */
	//single conversion mode
	ADCSRA |= (1<<ADSC);
    196c:	ea e7       	ldi	r30, 0x7A	; 122
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	80 81       	ld	r24, Z
    1972:	80 64       	ori	r24, 0x40	; 64
    1974:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while( ADCSRA & (1<<ADSC) );
    1976:	80 81       	ld	r24, Z
    1978:	86 fd       	sbrc	r24, 6
    197a:	fd cf       	rjmp	.-6      	; 0x1976 <read_adc+0x18>
	
	/* Finally, we return the converted value to the calling function. */
	return ADC;
    197c:	80 91 78 00 	lds	r24, 0x0078
    1980:	90 91 79 00 	lds	r25, 0x0079
}
    1984:	08 95       	ret

00001986 <do_button_action>:
	uart_puts(" Y = "); print_float(my, 0);
	uart_puts(" Z = "); print_float(mz, 1);
}*/

void do_button_action(void)
{
    1986:	cf 92       	push	r12
    1988:	df 92       	push	r13
    198a:	ef 92       	push	r14
    198c:	ff 92       	push	r15
    198e:	0f 93       	push	r16
	switch (device.buttonaction)
    1990:	80 91 21 06 	lds	r24, 0x0621
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	b1 f0       	breq	.+44     	; 0x19c4 <do_button_action+0x3e>
    1998:	83 30       	cpi	r24, 0x03	; 3
    199a:	21 f1       	breq	.+72     	; 0x19e4 <do_button_action+0x5e>
    199c:	81 30       	cpi	r24, 0x01	; 1
    199e:	09 f0       	breq	.+2      	; 0x19a2 <do_button_action+0x1c>
    19a0:	56 c0       	rjmp	.+172    	; 0x1a4e <do_button_action+0xc8>
	{
		case SHORT_PRESS:	// Minus
			if (UI.displaymode>0)
    19a2:	80 91 f9 05 	lds	r24, 0x05F9
    19a6:	88 23       	and	r24, r24
    19a8:	19 f0       	breq	.+6      	; 0x19b0 <do_button_action+0x2a>
			{
				UI.displaymode--;
    19aa:	81 50       	subi	r24, 0x01	; 1
    19ac:	80 93 f9 05 	sts	0x05F9, r24
			}
			
			if (debug_on)
    19b0:	80 91 56 05 	lds	r24, 0x0556
    19b4:	88 23       	and	r24, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <do_button_action+0x34>
    19b8:	4e c0       	rjmp	.+156    	; 0x1a56 <do_button_action+0xd0>
			{uart_puts("Short press action executed\n");}
    19ba:	89 ef       	ldi	r24, 0xF9	; 249
    19bc:	93 e0       	ldi	r25, 0x03	; 3
    19be:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
    19c2:	49 c0       	rjmp	.+146    	; 0x1a56 <do_button_action+0xd0>
		break;
		
		case MIDDLE_PRESS:	// Plus
			if (UI.displaymode<7)
    19c4:	80 91 f9 05 	lds	r24, 0x05F9
    19c8:	87 30       	cpi	r24, 0x07	; 7
    19ca:	18 f4       	brcc	.+6      	; 0x19d2 <do_button_action+0x4c>
			{
				UI.displaymode++;
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	80 93 f9 05 	sts	0x05F9, r24
			}
			
			if (debug_on)
    19d2:	80 91 56 05 	lds	r24, 0x0556
    19d6:	88 23       	and	r24, r24
    19d8:	f1 f1       	breq	.+124    	; 0x1a56 <do_button_action+0xd0>
			{uart_puts("Middle press action executed\n");}
    19da:	86 e1       	ldi	r24, 0x16	; 22
    19dc:	94 e0       	ldi	r25, 0x04	; 4
    19de:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
    19e2:	39 c0       	rjmp	.+114    	; 0x1a56 <do_button_action+0xd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19e4:	2f e7       	ldi	r18, 0x7F	; 127
    19e6:	8f e4       	ldi	r24, 0x4F	; 79
    19e8:	92 e1       	ldi	r25, 0x12	; 18
    19ea:	21 50       	subi	r18, 0x01	; 1
    19ec:	80 40       	sbci	r24, 0x00	; 0
    19ee:	90 40       	sbci	r25, 0x00	; 0
    19f0:	e1 f7       	brne	.-8      	; 0x19ea <do_button_action+0x64>
    19f2:	00 c0       	rjmp	.+0      	; 0x19f4 <do_button_action+0x6e>
    19f4:	00 00       	nop
		break;
		
		case LONG_PRESS:
			_delay_ms(750);
			clearLeds();
    19f6:	0e 94 a3 08 	call	0x1146	; 0x1146 <clearLeds>
    19fa:	2f e7       	ldi	r18, 0x7F	; 127
    19fc:	8a e1       	ldi	r24, 0x1A	; 26
    19fe:	96 e0       	ldi	r25, 0x06	; 6
    1a00:	21 50       	subi	r18, 0x01	; 1
    1a02:	80 40       	sbci	r24, 0x00	; 0
    1a04:	90 40       	sbci	r25, 0x00	; 0
    1a06:	e1 f7       	brne	.-8      	; 0x1a00 <do_button_action+0x7a>
    1a08:	00 c0       	rjmp	.+0      	; 0x1a0a <do_button_action+0x84>
    1a0a:	00 00       	nop
			_delay_ms(250);
			setLedPercentage(read_battery(),MULTIPLE,GREEN,100);	/* Do something*/
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	6f ef       	ldi	r22, 0xFF	; 255
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	0e 94 8d 08 	call	0x111a	; 0x111a <Color>
    1a16:	6b 01       	movw	r12, r22
    1a18:	7c 01       	movw	r14, r24
    1a1a:	0e 94 a9 01 	call	0x352	; 0x352 <read_battery>
    1a1e:	04 e6       	ldi	r16, 0x64	; 100
    1a20:	a7 01       	movw	r20, r14
    1a22:	96 01       	movw	r18, r12
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	0e 94 c3 08 	call	0x1186	; 0x1186 <setLedPercentage>
    1a2a:	2f e7       	ldi	r18, 0x7F	; 127
    1a2c:	8f e4       	ldi	r24, 0x4F	; 79
    1a2e:	92 e1       	ldi	r25, 0x12	; 18
    1a30:	21 50       	subi	r18, 0x01	; 1
    1a32:	80 40       	sbci	r24, 0x00	; 0
    1a34:	90 40       	sbci	r25, 0x00	; 0
    1a36:	e1 f7       	brne	.-8      	; 0x1a30 <do_button_action+0xaa>
    1a38:	00 c0       	rjmp	.+0      	; 0x1a3a <do_button_action+0xb4>
    1a3a:	00 00       	nop
			_delay_ms(750);
			
			if (debug_on)
    1a3c:	80 91 56 05 	lds	r24, 0x0556
    1a40:	88 23       	and	r24, r24
    1a42:	49 f0       	breq	.+18     	; 0x1a56 <do_button_action+0xd0>
			{uart_puts("Long press action executed\n");}	
    1a44:	84 e3       	ldi	r24, 0x34	; 52
    1a46:	94 e0       	ldi	r25, 0x04	; 4
    1a48:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
    1a4c:	04 c0       	rjmp	.+8      	; 0x1a56 <do_button_action+0xd0>
		break;
		
		default:
			uart_puts("Error in button press! (fix!)\n");
    1a4e:	80 e5       	ldi	r24, 0x50	; 80
    1a50:	94 e0       	ldi	r25, 0x04	; 4
    1a52:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		break;
	}
	device.buttonaction = FALSE;
    1a56:	10 92 21 06 	sts	0x0621, r1
}
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	08 95       	ret

00001a66 <filtered_compass_reading>:
		break;
	}
}

uint16_t filtered_compass_reading(uint16_t heading_current)
{
    1a66:	ef 92       	push	r14
    1a68:	ff 92       	push	r15
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	7c 01       	movw	r14, r24
	int16_t heading_new = get_heading_avg(10);
    1a74:	8a e0       	ldi	r24, 0x0A	; 10
    1a76:	0e 94 ab 03 	call	0x756	; 0x756 <get_heading_avg>
    1a7a:	8c 01       	movw	r16, r24
	uint16_t difference = 0;
	static uint16_t error_counter = 0;
	int error = 0;
	
	// Calculate error
	error = heading_current - heading_new;
    1a7c:	e7 01       	movw	r28, r14
    1a7e:	c8 1b       	sub	r28, r24
    1a80:	d9 0b       	sbc	r29, r25
	if (error>180)
    1a82:	c5 3b       	cpi	r28, 0xB5	; 181
    1a84:	d1 05       	cpc	r29, r1
    1a86:	14 f0       	brlt	.+4      	; 0x1a8c <filtered_compass_reading+0x26>
	{
		error -= 360;	// for angles > 180 correct in the opposite direction
    1a88:	c8 56       	subi	r28, 0x68	; 104
    1a8a:	d1 40       	sbci	r29, 0x01	; 1
		{
			difference = (heading_current+360)-heading_new;
		}
	}*/
	
	if (debug_on)
    1a8c:	80 91 56 05 	lds	r24, 0x0556
    1a90:	88 23       	and	r24, r24
    1a92:	c9 f0       	breq	.+50     	; 0x1ac6 <filtered_compass_reading+0x60>
	{
		uart_puts("Current: ");
    1a94:	87 ec       	ldi	r24, 0xC7	; 199
    1a96:	94 e0       	ldi	r25, 0x04	; 4
    1a98:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		print_int(heading_current,FALSE);
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	c7 01       	movw	r24, r14
    1aa0:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
		uart_puts(" New: ");
    1aa4:	81 ed       	ldi	r24, 0xD1	; 209
    1aa6:	94 e0       	ldi	r25, 0x04	; 4
    1aa8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		print_int(heading_new,FALSE);
    1aac:	60 e0       	ldi	r22, 0x00	; 0
    1aae:	c8 01       	movw	r24, r16
    1ab0:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
		uart_puts(" Error: ");
    1ab4:	88 ed       	ldi	r24, 0xD8	; 216
    1ab6:	94 e0       	ldi	r25, 0x04	; 4
    1ab8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		print_int(difference,FALSE);
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
	}
	
	if ((error>SENSOR_THRESHOLD)&&(error_counter<ERROR_THRESHOLD_NR))
    1ac6:	cb 35       	cpi	r28, 0x5B	; 91
    1ac8:	d1 05       	cpc	r29, r1
    1aca:	d4 f0       	brlt	.+52     	; 0x1b00 <filtered_compass_reading+0x9a>
    1acc:	80 91 5c 05 	lds	r24, 0x055C
    1ad0:	90 91 5d 05 	lds	r25, 0x055D
    1ad4:	49 97       	sbiw	r24, 0x19	; 25
    1ad6:	a0 f4       	brcc	.+40     	; 0x1b00 <filtered_compass_reading+0x9a>
	{
		if (debug_on)
    1ad8:	80 91 56 05 	lds	r24, 0x0556
    1adc:	88 23       	and	r24, r24
    1ade:	21 f0       	breq	.+8      	; 0x1ae8 <filtered_compass_reading+0x82>
		{uart_puts(" Outlier!\n");}
    1ae0:	81 ee       	ldi	r24, 0xE1	; 225
    1ae2:	94 e0       	ldi	r25, 0x04	; 4
    1ae4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		error_counter++;
    1ae8:	80 91 5c 05 	lds	r24, 0x055C
    1aec:	90 91 5d 05 	lds	r25, 0x055D
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	90 93 5d 05 	sts	0x055D, r25
    1af6:	80 93 5c 05 	sts	0x055C, r24
		return (heading_current);	// data was an outlier	
    1afa:	8e 2d       	mov	r24, r14
    1afc:	9f 2d       	mov	r25, r15
    1afe:	0e c0       	rjmp	.+28     	; 0x1b1c <filtered_compass_reading+0xb6>
	}
	else
	{
		if (debug_on)
    1b00:	80 91 56 05 	lds	r24, 0x0556
    1b04:	88 23       	and	r24, r24
    1b06:	21 f0       	breq	.+8      	; 0x1b10 <filtered_compass_reading+0xaa>
		{uart_puts(" OK\n");}
    1b08:	8c ee       	ldi	r24, 0xEC	; 236
    1b0a:	94 e0       	ldi	r25, 0x04	; 4
    1b0c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		error_counter=0;
    1b10:	10 92 5d 05 	sts	0x055D, r1
    1b14:	10 92 5c 05 	sts	0x055C, r1
		return (heading_new);
    1b18:	80 2f       	mov	r24, r16
    1b1a:	91 2f       	mov	r25, r17
	}
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	08 95       	ret

00001b2a <load_eeprom_settings>:
	return heading_total;
}*/

void load_eeprom_settings(void)
{
	UI.brightness = eeprom_read_word(&eeprom_brightness);
    1b2a:	8a e0       	ldi	r24, 0x0A	; 10
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__eerd_word_m328p>
    1b32:	80 93 fa 05 	sts	0x05FA, r24
	UI.displaymode = eeprom_read_word(&eeprom_displaymode);
    1b36:	88 e0       	ldi	r24, 0x08	; 8
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__eerd_word_m328p>
    1b3e:	80 93 f9 05 	sts	0x05F9, r24
	UI.navigationcolor = eeprom_read_dword(&eeprom_navigationcolor);
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 d6 19 	call	0x33ac	; 0x33ac <__eerd_dword_m328p>
    1b4a:	60 93 fb 05 	sts	0x05FB, r22
    1b4e:	70 93 fc 05 	sts	0x05FC, r23
    1b52:	80 93 fd 05 	sts	0x05FD, r24
    1b56:	90 93 fe 05 	sts	0x05FE, r25
	UI.showdistance = eeprom_read_word(&eeprom_showdistance);
    1b5a:	86 e0       	ldi	r24, 0x06	; 6
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__eerd_word_m328p>
    1b62:	80 93 00 06 	sts	0x0600, r24
	UI.shownorth = eeprom_read_word(&eeprom_shownorth);
    1b66:	84 e0       	ldi	r24, 0x04	; 4
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__eerd_word_m328p>
    1b6e:	80 93 ff 05 	sts	0x05FF, r24
    1b72:	08 95       	ret

00001b74 <reset_factory_settings>:
}

void reset_factory_settings(void)
{
	setBrightness(45);				/* Set brightness of leds */
    1b74:	8d e2       	ldi	r24, 0x2D	; 45
    1b76:	0e 94 9c 08 	call	0x1138	; 0x1138 <setBrightness>
	setUIMode(NORMAL);				/* Set display modus */
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	0e 94 b6 08 	call	0x116c	; 0x116c <setUIMode>
	UI.navigationcolor = YELLOW;	/* Set color of navigation */
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	88 ec       	ldi	r24, 0xC8	; 200
    1b86:	0e 94 8d 08 	call	0x111a	; 0x111a <Color>
    1b8a:	60 93 fb 05 	sts	0x05FB, r22
    1b8e:	70 93 fc 05 	sts	0x05FC, r23
    1b92:	80 93 fd 05 	sts	0x05FD, r24
    1b96:	90 93 fe 05 	sts	0x05FE, r25
	UI.showdistance = FALSE;
    1b9a:	10 92 00 06 	sts	0x0600, r1
	UI.shownorth = FALSE;
    1b9e:	10 92 ff 05 	sts	0x05FF, r1
	
	/* Save values in EEPROM */
	eeprom_update_word(&eeprom_brightness, getBrightness());
    1ba2:	0e 94 a0 08 	call	0x1140	; 0x1140 <getBrightness>
    1ba6:	68 2f       	mov	r22, r24
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	8a e0       	ldi	r24, 0x0A	; 10
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__eeupd_word_m328p>
	eeprom_update_word(&eeprom_displaymode, getUIMode());
    1bb2:	0e 94 c0 08 	call	0x1180	; 0x1180 <getUIMode>
    1bb6:	68 2f       	mov	r22, r24
    1bb8:	70 e0       	ldi	r23, 0x00	; 0
    1bba:	88 e0       	ldi	r24, 0x08	; 8
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__eeupd_word_m328p>
	eeprom_update_dword(&eeprom_navigationcolor, YELLOW);	/* 32 bits! */
    1bc2:	40 e0       	ldi	r20, 0x00	; 0
    1bc4:	6f ef       	ldi	r22, 0xFF	; 255
    1bc6:	88 ec       	ldi	r24, 0xC8	; 200
    1bc8:	0e 94 8d 08 	call	0x111a	; 0x111a <Color>
    1bcc:	ab 01       	movw	r20, r22
    1bce:	bc 01       	movw	r22, r24
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <__eeupd_dword_m328p>
	eeprom_update_word(&eeprom_showdistance, FALSE);
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	86 e0       	ldi	r24, 0x06	; 6
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__eeupd_word_m328p>
	eeprom_update_word(&eeprom_shownorth, FALSE);
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__eeupd_word_m328p>
    1bf0:	08 95       	ret

00001bf2 <main>:
}

int main(void)
{
	//OSCCAL = OSCILLATOR_CAL_VAL;		/* Calibrate the internal oscillator*/
	init_io();			/* Init IO*/
    1bf2:	0e 94 89 0c 	call	0x1912	; 0x1912 <init_io>
	init_int();			/* Init int for resfresh display every x ms	*/
    1bf6:	0e 94 92 0c 	call	0x1924	; 0x1924 <init_int>
	init_adc();			/* Init ADC */
    1bfa:	0e 94 a1 0c 	call	0x1942	; 0x1942 <init_adc>
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Init Uart */
    1bfe:	83 e3       	ldi	r24, 0x33	; 51
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <uart_init>
	sei();						/* Enable global interrupts for uart*/
    1c06:	78 94       	sei
	
	//init_bluetooth();			/* Setup the bluetooth device (1 time only)	*/
	init_lsm303();				/* Init the acc/mag sensor				*/
    1c08:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <init_lsm303>
    1c0c:	c3 e0       	ldi	r28, 0x03	; 3
	
	for(uint8_t i=0; i<3; i++)
	{
		PWR_ON;
    1c0e:	d0 e4       	ldi	r29, 0x40	; 64
    1c10:	db b9       	out	0x0b, r29	; 11
		delay(750);
    1c12:	8e ee       	ldi	r24, 0xEE	; 238
    1c14:	92 e0       	ldi	r25, 0x02	; 2
    1c16:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
		PWR_OFF;
    1c1a:	5e 98       	cbi	0x0b, 6	; 11
		delay(250);
    1c1c:	8a ef       	ldi	r24, 0xFA	; 250
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <delay>
    1c24:	c1 50       	subi	r28, 0x01	; 1
	sei();						/* Enable global interrupts for uart*/
	
	//init_bluetooth();			/* Setup the bluetooth device (1 time only)	*/
	init_lsm303();				/* Init the acc/mag sensor				*/
	
	for(uint8_t i=0; i<3; i++)
    1c26:	a1 f7       	brne	.-24     	; 0x1c10 <main+0x1e>
		PWR_OFF;
		delay(250);
	}
	
	/* Set initial values of device */
	device.status = NO_CONNECTION;	/* Start condition */
    1c28:	83 e0       	ldi	r24, 0x03	; 3
    1c2a:	80 93 24 06 	sts	0x0624, r24
	device.previousstatus = NO_CONNECTION;
    1c2e:	80 93 23 06 	sts	0x0623, r24
	device.compass = get_heading_avg(10);	/* Get initial value */
    1c32:	8a e0       	ldi	r24, 0x0A	; 10
    1c34:	0e 94 ab 03 	call	0x756	; 0x756 <get_heading_avg>
    1c38:	bc 01       	movw	r22, r24
    1c3a:	88 27       	eor	r24, r24
    1c3c:	77 fd       	sbrc	r23, 7
    1c3e:	80 95       	com	r24
    1c40:	98 2f       	mov	r25, r24
    1c42:	0e 94 b0 15 	call	0x2b60	; 0x2b60 <__floatsisf>
    1c46:	60 93 11 06 	sts	0x0611, r22
    1c4a:	70 93 12 06 	sts	0x0612, r23
    1c4e:	80 93 13 06 	sts	0x0613, r24
    1c52:	90 93 14 06 	sts	0x0614, r25
	
	if(eeprom_read_word(&eeprom_first_startup))
    1c56:	8c e0       	ldi	r24, 0x0C	; 12
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__eerd_word_m328p>
    1c5e:	89 2b       	or	r24, r25
    1c60:	61 f0       	breq	.+24     	; 0x1c7a <main+0x88>
	{
		eeprom_update_word(&eeprom_first_startup, FALSE);
    1c62:	60 e0       	ldi	r22, 0x00	; 0
    1c64:	70 e0       	ldi	r23, 0x00	; 0
    1c66:	8c e0       	ldi	r24, 0x0C	; 12
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 ee 19 	call	0x33dc	; 0x33dc <__eeupd_word_m328p>
		reset_factory_settings();	/* Set device to initial values*/
    1c6e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <reset_factory_settings>
		uart_puts("First time startup, doing factory presets\n");
    1c72:	81 ef       	ldi	r24, 0xF1	; 241
    1c74:	94 e0       	ldi	r25, 0x04	; 4
    1c76:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	}
	
	/* Load initial values of device */	
	load_eeprom_settings();		/* Load program settings from EEPROM	*/
    1c7a:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <load_eeprom_settings>
	
	/* Now the device is ready! */
	uart_puts("BikeNav 2017 V");		/* Print version number					*/
    1c7e:	8c e1       	ldi	r24, 0x1C	; 28
    1c80:	95 e0       	ldi	r25, 0x05	; 5
    1c82:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	print_float(VERSION,1);
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	60 e0       	ldi	r22, 0x00	; 0
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	80 e8       	ldi	r24, 0x80	; 128
    1c8e:	9f e3       	ldi	r25, 0x3F	; 63
    1c90:	0e 94 bc 05 	call	0xb78	; 0xb78 <print_float>

	UI.navigationcolor = YELLOW;	/* Set color of navigation */
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	6f ef       	ldi	r22, 0xFF	; 255
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	0e 94 8d 08 	call	0x111a	; 0x111a <Color>
    1c9e:	60 93 fb 05 	sts	0x05FB, r22
    1ca2:	70 93 fc 05 	sts	0x05FC, r23
    1ca6:	80 93 fd 05 	sts	0x05FD, r24
    1caa:	90 93 fe 05 	sts	0x05FE, r25
	clearLeds();					/* Clear leds */
    1cae:	0e 94 a3 08 	call	0x1146	; 0x1146 <clearLeds>
	
	device.battery = read_battery();
    1cb2:	0e 94 a9 01 	call	0x352	; 0x352 <read_battery>
    1cb6:	cd e1       	ldi	r28, 0x1D	; 29
    1cb8:	d6 e0       	ldi	r29, 0x06	; 6
    1cba:	88 83       	st	Y, r24
	uart_puts("Battery = ");
    1cbc:	80 eb       	ldi	r24, 0xB0	; 176
    1cbe:	91 e0       	ldi	r25, 0x01	; 1
    1cc0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	print_int(device.battery,0);
    1cc4:	88 81       	ld	r24, Y
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
	uart_puts("%\n");
    1cce:	8b eb       	ldi	r24, 0xBB	; 187
    1cd0:	91 e0       	ldi	r25, 0x01	; 1
    1cd2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	//setLedPercentage(device.battery,MULTIPLE,GREEN,100);	/* Show battery percentage on display */
	//_delay_ms(750);	
	clearLeds();					/* Clear leds */
    1cd6:	0e 94 a3 08 	call	0x1146	; 0x1146 <clearLeds>
	
	device.temperature = get_temp();
    1cda:	0e 94 0f 05 	call	0xa1e	; 0xa1e <get_temp>
    1cde:	ce e1       	ldi	r28, 0x1E	; 30
    1ce0:	d6 e0       	ldi	r29, 0x06	; 6
    1ce2:	88 83       	st	Y, r24
	uart_puts("Temperature = ");
    1ce4:	86 e9       	ldi	r24, 0x96	; 150
    1ce6:	92 e0       	ldi	r25, 0x02	; 2
    1ce8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	print_int(device.temperature,0);
    1cec:	88 81       	ld	r24, Y
    1cee:	60 e0       	ldi	r22, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 96 05 	call	0xb2c	; 0xb2c <print_int>
	uart_puts(" deg. C.\n");
    1cf6:	85 ea       	ldi	r24, 0xA5	; 165
    1cf8:	92 e0       	ldi	r25, 0x02	; 2
    1cfa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
	//setLedValue(device.temperature,100);
	//_delay_ms(750);		/* Wait for the user to be able to see the battery percentage */
	
	
	uart_puts("TODO: FIX UART receive coordinates!!\n");
    1cfe:	8b e2       	ldi	r24, 0x2B	; 43
    1d00:	95 e0       	ldi	r25, 0x05	; 5
    1d02:	0e 94 76 0f 	call	0x1eec	; 0x1eec <uart_puts>
		//TEST_TOGGLE;
		//process_serial();							/* Check for serial messages */	
		
		//device.compass = rollingAverage(get_heading_avg(10));	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);
		device.compass = filtered_compass_reading(device.compass); // Has a threshold for new compass sensor data
    1d06:	c1 e1       	ldi	r28, 0x11	; 17
    1d08:	d6 e0       	ldi	r29, 0x06	; 6
		//device.compass = rollingAverage(device.compass);	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);		/* get compass values (north) */
		
		
		if (UI.refresh)	// Refresh display
    1d0a:	0f 2e       	mov	r0, r31
    1d0c:	f8 ef       	ldi	r31, 0xF8	; 248
    1d0e:	ef 2e       	mov	r14, r31
    1d10:	f5 e0       	ldi	r31, 0x05	; 5
    1d12:	ff 2e       	mov	r15, r31
    1d14:	f0 2d       	mov	r31, r0
		{
			check_device_status();						/* Check status of device for time-out's and button etc. */
			refreshDisplay(device.compass, device.heading, device.status);	
    1d16:	0f 2e       	mov	r0, r31
    1d18:	f4 e2       	ldi	r31, 0x24	; 36
    1d1a:	af 2e       	mov	r10, r31
    1d1c:	f6 e0       	ldi	r31, 0x06	; 6
    1d1e:	bf 2e       	mov	r11, r31
    1d20:	f0 2d       	mov	r31, r0
    1d22:	0f 2e       	mov	r0, r31
    1d24:	f5 e1       	ldi	r31, 0x15	; 21
    1d26:	cf 2e       	mov	r12, r31
    1d28:	f6 e0       	ldi	r31, 0x06	; 6
    1d2a:	df 2e       	mov	r13, r31
    1d2c:	f0 2d       	mov	r31, r0
		}
		
		//print_status();
		if (device.buttonaction)	// button action active
    1d2e:	01 e2       	ldi	r16, 0x21	; 33
    1d30:	16 e0       	ldi	r17, 0x06	; 6
	while(1)
	{	
		
		//if (command_ready == TRUE) {
			//copy_command();
			get_serial();
    1d32:	0e 94 9f 07 	call	0xf3e	; 0xf3e <get_serial>
			if (command_ready)
    1d36:	80 91 ee 06 	lds	r24, 0x06EE
		//TEST_TOGGLE;
		//process_serial();							/* Check for serial messages */	
		
		//device.compass = rollingAverage(get_heading_avg(10));	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);
		device.compass = filtered_compass_reading(device.compass); // Has a threshold for new compass sensor data
    1d3a:	68 81       	ld	r22, Y
    1d3c:	79 81       	ldd	r23, Y+1	; 0x01
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	9b 81       	ldd	r25, Y+3	; 0x03
    1d42:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__fixunssfsi>
    1d46:	cb 01       	movw	r24, r22
    1d48:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <filtered_compass_reading>
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__floatunsisf>
    1d56:	68 83       	st	Y, r22
    1d58:	79 83       	std	Y+1, r23	; 0x01
    1d5a:	8a 83       	std	Y+2, r24	; 0x02
    1d5c:	9b 83       	std	Y+3, r25	; 0x03
		//device.compass = rollingAverage(device.compass);	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);		/* get compass values (north) */
		
		
		if (UI.refresh)	// Refresh display
    1d5e:	f7 01       	movw	r30, r14
    1d60:	80 81       	ld	r24, Z
    1d62:	88 23       	and	r24, r24
    1d64:	c1 f0       	breq	.+48     	; 0x1d96 <main+0x1a4>
		{
			check_device_status();						/* Check status of device for time-out's and button etc. */
    1d66:	0e 94 45 01 	call	0x28a	; 0x28a <check_device_status>
			refreshDisplay(device.compass, device.heading, device.status);	
    1d6a:	f6 01       	movw	r30, r12
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__fixunssfsi>
    1d78:	2b 01       	movw	r4, r22
    1d7a:	3c 01       	movw	r6, r24
    1d7c:	68 81       	ld	r22, Y
    1d7e:	79 81       	ldd	r23, Y+1	; 0x01
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	0e 94 82 15 	call	0x2b04	; 0x2b04 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	f5 01       	movw	r30, r10
    1d8e:	40 81       	ld	r20, Z
    1d90:	b2 01       	movw	r22, r4
    1d92:	0e 94 12 09 	call	0x1224	; 0x1224 <refreshDisplay>
		}
		
		//print_status();
		if (device.buttonaction)	// button action active
    1d96:	f8 01       	movw	r30, r16
    1d98:	80 81       	ld	r24, Z
    1d9a:	81 11       	cpse	r24, r1
		{
			do_button_action();	
    1d9c:	0e 94 c3 0c 	call	0x1986	; 0x1986 <do_button_action>
    1da0:	8f ec       	ldi	r24, 0xCF	; 207
    1da2:	97 e0       	ldi	r25, 0x07	; 7
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <main+0x1b2>
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <main+0x1b8>
    1daa:	00 00       	nop
    1dac:	c2 cf       	rjmp	.-124    	; 0x1d32 <main+0x140>

00001dae <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1dae:	1f 92       	push	r1
    1db0:	0f 92       	push	r0
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	0f 92       	push	r0
    1db6:	11 24       	eor	r1, r1
    1db8:	2f 93       	push	r18
    1dba:	8f 93       	push	r24
    1dbc:	9f 93       	push	r25
    1dbe:	ef 93       	push	r30
    1dc0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1dc2:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    1dc6:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    1dca:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1dcc:	e0 91 61 05 	lds	r30, 0x0561
    1dd0:	ef 5f       	subi	r30, 0xFF	; 255
    1dd2:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
    1dd4:	90 91 60 05 	lds	r25, 0x0560
    1dd8:	e9 17       	cp	r30, r25
    1dda:	39 f0       	breq	.+14     	; 0x1dea <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    1ddc:	e0 93 61 05 	sts	0x0561, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	ec 59       	subi	r30, 0x9C	; 156
    1de4:	fa 4f       	sbci	r31, 0xFA	; 250
    1de6:	20 83       	st	Z, r18
    1de8:	01 c0       	rjmp	.+2      	; 0x1dec <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1dea:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    1dec:	90 91 5f 05 	lds	r25, 0x055F
    1df0:	89 2b       	or	r24, r25
    1df2:	80 93 5f 05 	sts	0x055F, r24
}
    1df6:	ff 91       	pop	r31
    1df8:	ef 91       	pop	r30
    1dfa:	9f 91       	pop	r25
    1dfc:	8f 91       	pop	r24
    1dfe:	2f 91       	pop	r18
    1e00:	0f 90       	pop	r0
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	0f 90       	pop	r0
    1e06:	1f 90       	pop	r1
    1e08:	18 95       	reti

00001e0a <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1e0a:	1f 92       	push	r1
    1e0c:	0f 92       	push	r0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	0f 92       	push	r0
    1e12:	11 24       	eor	r1, r1
    1e14:	8f 93       	push	r24
    1e16:	9f 93       	push	r25
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1e1c:	90 91 63 05 	lds	r25, 0x0563
    1e20:	80 91 62 05 	lds	r24, 0x0562
    1e24:	98 17       	cp	r25, r24
    1e26:	69 f0       	breq	.+26     	; 0x1e42 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    1e28:	e0 91 62 05 	lds	r30, 0x0562
    1e2c:	ef 5f       	subi	r30, 0xFF	; 255
    1e2e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    1e30:	e0 93 62 05 	sts	0x0562, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	ec 55       	subi	r30, 0x5C	; 92
    1e38:	fa 4f       	sbci	r31, 0xFA	; 250
    1e3a:	80 81       	ld	r24, Z
    1e3c:	80 93 c6 00 	sts	0x00C6, r24
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1e42:	e1 ec       	ldi	r30, 0xC1	; 193
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7d       	andi	r24, 0xDF	; 223
    1e4a:	80 83       	st	Z, r24
    }
}
    1e4c:	ff 91       	pop	r31
    1e4e:	ef 91       	pop	r30
    1e50:	9f 91       	pop	r25
    1e52:	8f 91       	pop	r24
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	0f 90       	pop	r0
    1e5a:	1f 90       	pop	r1
    1e5c:	18 95       	reti

00001e5e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1e5e:	10 92 63 05 	sts	0x0563, r1
    UART_TxTail = 0;
    1e62:	10 92 62 05 	sts	0x0562, r1
    UART_RxHead = 0;
    1e66:	10 92 61 05 	sts	0x0561, r1
    UART_RxTail = 0;
    1e6a:	10 92 60 05 	sts	0x0560, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    1e6e:	99 23       	and	r25, r25
    1e70:	24 f4       	brge	.+8      	; 0x1e7a <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    1e72:	22 e0       	ldi	r18, 0x02	; 2
    1e74:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    1e78:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    1e7a:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    1e7e:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    1e82:	88 e9       	ldi	r24, 0x98	; 152
    1e84:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    1e88:	86 e0       	ldi	r24, 0x06	; 6
    1e8a:	80 93 c2 00 	sts	0x00C2, r24
    1e8e:	08 95       	ret

00001e90 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1e90:	90 91 61 05 	lds	r25, 0x0561
    1e94:	80 91 60 05 	lds	r24, 0x0560
    1e98:	98 17       	cp	r25, r24
    1e9a:	81 f0       	breq	.+32     	; 0x1ebc <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1e9c:	e0 91 60 05 	lds	r30, 0x0560
    1ea0:	ef 5f       	subi	r30, 0xFF	; 255
    1ea2:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
    1ea4:	e0 93 60 05 	sts	0x0560, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	ec 59       	subi	r30, 0x9C	; 156
    1eac:	fa 4f       	sbci	r31, 0xFA	; 250
    1eae:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
    1eb0:	90 91 5f 05 	lds	r25, 0x055F
    UART_LastRxError = 0;
    1eb4:	10 92 5f 05 	sts	0x055F, r1
    return data;
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
    1ec0:	08 95       	ret

00001ec2 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1ec2:	20 91 63 05 	lds	r18, 0x0563
    1ec6:	2f 5f       	subi	r18, 0xFF	; 255
    1ec8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    1eca:	90 91 62 05 	lds	r25, 0x0562
    1ece:	29 17       	cp	r18, r25
    1ed0:	e1 f3       	breq	.-8      	; 0x1eca <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    1ed2:	e2 2f       	mov	r30, r18
    1ed4:	f0 e0       	ldi	r31, 0x00	; 0
    1ed6:	ec 55       	subi	r30, 0x5C	; 92
    1ed8:	fa 4f       	sbci	r31, 0xFA	; 250
    1eda:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1edc:	20 93 63 05 	sts	0x0563, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    1ee0:	e1 ec       	ldi	r30, 0xC1	; 193
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 62       	ori	r24, 0x20	; 32
    1ee8:	80 83       	st	Z, r24
    1eea:	08 95       	ret

00001eec <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1eec:	cf 93       	push	r28
    1eee:	df 93       	push	r29
    1ef0:	ec 01       	movw	r28, r24
    while (*s) 
    1ef2:	88 81       	ld	r24, Y
    1ef4:	88 23       	and	r24, r24
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <uart_puts+0x18>
    1ef8:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    1efa:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    1efe:	89 91       	ld	r24, Y+
    1f00:	81 11       	cpse	r24, r1
    1f02:	fb cf       	rjmp	.-10     	; 0x1efa <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	08 95       	ret

00001f0a <vector_cross>:
#include "vector.h"
#include <math.h>

void vector_cross(const vector *a, const vector *b, vector *out)
{
    1f0a:	af 92       	push	r10
    1f0c:	bf 92       	push	r11
    1f0e:	cf 92       	push	r12
    1f10:	df 92       	push	r13
    1f12:	ef 92       	push	r14
    1f14:	ff 92       	push	r15
    1f16:	0f 93       	push	r16
    1f18:	1f 93       	push	r17
    1f1a:	cf 93       	push	r28
    1f1c:	df 93       	push	r29
    1f1e:	ec 01       	movw	r28, r24
    1f20:	8b 01       	movw	r16, r22
    1f22:	5a 01       	movw	r10, r20
	out->x = a->y * b->z - a->z * b->y;
    1f24:	fb 01       	movw	r30, r22
    1f26:	20 85       	ldd	r18, Z+8	; 0x08
    1f28:	31 85       	ldd	r19, Z+9	; 0x09
    1f2a:	42 85       	ldd	r20, Z+10	; 0x0a
    1f2c:	53 85       	ldd	r21, Z+11	; 0x0b
    1f2e:	6c 81       	ldd	r22, Y+4	; 0x04
    1f30:	7d 81       	ldd	r23, Y+5	; 0x05
    1f32:	8e 81       	ldd	r24, Y+6	; 0x06
    1f34:	9f 81       	ldd	r25, Y+7	; 0x07
    1f36:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    1f3a:	6b 01       	movw	r12, r22
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	f8 01       	movw	r30, r16
    1f40:	24 81       	ldd	r18, Z+4	; 0x04
    1f42:	35 81       	ldd	r19, Z+5	; 0x05
    1f44:	46 81       	ldd	r20, Z+6	; 0x06
    1f46:	57 81       	ldd	r21, Z+7	; 0x07
    1f48:	68 85       	ldd	r22, Y+8	; 0x08
    1f4a:	79 85       	ldd	r23, Y+9	; 0x09
    1f4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f50:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    1f54:	9b 01       	movw	r18, r22
    1f56:	ac 01       	movw	r20, r24
    1f58:	c7 01       	movw	r24, r14
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
    1f60:	f5 01       	movw	r30, r10
    1f62:	60 83       	st	Z, r22
    1f64:	71 83       	std	Z+1, r23	; 0x01
    1f66:	82 83       	std	Z+2, r24	; 0x02
    1f68:	93 83       	std	Z+3, r25	; 0x03
	out->y = a->z * b->x - a->x * b->z;
    1f6a:	f8 01       	movw	r30, r16
    1f6c:	20 81       	ld	r18, Z
    1f6e:	31 81       	ldd	r19, Z+1	; 0x01
    1f70:	42 81       	ldd	r20, Z+2	; 0x02
    1f72:	53 81       	ldd	r21, Z+3	; 0x03
    1f74:	68 85       	ldd	r22, Y+8	; 0x08
    1f76:	79 85       	ldd	r23, Y+9	; 0x09
    1f78:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    1f80:	6b 01       	movw	r12, r22
    1f82:	7c 01       	movw	r14, r24
    1f84:	f8 01       	movw	r30, r16
    1f86:	20 85       	ldd	r18, Z+8	; 0x08
    1f88:	31 85       	ldd	r19, Z+9	; 0x09
    1f8a:	42 85       	ldd	r20, Z+10	; 0x0a
    1f8c:	53 85       	ldd	r21, Z+11	; 0x0b
    1f8e:	68 81       	ld	r22, Y
    1f90:	79 81       	ldd	r23, Y+1	; 0x01
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    1f9a:	9b 01       	movw	r18, r22
    1f9c:	ac 01       	movw	r20, r24
    1f9e:	c7 01       	movw	r24, r14
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
    1fa6:	f5 01       	movw	r30, r10
    1fa8:	64 83       	std	Z+4, r22	; 0x04
    1faa:	75 83       	std	Z+5, r23	; 0x05
    1fac:	86 83       	std	Z+6, r24	; 0x06
    1fae:	97 83       	std	Z+7, r25	; 0x07
	out->z = a->x * b->y - a->y * b->x;
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	24 81       	ldd	r18, Z+4	; 0x04
    1fb4:	35 81       	ldd	r19, Z+5	; 0x05
    1fb6:	46 81       	ldd	r20, Z+6	; 0x06
    1fb8:	57 81       	ldd	r21, Z+7	; 0x07
    1fba:	68 81       	ld	r22, Y
    1fbc:	79 81       	ldd	r23, Y+1	; 0x01
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc2:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    1fc6:	6b 01       	movw	r12, r22
    1fc8:	7c 01       	movw	r14, r24
    1fca:	f8 01       	movw	r30, r16
    1fcc:	20 81       	ld	r18, Z
    1fce:	31 81       	ldd	r19, Z+1	; 0x01
    1fd0:	42 81       	ldd	r20, Z+2	; 0x02
    1fd2:	53 81       	ldd	r21, Z+3	; 0x03
    1fd4:	6c 81       	ldd	r22, Y+4	; 0x04
    1fd6:	7d 81       	ldd	r23, Y+5	; 0x05
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    1fe0:	9b 01       	movw	r18, r22
    1fe2:	ac 01       	movw	r20, r24
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	b6 01       	movw	r22, r12
    1fe8:	0e 94 4a 14 	call	0x2894	; 0x2894 <__subsf3>
    1fec:	f5 01       	movw	r30, r10
    1fee:	60 87       	std	Z+8, r22	; 0x08
    1ff0:	71 87       	std	Z+9, r23	; 0x09
    1ff2:	82 87       	std	Z+10, r24	; 0x0a
    1ff4:	93 87       	std	Z+11, r25	; 0x0b
}
    1ff6:	df 91       	pop	r29
    1ff8:	cf 91       	pop	r28
    1ffa:	1f 91       	pop	r17
    1ffc:	0f 91       	pop	r16
    1ffe:	ff 90       	pop	r15
    2000:	ef 90       	pop	r14
    2002:	df 90       	pop	r13
    2004:	cf 90       	pop	r12
    2006:	bf 90       	pop	r11
    2008:	af 90       	pop	r10
    200a:	08 95       	ret

0000200c <vector_dot>:

float vector_dot(const vector *a, const vector *b)
{
    200c:	cf 92       	push	r12
    200e:	df 92       	push	r13
    2010:	ef 92       	push	r14
    2012:	ff 92       	push	r15
    2014:	0f 93       	push	r16
    2016:	1f 93       	push	r17
    2018:	cf 93       	push	r28
    201a:	df 93       	push	r29
    201c:	ec 01       	movw	r28, r24
    201e:	8b 01       	movw	r16, r22
  return a->x * b->x + a->y * b->y + a->z * b->z;
    2020:	fb 01       	movw	r30, r22
    2022:	20 81       	ld	r18, Z
    2024:	31 81       	ldd	r19, Z+1	; 0x01
    2026:	42 81       	ldd	r20, Z+2	; 0x02
    2028:	53 81       	ldd	r21, Z+3	; 0x03
    202a:	68 81       	ld	r22, Y
    202c:	79 81       	ldd	r23, Y+1	; 0x01
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	9b 81       	ldd	r25, Y+3	; 0x03
    2032:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    2036:	6b 01       	movw	r12, r22
    2038:	7c 01       	movw	r14, r24
    203a:	f8 01       	movw	r30, r16
    203c:	24 81       	ldd	r18, Z+4	; 0x04
    203e:	35 81       	ldd	r19, Z+5	; 0x05
    2040:	46 81       	ldd	r20, Z+6	; 0x06
    2042:	57 81       	ldd	r21, Z+7	; 0x07
    2044:	6c 81       	ldd	r22, Y+4	; 0x04
    2046:	7d 81       	ldd	r23, Y+5	; 0x05
    2048:	8e 81       	ldd	r24, Y+6	; 0x06
    204a:	9f 81       	ldd	r25, Y+7	; 0x07
    204c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    2050:	9b 01       	movw	r18, r22
    2052:	ac 01       	movw	r20, r24
    2054:	c7 01       	movw	r24, r14
    2056:	b6 01       	movw	r22, r12
    2058:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
    205c:	6b 01       	movw	r12, r22
    205e:	7c 01       	movw	r14, r24
    2060:	f8 01       	movw	r30, r16
    2062:	20 85       	ldd	r18, Z+8	; 0x08
    2064:	31 85       	ldd	r19, Z+9	; 0x09
    2066:	42 85       	ldd	r20, Z+10	; 0x0a
    2068:	53 85       	ldd	r21, Z+11	; 0x0b
    206a:	68 85       	ldd	r22, Y+8	; 0x08
    206c:	79 85       	ldd	r23, Y+9	; 0x09
    206e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2070:	9b 85       	ldd	r25, Y+11	; 0x0b
    2072:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    2076:	9b 01       	movw	r18, r22
    2078:	ac 01       	movw	r20, r24
    207a:	c7 01       	movw	r24, r14
    207c:	b6 01       	movw	r22, r12
    207e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__addsf3>
}
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	08 95       	ret

00002094 <vector_normalize>:

void vector_normalize(vector *a)
{
    2094:	cf 92       	push	r12
    2096:	df 92       	push	r13
    2098:	ef 92       	push	r14
    209a:	ff 92       	push	r15
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	ec 01       	movw	r28, r24
	float mag = sqrt(vector_dot(a, a));
    20a2:	bc 01       	movw	r22, r24
    20a4:	0e 94 06 10 	call	0x200c	; 0x200c <vector_dot>
    20a8:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <sqrt>
    20ac:	6b 01       	movw	r12, r22
    20ae:	7c 01       	movw	r14, r24
	a->x /= mag;
    20b0:	9b 01       	movw	r18, r22
    20b2:	ac 01       	movw	r20, r24
    20b4:	68 81       	ld	r22, Y
    20b6:	79 81       	ldd	r23, Y+1	; 0x01
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
    20c0:	68 83       	st	Y, r22
    20c2:	79 83       	std	Y+1, r23	; 0x01
    20c4:	8a 83       	std	Y+2, r24	; 0x02
    20c6:	9b 83       	std	Y+3, r25	; 0x03
	a->y /= mag;
    20c8:	a7 01       	movw	r20, r14
    20ca:	96 01       	movw	r18, r12
    20cc:	6c 81       	ldd	r22, Y+4	; 0x04
    20ce:	7d 81       	ldd	r23, Y+5	; 0x05
    20d0:	8e 81       	ldd	r24, Y+6	; 0x06
    20d2:	9f 81       	ldd	r25, Y+7	; 0x07
    20d4:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
    20d8:	6c 83       	std	Y+4, r22	; 0x04
    20da:	7d 83       	std	Y+5, r23	; 0x05
    20dc:	8e 83       	std	Y+6, r24	; 0x06
    20de:	9f 83       	std	Y+7, r25	; 0x07
	a->z /= mag;
    20e0:	a7 01       	movw	r20, r14
    20e2:	96 01       	movw	r18, r12
    20e4:	68 85       	ldd	r22, Y+8	; 0x08
    20e6:	79 85       	ldd	r23, Y+9	; 0x09
    20e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ec:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <__divsf3>
    20f0:	68 87       	std	Y+8, r22	; 0x08
    20f2:	79 87       	std	Y+9, r23	; 0x09
    20f4:	8a 87       	std	Y+10, r24	; 0x0a
    20f6:	9b 87       	std	Y+11, r25	; 0x0b
}
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	cf 90       	pop	r12
    2104:	08 95       	ret

00002106 <vfprintf>:
    2106:	a3 e1       	ldi	r26, 0x13	; 19
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e9 e8       	ldi	r30, 0x89	; 137
    210c:	f0 e1       	ldi	r31, 0x10	; 16
    210e:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__prologue_saves__>
    2112:	7c 01       	movw	r14, r24
    2114:	1b 01       	movw	r2, r22
    2116:	6a 01       	movw	r12, r20
    2118:	fc 01       	movw	r30, r24
    211a:	17 82       	std	Z+7, r1	; 0x07
    211c:	16 82       	std	Z+6, r1	; 0x06
    211e:	83 81       	ldd	r24, Z+3	; 0x03
    2120:	81 ff       	sbrs	r24, 1
    2122:	66 c3       	rjmp	.+1740   	; 0x27f0 <vfprintf+0x6ea>
    2124:	be 01       	movw	r22, r28
    2126:	6f 5f       	subi	r22, 0xFF	; 255
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	4b 01       	movw	r8, r22
    212c:	f7 01       	movw	r30, r14
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	f1 01       	movw	r30, r2
    2132:	93 fd       	sbrc	r25, 3
    2134:	85 91       	lpm	r24, Z+
    2136:	93 ff       	sbrs	r25, 3
    2138:	81 91       	ld	r24, Z+
    213a:	1f 01       	movw	r2, r30
    213c:	88 23       	and	r24, r24
    213e:	09 f4       	brne	.+2      	; 0x2142 <vfprintf+0x3c>
    2140:	53 c3       	rjmp	.+1702   	; 0x27e8 <vfprintf+0x6e2>
    2142:	85 32       	cpi	r24, 0x25	; 37
    2144:	39 f4       	brne	.+14     	; 0x2154 <vfprintf+0x4e>
    2146:	93 fd       	sbrc	r25, 3
    2148:	85 91       	lpm	r24, Z+
    214a:	93 ff       	sbrs	r25, 3
    214c:	81 91       	ld	r24, Z+
    214e:	1f 01       	movw	r2, r30
    2150:	85 32       	cpi	r24, 0x25	; 37
    2152:	39 f4       	brne	.+14     	; 0x2162 <vfprintf+0x5c>
    2154:	b7 01       	movw	r22, r14
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    215c:	56 01       	movw	r10, r12
    215e:	65 01       	movw	r12, r10
    2160:	e5 cf       	rjmp	.-54     	; 0x212c <vfprintf+0x26>
    2162:	10 e0       	ldi	r17, 0x00	; 0
    2164:	51 2c       	mov	r5, r1
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	20 32       	cpi	r18, 0x20	; 32
    216a:	a0 f4       	brcc	.+40     	; 0x2194 <vfprintf+0x8e>
    216c:	8b 32       	cpi	r24, 0x2B	; 43
    216e:	69 f0       	breq	.+26     	; 0x218a <vfprintf+0x84>
    2170:	30 f4       	brcc	.+12     	; 0x217e <vfprintf+0x78>
    2172:	80 32       	cpi	r24, 0x20	; 32
    2174:	59 f0       	breq	.+22     	; 0x218c <vfprintf+0x86>
    2176:	83 32       	cpi	r24, 0x23	; 35
    2178:	69 f4       	brne	.+26     	; 0x2194 <vfprintf+0x8e>
    217a:	20 61       	ori	r18, 0x10	; 16
    217c:	2c c0       	rjmp	.+88     	; 0x21d6 <vfprintf+0xd0>
    217e:	8d 32       	cpi	r24, 0x2D	; 45
    2180:	39 f0       	breq	.+14     	; 0x2190 <vfprintf+0x8a>
    2182:	80 33       	cpi	r24, 0x30	; 48
    2184:	39 f4       	brne	.+14     	; 0x2194 <vfprintf+0x8e>
    2186:	21 60       	ori	r18, 0x01	; 1
    2188:	26 c0       	rjmp	.+76     	; 0x21d6 <vfprintf+0xd0>
    218a:	22 60       	ori	r18, 0x02	; 2
    218c:	24 60       	ori	r18, 0x04	; 4
    218e:	23 c0       	rjmp	.+70     	; 0x21d6 <vfprintf+0xd0>
    2190:	28 60       	ori	r18, 0x08	; 8
    2192:	21 c0       	rjmp	.+66     	; 0x21d6 <vfprintf+0xd0>
    2194:	27 fd       	sbrc	r18, 7
    2196:	27 c0       	rjmp	.+78     	; 0x21e6 <vfprintf+0xe0>
    2198:	30 ed       	ldi	r19, 0xD0	; 208
    219a:	38 0f       	add	r19, r24
    219c:	3a 30       	cpi	r19, 0x0A	; 10
    219e:	78 f4       	brcc	.+30     	; 0x21be <vfprintf+0xb8>
    21a0:	26 ff       	sbrs	r18, 6
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <vfprintf+0xaa>
    21a4:	fa e0       	ldi	r31, 0x0A	; 10
    21a6:	1f 9f       	mul	r17, r31
    21a8:	30 0d       	add	r19, r0
    21aa:	11 24       	eor	r1, r1
    21ac:	13 2f       	mov	r17, r19
    21ae:	13 c0       	rjmp	.+38     	; 0x21d6 <vfprintf+0xd0>
    21b0:	6a e0       	ldi	r22, 0x0A	; 10
    21b2:	56 9e       	mul	r5, r22
    21b4:	30 0d       	add	r19, r0
    21b6:	11 24       	eor	r1, r1
    21b8:	53 2e       	mov	r5, r19
    21ba:	20 62       	ori	r18, 0x20	; 32
    21bc:	0c c0       	rjmp	.+24     	; 0x21d6 <vfprintf+0xd0>
    21be:	8e 32       	cpi	r24, 0x2E	; 46
    21c0:	21 f4       	brne	.+8      	; 0x21ca <vfprintf+0xc4>
    21c2:	26 fd       	sbrc	r18, 6
    21c4:	11 c3       	rjmp	.+1570   	; 0x27e8 <vfprintf+0x6e2>
    21c6:	20 64       	ori	r18, 0x40	; 64
    21c8:	06 c0       	rjmp	.+12     	; 0x21d6 <vfprintf+0xd0>
    21ca:	8c 36       	cpi	r24, 0x6C	; 108
    21cc:	11 f4       	brne	.+4      	; 0x21d2 <vfprintf+0xcc>
    21ce:	20 68       	ori	r18, 0x80	; 128
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <vfprintf+0xd0>
    21d2:	88 36       	cpi	r24, 0x68	; 104
    21d4:	41 f4       	brne	.+16     	; 0x21e6 <vfprintf+0xe0>
    21d6:	f1 01       	movw	r30, r2
    21d8:	93 fd       	sbrc	r25, 3
    21da:	85 91       	lpm	r24, Z+
    21dc:	93 ff       	sbrs	r25, 3
    21de:	81 91       	ld	r24, Z+
    21e0:	1f 01       	movw	r2, r30
    21e2:	81 11       	cpse	r24, r1
    21e4:	c1 cf       	rjmp	.-126    	; 0x2168 <vfprintf+0x62>
    21e6:	9b eb       	ldi	r25, 0xBB	; 187
    21e8:	98 0f       	add	r25, r24
    21ea:	93 30       	cpi	r25, 0x03	; 3
    21ec:	18 f4       	brcc	.+6      	; 0x21f4 <vfprintf+0xee>
    21ee:	20 61       	ori	r18, 0x10	; 16
    21f0:	80 5e       	subi	r24, 0xE0	; 224
    21f2:	06 c0       	rjmp	.+12     	; 0x2200 <vfprintf+0xfa>
    21f4:	9b e9       	ldi	r25, 0x9B	; 155
    21f6:	98 0f       	add	r25, r24
    21f8:	93 30       	cpi	r25, 0x03	; 3
    21fa:	08 f0       	brcs	.+2      	; 0x21fe <vfprintf+0xf8>
    21fc:	aa c1       	rjmp	.+852    	; 0x2552 <vfprintf+0x44c>
    21fe:	2f 7e       	andi	r18, 0xEF	; 239
    2200:	26 ff       	sbrs	r18, 6
    2202:	16 e0       	ldi	r17, 0x06	; 6
    2204:	2f 73       	andi	r18, 0x3F	; 63
    2206:	72 2e       	mov	r7, r18
    2208:	85 36       	cpi	r24, 0x65	; 101
    220a:	21 f4       	brne	.+8      	; 0x2214 <vfprintf+0x10e>
    220c:	f2 2f       	mov	r31, r18
    220e:	f0 64       	ori	r31, 0x40	; 64
    2210:	7f 2e       	mov	r7, r31
    2212:	08 c0       	rjmp	.+16     	; 0x2224 <vfprintf+0x11e>
    2214:	86 36       	cpi	r24, 0x66	; 102
    2216:	21 f4       	brne	.+8      	; 0x2220 <vfprintf+0x11a>
    2218:	62 2f       	mov	r22, r18
    221a:	60 68       	ori	r22, 0x80	; 128
    221c:	76 2e       	mov	r7, r22
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <vfprintf+0x11e>
    2220:	11 11       	cpse	r17, r1
    2222:	11 50       	subi	r17, 0x01	; 1
    2224:	77 fe       	sbrs	r7, 7
    2226:	07 c0       	rjmp	.+14     	; 0x2236 <vfprintf+0x130>
    2228:	1c 33       	cpi	r17, 0x3C	; 60
    222a:	48 f4       	brcc	.+18     	; 0x223e <vfprintf+0x138>
    222c:	44 24       	eor	r4, r4
    222e:	43 94       	inc	r4
    2230:	41 0e       	add	r4, r17
    2232:	27 e0       	ldi	r18, 0x07	; 7
    2234:	0b c0       	rjmp	.+22     	; 0x224c <vfprintf+0x146>
    2236:	18 30       	cpi	r17, 0x08	; 8
    2238:	30 f4       	brcc	.+12     	; 0x2246 <vfprintf+0x140>
    223a:	21 2f       	mov	r18, r17
    223c:	06 c0       	rjmp	.+12     	; 0x224a <vfprintf+0x144>
    223e:	27 e0       	ldi	r18, 0x07	; 7
    2240:	4c e3       	ldi	r20, 0x3C	; 60
    2242:	44 2e       	mov	r4, r20
    2244:	03 c0       	rjmp	.+6      	; 0x224c <vfprintf+0x146>
    2246:	27 e0       	ldi	r18, 0x07	; 7
    2248:	17 e0       	ldi	r17, 0x07	; 7
    224a:	41 2c       	mov	r4, r1
    224c:	56 01       	movw	r10, r12
    224e:	74 e0       	ldi	r23, 0x04	; 4
    2250:	a7 0e       	add	r10, r23
    2252:	b1 1c       	adc	r11, r1
    2254:	f6 01       	movw	r30, r12
    2256:	60 81       	ld	r22, Z
    2258:	71 81       	ldd	r23, Z+1	; 0x01
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	04 2d       	mov	r16, r4
    2260:	a4 01       	movw	r20, r8
    2262:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__ftoa_engine>
    2266:	6c 01       	movw	r12, r24
    2268:	09 81       	ldd	r16, Y+1	; 0x01
    226a:	00 ff       	sbrs	r16, 0
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <vfprintf+0x16c>
    226e:	03 ff       	sbrs	r16, 3
    2270:	06 c0       	rjmp	.+12     	; 0x227e <vfprintf+0x178>
    2272:	71 fc       	sbrc	r7, 1
    2274:	07 c0       	rjmp	.+14     	; 0x2284 <vfprintf+0x17e>
    2276:	72 fc       	sbrc	r7, 2
    2278:	08 c0       	rjmp	.+16     	; 0x228a <vfprintf+0x184>
    227a:	61 2c       	mov	r6, r1
    227c:	08 c0       	rjmp	.+16     	; 0x228e <vfprintf+0x188>
    227e:	3d e2       	ldi	r19, 0x2D	; 45
    2280:	63 2e       	mov	r6, r19
    2282:	05 c0       	rjmp	.+10     	; 0x228e <vfprintf+0x188>
    2284:	2b e2       	ldi	r18, 0x2B	; 43
    2286:	62 2e       	mov	r6, r18
    2288:	02 c0       	rjmp	.+4      	; 0x228e <vfprintf+0x188>
    228a:	90 e2       	ldi	r25, 0x20	; 32
    228c:	69 2e       	mov	r6, r25
    228e:	80 2f       	mov	r24, r16
    2290:	8c 70       	andi	r24, 0x0C	; 12
    2292:	99 f1       	breq	.+102    	; 0x22fa <vfprintf+0x1f4>
    2294:	66 20       	and	r6, r6
    2296:	11 f0       	breq	.+4      	; 0x229c <vfprintf+0x196>
    2298:	84 e0       	ldi	r24, 0x04	; 4
    229a:	01 c0       	rjmp	.+2      	; 0x229e <vfprintf+0x198>
    229c:	83 e0       	ldi	r24, 0x03	; 3
    229e:	85 15       	cp	r24, r5
    22a0:	10 f0       	brcs	.+4      	; 0x22a6 <vfprintf+0x1a0>
    22a2:	51 2c       	mov	r5, r1
    22a4:	0b c0       	rjmp	.+22     	; 0x22bc <vfprintf+0x1b6>
    22a6:	58 1a       	sub	r5, r24
    22a8:	73 fc       	sbrc	r7, 3
    22aa:	08 c0       	rjmp	.+16     	; 0x22bc <vfprintf+0x1b6>
    22ac:	b7 01       	movw	r22, r14
    22ae:	80 e2       	ldi	r24, 0x20	; 32
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    22b6:	5a 94       	dec	r5
    22b8:	c9 f7       	brne	.-14     	; 0x22ac <vfprintf+0x1a6>
    22ba:	f3 cf       	rjmp	.-26     	; 0x22a2 <vfprintf+0x19c>
    22bc:	66 20       	and	r6, r6
    22be:	29 f0       	breq	.+10     	; 0x22ca <vfprintf+0x1c4>
    22c0:	b7 01       	movw	r22, r14
    22c2:	86 2d       	mov	r24, r6
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    22ca:	03 fd       	sbrc	r16, 3
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <vfprintf+0x1ce>
    22ce:	0a ea       	ldi	r16, 0xAA	; 170
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <vfprintf+0x1d2>
    22d4:	06 ea       	ldi	r16, 0xA6	; 166
    22d6:	10 e0       	ldi	r17, 0x00	; 0
    22d8:	f7 2d       	mov	r31, r7
    22da:	f0 71       	andi	r31, 0x10	; 16
    22dc:	7f 2e       	mov	r7, r31
    22de:	f8 01       	movw	r30, r16
    22e0:	84 91       	lpm	r24, Z
    22e2:	88 23       	and	r24, r24
    22e4:	09 f4       	brne	.+2      	; 0x22e8 <vfprintf+0x1e2>
    22e6:	76 c2       	rjmp	.+1260   	; 0x27d4 <vfprintf+0x6ce>
    22e8:	71 10       	cpse	r7, r1
    22ea:	80 52       	subi	r24, 0x20	; 32
    22ec:	b7 01       	movw	r22, r14
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    22f4:	0f 5f       	subi	r16, 0xFF	; 255
    22f6:	1f 4f       	sbci	r17, 0xFF	; 255
    22f8:	f2 cf       	rjmp	.-28     	; 0x22de <vfprintf+0x1d8>
    22fa:	77 fe       	sbrs	r7, 7
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <vfprintf+0x216>
    22fe:	4c 0c       	add	r4, r12
    2300:	04 ff       	sbrs	r16, 4
    2302:	04 c0       	rjmp	.+8      	; 0x230c <vfprintf+0x206>
    2304:	8a 81       	ldd	r24, Y+2	; 0x02
    2306:	81 33       	cpi	r24, 0x31	; 49
    2308:	09 f4       	brne	.+2      	; 0x230c <vfprintf+0x206>
    230a:	4a 94       	dec	r4
    230c:	14 14       	cp	r1, r4
    230e:	74 f5       	brge	.+92     	; 0x236c <vfprintf+0x266>
    2310:	f8 e0       	ldi	r31, 0x08	; 8
    2312:	f4 15       	cp	r31, r4
    2314:	78 f5       	brcc	.+94     	; 0x2374 <vfprintf+0x26e>
    2316:	88 e0       	ldi	r24, 0x08	; 8
    2318:	48 2e       	mov	r4, r24
    231a:	2c c0       	rjmp	.+88     	; 0x2374 <vfprintf+0x26e>
    231c:	76 fc       	sbrc	r7, 6
    231e:	2a c0       	rjmp	.+84     	; 0x2374 <vfprintf+0x26e>
    2320:	81 2f       	mov	r24, r17
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	8c 15       	cp	r24, r12
    2326:	9d 05       	cpc	r25, r13
    2328:	9c f0       	brlt	.+38     	; 0x2350 <vfprintf+0x24a>
    232a:	6c ef       	ldi	r22, 0xFC	; 252
    232c:	c6 16       	cp	r12, r22
    232e:	6f ef       	ldi	r22, 0xFF	; 255
    2330:	d6 06       	cpc	r13, r22
    2332:	74 f0       	brlt	.+28     	; 0x2350 <vfprintf+0x24a>
    2334:	77 2d       	mov	r23, r7
    2336:	70 68       	ori	r23, 0x80	; 128
    2338:	77 2e       	mov	r7, r23
    233a:	0a c0       	rjmp	.+20     	; 0x2350 <vfprintf+0x24a>
    233c:	e2 e0       	ldi	r30, 0x02	; 2
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	ec 0f       	add	r30, r28
    2342:	fd 1f       	adc	r31, r29
    2344:	e1 0f       	add	r30, r17
    2346:	f1 1d       	adc	r31, r1
    2348:	80 81       	ld	r24, Z
    234a:	80 33       	cpi	r24, 0x30	; 48
    234c:	19 f4       	brne	.+6      	; 0x2354 <vfprintf+0x24e>
    234e:	11 50       	subi	r17, 0x01	; 1
    2350:	11 11       	cpse	r17, r1
    2352:	f4 cf       	rjmp	.-24     	; 0x233c <vfprintf+0x236>
    2354:	77 fe       	sbrs	r7, 7
    2356:	0e c0       	rjmp	.+28     	; 0x2374 <vfprintf+0x26e>
    2358:	44 24       	eor	r4, r4
    235a:	43 94       	inc	r4
    235c:	41 0e       	add	r4, r17
    235e:	81 2f       	mov	r24, r17
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	c8 16       	cp	r12, r24
    2364:	d9 06       	cpc	r13, r25
    2366:	2c f4       	brge	.+10     	; 0x2372 <vfprintf+0x26c>
    2368:	1c 19       	sub	r17, r12
    236a:	04 c0       	rjmp	.+8      	; 0x2374 <vfprintf+0x26e>
    236c:	44 24       	eor	r4, r4
    236e:	43 94       	inc	r4
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <vfprintf+0x26e>
    2372:	10 e0       	ldi	r17, 0x00	; 0
    2374:	77 fe       	sbrs	r7, 7
    2376:	07 c0       	rjmp	.+14     	; 0x2386 <vfprintf+0x280>
    2378:	1c 14       	cp	r1, r12
    237a:	1d 04       	cpc	r1, r13
    237c:	3c f4       	brge	.+14     	; 0x238c <vfprintf+0x286>
    237e:	96 01       	movw	r18, r12
    2380:	2f 5f       	subi	r18, 0xFF	; 255
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <vfprintf+0x28a>
    2386:	25 e0       	ldi	r18, 0x05	; 5
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <vfprintf+0x28a>
    238c:	21 e0       	ldi	r18, 0x01	; 1
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	66 20       	and	r6, r6
    2392:	11 f0       	breq	.+4      	; 0x2398 <vfprintf+0x292>
    2394:	2f 5f       	subi	r18, 0xFF	; 255
    2396:	3f 4f       	sbci	r19, 0xFF	; 255
    2398:	11 23       	and	r17, r17
    239a:	31 f0       	breq	.+12     	; 0x23a8 <vfprintf+0x2a2>
    239c:	41 2f       	mov	r20, r17
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	4f 5f       	subi	r20, 0xFF	; 255
    23a2:	5f 4f       	sbci	r21, 0xFF	; 255
    23a4:	24 0f       	add	r18, r20
    23a6:	35 1f       	adc	r19, r21
    23a8:	45 2d       	mov	r20, r5
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	24 17       	cp	r18, r20
    23ae:	35 07       	cpc	r19, r21
    23b0:	14 f4       	brge	.+4      	; 0x23b6 <vfprintf+0x2b0>
    23b2:	52 1a       	sub	r5, r18
    23b4:	01 c0       	rjmp	.+2      	; 0x23b8 <vfprintf+0x2b2>
    23b6:	51 2c       	mov	r5, r1
    23b8:	87 2d       	mov	r24, r7
    23ba:	89 70       	andi	r24, 0x09	; 9
    23bc:	49 f4       	brne	.+18     	; 0x23d0 <vfprintf+0x2ca>
    23be:	55 20       	and	r5, r5
    23c0:	39 f0       	breq	.+14     	; 0x23d0 <vfprintf+0x2ca>
    23c2:	b7 01       	movw	r22, r14
    23c4:	80 e2       	ldi	r24, 0x20	; 32
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    23cc:	5a 94       	dec	r5
    23ce:	f7 cf       	rjmp	.-18     	; 0x23be <vfprintf+0x2b8>
    23d0:	66 20       	and	r6, r6
    23d2:	29 f0       	breq	.+10     	; 0x23de <vfprintf+0x2d8>
    23d4:	b7 01       	movw	r22, r14
    23d6:	86 2d       	mov	r24, r6
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    23de:	73 fc       	sbrc	r7, 3
    23e0:	09 c0       	rjmp	.+18     	; 0x23f4 <vfprintf+0x2ee>
    23e2:	55 20       	and	r5, r5
    23e4:	39 f0       	breq	.+14     	; 0x23f4 <vfprintf+0x2ee>
    23e6:	b7 01       	movw	r22, r14
    23e8:	80 e3       	ldi	r24, 0x30	; 48
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    23f0:	5a 94       	dec	r5
    23f2:	f7 cf       	rjmp	.-18     	; 0x23e2 <vfprintf+0x2dc>
    23f4:	77 fe       	sbrs	r7, 7
    23f6:	5f c0       	rjmp	.+190    	; 0x24b6 <vfprintf+0x3b0>
    23f8:	9c 2d       	mov	r25, r12
    23fa:	8d 2d       	mov	r24, r13
    23fc:	d7 fe       	sbrs	r13, 7
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <vfprintf+0x2fe>
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	69 2e       	mov	r6, r25
    2406:	78 2e       	mov	r7, r24
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	c6 01       	movw	r24, r12
    240e:	84 19       	sub	r24, r4
    2410:	91 09       	sbc	r25, r1
    2412:	9d 87       	std	Y+13, r25	; 0x0d
    2414:	8c 87       	std	Y+12, r24	; 0x0c
    2416:	96 01       	movw	r18, r12
    2418:	26 19       	sub	r18, r6
    241a:	37 09       	sbc	r19, r7
    241c:	28 0d       	add	r18, r8
    241e:	39 1d       	adc	r19, r9
    2420:	81 2f       	mov	r24, r17
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	ee 27       	eor	r30, r30
    2426:	ff 27       	eor	r31, r31
    2428:	e8 1b       	sub	r30, r24
    242a:	f9 0b       	sbc	r31, r25
    242c:	ff 87       	std	Y+15, r31	; 0x0f
    242e:	ee 87       	std	Y+14, r30	; 0x0e
    2430:	ff ef       	ldi	r31, 0xFF	; 255
    2432:	6f 16       	cp	r6, r31
    2434:	7f 06       	cpc	r7, r31
    2436:	69 f4       	brne	.+26     	; 0x2452 <vfprintf+0x34c>
    2438:	b7 01       	movw	r22, r14
    243a:	8e e2       	ldi	r24, 0x2E	; 46
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	2b 8b       	std	Y+19, r18	; 0x13
    2440:	3a 8b       	std	Y+18, r19	; 0x12
    2442:	48 8b       	std	Y+16, r20	; 0x10
    2444:	59 8b       	std	Y+17, r21	; 0x11
    2446:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    244a:	59 89       	ldd	r21, Y+17	; 0x11
    244c:	48 89       	ldd	r20, Y+16	; 0x10
    244e:	3a 89       	ldd	r19, Y+18	; 0x12
    2450:	2b 89       	ldd	r18, Y+19	; 0x13
    2452:	c6 14       	cp	r12, r6
    2454:	d7 04       	cpc	r13, r7
    2456:	54 f0       	brlt	.+20     	; 0x246c <vfprintf+0x366>
    2458:	6c 85       	ldd	r22, Y+12	; 0x0c
    245a:	7d 85       	ldd	r23, Y+13	; 0x0d
    245c:	66 15       	cp	r22, r6
    245e:	77 05       	cpc	r23, r7
    2460:	2c f4       	brge	.+10     	; 0x246c <vfprintf+0x366>
    2462:	f9 01       	movw	r30, r18
    2464:	e4 0f       	add	r30, r20
    2466:	f5 1f       	adc	r31, r21
    2468:	81 81       	ldd	r24, Z+1	; 0x01
    246a:	01 c0       	rjmp	.+2      	; 0x246e <vfprintf+0x368>
    246c:	80 e3       	ldi	r24, 0x30	; 48
    246e:	71 e0       	ldi	r23, 0x01	; 1
    2470:	67 1a       	sub	r6, r23
    2472:	71 08       	sbc	r7, r1
    2474:	4f 5f       	subi	r20, 0xFF	; 255
    2476:	5f 4f       	sbci	r21, 0xFF	; 255
    2478:	ee 85       	ldd	r30, Y+14	; 0x0e
    247a:	ff 85       	ldd	r31, Y+15	; 0x0f
    247c:	6e 16       	cp	r6, r30
    247e:	7f 06       	cpc	r7, r31
    2480:	6c f0       	brlt	.+26     	; 0x249c <vfprintf+0x396>
    2482:	b7 01       	movw	r22, r14
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	2b 8b       	std	Y+19, r18	; 0x13
    2488:	3a 8b       	std	Y+18, r19	; 0x12
    248a:	48 8b       	std	Y+16, r20	; 0x10
    248c:	59 8b       	std	Y+17, r21	; 0x11
    248e:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2492:	2b 89       	ldd	r18, Y+19	; 0x13
    2494:	3a 89       	ldd	r19, Y+18	; 0x12
    2496:	48 89       	ldd	r20, Y+16	; 0x10
    2498:	59 89       	ldd	r21, Y+17	; 0x11
    249a:	ca cf       	rjmp	.-108    	; 0x2430 <vfprintf+0x32a>
    249c:	6c 14       	cp	r6, r12
    249e:	7d 04       	cpc	r7, r13
    24a0:	39 f4       	brne	.+14     	; 0x24b0 <vfprintf+0x3aa>
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	96 33       	cpi	r25, 0x36	; 54
    24a6:	18 f4       	brcc	.+6      	; 0x24ae <vfprintf+0x3a8>
    24a8:	95 33       	cpi	r25, 0x35	; 53
    24aa:	11 f4       	brne	.+4      	; 0x24b0 <vfprintf+0x3aa>
    24ac:	04 ff       	sbrs	r16, 4
    24ae:	81 e3       	ldi	r24, 0x31	; 49
    24b0:	b7 01       	movw	r22, r14
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	4b c0       	rjmp	.+150    	; 0x254c <vfprintf+0x446>
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	81 33       	cpi	r24, 0x31	; 49
    24ba:	09 f0       	breq	.+2      	; 0x24be <vfprintf+0x3b8>
    24bc:	0f 7e       	andi	r16, 0xEF	; 239
    24be:	b7 01       	movw	r22, r14
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    24c6:	11 11       	cpse	r17, r1
    24c8:	05 c0       	rjmp	.+10     	; 0x24d4 <vfprintf+0x3ce>
    24ca:	74 fe       	sbrs	r7, 4
    24cc:	18 c0       	rjmp	.+48     	; 0x24fe <vfprintf+0x3f8>
    24ce:	85 e4       	ldi	r24, 0x45	; 69
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	17 c0       	rjmp	.+46     	; 0x2502 <vfprintf+0x3fc>
    24d4:	b7 01       	movw	r22, r14
    24d6:	8e e2       	ldi	r24, 0x2E	; 46
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    24de:	82 e0       	ldi	r24, 0x02	; 2
    24e0:	66 24       	eor	r6, r6
    24e2:	63 94       	inc	r6
    24e4:	68 0e       	add	r6, r24
    24e6:	f4 01       	movw	r30, r8
    24e8:	e8 0f       	add	r30, r24
    24ea:	f1 1d       	adc	r31, r1
    24ec:	80 81       	ld	r24, Z
    24ee:	b7 01       	movw	r22, r14
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    24f6:	11 50       	subi	r17, 0x01	; 1
    24f8:	41 f3       	breq	.-48     	; 0x24ca <vfprintf+0x3c4>
    24fa:	86 2d       	mov	r24, r6
    24fc:	f1 cf       	rjmp	.-30     	; 0x24e0 <vfprintf+0x3da>
    24fe:	85 e6       	ldi	r24, 0x65	; 101
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	b7 01       	movw	r22, r14
    2504:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2508:	d7 fc       	sbrc	r13, 7
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <vfprintf+0x410>
    250c:	c1 14       	cp	r12, r1
    250e:	d1 04       	cpc	r13, r1
    2510:	39 f4       	brne	.+14     	; 0x2520 <vfprintf+0x41a>
    2512:	04 ff       	sbrs	r16, 4
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <vfprintf+0x41a>
    2516:	d1 94       	neg	r13
    2518:	c1 94       	neg	r12
    251a:	d1 08       	sbc	r13, r1
    251c:	8d e2       	ldi	r24, 0x2D	; 45
    251e:	01 c0       	rjmp	.+2      	; 0x2522 <vfprintf+0x41c>
    2520:	8b e2       	ldi	r24, 0x2B	; 43
    2522:	b7 01       	movw	r22, r14
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    252a:	80 e3       	ldi	r24, 0x30	; 48
    252c:	6a e0       	ldi	r22, 0x0A	; 10
    252e:	c6 16       	cp	r12, r22
    2530:	d1 04       	cpc	r13, r1
    2532:	2c f0       	brlt	.+10     	; 0x253e <vfprintf+0x438>
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	fa e0       	ldi	r31, 0x0A	; 10
    2538:	cf 1a       	sub	r12, r31
    253a:	d1 08       	sbc	r13, r1
    253c:	f7 cf       	rjmp	.-18     	; 0x252c <vfprintf+0x426>
    253e:	b7 01       	movw	r22, r14
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2546:	b7 01       	movw	r22, r14
    2548:	c6 01       	movw	r24, r12
    254a:	c0 96       	adiw	r24, 0x30	; 48
    254c:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2550:	41 c1       	rjmp	.+642    	; 0x27d4 <vfprintf+0x6ce>
    2552:	83 36       	cpi	r24, 0x63	; 99
    2554:	31 f0       	breq	.+12     	; 0x2562 <vfprintf+0x45c>
    2556:	83 37       	cpi	r24, 0x73	; 115
    2558:	79 f0       	breq	.+30     	; 0x2578 <vfprintf+0x472>
    255a:	83 35       	cpi	r24, 0x53	; 83
    255c:	09 f0       	breq	.+2      	; 0x2560 <vfprintf+0x45a>
    255e:	58 c0       	rjmp	.+176    	; 0x2610 <vfprintf+0x50a>
    2560:	21 c0       	rjmp	.+66     	; 0x25a4 <vfprintf+0x49e>
    2562:	56 01       	movw	r10, r12
    2564:	72 e0       	ldi	r23, 0x02	; 2
    2566:	a7 0e       	add	r10, r23
    2568:	b1 1c       	adc	r11, r1
    256a:	f6 01       	movw	r30, r12
    256c:	80 81       	ld	r24, Z
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	01 e0       	ldi	r16, 0x01	; 1
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	64 01       	movw	r12, r8
    2576:	14 c0       	rjmp	.+40     	; 0x25a0 <vfprintf+0x49a>
    2578:	56 01       	movw	r10, r12
    257a:	f2 e0       	ldi	r31, 0x02	; 2
    257c:	af 0e       	add	r10, r31
    257e:	b1 1c       	adc	r11, r1
    2580:	f6 01       	movw	r30, r12
    2582:	c0 80       	ld	r12, Z
    2584:	d1 80       	ldd	r13, Z+1	; 0x01
    2586:	26 ff       	sbrs	r18, 6
    2588:	03 c0       	rjmp	.+6      	; 0x2590 <vfprintf+0x48a>
    258a:	61 2f       	mov	r22, r17
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <vfprintf+0x48e>
    2590:	6f ef       	ldi	r22, 0xFF	; 255
    2592:	7f ef       	ldi	r23, 0xFF	; 255
    2594:	c6 01       	movw	r24, r12
    2596:	2b 8b       	std	Y+19, r18	; 0x13
    2598:	0e 94 c5 18 	call	0x318a	; 0x318a <strnlen>
    259c:	8c 01       	movw	r16, r24
    259e:	2b 89       	ldd	r18, Y+19	; 0x13
    25a0:	2f 77       	andi	r18, 0x7F	; 127
    25a2:	15 c0       	rjmp	.+42     	; 0x25ce <vfprintf+0x4c8>
    25a4:	56 01       	movw	r10, r12
    25a6:	f2 e0       	ldi	r31, 0x02	; 2
    25a8:	af 0e       	add	r10, r31
    25aa:	b1 1c       	adc	r11, r1
    25ac:	f6 01       	movw	r30, r12
    25ae:	c0 80       	ld	r12, Z
    25b0:	d1 80       	ldd	r13, Z+1	; 0x01
    25b2:	26 ff       	sbrs	r18, 6
    25b4:	03 c0       	rjmp	.+6      	; 0x25bc <vfprintf+0x4b6>
    25b6:	61 2f       	mov	r22, r17
    25b8:	70 e0       	ldi	r23, 0x00	; 0
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <vfprintf+0x4ba>
    25bc:	6f ef       	ldi	r22, 0xFF	; 255
    25be:	7f ef       	ldi	r23, 0xFF	; 255
    25c0:	c6 01       	movw	r24, r12
    25c2:	2b 8b       	std	Y+19, r18	; 0x13
    25c4:	0e 94 a3 18 	call	0x3146	; 0x3146 <strnlen_P>
    25c8:	8c 01       	movw	r16, r24
    25ca:	2b 89       	ldd	r18, Y+19	; 0x13
    25cc:	20 68       	ori	r18, 0x80	; 128
    25ce:	72 2e       	mov	r7, r18
    25d0:	23 fd       	sbrc	r18, 3
    25d2:	1a c0       	rjmp	.+52     	; 0x2608 <vfprintf+0x502>
    25d4:	85 2d       	mov	r24, r5
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	08 17       	cp	r16, r24
    25da:	19 07       	cpc	r17, r25
    25dc:	a8 f4       	brcc	.+42     	; 0x2608 <vfprintf+0x502>
    25de:	b7 01       	movw	r22, r14
    25e0:	80 e2       	ldi	r24, 0x20	; 32
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    25e8:	5a 94       	dec	r5
    25ea:	f4 cf       	rjmp	.-24     	; 0x25d4 <vfprintf+0x4ce>
    25ec:	f6 01       	movw	r30, r12
    25ee:	77 fc       	sbrc	r7, 7
    25f0:	85 91       	lpm	r24, Z+
    25f2:	77 fe       	sbrs	r7, 7
    25f4:	81 91       	ld	r24, Z+
    25f6:	6f 01       	movw	r12, r30
    25f8:	b7 01       	movw	r22, r14
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2600:	51 10       	cpse	r5, r1
    2602:	5a 94       	dec	r5
    2604:	01 50       	subi	r16, 0x01	; 1
    2606:	11 09       	sbc	r17, r1
    2608:	01 15       	cp	r16, r1
    260a:	11 05       	cpc	r17, r1
    260c:	79 f7       	brne	.-34     	; 0x25ec <vfprintf+0x4e6>
    260e:	e2 c0       	rjmp	.+452    	; 0x27d4 <vfprintf+0x6ce>
    2610:	84 36       	cpi	r24, 0x64	; 100
    2612:	11 f0       	breq	.+4      	; 0x2618 <vfprintf+0x512>
    2614:	89 36       	cpi	r24, 0x69	; 105
    2616:	51 f5       	brne	.+84     	; 0x266c <vfprintf+0x566>
    2618:	56 01       	movw	r10, r12
    261a:	27 ff       	sbrs	r18, 7
    261c:	09 c0       	rjmp	.+18     	; 0x2630 <vfprintf+0x52a>
    261e:	f4 e0       	ldi	r31, 0x04	; 4
    2620:	af 0e       	add	r10, r31
    2622:	b1 1c       	adc	r11, r1
    2624:	f6 01       	movw	r30, r12
    2626:	60 81       	ld	r22, Z
    2628:	71 81       	ldd	r23, Z+1	; 0x01
    262a:	82 81       	ldd	r24, Z+2	; 0x02
    262c:	93 81       	ldd	r25, Z+3	; 0x03
    262e:	0a c0       	rjmp	.+20     	; 0x2644 <vfprintf+0x53e>
    2630:	f2 e0       	ldi	r31, 0x02	; 2
    2632:	af 0e       	add	r10, r31
    2634:	b1 1c       	adc	r11, r1
    2636:	f6 01       	movw	r30, r12
    2638:	60 81       	ld	r22, Z
    263a:	71 81       	ldd	r23, Z+1	; 0x01
    263c:	88 27       	eor	r24, r24
    263e:	77 fd       	sbrc	r23, 7
    2640:	80 95       	com	r24
    2642:	98 2f       	mov	r25, r24
    2644:	02 2f       	mov	r16, r18
    2646:	0f 76       	andi	r16, 0x6F	; 111
    2648:	97 ff       	sbrs	r25, 7
    264a:	08 c0       	rjmp	.+16     	; 0x265c <vfprintf+0x556>
    264c:	90 95       	com	r25
    264e:	80 95       	com	r24
    2650:	70 95       	com	r23
    2652:	61 95       	neg	r22
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	8f 4f       	sbci	r24, 0xFF	; 255
    2658:	9f 4f       	sbci	r25, 0xFF	; 255
    265a:	00 68       	ori	r16, 0x80	; 128
    265c:	2a e0       	ldi	r18, 0x0A	; 10
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	a4 01       	movw	r20, r8
    2662:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__ultoa_invert>
    2666:	c8 2e       	mov	r12, r24
    2668:	c8 18       	sub	r12, r8
    266a:	3e c0       	rjmp	.+124    	; 0x26e8 <vfprintf+0x5e2>
    266c:	02 2f       	mov	r16, r18
    266e:	85 37       	cpi	r24, 0x75	; 117
    2670:	21 f4       	brne	.+8      	; 0x267a <vfprintf+0x574>
    2672:	0f 7e       	andi	r16, 0xEF	; 239
    2674:	2a e0       	ldi	r18, 0x0A	; 10
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	1d c0       	rjmp	.+58     	; 0x26b4 <vfprintf+0x5ae>
    267a:	09 7f       	andi	r16, 0xF9	; 249
    267c:	8f 36       	cpi	r24, 0x6F	; 111
    267e:	91 f0       	breq	.+36     	; 0x26a4 <vfprintf+0x59e>
    2680:	18 f4       	brcc	.+6      	; 0x2688 <vfprintf+0x582>
    2682:	88 35       	cpi	r24, 0x58	; 88
    2684:	59 f0       	breq	.+22     	; 0x269c <vfprintf+0x596>
    2686:	b0 c0       	rjmp	.+352    	; 0x27e8 <vfprintf+0x6e2>
    2688:	80 37       	cpi	r24, 0x70	; 112
    268a:	19 f0       	breq	.+6      	; 0x2692 <vfprintf+0x58c>
    268c:	88 37       	cpi	r24, 0x78	; 120
    268e:	11 f0       	breq	.+4      	; 0x2694 <vfprintf+0x58e>
    2690:	ab c0       	rjmp	.+342    	; 0x27e8 <vfprintf+0x6e2>
    2692:	00 61       	ori	r16, 0x10	; 16
    2694:	04 ff       	sbrs	r16, 4
    2696:	09 c0       	rjmp	.+18     	; 0x26aa <vfprintf+0x5a4>
    2698:	04 60       	ori	r16, 0x04	; 4
    269a:	07 c0       	rjmp	.+14     	; 0x26aa <vfprintf+0x5a4>
    269c:	24 ff       	sbrs	r18, 4
    269e:	08 c0       	rjmp	.+16     	; 0x26b0 <vfprintf+0x5aa>
    26a0:	06 60       	ori	r16, 0x06	; 6
    26a2:	06 c0       	rjmp	.+12     	; 0x26b0 <vfprintf+0x5aa>
    26a4:	28 e0       	ldi	r18, 0x08	; 8
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <vfprintf+0x5ae>
    26aa:	20 e1       	ldi	r18, 0x10	; 16
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	02 c0       	rjmp	.+4      	; 0x26b4 <vfprintf+0x5ae>
    26b0:	20 e1       	ldi	r18, 0x10	; 16
    26b2:	32 e0       	ldi	r19, 0x02	; 2
    26b4:	56 01       	movw	r10, r12
    26b6:	07 ff       	sbrs	r16, 7
    26b8:	09 c0       	rjmp	.+18     	; 0x26cc <vfprintf+0x5c6>
    26ba:	f4 e0       	ldi	r31, 0x04	; 4
    26bc:	af 0e       	add	r10, r31
    26be:	b1 1c       	adc	r11, r1
    26c0:	f6 01       	movw	r30, r12
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	08 c0       	rjmp	.+16     	; 0x26dc <vfprintf+0x5d6>
    26cc:	f2 e0       	ldi	r31, 0x02	; 2
    26ce:	af 0e       	add	r10, r31
    26d0:	b1 1c       	adc	r11, r1
    26d2:	f6 01       	movw	r30, r12
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	a4 01       	movw	r20, r8
    26de:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__ultoa_invert>
    26e2:	c8 2e       	mov	r12, r24
    26e4:	c8 18       	sub	r12, r8
    26e6:	0f 77       	andi	r16, 0x7F	; 127
    26e8:	06 ff       	sbrs	r16, 6
    26ea:	0b c0       	rjmp	.+22     	; 0x2702 <vfprintf+0x5fc>
    26ec:	20 2f       	mov	r18, r16
    26ee:	2e 7f       	andi	r18, 0xFE	; 254
    26f0:	c1 16       	cp	r12, r17
    26f2:	50 f4       	brcc	.+20     	; 0x2708 <vfprintf+0x602>
    26f4:	04 ff       	sbrs	r16, 4
    26f6:	0a c0       	rjmp	.+20     	; 0x270c <vfprintf+0x606>
    26f8:	02 fd       	sbrc	r16, 2
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <vfprintf+0x606>
    26fc:	20 2f       	mov	r18, r16
    26fe:	2e 7e       	andi	r18, 0xEE	; 238
    2700:	05 c0       	rjmp	.+10     	; 0x270c <vfprintf+0x606>
    2702:	dc 2c       	mov	r13, r12
    2704:	20 2f       	mov	r18, r16
    2706:	03 c0       	rjmp	.+6      	; 0x270e <vfprintf+0x608>
    2708:	dc 2c       	mov	r13, r12
    270a:	01 c0       	rjmp	.+2      	; 0x270e <vfprintf+0x608>
    270c:	d1 2e       	mov	r13, r17
    270e:	24 ff       	sbrs	r18, 4
    2710:	0d c0       	rjmp	.+26     	; 0x272c <vfprintf+0x626>
    2712:	fe 01       	movw	r30, r28
    2714:	ec 0d       	add	r30, r12
    2716:	f1 1d       	adc	r31, r1
    2718:	80 81       	ld	r24, Z
    271a:	80 33       	cpi	r24, 0x30	; 48
    271c:	11 f4       	brne	.+4      	; 0x2722 <vfprintf+0x61c>
    271e:	29 7e       	andi	r18, 0xE9	; 233
    2720:	09 c0       	rjmp	.+18     	; 0x2734 <vfprintf+0x62e>
    2722:	22 ff       	sbrs	r18, 2
    2724:	06 c0       	rjmp	.+12     	; 0x2732 <vfprintf+0x62c>
    2726:	d3 94       	inc	r13
    2728:	d3 94       	inc	r13
    272a:	04 c0       	rjmp	.+8      	; 0x2734 <vfprintf+0x62e>
    272c:	82 2f       	mov	r24, r18
    272e:	86 78       	andi	r24, 0x86	; 134
    2730:	09 f0       	breq	.+2      	; 0x2734 <vfprintf+0x62e>
    2732:	d3 94       	inc	r13
    2734:	23 fd       	sbrc	r18, 3
    2736:	13 c0       	rjmp	.+38     	; 0x275e <vfprintf+0x658>
    2738:	20 ff       	sbrs	r18, 0
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <vfprintf+0x642>
    273c:	1c 2d       	mov	r17, r12
    273e:	d5 14       	cp	r13, r5
    2740:	18 f4       	brcc	.+6      	; 0x2748 <vfprintf+0x642>
    2742:	15 0d       	add	r17, r5
    2744:	1d 19       	sub	r17, r13
    2746:	d5 2c       	mov	r13, r5
    2748:	d5 14       	cp	r13, r5
    274a:	68 f4       	brcc	.+26     	; 0x2766 <vfprintf+0x660>
    274c:	b7 01       	movw	r22, r14
    274e:	80 e2       	ldi	r24, 0x20	; 32
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	2b 8b       	std	Y+19, r18	; 0x13
    2754:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2758:	d3 94       	inc	r13
    275a:	2b 89       	ldd	r18, Y+19	; 0x13
    275c:	f5 cf       	rjmp	.-22     	; 0x2748 <vfprintf+0x642>
    275e:	d5 14       	cp	r13, r5
    2760:	10 f4       	brcc	.+4      	; 0x2766 <vfprintf+0x660>
    2762:	5d 18       	sub	r5, r13
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <vfprintf+0x662>
    2766:	51 2c       	mov	r5, r1
    2768:	24 ff       	sbrs	r18, 4
    276a:	12 c0       	rjmp	.+36     	; 0x2790 <vfprintf+0x68a>
    276c:	b7 01       	movw	r22, r14
    276e:	80 e3       	ldi	r24, 0x30	; 48
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	2b 8b       	std	Y+19, r18	; 0x13
    2774:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    2778:	2b 89       	ldd	r18, Y+19	; 0x13
    277a:	22 ff       	sbrs	r18, 2
    277c:	17 c0       	rjmp	.+46     	; 0x27ac <vfprintf+0x6a6>
    277e:	21 ff       	sbrs	r18, 1
    2780:	03 c0       	rjmp	.+6      	; 0x2788 <vfprintf+0x682>
    2782:	88 e5       	ldi	r24, 0x58	; 88
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	02 c0       	rjmp	.+4      	; 0x278c <vfprintf+0x686>
    2788:	88 e7       	ldi	r24, 0x78	; 120
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	b7 01       	movw	r22, r14
    278e:	0c c0       	rjmp	.+24     	; 0x27a8 <vfprintf+0x6a2>
    2790:	82 2f       	mov	r24, r18
    2792:	86 78       	andi	r24, 0x86	; 134
    2794:	59 f0       	breq	.+22     	; 0x27ac <vfprintf+0x6a6>
    2796:	21 fd       	sbrc	r18, 1
    2798:	02 c0       	rjmp	.+4      	; 0x279e <vfprintf+0x698>
    279a:	80 e2       	ldi	r24, 0x20	; 32
    279c:	01 c0       	rjmp	.+2      	; 0x27a0 <vfprintf+0x69a>
    279e:	8b e2       	ldi	r24, 0x2B	; 43
    27a0:	27 fd       	sbrc	r18, 7
    27a2:	8d e2       	ldi	r24, 0x2D	; 45
    27a4:	b7 01       	movw	r22, r14
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    27ac:	c1 16       	cp	r12, r17
    27ae:	38 f4       	brcc	.+14     	; 0x27be <vfprintf+0x6b8>
    27b0:	b7 01       	movw	r22, r14
    27b2:	80 e3       	ldi	r24, 0x30	; 48
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    27ba:	11 50       	subi	r17, 0x01	; 1
    27bc:	f7 cf       	rjmp	.-18     	; 0x27ac <vfprintf+0x6a6>
    27be:	ca 94       	dec	r12
    27c0:	f4 01       	movw	r30, r8
    27c2:	ec 0d       	add	r30, r12
    27c4:	f1 1d       	adc	r31, r1
    27c6:	80 81       	ld	r24, Z
    27c8:	b7 01       	movw	r22, r14
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    27d0:	c1 10       	cpse	r12, r1
    27d2:	f5 cf       	rjmp	.-22     	; 0x27be <vfprintf+0x6b8>
    27d4:	55 20       	and	r5, r5
    27d6:	09 f4       	brne	.+2      	; 0x27da <vfprintf+0x6d4>
    27d8:	c2 cc       	rjmp	.-1660   	; 0x215e <vfprintf+0x58>
    27da:	b7 01       	movw	r22, r14
    27dc:	80 e2       	ldi	r24, 0x20	; 32
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	0e 94 24 19 	call	0x3248	; 0x3248 <fputc>
    27e4:	5a 94       	dec	r5
    27e6:	f6 cf       	rjmp	.-20     	; 0x27d4 <vfprintf+0x6ce>
    27e8:	f7 01       	movw	r30, r14
    27ea:	86 81       	ldd	r24, Z+6	; 0x06
    27ec:	97 81       	ldd	r25, Z+7	; 0x07
    27ee:	02 c0       	rjmp	.+4      	; 0x27f4 <vfprintf+0x6ee>
    27f0:	8f ef       	ldi	r24, 0xFF	; 255
    27f2:	9f ef       	ldi	r25, 0xFF	; 255
    27f4:	63 96       	adiw	r28, 0x13	; 19
    27f6:	e2 e1       	ldi	r30, 0x12	; 18
    27f8:	0c 94 2f 14 	jmp	0x285e	; 0x285e <__epilogue_restores__>

000027fc <__tablejump2__>:
    27fc:	ee 0f       	add	r30, r30
    27fe:	ff 1f       	adc	r31, r31

00002800 <__tablejump__>:
    2800:	05 90       	lpm	r0, Z+
    2802:	f4 91       	lpm	r31, Z
    2804:	e0 2d       	mov	r30, r0
    2806:	09 94       	ijmp

00002808 <__umulhisi3>:
    2808:	a2 9f       	mul	r26, r18
    280a:	b0 01       	movw	r22, r0
    280c:	b3 9f       	mul	r27, r19
    280e:	c0 01       	movw	r24, r0
    2810:	a3 9f       	mul	r26, r19
    2812:	70 0d       	add	r23, r0
    2814:	81 1d       	adc	r24, r1
    2816:	11 24       	eor	r1, r1
    2818:	91 1d       	adc	r25, r1
    281a:	b2 9f       	mul	r27, r18
    281c:	70 0d       	add	r23, r0
    281e:	81 1d       	adc	r24, r1
    2820:	11 24       	eor	r1, r1
    2822:	91 1d       	adc	r25, r1
    2824:	08 95       	ret

00002826 <__prologue_saves__>:
    2826:	2f 92       	push	r2
    2828:	3f 92       	push	r3
    282a:	4f 92       	push	r4
    282c:	5f 92       	push	r5
    282e:	6f 92       	push	r6
    2830:	7f 92       	push	r7
    2832:	8f 92       	push	r8
    2834:	9f 92       	push	r9
    2836:	af 92       	push	r10
    2838:	bf 92       	push	r11
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	cd b7       	in	r28, 0x3d	; 61
    284c:	de b7       	in	r29, 0x3e	; 62
    284e:	ca 1b       	sub	r28, r26
    2850:	db 0b       	sbc	r29, r27
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	09 94       	ijmp

0000285e <__epilogue_restores__>:
    285e:	2a 88       	ldd	r2, Y+18	; 0x12
    2860:	39 88       	ldd	r3, Y+17	; 0x11
    2862:	48 88       	ldd	r4, Y+16	; 0x10
    2864:	5f 84       	ldd	r5, Y+15	; 0x0f
    2866:	6e 84       	ldd	r6, Y+14	; 0x0e
    2868:	7d 84       	ldd	r7, Y+13	; 0x0d
    286a:	8c 84       	ldd	r8, Y+12	; 0x0c
    286c:	9b 84       	ldd	r9, Y+11	; 0x0b
    286e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2870:	b9 84       	ldd	r11, Y+9	; 0x09
    2872:	c8 84       	ldd	r12, Y+8	; 0x08
    2874:	df 80       	ldd	r13, Y+7	; 0x07
    2876:	ee 80       	ldd	r14, Y+6	; 0x06
    2878:	fd 80       	ldd	r15, Y+5	; 0x05
    287a:	0c 81       	ldd	r16, Y+4	; 0x04
    287c:	1b 81       	ldd	r17, Y+3	; 0x03
    287e:	aa 81       	ldd	r26, Y+2	; 0x02
    2880:	b9 81       	ldd	r27, Y+1	; 0x01
    2882:	ce 0f       	add	r28, r30
    2884:	d1 1d       	adc	r29, r1
    2886:	0f b6       	in	r0, 0x3f	; 63
    2888:	f8 94       	cli
    288a:	de bf       	out	0x3e, r29	; 62
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	cd bf       	out	0x3d, r28	; 61
    2890:	ed 01       	movw	r28, r26
    2892:	08 95       	ret

00002894 <__subsf3>:
    2894:	50 58       	subi	r21, 0x80	; 128

00002896 <__addsf3>:
    2896:	bb 27       	eor	r27, r27
    2898:	aa 27       	eor	r26, r26
    289a:	0e d0       	rcall	.+28     	; 0x28b8 <__addsf3x>
    289c:	0a c2       	rjmp	.+1044   	; 0x2cb2 <__fp_round>
    289e:	fb d1       	rcall	.+1014   	; 0x2c96 <__fp_pscA>
    28a0:	30 f0       	brcs	.+12     	; 0x28ae <__addsf3+0x18>
    28a2:	00 d2       	rcall	.+1024   	; 0x2ca4 <__fp_pscB>
    28a4:	20 f0       	brcs	.+8      	; 0x28ae <__addsf3+0x18>
    28a6:	31 f4       	brne	.+12     	; 0x28b4 <__addsf3+0x1e>
    28a8:	9f 3f       	cpi	r25, 0xFF	; 255
    28aa:	11 f4       	brne	.+4      	; 0x28b0 <__addsf3+0x1a>
    28ac:	1e f4       	brtc	.+6      	; 0x28b4 <__addsf3+0x1e>
    28ae:	cb c1       	rjmp	.+918    	; 0x2c46 <__fp_nan>
    28b0:	0e f4       	brtc	.+2      	; 0x28b4 <__addsf3+0x1e>
    28b2:	e0 95       	com	r30
    28b4:	e7 fb       	bst	r30, 7
    28b6:	b3 c1       	rjmp	.+870    	; 0x2c1e <__fp_inf>

000028b8 <__addsf3x>:
    28b8:	e9 2f       	mov	r30, r25
    28ba:	0c d2       	rcall	.+1048   	; 0x2cd4 <__fp_split3>
    28bc:	80 f3       	brcs	.-32     	; 0x289e <__addsf3+0x8>
    28be:	ba 17       	cp	r27, r26
    28c0:	62 07       	cpc	r22, r18
    28c2:	73 07       	cpc	r23, r19
    28c4:	84 07       	cpc	r24, r20
    28c6:	95 07       	cpc	r25, r21
    28c8:	18 f0       	brcs	.+6      	; 0x28d0 <__addsf3x+0x18>
    28ca:	71 f4       	brne	.+28     	; 0x28e8 <__addsf3x+0x30>
    28cc:	9e f5       	brtc	.+102    	; 0x2934 <__addsf3x+0x7c>
    28ce:	24 c2       	rjmp	.+1096   	; 0x2d18 <__fp_zero>
    28d0:	0e f4       	brtc	.+2      	; 0x28d4 <__addsf3x+0x1c>
    28d2:	e0 95       	com	r30
    28d4:	0b 2e       	mov	r0, r27
    28d6:	ba 2f       	mov	r27, r26
    28d8:	a0 2d       	mov	r26, r0
    28da:	0b 01       	movw	r0, r22
    28dc:	b9 01       	movw	r22, r18
    28de:	90 01       	movw	r18, r0
    28e0:	0c 01       	movw	r0, r24
    28e2:	ca 01       	movw	r24, r20
    28e4:	a0 01       	movw	r20, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	ff 27       	eor	r31, r31
    28ea:	59 1b       	sub	r21, r25
    28ec:	99 f0       	breq	.+38     	; 0x2914 <__addsf3x+0x5c>
    28ee:	59 3f       	cpi	r21, 0xF9	; 249
    28f0:	50 f4       	brcc	.+20     	; 0x2906 <__addsf3x+0x4e>
    28f2:	50 3e       	cpi	r21, 0xE0	; 224
    28f4:	68 f1       	brcs	.+90     	; 0x2950 <__addsf3x+0x98>
    28f6:	1a 16       	cp	r1, r26
    28f8:	f0 40       	sbci	r31, 0x00	; 0
    28fa:	a2 2f       	mov	r26, r18
    28fc:	23 2f       	mov	r18, r19
    28fe:	34 2f       	mov	r19, r20
    2900:	44 27       	eor	r20, r20
    2902:	58 5f       	subi	r21, 0xF8	; 248
    2904:	f3 cf       	rjmp	.-26     	; 0x28ec <__addsf3x+0x34>
    2906:	46 95       	lsr	r20
    2908:	37 95       	ror	r19
    290a:	27 95       	ror	r18
    290c:	a7 95       	ror	r26
    290e:	f0 40       	sbci	r31, 0x00	; 0
    2910:	53 95       	inc	r21
    2912:	c9 f7       	brne	.-14     	; 0x2906 <__addsf3x+0x4e>
    2914:	7e f4       	brtc	.+30     	; 0x2934 <__addsf3x+0x7c>
    2916:	1f 16       	cp	r1, r31
    2918:	ba 0b       	sbc	r27, r26
    291a:	62 0b       	sbc	r22, r18
    291c:	73 0b       	sbc	r23, r19
    291e:	84 0b       	sbc	r24, r20
    2920:	ba f0       	brmi	.+46     	; 0x2950 <__addsf3x+0x98>
    2922:	91 50       	subi	r25, 0x01	; 1
    2924:	a1 f0       	breq	.+40     	; 0x294e <__addsf3x+0x96>
    2926:	ff 0f       	add	r31, r31
    2928:	bb 1f       	adc	r27, r27
    292a:	66 1f       	adc	r22, r22
    292c:	77 1f       	adc	r23, r23
    292e:	88 1f       	adc	r24, r24
    2930:	c2 f7       	brpl	.-16     	; 0x2922 <__addsf3x+0x6a>
    2932:	0e c0       	rjmp	.+28     	; 0x2950 <__addsf3x+0x98>
    2934:	ba 0f       	add	r27, r26
    2936:	62 1f       	adc	r22, r18
    2938:	73 1f       	adc	r23, r19
    293a:	84 1f       	adc	r24, r20
    293c:	48 f4       	brcc	.+18     	; 0x2950 <__addsf3x+0x98>
    293e:	87 95       	ror	r24
    2940:	77 95       	ror	r23
    2942:	67 95       	ror	r22
    2944:	b7 95       	ror	r27
    2946:	f7 95       	ror	r31
    2948:	9e 3f       	cpi	r25, 0xFE	; 254
    294a:	08 f0       	brcs	.+2      	; 0x294e <__addsf3x+0x96>
    294c:	b3 cf       	rjmp	.-154    	; 0x28b4 <__addsf3+0x1e>
    294e:	93 95       	inc	r25
    2950:	88 0f       	add	r24, r24
    2952:	08 f0       	brcs	.+2      	; 0x2956 <__addsf3x+0x9e>
    2954:	99 27       	eor	r25, r25
    2956:	ee 0f       	add	r30, r30
    2958:	97 95       	ror	r25
    295a:	87 95       	ror	r24
    295c:	08 95       	ret
    295e:	9b d1       	rcall	.+822    	; 0x2c96 <__fp_pscA>
    2960:	58 f0       	brcs	.+22     	; 0x2978 <__addsf3x+0xc0>
    2962:	80 e8       	ldi	r24, 0x80	; 128
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	09 f4       	brne	.+2      	; 0x296a <__addsf3x+0xb2>
    2968:	9e ef       	ldi	r25, 0xFE	; 254
    296a:	9c d1       	rcall	.+824    	; 0x2ca4 <__fp_pscB>
    296c:	28 f0       	brcs	.+10     	; 0x2978 <__addsf3x+0xc0>
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	51 e0       	ldi	r21, 0x01	; 1
    2972:	59 f4       	brne	.+22     	; 0x298a <atan2+0xe>
    2974:	5e ef       	ldi	r21, 0xFE	; 254
    2976:	09 c0       	rjmp	.+18     	; 0x298a <atan2+0xe>
    2978:	66 c1       	rjmp	.+716    	; 0x2c46 <__fp_nan>
    297a:	ce c1       	rjmp	.+924    	; 0x2d18 <__fp_zero>

0000297c <atan2>:
    297c:	e9 2f       	mov	r30, r25
    297e:	e0 78       	andi	r30, 0x80	; 128
    2980:	a9 d1       	rcall	.+850    	; 0x2cd4 <__fp_split3>
    2982:	68 f3       	brcs	.-38     	; 0x295e <__addsf3x+0xa6>
    2984:	09 2e       	mov	r0, r25
    2986:	05 2a       	or	r0, r21
    2988:	c1 f3       	breq	.-16     	; 0x297a <__addsf3x+0xc2>
    298a:	26 17       	cp	r18, r22
    298c:	37 07       	cpc	r19, r23
    298e:	48 07       	cpc	r20, r24
    2990:	59 07       	cpc	r21, r25
    2992:	38 f0       	brcs	.+14     	; 0x29a2 <atan2+0x26>
    2994:	0e 2e       	mov	r0, r30
    2996:	07 f8       	bld	r0, 7
    2998:	e0 25       	eor	r30, r0
    299a:	69 f0       	breq	.+26     	; 0x29b6 <atan2+0x3a>
    299c:	e0 25       	eor	r30, r0
    299e:	e0 64       	ori	r30, 0x40	; 64
    29a0:	0a c0       	rjmp	.+20     	; 0x29b6 <atan2+0x3a>
    29a2:	ef 63       	ori	r30, 0x3F	; 63
    29a4:	07 f8       	bld	r0, 7
    29a6:	00 94       	com	r0
    29a8:	07 fa       	bst	r0, 7
    29aa:	db 01       	movw	r26, r22
    29ac:	b9 01       	movw	r22, r18
    29ae:	9d 01       	movw	r18, r26
    29b0:	dc 01       	movw	r26, r24
    29b2:	ca 01       	movw	r24, r20
    29b4:	ad 01       	movw	r20, r26
    29b6:	ef 93       	push	r30
    29b8:	47 d0       	rcall	.+142    	; 0x2a48 <__divsf3_pse>
    29ba:	7b d1       	rcall	.+758    	; 0x2cb2 <__fp_round>
    29bc:	0a d0       	rcall	.+20     	; 0x29d2 <atan>
    29be:	5f 91       	pop	r21
    29c0:	55 23       	and	r21, r21
    29c2:	31 f0       	breq	.+12     	; 0x29d0 <atan2+0x54>
    29c4:	2b ed       	ldi	r18, 0xDB	; 219
    29c6:	3f e0       	ldi	r19, 0x0F	; 15
    29c8:	49 e4       	ldi	r20, 0x49	; 73
    29ca:	50 fd       	sbrc	r21, 0
    29cc:	49 ec       	ldi	r20, 0xC9	; 201
    29ce:	63 cf       	rjmp	.-314    	; 0x2896 <__addsf3>
    29d0:	08 95       	ret

000029d2 <atan>:
    29d2:	df 93       	push	r29
    29d4:	dd 27       	eor	r29, r29
    29d6:	b9 2f       	mov	r27, r25
    29d8:	bf 77       	andi	r27, 0x7F	; 127
    29da:	40 e8       	ldi	r20, 0x80	; 128
    29dc:	5f e3       	ldi	r21, 0x3F	; 63
    29de:	16 16       	cp	r1, r22
    29e0:	17 06       	cpc	r1, r23
    29e2:	48 07       	cpc	r20, r24
    29e4:	5b 07       	cpc	r21, r27
    29e6:	10 f4       	brcc	.+4      	; 0x29ec <atan+0x1a>
    29e8:	d9 2f       	mov	r29, r25
    29ea:	a1 d1       	rcall	.+834    	; 0x2d2e <inverse>
    29ec:	9f 93       	push	r25
    29ee:	8f 93       	push	r24
    29f0:	7f 93       	push	r23
    29f2:	6f 93       	push	r22
    29f4:	68 d2       	rcall	.+1232   	; 0x2ec6 <square>
    29f6:	e8 e7       	ldi	r30, 0x78	; 120
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	28 d1       	rcall	.+592    	; 0x2c4c <__fp_powser>
    29fc:	5a d1       	rcall	.+692    	; 0x2cb2 <__fp_round>
    29fe:	2f 91       	pop	r18
    2a00:	3f 91       	pop	r19
    2a02:	4f 91       	pop	r20
    2a04:	5f 91       	pop	r21
    2a06:	a6 d1       	rcall	.+844    	; 0x2d54 <__mulsf3x>
    2a08:	dd 23       	and	r29, r29
    2a0a:	49 f0       	breq	.+18     	; 0x2a1e <atan+0x4c>
    2a0c:	90 58       	subi	r25, 0x80	; 128
    2a0e:	a2 ea       	ldi	r26, 0xA2	; 162
    2a10:	2a ed       	ldi	r18, 0xDA	; 218
    2a12:	3f e0       	ldi	r19, 0x0F	; 15
    2a14:	49 ec       	ldi	r20, 0xC9	; 201
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	d0 78       	andi	r29, 0x80	; 128
    2a1a:	5d 27       	eor	r21, r29
    2a1c:	4d df       	rcall	.-358    	; 0x28b8 <__addsf3x>
    2a1e:	df 91       	pop	r29
    2a20:	48 c1       	rjmp	.+656    	; 0x2cb2 <__fp_round>

00002a22 <__cmpsf2>:
    2a22:	d9 d0       	rcall	.+434    	; 0x2bd6 <__fp_cmp>
    2a24:	08 f4       	brcc	.+2      	; 0x2a28 <__cmpsf2+0x6>
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	08 95       	ret

00002a2a <__divsf3>:
    2a2a:	0c d0       	rcall	.+24     	; 0x2a44 <__divsf3x>
    2a2c:	42 c1       	rjmp	.+644    	; 0x2cb2 <__fp_round>
    2a2e:	3a d1       	rcall	.+628    	; 0x2ca4 <__fp_pscB>
    2a30:	40 f0       	brcs	.+16     	; 0x2a42 <__divsf3+0x18>
    2a32:	31 d1       	rcall	.+610    	; 0x2c96 <__fp_pscA>
    2a34:	30 f0       	brcs	.+12     	; 0x2a42 <__divsf3+0x18>
    2a36:	21 f4       	brne	.+8      	; 0x2a40 <__divsf3+0x16>
    2a38:	5f 3f       	cpi	r21, 0xFF	; 255
    2a3a:	19 f0       	breq	.+6      	; 0x2a42 <__divsf3+0x18>
    2a3c:	f0 c0       	rjmp	.+480    	; 0x2c1e <__fp_inf>
    2a3e:	51 11       	cpse	r21, r1
    2a40:	6c c1       	rjmp	.+728    	; 0x2d1a <__fp_szero>
    2a42:	01 c1       	rjmp	.+514    	; 0x2c46 <__fp_nan>

00002a44 <__divsf3x>:
    2a44:	47 d1       	rcall	.+654    	; 0x2cd4 <__fp_split3>
    2a46:	98 f3       	brcs	.-26     	; 0x2a2e <__divsf3+0x4>

00002a48 <__divsf3_pse>:
    2a48:	99 23       	and	r25, r25
    2a4a:	c9 f3       	breq	.-14     	; 0x2a3e <__divsf3+0x14>
    2a4c:	55 23       	and	r21, r21
    2a4e:	b1 f3       	breq	.-20     	; 0x2a3c <__divsf3+0x12>
    2a50:	95 1b       	sub	r25, r21
    2a52:	55 0b       	sbc	r21, r21
    2a54:	bb 27       	eor	r27, r27
    2a56:	aa 27       	eor	r26, r26
    2a58:	62 17       	cp	r22, r18
    2a5a:	73 07       	cpc	r23, r19
    2a5c:	84 07       	cpc	r24, r20
    2a5e:	38 f0       	brcs	.+14     	; 0x2a6e <__divsf3_pse+0x26>
    2a60:	9f 5f       	subi	r25, 0xFF	; 255
    2a62:	5f 4f       	sbci	r21, 0xFF	; 255
    2a64:	22 0f       	add	r18, r18
    2a66:	33 1f       	adc	r19, r19
    2a68:	44 1f       	adc	r20, r20
    2a6a:	aa 1f       	adc	r26, r26
    2a6c:	a9 f3       	breq	.-22     	; 0x2a58 <__divsf3_pse+0x10>
    2a6e:	33 d0       	rcall	.+102    	; 0x2ad6 <__divsf3_pse+0x8e>
    2a70:	0e 2e       	mov	r0, r30
    2a72:	3a f0       	brmi	.+14     	; 0x2a82 <__divsf3_pse+0x3a>
    2a74:	e0 e8       	ldi	r30, 0x80	; 128
    2a76:	30 d0       	rcall	.+96     	; 0x2ad8 <__divsf3_pse+0x90>
    2a78:	91 50       	subi	r25, 0x01	; 1
    2a7a:	50 40       	sbci	r21, 0x00	; 0
    2a7c:	e6 95       	lsr	r30
    2a7e:	00 1c       	adc	r0, r0
    2a80:	ca f7       	brpl	.-14     	; 0x2a74 <__divsf3_pse+0x2c>
    2a82:	29 d0       	rcall	.+82     	; 0x2ad6 <__divsf3_pse+0x8e>
    2a84:	fe 2f       	mov	r31, r30
    2a86:	27 d0       	rcall	.+78     	; 0x2ad6 <__divsf3_pse+0x8e>
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	88 1f       	adc	r24, r24
    2a8e:	bb 1f       	adc	r27, r27
    2a90:	26 17       	cp	r18, r22
    2a92:	37 07       	cpc	r19, r23
    2a94:	48 07       	cpc	r20, r24
    2a96:	ab 07       	cpc	r26, r27
    2a98:	b0 e8       	ldi	r27, 0x80	; 128
    2a9a:	09 f0       	breq	.+2      	; 0x2a9e <__divsf3_pse+0x56>
    2a9c:	bb 0b       	sbc	r27, r27
    2a9e:	80 2d       	mov	r24, r0
    2aa0:	bf 01       	movw	r22, r30
    2aa2:	ff 27       	eor	r31, r31
    2aa4:	93 58       	subi	r25, 0x83	; 131
    2aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa8:	2a f0       	brmi	.+10     	; 0x2ab4 <__divsf3_pse+0x6c>
    2aaa:	9e 3f       	cpi	r25, 0xFE	; 254
    2aac:	51 05       	cpc	r21, r1
    2aae:	68 f0       	brcs	.+26     	; 0x2aca <__divsf3_pse+0x82>
    2ab0:	b6 c0       	rjmp	.+364    	; 0x2c1e <__fp_inf>
    2ab2:	33 c1       	rjmp	.+614    	; 0x2d1a <__fp_szero>
    2ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ab6:	ec f3       	brlt	.-6      	; 0x2ab2 <__divsf3_pse+0x6a>
    2ab8:	98 3e       	cpi	r25, 0xE8	; 232
    2aba:	dc f3       	brlt	.-10     	; 0x2ab2 <__divsf3_pse+0x6a>
    2abc:	86 95       	lsr	r24
    2abe:	77 95       	ror	r23
    2ac0:	67 95       	ror	r22
    2ac2:	b7 95       	ror	r27
    2ac4:	f7 95       	ror	r31
    2ac6:	9f 5f       	subi	r25, 0xFF	; 255
    2ac8:	c9 f7       	brne	.-14     	; 0x2abc <__divsf3_pse+0x74>
    2aca:	88 0f       	add	r24, r24
    2acc:	91 1d       	adc	r25, r1
    2ace:	96 95       	lsr	r25
    2ad0:	87 95       	ror	r24
    2ad2:	97 f9       	bld	r25, 7
    2ad4:	08 95       	ret
    2ad6:	e1 e0       	ldi	r30, 0x01	; 1
    2ad8:	66 0f       	add	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	88 1f       	adc	r24, r24
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	62 17       	cp	r22, r18
    2ae2:	73 07       	cpc	r23, r19
    2ae4:	84 07       	cpc	r24, r20
    2ae6:	ba 07       	cpc	r27, r26
    2ae8:	20 f0       	brcs	.+8      	; 0x2af2 <__divsf3_pse+0xaa>
    2aea:	62 1b       	sub	r22, r18
    2aec:	73 0b       	sbc	r23, r19
    2aee:	84 0b       	sbc	r24, r20
    2af0:	ba 0b       	sbc	r27, r26
    2af2:	ee 1f       	adc	r30, r30
    2af4:	88 f7       	brcc	.-30     	; 0x2ad8 <__divsf3_pse+0x90>
    2af6:	e0 95       	com	r30
    2af8:	08 95       	ret

00002afa <__fixsfsi>:
    2afa:	04 d0       	rcall	.+8      	; 0x2b04 <__fixunssfsi>
    2afc:	68 94       	set
    2afe:	b1 11       	cpse	r27, r1
    2b00:	0c c1       	rjmp	.+536    	; 0x2d1a <__fp_szero>
    2b02:	08 95       	ret

00002b04 <__fixunssfsi>:
    2b04:	ef d0       	rcall	.+478    	; 0x2ce4 <__fp_splitA>
    2b06:	88 f0       	brcs	.+34     	; 0x2b2a <__fixunssfsi+0x26>
    2b08:	9f 57       	subi	r25, 0x7F	; 127
    2b0a:	90 f0       	brcs	.+36     	; 0x2b30 <__fixunssfsi+0x2c>
    2b0c:	b9 2f       	mov	r27, r25
    2b0e:	99 27       	eor	r25, r25
    2b10:	b7 51       	subi	r27, 0x17	; 23
    2b12:	a0 f0       	brcs	.+40     	; 0x2b3c <__fixunssfsi+0x38>
    2b14:	d1 f0       	breq	.+52     	; 0x2b4a <__fixunssfsi+0x46>
    2b16:	66 0f       	add	r22, r22
    2b18:	77 1f       	adc	r23, r23
    2b1a:	88 1f       	adc	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	1a f0       	brmi	.+6      	; 0x2b26 <__fixunssfsi+0x22>
    2b20:	ba 95       	dec	r27
    2b22:	c9 f7       	brne	.-14     	; 0x2b16 <__fixunssfsi+0x12>
    2b24:	12 c0       	rjmp	.+36     	; 0x2b4a <__fixunssfsi+0x46>
    2b26:	b1 30       	cpi	r27, 0x01	; 1
    2b28:	81 f0       	breq	.+32     	; 0x2b4a <__fixunssfsi+0x46>
    2b2a:	f6 d0       	rcall	.+492    	; 0x2d18 <__fp_zero>
    2b2c:	b1 e0       	ldi	r27, 0x01	; 1
    2b2e:	08 95       	ret
    2b30:	f3 c0       	rjmp	.+486    	; 0x2d18 <__fp_zero>
    2b32:	67 2f       	mov	r22, r23
    2b34:	78 2f       	mov	r23, r24
    2b36:	88 27       	eor	r24, r24
    2b38:	b8 5f       	subi	r27, 0xF8	; 248
    2b3a:	39 f0       	breq	.+14     	; 0x2b4a <__fixunssfsi+0x46>
    2b3c:	b9 3f       	cpi	r27, 0xF9	; 249
    2b3e:	cc f3       	brlt	.-14     	; 0x2b32 <__fixunssfsi+0x2e>
    2b40:	86 95       	lsr	r24
    2b42:	77 95       	ror	r23
    2b44:	67 95       	ror	r22
    2b46:	b3 95       	inc	r27
    2b48:	d9 f7       	brne	.-10     	; 0x2b40 <__fixunssfsi+0x3c>
    2b4a:	3e f4       	brtc	.+14     	; 0x2b5a <__fixunssfsi+0x56>
    2b4c:	90 95       	com	r25
    2b4e:	80 95       	com	r24
    2b50:	70 95       	com	r23
    2b52:	61 95       	neg	r22
    2b54:	7f 4f       	sbci	r23, 0xFF	; 255
    2b56:	8f 4f       	sbci	r24, 0xFF	; 255
    2b58:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5a:	08 95       	ret

00002b5c <__floatunsisf>:
    2b5c:	e8 94       	clt
    2b5e:	09 c0       	rjmp	.+18     	; 0x2b72 <__floatsisf+0x12>

00002b60 <__floatsisf>:
    2b60:	97 fb       	bst	r25, 7
    2b62:	3e f4       	brtc	.+14     	; 0x2b72 <__floatsisf+0x12>
    2b64:	90 95       	com	r25
    2b66:	80 95       	com	r24
    2b68:	70 95       	com	r23
    2b6a:	61 95       	neg	r22
    2b6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b70:	9f 4f       	sbci	r25, 0xFF	; 255
    2b72:	99 23       	and	r25, r25
    2b74:	a9 f0       	breq	.+42     	; 0x2ba0 <__floatsisf+0x40>
    2b76:	f9 2f       	mov	r31, r25
    2b78:	96 e9       	ldi	r25, 0x96	; 150
    2b7a:	bb 27       	eor	r27, r27
    2b7c:	93 95       	inc	r25
    2b7e:	f6 95       	lsr	r31
    2b80:	87 95       	ror	r24
    2b82:	77 95       	ror	r23
    2b84:	67 95       	ror	r22
    2b86:	b7 95       	ror	r27
    2b88:	f1 11       	cpse	r31, r1
    2b8a:	f8 cf       	rjmp	.-16     	; 0x2b7c <__floatsisf+0x1c>
    2b8c:	fa f4       	brpl	.+62     	; 0x2bcc <__floatsisf+0x6c>
    2b8e:	bb 0f       	add	r27, r27
    2b90:	11 f4       	brne	.+4      	; 0x2b96 <__floatsisf+0x36>
    2b92:	60 ff       	sbrs	r22, 0
    2b94:	1b c0       	rjmp	.+54     	; 0x2bcc <__floatsisf+0x6c>
    2b96:	6f 5f       	subi	r22, 0xFF	; 255
    2b98:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9e:	16 c0       	rjmp	.+44     	; 0x2bcc <__floatsisf+0x6c>
    2ba0:	88 23       	and	r24, r24
    2ba2:	11 f0       	breq	.+4      	; 0x2ba8 <__floatsisf+0x48>
    2ba4:	96 e9       	ldi	r25, 0x96	; 150
    2ba6:	11 c0       	rjmp	.+34     	; 0x2bca <__floatsisf+0x6a>
    2ba8:	77 23       	and	r23, r23
    2baa:	21 f0       	breq	.+8      	; 0x2bb4 <__floatsisf+0x54>
    2bac:	9e e8       	ldi	r25, 0x8E	; 142
    2bae:	87 2f       	mov	r24, r23
    2bb0:	76 2f       	mov	r23, r22
    2bb2:	05 c0       	rjmp	.+10     	; 0x2bbe <__floatsisf+0x5e>
    2bb4:	66 23       	and	r22, r22
    2bb6:	71 f0       	breq	.+28     	; 0x2bd4 <__floatsisf+0x74>
    2bb8:	96 e8       	ldi	r25, 0x86	; 134
    2bba:	86 2f       	mov	r24, r22
    2bbc:	70 e0       	ldi	r23, 0x00	; 0
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	2a f0       	brmi	.+10     	; 0x2bcc <__floatsisf+0x6c>
    2bc2:	9a 95       	dec	r25
    2bc4:	66 0f       	add	r22, r22
    2bc6:	77 1f       	adc	r23, r23
    2bc8:	88 1f       	adc	r24, r24
    2bca:	da f7       	brpl	.-10     	; 0x2bc2 <__floatsisf+0x62>
    2bcc:	88 0f       	add	r24, r24
    2bce:	96 95       	lsr	r25
    2bd0:	87 95       	ror	r24
    2bd2:	97 f9       	bld	r25, 7
    2bd4:	08 95       	ret

00002bd6 <__fp_cmp>:
    2bd6:	99 0f       	add	r25, r25
    2bd8:	00 08       	sbc	r0, r0
    2bda:	55 0f       	add	r21, r21
    2bdc:	aa 0b       	sbc	r26, r26
    2bde:	e0 e8       	ldi	r30, 0x80	; 128
    2be0:	fe ef       	ldi	r31, 0xFE	; 254
    2be2:	16 16       	cp	r1, r22
    2be4:	17 06       	cpc	r1, r23
    2be6:	e8 07       	cpc	r30, r24
    2be8:	f9 07       	cpc	r31, r25
    2bea:	c0 f0       	brcs	.+48     	; 0x2c1c <__fp_cmp+0x46>
    2bec:	12 16       	cp	r1, r18
    2bee:	13 06       	cpc	r1, r19
    2bf0:	e4 07       	cpc	r30, r20
    2bf2:	f5 07       	cpc	r31, r21
    2bf4:	98 f0       	brcs	.+38     	; 0x2c1c <__fp_cmp+0x46>
    2bf6:	62 1b       	sub	r22, r18
    2bf8:	73 0b       	sbc	r23, r19
    2bfa:	84 0b       	sbc	r24, r20
    2bfc:	95 0b       	sbc	r25, r21
    2bfe:	39 f4       	brne	.+14     	; 0x2c0e <__fp_cmp+0x38>
    2c00:	0a 26       	eor	r0, r26
    2c02:	61 f0       	breq	.+24     	; 0x2c1c <__fp_cmp+0x46>
    2c04:	23 2b       	or	r18, r19
    2c06:	24 2b       	or	r18, r20
    2c08:	25 2b       	or	r18, r21
    2c0a:	21 f4       	brne	.+8      	; 0x2c14 <__fp_cmp+0x3e>
    2c0c:	08 95       	ret
    2c0e:	0a 26       	eor	r0, r26
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <__fp_cmp+0x3e>
    2c12:	a1 40       	sbci	r26, 0x01	; 1
    2c14:	a6 95       	lsr	r26
    2c16:	8f ef       	ldi	r24, 0xFF	; 255
    2c18:	81 1d       	adc	r24, r1
    2c1a:	81 1d       	adc	r24, r1
    2c1c:	08 95       	ret

00002c1e <__fp_inf>:
    2c1e:	97 f9       	bld	r25, 7
    2c20:	9f 67       	ori	r25, 0x7F	; 127
    2c22:	80 e8       	ldi	r24, 0x80	; 128
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	08 95       	ret

00002c2a <__fp_mpack>:
    2c2a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c2c:	31 f0       	breq	.+12     	; 0x2c3a <__fp_mpack_finite+0xc>

00002c2e <__fp_mpack_finite>:
    2c2e:	91 50       	subi	r25, 0x01	; 1
    2c30:	20 f4       	brcc	.+8      	; 0x2c3a <__fp_mpack_finite+0xc>
    2c32:	87 95       	ror	r24
    2c34:	77 95       	ror	r23
    2c36:	67 95       	ror	r22
    2c38:	b7 95       	ror	r27
    2c3a:	88 0f       	add	r24, r24
    2c3c:	91 1d       	adc	r25, r1
    2c3e:	96 95       	lsr	r25
    2c40:	87 95       	ror	r24
    2c42:	97 f9       	bld	r25, 7
    2c44:	08 95       	ret

00002c46 <__fp_nan>:
    2c46:	9f ef       	ldi	r25, 0xFF	; 255
    2c48:	80 ec       	ldi	r24, 0xC0	; 192
    2c4a:	08 95       	ret

00002c4c <__fp_powser>:
    2c4c:	df 93       	push	r29
    2c4e:	cf 93       	push	r28
    2c50:	1f 93       	push	r17
    2c52:	0f 93       	push	r16
    2c54:	ff 92       	push	r15
    2c56:	ef 92       	push	r14
    2c58:	df 92       	push	r13
    2c5a:	7b 01       	movw	r14, r22
    2c5c:	8c 01       	movw	r16, r24
    2c5e:	68 94       	set
    2c60:	05 c0       	rjmp	.+10     	; 0x2c6c <__fp_powser+0x20>
    2c62:	da 2e       	mov	r13, r26
    2c64:	ef 01       	movw	r28, r30
    2c66:	76 d0       	rcall	.+236    	; 0x2d54 <__mulsf3x>
    2c68:	fe 01       	movw	r30, r28
    2c6a:	e8 94       	clt
    2c6c:	a5 91       	lpm	r26, Z+
    2c6e:	25 91       	lpm	r18, Z+
    2c70:	35 91       	lpm	r19, Z+
    2c72:	45 91       	lpm	r20, Z+
    2c74:	55 91       	lpm	r21, Z+
    2c76:	ae f3       	brts	.-22     	; 0x2c62 <__fp_powser+0x16>
    2c78:	ef 01       	movw	r28, r30
    2c7a:	1e de       	rcall	.-964    	; 0x28b8 <__addsf3x>
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	97 01       	movw	r18, r14
    2c80:	a8 01       	movw	r20, r16
    2c82:	da 94       	dec	r13
    2c84:	79 f7       	brne	.-34     	; 0x2c64 <__fp_powser+0x18>
    2c86:	df 90       	pop	r13
    2c88:	ef 90       	pop	r14
    2c8a:	ff 90       	pop	r15
    2c8c:	0f 91       	pop	r16
    2c8e:	1f 91       	pop	r17
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <__fp_pscA>:
    2c96:	00 24       	eor	r0, r0
    2c98:	0a 94       	dec	r0
    2c9a:	16 16       	cp	r1, r22
    2c9c:	17 06       	cpc	r1, r23
    2c9e:	18 06       	cpc	r1, r24
    2ca0:	09 06       	cpc	r0, r25
    2ca2:	08 95       	ret

00002ca4 <__fp_pscB>:
    2ca4:	00 24       	eor	r0, r0
    2ca6:	0a 94       	dec	r0
    2ca8:	12 16       	cp	r1, r18
    2caa:	13 06       	cpc	r1, r19
    2cac:	14 06       	cpc	r1, r20
    2cae:	05 06       	cpc	r0, r21
    2cb0:	08 95       	ret

00002cb2 <__fp_round>:
    2cb2:	09 2e       	mov	r0, r25
    2cb4:	03 94       	inc	r0
    2cb6:	00 0c       	add	r0, r0
    2cb8:	11 f4       	brne	.+4      	; 0x2cbe <__fp_round+0xc>
    2cba:	88 23       	and	r24, r24
    2cbc:	52 f0       	brmi	.+20     	; 0x2cd2 <__fp_round+0x20>
    2cbe:	bb 0f       	add	r27, r27
    2cc0:	40 f4       	brcc	.+16     	; 0x2cd2 <__fp_round+0x20>
    2cc2:	bf 2b       	or	r27, r31
    2cc4:	11 f4       	brne	.+4      	; 0x2cca <__fp_round+0x18>
    2cc6:	60 ff       	sbrs	r22, 0
    2cc8:	04 c0       	rjmp	.+8      	; 0x2cd2 <__fp_round+0x20>
    2cca:	6f 5f       	subi	r22, 0xFF	; 255
    2ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cce:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd2:	08 95       	ret

00002cd4 <__fp_split3>:
    2cd4:	57 fd       	sbrc	r21, 7
    2cd6:	90 58       	subi	r25, 0x80	; 128
    2cd8:	44 0f       	add	r20, r20
    2cda:	55 1f       	adc	r21, r21
    2cdc:	59 f0       	breq	.+22     	; 0x2cf4 <__fp_splitA+0x10>
    2cde:	5f 3f       	cpi	r21, 0xFF	; 255
    2ce0:	71 f0       	breq	.+28     	; 0x2cfe <__fp_splitA+0x1a>
    2ce2:	47 95       	ror	r20

00002ce4 <__fp_splitA>:
    2ce4:	88 0f       	add	r24, r24
    2ce6:	97 fb       	bst	r25, 7
    2ce8:	99 1f       	adc	r25, r25
    2cea:	61 f0       	breq	.+24     	; 0x2d04 <__fp_splitA+0x20>
    2cec:	9f 3f       	cpi	r25, 0xFF	; 255
    2cee:	79 f0       	breq	.+30     	; 0x2d0e <__fp_splitA+0x2a>
    2cf0:	87 95       	ror	r24
    2cf2:	08 95       	ret
    2cf4:	12 16       	cp	r1, r18
    2cf6:	13 06       	cpc	r1, r19
    2cf8:	14 06       	cpc	r1, r20
    2cfa:	55 1f       	adc	r21, r21
    2cfc:	f2 cf       	rjmp	.-28     	; 0x2ce2 <__fp_split3+0xe>
    2cfe:	46 95       	lsr	r20
    2d00:	f1 df       	rcall	.-30     	; 0x2ce4 <__fp_splitA>
    2d02:	08 c0       	rjmp	.+16     	; 0x2d14 <__fp_splitA+0x30>
    2d04:	16 16       	cp	r1, r22
    2d06:	17 06       	cpc	r1, r23
    2d08:	18 06       	cpc	r1, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	f1 cf       	rjmp	.-30     	; 0x2cf0 <__fp_splitA+0xc>
    2d0e:	86 95       	lsr	r24
    2d10:	71 05       	cpc	r23, r1
    2d12:	61 05       	cpc	r22, r1
    2d14:	08 94       	sec
    2d16:	08 95       	ret

00002d18 <__fp_zero>:
    2d18:	e8 94       	clt

00002d1a <__fp_szero>:
    2d1a:	bb 27       	eor	r27, r27
    2d1c:	66 27       	eor	r22, r22
    2d1e:	77 27       	eor	r23, r23
    2d20:	cb 01       	movw	r24, r22
    2d22:	97 f9       	bld	r25, 7
    2d24:	08 95       	ret

00002d26 <__gesf2>:
    2d26:	57 df       	rcall	.-338    	; 0x2bd6 <__fp_cmp>
    2d28:	08 f4       	brcc	.+2      	; 0x2d2c <__gesf2+0x6>
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	08 95       	ret

00002d2e <inverse>:
    2d2e:	9b 01       	movw	r18, r22
    2d30:	ac 01       	movw	r20, r24
    2d32:	60 e0       	ldi	r22, 0x00	; 0
    2d34:	70 e0       	ldi	r23, 0x00	; 0
    2d36:	80 e8       	ldi	r24, 0x80	; 128
    2d38:	9f e3       	ldi	r25, 0x3F	; 63
    2d3a:	77 ce       	rjmp	.-786    	; 0x2a2a <__divsf3>

00002d3c <__mulsf3>:
    2d3c:	0b d0       	rcall	.+22     	; 0x2d54 <__mulsf3x>
    2d3e:	b9 cf       	rjmp	.-142    	; 0x2cb2 <__fp_round>
    2d40:	aa df       	rcall	.-172    	; 0x2c96 <__fp_pscA>
    2d42:	28 f0       	brcs	.+10     	; 0x2d4e <__mulsf3+0x12>
    2d44:	af df       	rcall	.-162    	; 0x2ca4 <__fp_pscB>
    2d46:	18 f0       	brcs	.+6      	; 0x2d4e <__mulsf3+0x12>
    2d48:	95 23       	and	r25, r21
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <__mulsf3+0x12>
    2d4c:	68 cf       	rjmp	.-304    	; 0x2c1e <__fp_inf>
    2d4e:	7b cf       	rjmp	.-266    	; 0x2c46 <__fp_nan>
    2d50:	11 24       	eor	r1, r1
    2d52:	e3 cf       	rjmp	.-58     	; 0x2d1a <__fp_szero>

00002d54 <__mulsf3x>:
    2d54:	bf df       	rcall	.-130    	; 0x2cd4 <__fp_split3>
    2d56:	a0 f3       	brcs	.-24     	; 0x2d40 <__mulsf3+0x4>

00002d58 <__mulsf3_pse>:
    2d58:	95 9f       	mul	r25, r21
    2d5a:	d1 f3       	breq	.-12     	; 0x2d50 <__mulsf3+0x14>
    2d5c:	95 0f       	add	r25, r21
    2d5e:	50 e0       	ldi	r21, 0x00	; 0
    2d60:	55 1f       	adc	r21, r21
    2d62:	62 9f       	mul	r22, r18
    2d64:	f0 01       	movw	r30, r0
    2d66:	72 9f       	mul	r23, r18
    2d68:	bb 27       	eor	r27, r27
    2d6a:	f0 0d       	add	r31, r0
    2d6c:	b1 1d       	adc	r27, r1
    2d6e:	63 9f       	mul	r22, r19
    2d70:	aa 27       	eor	r26, r26
    2d72:	f0 0d       	add	r31, r0
    2d74:	b1 1d       	adc	r27, r1
    2d76:	aa 1f       	adc	r26, r26
    2d78:	64 9f       	mul	r22, r20
    2d7a:	66 27       	eor	r22, r22
    2d7c:	b0 0d       	add	r27, r0
    2d7e:	a1 1d       	adc	r26, r1
    2d80:	66 1f       	adc	r22, r22
    2d82:	82 9f       	mul	r24, r18
    2d84:	22 27       	eor	r18, r18
    2d86:	b0 0d       	add	r27, r0
    2d88:	a1 1d       	adc	r26, r1
    2d8a:	62 1f       	adc	r22, r18
    2d8c:	73 9f       	mul	r23, r19
    2d8e:	b0 0d       	add	r27, r0
    2d90:	a1 1d       	adc	r26, r1
    2d92:	62 1f       	adc	r22, r18
    2d94:	83 9f       	mul	r24, r19
    2d96:	a0 0d       	add	r26, r0
    2d98:	61 1d       	adc	r22, r1
    2d9a:	22 1f       	adc	r18, r18
    2d9c:	74 9f       	mul	r23, r20
    2d9e:	33 27       	eor	r19, r19
    2da0:	a0 0d       	add	r26, r0
    2da2:	61 1d       	adc	r22, r1
    2da4:	23 1f       	adc	r18, r19
    2da6:	84 9f       	mul	r24, r20
    2da8:	60 0d       	add	r22, r0
    2daa:	21 1d       	adc	r18, r1
    2dac:	82 2f       	mov	r24, r18
    2dae:	76 2f       	mov	r23, r22
    2db0:	6a 2f       	mov	r22, r26
    2db2:	11 24       	eor	r1, r1
    2db4:	9f 57       	subi	r25, 0x7F	; 127
    2db6:	50 40       	sbci	r21, 0x00	; 0
    2db8:	8a f0       	brmi	.+34     	; 0x2ddc <__mulsf3_pse+0x84>
    2dba:	e1 f0       	breq	.+56     	; 0x2df4 <__mulsf3_pse+0x9c>
    2dbc:	88 23       	and	r24, r24
    2dbe:	4a f0       	brmi	.+18     	; 0x2dd2 <__mulsf3_pse+0x7a>
    2dc0:	ee 0f       	add	r30, r30
    2dc2:	ff 1f       	adc	r31, r31
    2dc4:	bb 1f       	adc	r27, r27
    2dc6:	66 1f       	adc	r22, r22
    2dc8:	77 1f       	adc	r23, r23
    2dca:	88 1f       	adc	r24, r24
    2dcc:	91 50       	subi	r25, 0x01	; 1
    2dce:	50 40       	sbci	r21, 0x00	; 0
    2dd0:	a9 f7       	brne	.-22     	; 0x2dbc <__mulsf3_pse+0x64>
    2dd2:	9e 3f       	cpi	r25, 0xFE	; 254
    2dd4:	51 05       	cpc	r21, r1
    2dd6:	70 f0       	brcs	.+28     	; 0x2df4 <__mulsf3_pse+0x9c>
    2dd8:	22 cf       	rjmp	.-444    	; 0x2c1e <__fp_inf>
    2dda:	9f cf       	rjmp	.-194    	; 0x2d1a <__fp_szero>
    2ddc:	5f 3f       	cpi	r21, 0xFF	; 255
    2dde:	ec f3       	brlt	.-6      	; 0x2dda <__mulsf3_pse+0x82>
    2de0:	98 3e       	cpi	r25, 0xE8	; 232
    2de2:	dc f3       	brlt	.-10     	; 0x2dda <__mulsf3_pse+0x82>
    2de4:	86 95       	lsr	r24
    2de6:	77 95       	ror	r23
    2de8:	67 95       	ror	r22
    2dea:	b7 95       	ror	r27
    2dec:	f7 95       	ror	r31
    2dee:	e7 95       	ror	r30
    2df0:	9f 5f       	subi	r25, 0xFF	; 255
    2df2:	c1 f7       	brne	.-16     	; 0x2de4 <__mulsf3_pse+0x8c>
    2df4:	fe 2b       	or	r31, r30
    2df6:	88 0f       	add	r24, r24
    2df8:	91 1d       	adc	r25, r1
    2dfa:	96 95       	lsr	r25
    2dfc:	87 95       	ror	r24
    2dfe:	97 f9       	bld	r25, 7
    2e00:	08 95       	ret

00002e02 <round>:
    2e02:	70 df       	rcall	.-288    	; 0x2ce4 <__fp_splitA>
    2e04:	e0 f0       	brcs	.+56     	; 0x2e3e <round+0x3c>
    2e06:	9e 37       	cpi	r25, 0x7E	; 126
    2e08:	d8 f0       	brcs	.+54     	; 0x2e40 <round+0x3e>
    2e0a:	96 39       	cpi	r25, 0x96	; 150
    2e0c:	b8 f4       	brcc	.+46     	; 0x2e3c <round+0x3a>
    2e0e:	9e 38       	cpi	r25, 0x8E	; 142
    2e10:	48 f4       	brcc	.+18     	; 0x2e24 <round+0x22>
    2e12:	67 2f       	mov	r22, r23
    2e14:	78 2f       	mov	r23, r24
    2e16:	88 27       	eor	r24, r24
    2e18:	98 5f       	subi	r25, 0xF8	; 248
    2e1a:	f9 cf       	rjmp	.-14     	; 0x2e0e <round+0xc>
    2e1c:	86 95       	lsr	r24
    2e1e:	77 95       	ror	r23
    2e20:	67 95       	ror	r22
    2e22:	93 95       	inc	r25
    2e24:	95 39       	cpi	r25, 0x95	; 149
    2e26:	d0 f3       	brcs	.-12     	; 0x2e1c <round+0x1a>
    2e28:	b6 2f       	mov	r27, r22
    2e2a:	b1 70       	andi	r27, 0x01	; 1
    2e2c:	6b 0f       	add	r22, r27
    2e2e:	71 1d       	adc	r23, r1
    2e30:	81 1d       	adc	r24, r1
    2e32:	20 f4       	brcc	.+8      	; 0x2e3c <round+0x3a>
    2e34:	87 95       	ror	r24
    2e36:	77 95       	ror	r23
    2e38:	67 95       	ror	r22
    2e3a:	93 95       	inc	r25
    2e3c:	47 c0       	rjmp	.+142    	; 0x2ecc <__fp_mintl>
    2e3e:	f5 ce       	rjmp	.-534    	; 0x2c2a <__fp_mpack>
    2e40:	6c cf       	rjmp	.-296    	; 0x2d1a <__fp_szero>
    2e42:	11 f4       	brne	.+4      	; 0x2e48 <round+0x46>
    2e44:	0e f4       	brtc	.+2      	; 0x2e48 <round+0x46>
    2e46:	ff ce       	rjmp	.-514    	; 0x2c46 <__fp_nan>
    2e48:	f0 ce       	rjmp	.-544    	; 0x2c2a <__fp_mpack>

00002e4a <sqrt>:
    2e4a:	4c df       	rcall	.-360    	; 0x2ce4 <__fp_splitA>
    2e4c:	d0 f3       	brcs	.-12     	; 0x2e42 <round+0x40>
    2e4e:	99 23       	and	r25, r25
    2e50:	d9 f3       	breq	.-10     	; 0x2e48 <round+0x46>
    2e52:	ce f3       	brts	.-14     	; 0x2e46 <round+0x44>
    2e54:	9f 57       	subi	r25, 0x7F	; 127
    2e56:	55 0b       	sbc	r21, r21
    2e58:	87 ff       	sbrs	r24, 7
    2e5a:	53 d0       	rcall	.+166    	; 0x2f02 <__fp_norm2>
    2e5c:	00 24       	eor	r0, r0
    2e5e:	a0 e6       	ldi	r26, 0x60	; 96
    2e60:	40 ea       	ldi	r20, 0xA0	; 160
    2e62:	90 01       	movw	r18, r0
    2e64:	80 58       	subi	r24, 0x80	; 128
    2e66:	56 95       	lsr	r21
    2e68:	97 95       	ror	r25
    2e6a:	28 f4       	brcc	.+10     	; 0x2e76 <sqrt+0x2c>
    2e6c:	80 5c       	subi	r24, 0xC0	; 192
    2e6e:	66 0f       	add	r22, r22
    2e70:	77 1f       	adc	r23, r23
    2e72:	88 1f       	adc	r24, r24
    2e74:	20 f0       	brcs	.+8      	; 0x2e7e <sqrt+0x34>
    2e76:	26 17       	cp	r18, r22
    2e78:	37 07       	cpc	r19, r23
    2e7a:	48 07       	cpc	r20, r24
    2e7c:	30 f4       	brcc	.+12     	; 0x2e8a <sqrt+0x40>
    2e7e:	62 1b       	sub	r22, r18
    2e80:	73 0b       	sbc	r23, r19
    2e82:	84 0b       	sbc	r24, r20
    2e84:	20 29       	or	r18, r0
    2e86:	31 29       	or	r19, r1
    2e88:	4a 2b       	or	r20, r26
    2e8a:	a6 95       	lsr	r26
    2e8c:	17 94       	ror	r1
    2e8e:	07 94       	ror	r0
    2e90:	20 25       	eor	r18, r0
    2e92:	31 25       	eor	r19, r1
    2e94:	4a 27       	eor	r20, r26
    2e96:	58 f7       	brcc	.-42     	; 0x2e6e <sqrt+0x24>
    2e98:	66 0f       	add	r22, r22
    2e9a:	77 1f       	adc	r23, r23
    2e9c:	88 1f       	adc	r24, r24
    2e9e:	20 f0       	brcs	.+8      	; 0x2ea8 <sqrt+0x5e>
    2ea0:	26 17       	cp	r18, r22
    2ea2:	37 07       	cpc	r19, r23
    2ea4:	48 07       	cpc	r20, r24
    2ea6:	30 f4       	brcc	.+12     	; 0x2eb4 <sqrt+0x6a>
    2ea8:	62 0b       	sbc	r22, r18
    2eaa:	73 0b       	sbc	r23, r19
    2eac:	84 0b       	sbc	r24, r20
    2eae:	20 0d       	add	r18, r0
    2eb0:	31 1d       	adc	r19, r1
    2eb2:	41 1d       	adc	r20, r1
    2eb4:	a0 95       	com	r26
    2eb6:	81 f7       	brne	.-32     	; 0x2e98 <sqrt+0x4e>
    2eb8:	b9 01       	movw	r22, r18
    2eba:	84 2f       	mov	r24, r20
    2ebc:	91 58       	subi	r25, 0x81	; 129
    2ebe:	88 0f       	add	r24, r24
    2ec0:	96 95       	lsr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	08 95       	ret

00002ec6 <square>:
    2ec6:	9b 01       	movw	r18, r22
    2ec8:	ac 01       	movw	r20, r24
    2eca:	38 cf       	rjmp	.-400    	; 0x2d3c <__mulsf3>

00002ecc <__fp_mintl>:
    2ecc:	88 23       	and	r24, r24
    2ece:	71 f4       	brne	.+28     	; 0x2eec <__fp_mintl+0x20>
    2ed0:	77 23       	and	r23, r23
    2ed2:	21 f0       	breq	.+8      	; 0x2edc <__fp_mintl+0x10>
    2ed4:	98 50       	subi	r25, 0x08	; 8
    2ed6:	87 2b       	or	r24, r23
    2ed8:	76 2f       	mov	r23, r22
    2eda:	07 c0       	rjmp	.+14     	; 0x2eea <__fp_mintl+0x1e>
    2edc:	66 23       	and	r22, r22
    2ede:	11 f4       	brne	.+4      	; 0x2ee4 <__fp_mintl+0x18>
    2ee0:	99 27       	eor	r25, r25
    2ee2:	0d c0       	rjmp	.+26     	; 0x2efe <__fp_mintl+0x32>
    2ee4:	90 51       	subi	r25, 0x10	; 16
    2ee6:	86 2b       	or	r24, r22
    2ee8:	70 e0       	ldi	r23, 0x00	; 0
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	2a f0       	brmi	.+10     	; 0x2ef8 <__fp_mintl+0x2c>
    2eee:	9a 95       	dec	r25
    2ef0:	66 0f       	add	r22, r22
    2ef2:	77 1f       	adc	r23, r23
    2ef4:	88 1f       	adc	r24, r24
    2ef6:	da f7       	brpl	.-10     	; 0x2eee <__fp_mintl+0x22>
    2ef8:	88 0f       	add	r24, r24
    2efa:	96 95       	lsr	r25
    2efc:	87 95       	ror	r24
    2efe:	97 f9       	bld	r25, 7
    2f00:	08 95       	ret

00002f02 <__fp_norm2>:
    2f02:	91 50       	subi	r25, 0x01	; 1
    2f04:	50 40       	sbci	r21, 0x00	; 0
    2f06:	66 0f       	add	r22, r22
    2f08:	77 1f       	adc	r23, r23
    2f0a:	88 1f       	adc	r24, r24
    2f0c:	d2 f7       	brpl	.-12     	; 0x2f02 <__fp_norm2>
    2f0e:	08 95       	ret

00002f10 <dtostrf>:
    2f10:	ef 92       	push	r14
    2f12:	0f 93       	push	r16
    2f14:	1f 93       	push	r17
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	e8 01       	movw	r28, r16
    2f1c:	47 ff       	sbrs	r20, 7
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <dtostrf+0x14>
    2f20:	34 e1       	ldi	r19, 0x14	; 20
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <dtostrf+0x16>
    2f24:	34 e0       	ldi	r19, 0x04	; 4
    2f26:	e4 2f       	mov	r30, r20
    2f28:	ff 27       	eor	r31, r31
    2f2a:	e7 fd       	sbrc	r30, 7
    2f2c:	f0 95       	com	r31
    2f2e:	f7 ff       	sbrs	r31, 7
    2f30:	03 c0       	rjmp	.+6      	; 0x2f38 <dtostrf+0x28>
    2f32:	f1 95       	neg	r31
    2f34:	e1 95       	neg	r30
    2f36:	f1 09       	sbc	r31, r1
    2f38:	e3 2e       	mov	r14, r19
    2f3a:	02 2f       	mov	r16, r18
    2f3c:	2e 2f       	mov	r18, r30
    2f3e:	ae 01       	movw	r20, r28
    2f40:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <dtoa_prf>
    2f44:	ce 01       	movw	r24, r28
    2f46:	df 91       	pop	r29
    2f48:	cf 91       	pop	r28
    2f4a:	1f 91       	pop	r17
    2f4c:	0f 91       	pop	r16
    2f4e:	ef 90       	pop	r14
    2f50:	08 95       	ret

00002f52 <atof>:
    2f52:	66 27       	eor	r22, r22
    2f54:	77 27       	eor	r23, r23
    2f56:	0c 94 72 1b 	jmp	0x36e4	; 0x36e4 <strtod>

00002f5a <atoi>:
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	88 27       	eor	r24, r24
    2f5e:	99 27       	eor	r25, r25
    2f60:	e8 94       	clt
    2f62:	21 91       	ld	r18, Z+
    2f64:	20 32       	cpi	r18, 0x20	; 32
    2f66:	e9 f3       	breq	.-6      	; 0x2f62 <atoi+0x8>
    2f68:	29 30       	cpi	r18, 0x09	; 9
    2f6a:	10 f0       	brcs	.+4      	; 0x2f70 <atoi+0x16>
    2f6c:	2e 30       	cpi	r18, 0x0E	; 14
    2f6e:	c8 f3       	brcs	.-14     	; 0x2f62 <atoi+0x8>
    2f70:	2b 32       	cpi	r18, 0x2B	; 43
    2f72:	41 f0       	breq	.+16     	; 0x2f84 <atoi+0x2a>
    2f74:	2d 32       	cpi	r18, 0x2D	; 45
    2f76:	39 f4       	brne	.+14     	; 0x2f86 <atoi+0x2c>
    2f78:	68 94       	set
    2f7a:	04 c0       	rjmp	.+8      	; 0x2f84 <atoi+0x2a>
    2f7c:	0e 94 02 19 	call	0x3204	; 0x3204 <__mulhi_const_10>
    2f80:	82 0f       	add	r24, r18
    2f82:	91 1d       	adc	r25, r1
    2f84:	21 91       	ld	r18, Z+
    2f86:	20 53       	subi	r18, 0x30	; 48
    2f88:	2a 30       	cpi	r18, 0x0A	; 10
    2f8a:	c0 f3       	brcs	.-16     	; 0x2f7c <atoi+0x22>
    2f8c:	1e f4       	brtc	.+6      	; 0x2f94 <atoi+0x3a>
    2f8e:	90 95       	com	r25
    2f90:	81 95       	neg	r24
    2f92:	9f 4f       	sbci	r25, 0xFF	; 255
    2f94:	08 95       	ret

00002f96 <__ftoa_engine>:
    2f96:	28 30       	cpi	r18, 0x08	; 8
    2f98:	08 f0       	brcs	.+2      	; 0x2f9c <__ftoa_engine+0x6>
    2f9a:	27 e0       	ldi	r18, 0x07	; 7
    2f9c:	33 27       	eor	r19, r19
    2f9e:	da 01       	movw	r26, r20
    2fa0:	99 0f       	add	r25, r25
    2fa2:	31 1d       	adc	r19, r1
    2fa4:	87 fd       	sbrc	r24, 7
    2fa6:	91 60       	ori	r25, 0x01	; 1
    2fa8:	00 96       	adiw	r24, 0x00	; 0
    2faa:	61 05       	cpc	r22, r1
    2fac:	71 05       	cpc	r23, r1
    2fae:	39 f4       	brne	.+14     	; 0x2fbe <__ftoa_engine+0x28>
    2fb0:	32 60       	ori	r19, 0x02	; 2
    2fb2:	2e 5f       	subi	r18, 0xFE	; 254
    2fb4:	3d 93       	st	X+, r19
    2fb6:	30 e3       	ldi	r19, 0x30	; 48
    2fb8:	2a 95       	dec	r18
    2fba:	e1 f7       	brne	.-8      	; 0x2fb4 <__ftoa_engine+0x1e>
    2fbc:	08 95       	ret
    2fbe:	9f 3f       	cpi	r25, 0xFF	; 255
    2fc0:	30 f0       	brcs	.+12     	; 0x2fce <__ftoa_engine+0x38>
    2fc2:	80 38       	cpi	r24, 0x80	; 128
    2fc4:	71 05       	cpc	r23, r1
    2fc6:	61 05       	cpc	r22, r1
    2fc8:	09 f0       	breq	.+2      	; 0x2fcc <__ftoa_engine+0x36>
    2fca:	3c 5f       	subi	r19, 0xFC	; 252
    2fcc:	3c 5f       	subi	r19, 0xFC	; 252
    2fce:	3d 93       	st	X+, r19
    2fd0:	91 30       	cpi	r25, 0x01	; 1
    2fd2:	08 f0       	brcs	.+2      	; 0x2fd6 <__ftoa_engine+0x40>
    2fd4:	80 68       	ori	r24, 0x80	; 128
    2fd6:	91 1d       	adc	r25, r1
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	1f 93       	push	r17
    2fde:	0f 93       	push	r16
    2fe0:	ff 92       	push	r15
    2fe2:	ef 92       	push	r14
    2fe4:	19 2f       	mov	r17, r25
    2fe6:	98 7f       	andi	r25, 0xF8	; 248
    2fe8:	96 95       	lsr	r25
    2fea:	e9 2f       	mov	r30, r25
    2fec:	96 95       	lsr	r25
    2fee:	96 95       	lsr	r25
    2ff0:	e9 0f       	add	r30, r25
    2ff2:	ff 27       	eor	r31, r31
    2ff4:	e8 5f       	subi	r30, 0xF8	; 248
    2ff6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ff8:	99 27       	eor	r25, r25
    2ffa:	33 27       	eor	r19, r19
    2ffc:	ee 24       	eor	r14, r14
    2ffe:	ff 24       	eor	r15, r15
    3000:	a7 01       	movw	r20, r14
    3002:	e7 01       	movw	r28, r14
    3004:	05 90       	lpm	r0, Z+
    3006:	08 94       	sec
    3008:	07 94       	ror	r0
    300a:	28 f4       	brcc	.+10     	; 0x3016 <__ftoa_engine+0x80>
    300c:	36 0f       	add	r19, r22
    300e:	e7 1e       	adc	r14, r23
    3010:	f8 1e       	adc	r15, r24
    3012:	49 1f       	adc	r20, r25
    3014:	51 1d       	adc	r21, r1
    3016:	66 0f       	add	r22, r22
    3018:	77 1f       	adc	r23, r23
    301a:	88 1f       	adc	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	06 94       	lsr	r0
    3020:	a1 f7       	brne	.-24     	; 0x300a <__ftoa_engine+0x74>
    3022:	05 90       	lpm	r0, Z+
    3024:	07 94       	ror	r0
    3026:	28 f4       	brcc	.+10     	; 0x3032 <__ftoa_engine+0x9c>
    3028:	e7 0e       	add	r14, r23
    302a:	f8 1e       	adc	r15, r24
    302c:	49 1f       	adc	r20, r25
    302e:	56 1f       	adc	r21, r22
    3030:	c1 1d       	adc	r28, r1
    3032:	77 0f       	add	r23, r23
    3034:	88 1f       	adc	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	66 1f       	adc	r22, r22
    303a:	06 94       	lsr	r0
    303c:	a1 f7       	brne	.-24     	; 0x3026 <__ftoa_engine+0x90>
    303e:	05 90       	lpm	r0, Z+
    3040:	07 94       	ror	r0
    3042:	28 f4       	brcc	.+10     	; 0x304e <__ftoa_engine+0xb8>
    3044:	f8 0e       	add	r15, r24
    3046:	49 1f       	adc	r20, r25
    3048:	56 1f       	adc	r21, r22
    304a:	c7 1f       	adc	r28, r23
    304c:	d1 1d       	adc	r29, r1
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	66 1f       	adc	r22, r22
    3054:	77 1f       	adc	r23, r23
    3056:	06 94       	lsr	r0
    3058:	a1 f7       	brne	.-24     	; 0x3042 <__ftoa_engine+0xac>
    305a:	05 90       	lpm	r0, Z+
    305c:	07 94       	ror	r0
    305e:	20 f4       	brcc	.+8      	; 0x3068 <__ftoa_engine+0xd2>
    3060:	49 0f       	add	r20, r25
    3062:	56 1f       	adc	r21, r22
    3064:	c7 1f       	adc	r28, r23
    3066:	d8 1f       	adc	r29, r24
    3068:	99 0f       	add	r25, r25
    306a:	66 1f       	adc	r22, r22
    306c:	77 1f       	adc	r23, r23
    306e:	88 1f       	adc	r24, r24
    3070:	06 94       	lsr	r0
    3072:	a9 f7       	brne	.-22     	; 0x305e <__ftoa_engine+0xc8>
    3074:	84 91       	lpm	r24, Z
    3076:	10 95       	com	r17
    3078:	17 70       	andi	r17, 0x07	; 7
    307a:	41 f0       	breq	.+16     	; 0x308c <__ftoa_engine+0xf6>
    307c:	d6 95       	lsr	r29
    307e:	c7 95       	ror	r28
    3080:	57 95       	ror	r21
    3082:	47 95       	ror	r20
    3084:	f7 94       	ror	r15
    3086:	e7 94       	ror	r14
    3088:	1a 95       	dec	r17
    308a:	c1 f7       	brne	.-16     	; 0x307c <__ftoa_engine+0xe6>
    308c:	ee ea       	ldi	r30, 0xAE	; 174
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	68 94       	set
    3092:	15 90       	lpm	r1, Z+
    3094:	15 91       	lpm	r17, Z+
    3096:	35 91       	lpm	r19, Z+
    3098:	65 91       	lpm	r22, Z+
    309a:	95 91       	lpm	r25, Z+
    309c:	05 90       	lpm	r0, Z+
    309e:	7f e2       	ldi	r23, 0x2F	; 47
    30a0:	73 95       	inc	r23
    30a2:	e1 18       	sub	r14, r1
    30a4:	f1 0a       	sbc	r15, r17
    30a6:	43 0b       	sbc	r20, r19
    30a8:	56 0b       	sbc	r21, r22
    30aa:	c9 0b       	sbc	r28, r25
    30ac:	d0 09       	sbc	r29, r0
    30ae:	c0 f7       	brcc	.-16     	; 0x30a0 <__ftoa_engine+0x10a>
    30b0:	e1 0c       	add	r14, r1
    30b2:	f1 1e       	adc	r15, r17
    30b4:	43 1f       	adc	r20, r19
    30b6:	56 1f       	adc	r21, r22
    30b8:	c9 1f       	adc	r28, r25
    30ba:	d0 1d       	adc	r29, r0
    30bc:	7e f4       	brtc	.+30     	; 0x30dc <__ftoa_engine+0x146>
    30be:	70 33       	cpi	r23, 0x30	; 48
    30c0:	11 f4       	brne	.+4      	; 0x30c6 <__ftoa_engine+0x130>
    30c2:	8a 95       	dec	r24
    30c4:	e6 cf       	rjmp	.-52     	; 0x3092 <__ftoa_engine+0xfc>
    30c6:	e8 94       	clt
    30c8:	01 50       	subi	r16, 0x01	; 1
    30ca:	30 f0       	brcs	.+12     	; 0x30d8 <__ftoa_engine+0x142>
    30cc:	08 0f       	add	r16, r24
    30ce:	0a f4       	brpl	.+2      	; 0x30d2 <__ftoa_engine+0x13c>
    30d0:	00 27       	eor	r16, r16
    30d2:	02 17       	cp	r16, r18
    30d4:	08 f4       	brcc	.+2      	; 0x30d8 <__ftoa_engine+0x142>
    30d6:	20 2f       	mov	r18, r16
    30d8:	23 95       	inc	r18
    30da:	02 2f       	mov	r16, r18
    30dc:	7a 33       	cpi	r23, 0x3A	; 58
    30de:	28 f0       	brcs	.+10     	; 0x30ea <__ftoa_engine+0x154>
    30e0:	79 e3       	ldi	r23, 0x39	; 57
    30e2:	7d 93       	st	X+, r23
    30e4:	2a 95       	dec	r18
    30e6:	e9 f7       	brne	.-6      	; 0x30e2 <__ftoa_engine+0x14c>
    30e8:	10 c0       	rjmp	.+32     	; 0x310a <__ftoa_engine+0x174>
    30ea:	7d 93       	st	X+, r23
    30ec:	2a 95       	dec	r18
    30ee:	89 f6       	brne	.-94     	; 0x3092 <__ftoa_engine+0xfc>
    30f0:	06 94       	lsr	r0
    30f2:	97 95       	ror	r25
    30f4:	67 95       	ror	r22
    30f6:	37 95       	ror	r19
    30f8:	17 95       	ror	r17
    30fa:	17 94       	ror	r1
    30fc:	e1 18       	sub	r14, r1
    30fe:	f1 0a       	sbc	r15, r17
    3100:	43 0b       	sbc	r20, r19
    3102:	56 0b       	sbc	r21, r22
    3104:	c9 0b       	sbc	r28, r25
    3106:	d0 09       	sbc	r29, r0
    3108:	98 f0       	brcs	.+38     	; 0x3130 <__ftoa_engine+0x19a>
    310a:	23 95       	inc	r18
    310c:	7e 91       	ld	r23, -X
    310e:	73 95       	inc	r23
    3110:	7a 33       	cpi	r23, 0x3A	; 58
    3112:	08 f0       	brcs	.+2      	; 0x3116 <__ftoa_engine+0x180>
    3114:	70 e3       	ldi	r23, 0x30	; 48
    3116:	7c 93       	st	X, r23
    3118:	20 13       	cpse	r18, r16
    311a:	b8 f7       	brcc	.-18     	; 0x310a <__ftoa_engine+0x174>
    311c:	7e 91       	ld	r23, -X
    311e:	70 61       	ori	r23, 0x10	; 16
    3120:	7d 93       	st	X+, r23
    3122:	30 f0       	brcs	.+12     	; 0x3130 <__ftoa_engine+0x19a>
    3124:	83 95       	inc	r24
    3126:	71 e3       	ldi	r23, 0x31	; 49
    3128:	7d 93       	st	X+, r23
    312a:	70 e3       	ldi	r23, 0x30	; 48
    312c:	2a 95       	dec	r18
    312e:	e1 f7       	brne	.-8      	; 0x3128 <__ftoa_engine+0x192>
    3130:	11 24       	eor	r1, r1
    3132:	ef 90       	pop	r14
    3134:	ff 90       	pop	r15
    3136:	0f 91       	pop	r16
    3138:	1f 91       	pop	r17
    313a:	cf 91       	pop	r28
    313c:	df 91       	pop	r29
    313e:	99 27       	eor	r25, r25
    3140:	87 fd       	sbrc	r24, 7
    3142:	90 95       	com	r25
    3144:	08 95       	ret

00003146 <strnlen_P>:
    3146:	fc 01       	movw	r30, r24
    3148:	05 90       	lpm	r0, Z+
    314a:	61 50       	subi	r22, 0x01	; 1
    314c:	70 40       	sbci	r23, 0x00	; 0
    314e:	01 10       	cpse	r0, r1
    3150:	d8 f7       	brcc	.-10     	; 0x3148 <strnlen_P+0x2>
    3152:	80 95       	com	r24
    3154:	90 95       	com	r25
    3156:	8e 0f       	add	r24, r30
    3158:	9f 1f       	adc	r25, r31
    315a:	08 95       	ret

0000315c <strtok>:
    315c:	42 e5       	ldi	r20, 0x52	; 82
    315e:	55 e0       	ldi	r21, 0x05	; 5
    3160:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <strtok_r>
    3164:	08 95       	ret

00003166 <strchr>:
    3166:	fc 01       	movw	r30, r24
    3168:	81 91       	ld	r24, Z+
    316a:	86 17       	cp	r24, r22
    316c:	21 f0       	breq	.+8      	; 0x3176 <strchr+0x10>
    316e:	88 23       	and	r24, r24
    3170:	d9 f7       	brne	.-10     	; 0x3168 <strchr+0x2>
    3172:	99 27       	eor	r25, r25
    3174:	08 95       	ret
    3176:	31 97       	sbiw	r30, 0x01	; 1
    3178:	cf 01       	movw	r24, r30
    317a:	08 95       	ret

0000317c <strcpy>:
    317c:	fb 01       	movw	r30, r22
    317e:	dc 01       	movw	r26, r24
    3180:	01 90       	ld	r0, Z+
    3182:	0d 92       	st	X+, r0
    3184:	00 20       	and	r0, r0
    3186:	e1 f7       	brne	.-8      	; 0x3180 <strcpy+0x4>
    3188:	08 95       	ret

0000318a <strnlen>:
    318a:	fc 01       	movw	r30, r24
    318c:	61 50       	subi	r22, 0x01	; 1
    318e:	70 40       	sbci	r23, 0x00	; 0
    3190:	01 90       	ld	r0, Z+
    3192:	01 10       	cpse	r0, r1
    3194:	d8 f7       	brcc	.-10     	; 0x318c <strnlen+0x2>
    3196:	80 95       	com	r24
    3198:	90 95       	com	r25
    319a:	8e 0f       	add	r24, r30
    319c:	9f 1f       	adc	r25, r31
    319e:	08 95       	ret

000031a0 <strtok_r>:
    31a0:	fa 01       	movw	r30, r20
    31a2:	a1 91       	ld	r26, Z+
    31a4:	b0 81       	ld	r27, Z
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	19 f4       	brne	.+6      	; 0x31b0 <strtok_r+0x10>
    31aa:	10 97       	sbiw	r26, 0x00	; 0
    31ac:	e1 f0       	breq	.+56     	; 0x31e6 <strtok_r+0x46>
    31ae:	cd 01       	movw	r24, r26
    31b0:	dc 01       	movw	r26, r24
    31b2:	cd 01       	movw	r24, r26
    31b4:	0d 90       	ld	r0, X+
    31b6:	00 20       	and	r0, r0
    31b8:	11 f4       	brne	.+4      	; 0x31be <strtok_r+0x1e>
    31ba:	c0 01       	movw	r24, r0
    31bc:	13 c0       	rjmp	.+38     	; 0x31e4 <strtok_r+0x44>
    31be:	fb 01       	movw	r30, r22
    31c0:	21 91       	ld	r18, Z+
    31c2:	22 23       	and	r18, r18
    31c4:	19 f0       	breq	.+6      	; 0x31cc <strtok_r+0x2c>
    31c6:	20 15       	cp	r18, r0
    31c8:	d9 f7       	brne	.-10     	; 0x31c0 <strtok_r+0x20>
    31ca:	f3 cf       	rjmp	.-26     	; 0x31b2 <strtok_r+0x12>
    31cc:	fb 01       	movw	r30, r22
    31ce:	21 91       	ld	r18, Z+
    31d0:	20 15       	cp	r18, r0
    31d2:	19 f4       	brne	.+6      	; 0x31da <strtok_r+0x3a>
    31d4:	1e 92       	st	-X, r1
    31d6:	11 96       	adiw	r26, 0x01	; 1
    31d8:	06 c0       	rjmp	.+12     	; 0x31e6 <strtok_r+0x46>
    31da:	22 23       	and	r18, r18
    31dc:	c1 f7       	brne	.-16     	; 0x31ce <strtok_r+0x2e>
    31de:	0d 90       	ld	r0, X+
    31e0:	00 20       	and	r0, r0
    31e2:	a1 f7       	brne	.-24     	; 0x31cc <strtok_r+0x2c>
    31e4:	d0 01       	movw	r26, r0
    31e6:	fa 01       	movw	r30, r20
    31e8:	a1 93       	st	Z+, r26
    31ea:	b0 83       	st	Z, r27
    31ec:	08 95       	ret

000031ee <__itoa_ncheck>:
    31ee:	bb 27       	eor	r27, r27
    31f0:	4a 30       	cpi	r20, 0x0A	; 10
    31f2:	31 f4       	brne	.+12     	; 0x3200 <__itoa_ncheck+0x12>
    31f4:	99 23       	and	r25, r25
    31f6:	22 f4       	brpl	.+8      	; 0x3200 <__itoa_ncheck+0x12>
    31f8:	bd e2       	ldi	r27, 0x2D	; 45
    31fa:	90 95       	com	r25
    31fc:	81 95       	neg	r24
    31fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3200:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__utoa_common>

00003204 <__mulhi_const_10>:
    3204:	7a e0       	ldi	r23, 0x0A	; 10
    3206:	97 9f       	mul	r25, r23
    3208:	90 2d       	mov	r25, r0
    320a:	87 9f       	mul	r24, r23
    320c:	80 2d       	mov	r24, r0
    320e:	91 0d       	add	r25, r1
    3210:	11 24       	eor	r1, r1
    3212:	08 95       	ret

00003214 <__utoa_ncheck>:
    3214:	bb 27       	eor	r27, r27

00003216 <__utoa_common>:
    3216:	fb 01       	movw	r30, r22
    3218:	55 27       	eor	r21, r21
    321a:	aa 27       	eor	r26, r26
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	aa 1f       	adc	r26, r26
    3222:	a4 17       	cp	r26, r20
    3224:	10 f0       	brcs	.+4      	; 0x322a <__utoa_common+0x14>
    3226:	a4 1b       	sub	r26, r20
    3228:	83 95       	inc	r24
    322a:	50 51       	subi	r21, 0x10	; 16
    322c:	b9 f7       	brne	.-18     	; 0x321c <__utoa_common+0x6>
    322e:	a0 5d       	subi	r26, 0xD0	; 208
    3230:	aa 33       	cpi	r26, 0x3A	; 58
    3232:	08 f0       	brcs	.+2      	; 0x3236 <__utoa_common+0x20>
    3234:	a9 5d       	subi	r26, 0xD9	; 217
    3236:	a1 93       	st	Z+, r26
    3238:	00 97       	sbiw	r24, 0x00	; 0
    323a:	79 f7       	brne	.-34     	; 0x321a <__utoa_common+0x4>
    323c:	b1 11       	cpse	r27, r1
    323e:	b1 93       	st	Z+, r27
    3240:	11 92       	st	Z+, r1
    3242:	cb 01       	movw	r24, r22
    3244:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <strrev>

00003248 <fputc>:
    3248:	0f 93       	push	r16
    324a:	1f 93       	push	r17
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	18 2f       	mov	r17, r24
    3252:	09 2f       	mov	r16, r25
    3254:	eb 01       	movw	r28, r22
    3256:	8b 81       	ldd	r24, Y+3	; 0x03
    3258:	81 fd       	sbrc	r24, 1
    325a:	03 c0       	rjmp	.+6      	; 0x3262 <fputc+0x1a>
    325c:	8f ef       	ldi	r24, 0xFF	; 255
    325e:	9f ef       	ldi	r25, 0xFF	; 255
    3260:	20 c0       	rjmp	.+64     	; 0x32a2 <fputc+0x5a>
    3262:	82 ff       	sbrs	r24, 2
    3264:	10 c0       	rjmp	.+32     	; 0x3286 <fputc+0x3e>
    3266:	4e 81       	ldd	r20, Y+6	; 0x06
    3268:	5f 81       	ldd	r21, Y+7	; 0x07
    326a:	2c 81       	ldd	r18, Y+4	; 0x04
    326c:	3d 81       	ldd	r19, Y+5	; 0x05
    326e:	42 17       	cp	r20, r18
    3270:	53 07       	cpc	r21, r19
    3272:	7c f4       	brge	.+30     	; 0x3292 <fputc+0x4a>
    3274:	e8 81       	ld	r30, Y
    3276:	f9 81       	ldd	r31, Y+1	; 0x01
    3278:	9f 01       	movw	r18, r30
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	39 83       	std	Y+1, r19	; 0x01
    3280:	28 83       	st	Y, r18
    3282:	10 83       	st	Z, r17
    3284:	06 c0       	rjmp	.+12     	; 0x3292 <fputc+0x4a>
    3286:	e8 85       	ldd	r30, Y+8	; 0x08
    3288:	f9 85       	ldd	r31, Y+9	; 0x09
    328a:	81 2f       	mov	r24, r17
    328c:	09 95       	icall
    328e:	89 2b       	or	r24, r25
    3290:	29 f7       	brne	.-54     	; 0x325c <fputc+0x14>
    3292:	2e 81       	ldd	r18, Y+6	; 0x06
    3294:	3f 81       	ldd	r19, Y+7	; 0x07
    3296:	2f 5f       	subi	r18, 0xFF	; 255
    3298:	3f 4f       	sbci	r19, 0xFF	; 255
    329a:	3f 83       	std	Y+7, r19	; 0x07
    329c:	2e 83       	std	Y+6, r18	; 0x06
    329e:	81 2f       	mov	r24, r17
    32a0:	90 2f       	mov	r25, r16
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	08 95       	ret

000032ac <sprintf>:
    32ac:	ae e0       	ldi	r26, 0x0E	; 14
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	ec e5       	ldi	r30, 0x5C	; 92
    32b2:	f9 e1       	ldi	r31, 0x19	; 25
    32b4:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__prologue_saves__+0x1c>
    32b8:	0d 89       	ldd	r16, Y+21	; 0x15
    32ba:	1e 89       	ldd	r17, Y+22	; 0x16
    32bc:	86 e0       	ldi	r24, 0x06	; 6
    32be:	8c 83       	std	Y+4, r24	; 0x04
    32c0:	1a 83       	std	Y+2, r17	; 0x02
    32c2:	09 83       	std	Y+1, r16	; 0x01
    32c4:	8f ef       	ldi	r24, 0xFF	; 255
    32c6:	9f e7       	ldi	r25, 0x7F	; 127
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
    32cc:	ae 01       	movw	r20, r28
    32ce:	47 5e       	subi	r20, 0xE7	; 231
    32d0:	5f 4f       	sbci	r21, 0xFF	; 255
    32d2:	6f 89       	ldd	r22, Y+23	; 0x17
    32d4:	78 8d       	ldd	r23, Y+24	; 0x18
    32d6:	ce 01       	movw	r24, r28
    32d8:	01 96       	adiw	r24, 0x01	; 1
    32da:	0e 94 83 10 	call	0x2106	; 0x2106 <vfprintf>
    32de:	ef 81       	ldd	r30, Y+7	; 0x07
    32e0:	f8 85       	ldd	r31, Y+8	; 0x08
    32e2:	e0 0f       	add	r30, r16
    32e4:	f1 1f       	adc	r31, r17
    32e6:	10 82       	st	Z, r1
    32e8:	2e 96       	adiw	r28, 0x0e	; 14
    32ea:	e4 e0       	ldi	r30, 0x04	; 4
    32ec:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__epilogue_restores__+0x1c>

000032f0 <__ultoa_invert>:
    32f0:	fa 01       	movw	r30, r20
    32f2:	aa 27       	eor	r26, r26
    32f4:	28 30       	cpi	r18, 0x08	; 8
    32f6:	51 f1       	breq	.+84     	; 0x334c <__ultoa_invert+0x5c>
    32f8:	20 31       	cpi	r18, 0x10	; 16
    32fa:	81 f1       	breq	.+96     	; 0x335c <__ultoa_invert+0x6c>
    32fc:	e8 94       	clt
    32fe:	6f 93       	push	r22
    3300:	6e 7f       	andi	r22, 0xFE	; 254
    3302:	6e 5f       	subi	r22, 0xFE	; 254
    3304:	7f 4f       	sbci	r23, 0xFF	; 255
    3306:	8f 4f       	sbci	r24, 0xFF	; 255
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	af 4f       	sbci	r26, 0xFF	; 255
    330c:	b1 e0       	ldi	r27, 0x01	; 1
    330e:	3e d0       	rcall	.+124    	; 0x338c <__ultoa_invert+0x9c>
    3310:	b4 e0       	ldi	r27, 0x04	; 4
    3312:	3c d0       	rcall	.+120    	; 0x338c <__ultoa_invert+0x9c>
    3314:	67 0f       	add	r22, r23
    3316:	78 1f       	adc	r23, r24
    3318:	89 1f       	adc	r24, r25
    331a:	9a 1f       	adc	r25, r26
    331c:	a1 1d       	adc	r26, r1
    331e:	68 0f       	add	r22, r24
    3320:	79 1f       	adc	r23, r25
    3322:	8a 1f       	adc	r24, r26
    3324:	91 1d       	adc	r25, r1
    3326:	a1 1d       	adc	r26, r1
    3328:	6a 0f       	add	r22, r26
    332a:	71 1d       	adc	r23, r1
    332c:	81 1d       	adc	r24, r1
    332e:	91 1d       	adc	r25, r1
    3330:	a1 1d       	adc	r26, r1
    3332:	20 d0       	rcall	.+64     	; 0x3374 <__ultoa_invert+0x84>
    3334:	09 f4       	brne	.+2      	; 0x3338 <__ultoa_invert+0x48>
    3336:	68 94       	set
    3338:	3f 91       	pop	r19
    333a:	2a e0       	ldi	r18, 0x0A	; 10
    333c:	26 9f       	mul	r18, r22
    333e:	11 24       	eor	r1, r1
    3340:	30 19       	sub	r19, r0
    3342:	30 5d       	subi	r19, 0xD0	; 208
    3344:	31 93       	st	Z+, r19
    3346:	de f6       	brtc	.-74     	; 0x32fe <__ultoa_invert+0xe>
    3348:	cf 01       	movw	r24, r30
    334a:	08 95       	ret
    334c:	46 2f       	mov	r20, r22
    334e:	47 70       	andi	r20, 0x07	; 7
    3350:	40 5d       	subi	r20, 0xD0	; 208
    3352:	41 93       	st	Z+, r20
    3354:	b3 e0       	ldi	r27, 0x03	; 3
    3356:	0f d0       	rcall	.+30     	; 0x3376 <__ultoa_invert+0x86>
    3358:	c9 f7       	brne	.-14     	; 0x334c <__ultoa_invert+0x5c>
    335a:	f6 cf       	rjmp	.-20     	; 0x3348 <__ultoa_invert+0x58>
    335c:	46 2f       	mov	r20, r22
    335e:	4f 70       	andi	r20, 0x0F	; 15
    3360:	40 5d       	subi	r20, 0xD0	; 208
    3362:	4a 33       	cpi	r20, 0x3A	; 58
    3364:	18 f0       	brcs	.+6      	; 0x336c <__ultoa_invert+0x7c>
    3366:	49 5d       	subi	r20, 0xD9	; 217
    3368:	31 fd       	sbrc	r19, 1
    336a:	40 52       	subi	r20, 0x20	; 32
    336c:	41 93       	st	Z+, r20
    336e:	02 d0       	rcall	.+4      	; 0x3374 <__ultoa_invert+0x84>
    3370:	a9 f7       	brne	.-22     	; 0x335c <__ultoa_invert+0x6c>
    3372:	ea cf       	rjmp	.-44     	; 0x3348 <__ultoa_invert+0x58>
    3374:	b4 e0       	ldi	r27, 0x04	; 4
    3376:	a6 95       	lsr	r26
    3378:	97 95       	ror	r25
    337a:	87 95       	ror	r24
    337c:	77 95       	ror	r23
    337e:	67 95       	ror	r22
    3380:	ba 95       	dec	r27
    3382:	c9 f7       	brne	.-14     	; 0x3376 <__ultoa_invert+0x86>
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	61 05       	cpc	r22, r1
    3388:	71 05       	cpc	r23, r1
    338a:	08 95       	ret
    338c:	9b 01       	movw	r18, r22
    338e:	ac 01       	movw	r20, r24
    3390:	0a 2e       	mov	r0, r26
    3392:	06 94       	lsr	r0
    3394:	57 95       	ror	r21
    3396:	47 95       	ror	r20
    3398:	37 95       	ror	r19
    339a:	27 95       	ror	r18
    339c:	ba 95       	dec	r27
    339e:	c9 f7       	brne	.-14     	; 0x3392 <__ultoa_invert+0xa2>
    33a0:	62 0f       	add	r22, r18
    33a2:	73 1f       	adc	r23, r19
    33a4:	84 1f       	adc	r24, r20
    33a6:	95 1f       	adc	r25, r21
    33a8:	a0 1d       	adc	r26, r0
    33aa:	08 95       	ret

000033ac <__eerd_dword_m328p>:
    33ac:	a6 e1       	ldi	r26, 0x16	; 22
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	44 e0       	ldi	r20, 0x04	; 4
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__eerd_blraw_m328p>

000033b8 <__eerd_word_m328p>:
    33b8:	a8 e1       	ldi	r26, 0x18	; 24
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	42 e0       	ldi	r20, 0x02	; 2
    33be:	50 e0       	ldi	r21, 0x00	; 0
    33c0:	0c 94 07 1d 	jmp	0x3a0e	; 0x3a0e <__eerd_blraw_m328p>

000033c4 <__eeupd_dword_m328p>:
    33c4:	03 96       	adiw	r24, 0x03	; 3
    33c6:	27 2f       	mov	r18, r23
    33c8:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__eeupd_r18_m328p>
    33cc:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <__eeupd_byte_m328p>
    33d0:	25 2f       	mov	r18, r21
    33d2:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__eeupd_r18_m328p>
    33d6:	24 2f       	mov	r18, r20
    33d8:	0c 94 16 1d 	jmp	0x3a2c	; 0x3a2c <__eeupd_r18_m328p>

000033dc <__eeupd_word_m328p>:
    33dc:	01 96       	adiw	r24, 0x01	; 1
    33de:	27 2f       	mov	r18, r23
    33e0:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <__eeupd_r18_m328p>
    33e4:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__eeupd_byte_m328p>

000033e8 <dtoa_prf>:
    33e8:	6f 92       	push	r6
    33ea:	7f 92       	push	r7
    33ec:	9f 92       	push	r9
    33ee:	af 92       	push	r10
    33f0:	bf 92       	push	r11
    33f2:	cf 92       	push	r12
    33f4:	df 92       	push	r13
    33f6:	ef 92       	push	r14
    33f8:	ff 92       	push	r15
    33fa:	0f 93       	push	r16
    33fc:	1f 93       	push	r17
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	29 97       	sbiw	r28, 0x09	; 9
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	6a 01       	movw	r12, r20
    3414:	b2 2e       	mov	r11, r18
    3416:	10 2f       	mov	r17, r16
    3418:	0c 33       	cpi	r16, 0x3C	; 60
    341a:	20 f4       	brcc	.+8      	; 0x3424 <dtoa_prf+0x3c>
    341c:	ff 24       	eor	r15, r15
    341e:	f3 94       	inc	r15
    3420:	f0 0e       	add	r15, r16
    3422:	02 c0       	rjmp	.+4      	; 0x3428 <dtoa_prf+0x40>
    3424:	4c e3       	ldi	r20, 0x3C	; 60
    3426:	f4 2e       	mov	r15, r20
    3428:	0f 2d       	mov	r16, r15
    342a:	27 e0       	ldi	r18, 0x07	; 7
    342c:	ae 01       	movw	r20, r28
    342e:	4f 5f       	subi	r20, 0xFF	; 255
    3430:	5f 4f       	sbci	r21, 0xFF	; 255
    3432:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__ftoa_engine>
    3436:	79 81       	ldd	r23, Y+1	; 0x01
    3438:	27 2f       	mov	r18, r23
    343a:	29 70       	andi	r18, 0x09	; 9
    343c:	21 30       	cpi	r18, 0x01	; 1
    343e:	31 f0       	breq	.+12     	; 0x344c <dtoa_prf+0x64>
    3440:	e1 fc       	sbrc	r14, 1
    3442:	06 c0       	rjmp	.+12     	; 0x3450 <dtoa_prf+0x68>
    3444:	e0 fc       	sbrc	r14, 0
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <dtoa_prf+0x6c>
    3448:	60 e0       	ldi	r22, 0x00	; 0
    344a:	05 c0       	rjmp	.+10     	; 0x3456 <dtoa_prf+0x6e>
    344c:	6d e2       	ldi	r22, 0x2D	; 45
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <dtoa_prf+0x6e>
    3450:	6b e2       	ldi	r22, 0x2B	; 43
    3452:	01 c0       	rjmp	.+2      	; 0x3456 <dtoa_prf+0x6e>
    3454:	60 e2       	ldi	r22, 0x20	; 32
    3456:	ae 2d       	mov	r26, r14
    3458:	a0 71       	andi	r26, 0x10	; 16
    345a:	73 ff       	sbrs	r23, 3
    345c:	36 c0       	rjmp	.+108    	; 0x34ca <dtoa_prf+0xe2>
    345e:	66 23       	and	r22, r22
    3460:	11 f0       	breq	.+4      	; 0x3466 <dtoa_prf+0x7e>
    3462:	84 e0       	ldi	r24, 0x04	; 4
    3464:	01 c0       	rjmp	.+2      	; 0x3468 <dtoa_prf+0x80>
    3466:	83 e0       	ldi	r24, 0x03	; 3
    3468:	8b 15       	cp	r24, r11
    346a:	10 f4       	brcc	.+4      	; 0x3470 <dtoa_prf+0x88>
    346c:	b8 1a       	sub	r11, r24
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <dtoa_prf+0x8a>
    3470:	b1 2c       	mov	r11, r1
    3472:	a1 11       	cpse	r26, r1
    3474:	0b c0       	rjmp	.+22     	; 0x348c <dtoa_prf+0xa4>
    3476:	f6 01       	movw	r30, r12
    3478:	8b 2d       	mov	r24, r11
    347a:	90 e2       	ldi	r25, 0x20	; 32
    347c:	88 23       	and	r24, r24
    347e:	19 f0       	breq	.+6      	; 0x3486 <dtoa_prf+0x9e>
    3480:	91 93       	st	Z+, r25
    3482:	81 50       	subi	r24, 0x01	; 1
    3484:	fb cf       	rjmp	.-10     	; 0x347c <dtoa_prf+0x94>
    3486:	cb 0c       	add	r12, r11
    3488:	d1 1c       	adc	r13, r1
    348a:	b1 2c       	mov	r11, r1
    348c:	66 23       	and	r22, r22
    348e:	31 f0       	breq	.+12     	; 0x349c <dtoa_prf+0xb4>
    3490:	f6 01       	movw	r30, r12
    3492:	60 83       	st	Z, r22
    3494:	96 01       	movw	r18, r12
    3496:	2f 5f       	subi	r18, 0xFF	; 255
    3498:	3f 4f       	sbci	r19, 0xFF	; 255
    349a:	69 01       	movw	r12, r18
    349c:	c6 01       	movw	r24, r12
    349e:	03 96       	adiw	r24, 0x03	; 3
    34a0:	e2 fe       	sbrs	r14, 2
    34a2:	05 c0       	rjmp	.+10     	; 0x34ae <dtoa_prf+0xc6>
    34a4:	2e e4       	ldi	r18, 0x4E	; 78
    34a6:	f6 01       	movw	r30, r12
    34a8:	20 83       	st	Z, r18
    34aa:	31 e4       	ldi	r19, 0x41	; 65
    34ac:	04 c0       	rjmp	.+8      	; 0x34b6 <dtoa_prf+0xce>
    34ae:	2e e6       	ldi	r18, 0x6E	; 110
    34b0:	f6 01       	movw	r30, r12
    34b2:	20 83       	st	Z, r18
    34b4:	31 e6       	ldi	r19, 0x61	; 97
    34b6:	31 83       	std	Z+1, r19	; 0x01
    34b8:	22 83       	std	Z+2, r18	; 0x02
    34ba:	fc 01       	movw	r30, r24
    34bc:	2b 2d       	mov	r18, r11
    34be:	30 e2       	ldi	r19, 0x20	; 32
    34c0:	22 23       	and	r18, r18
    34c2:	f1 f1       	breq	.+124    	; 0x3540 <dtoa_prf+0x158>
    34c4:	31 93       	st	Z+, r19
    34c6:	21 50       	subi	r18, 0x01	; 1
    34c8:	fb cf       	rjmp	.-10     	; 0x34c0 <dtoa_prf+0xd8>
    34ca:	72 ff       	sbrs	r23, 2
    34cc:	40 c0       	rjmp	.+128    	; 0x354e <dtoa_prf+0x166>
    34ce:	66 23       	and	r22, r22
    34d0:	11 f0       	breq	.+4      	; 0x34d6 <dtoa_prf+0xee>
    34d2:	84 e0       	ldi	r24, 0x04	; 4
    34d4:	01 c0       	rjmp	.+2      	; 0x34d8 <dtoa_prf+0xf0>
    34d6:	83 e0       	ldi	r24, 0x03	; 3
    34d8:	8b 15       	cp	r24, r11
    34da:	10 f4       	brcc	.+4      	; 0x34e0 <dtoa_prf+0xf8>
    34dc:	b8 1a       	sub	r11, r24
    34de:	01 c0       	rjmp	.+2      	; 0x34e2 <dtoa_prf+0xfa>
    34e0:	b1 2c       	mov	r11, r1
    34e2:	a1 11       	cpse	r26, r1
    34e4:	0b c0       	rjmp	.+22     	; 0x34fc <dtoa_prf+0x114>
    34e6:	f6 01       	movw	r30, r12
    34e8:	8b 2d       	mov	r24, r11
    34ea:	90 e2       	ldi	r25, 0x20	; 32
    34ec:	88 23       	and	r24, r24
    34ee:	19 f0       	breq	.+6      	; 0x34f6 <dtoa_prf+0x10e>
    34f0:	91 93       	st	Z+, r25
    34f2:	81 50       	subi	r24, 0x01	; 1
    34f4:	fb cf       	rjmp	.-10     	; 0x34ec <dtoa_prf+0x104>
    34f6:	cb 0c       	add	r12, r11
    34f8:	d1 1c       	adc	r13, r1
    34fa:	b1 2c       	mov	r11, r1
    34fc:	66 23       	and	r22, r22
    34fe:	31 f0       	breq	.+12     	; 0x350c <dtoa_prf+0x124>
    3500:	f6 01       	movw	r30, r12
    3502:	60 83       	st	Z, r22
    3504:	96 01       	movw	r18, r12
    3506:	2f 5f       	subi	r18, 0xFF	; 255
    3508:	3f 4f       	sbci	r19, 0xFF	; 255
    350a:	69 01       	movw	r12, r18
    350c:	c6 01       	movw	r24, r12
    350e:	03 96       	adiw	r24, 0x03	; 3
    3510:	e2 fe       	sbrs	r14, 2
    3512:	07 c0       	rjmp	.+14     	; 0x3522 <dtoa_prf+0x13a>
    3514:	29 e4       	ldi	r18, 0x49	; 73
    3516:	f6 01       	movw	r30, r12
    3518:	20 83       	st	Z, r18
    351a:	2e e4       	ldi	r18, 0x4E	; 78
    351c:	21 83       	std	Z+1, r18	; 0x01
    351e:	26 e4       	ldi	r18, 0x46	; 70
    3520:	06 c0       	rjmp	.+12     	; 0x352e <dtoa_prf+0x146>
    3522:	29 e6       	ldi	r18, 0x69	; 105
    3524:	f6 01       	movw	r30, r12
    3526:	20 83       	st	Z, r18
    3528:	2e e6       	ldi	r18, 0x6E	; 110
    352a:	21 83       	std	Z+1, r18	; 0x01
    352c:	26 e6       	ldi	r18, 0x66	; 102
    352e:	22 83       	std	Z+2, r18	; 0x02
    3530:	fc 01       	movw	r30, r24
    3532:	2b 2d       	mov	r18, r11
    3534:	30 e2       	ldi	r19, 0x20	; 32
    3536:	22 23       	and	r18, r18
    3538:	19 f0       	breq	.+6      	; 0x3540 <dtoa_prf+0x158>
    353a:	31 93       	st	Z+, r19
    353c:	21 50       	subi	r18, 0x01	; 1
    353e:	fb cf       	rjmp	.-10     	; 0x3536 <dtoa_prf+0x14e>
    3540:	fc 01       	movw	r30, r24
    3542:	eb 0d       	add	r30, r11
    3544:	f1 1d       	adc	r31, r1
    3546:	10 82       	st	Z, r1
    3548:	8e ef       	ldi	r24, 0xFE	; 254
    354a:	9f ef       	ldi	r25, 0xFF	; 255
    354c:	b7 c0       	rjmp	.+366    	; 0x36bc <dtoa_prf+0x2d4>
    354e:	b1 e0       	ldi	r27, 0x01	; 1
    3550:	61 11       	cpse	r22, r1
    3552:	01 c0       	rjmp	.+2      	; 0x3556 <dtoa_prf+0x16e>
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	4b 2f       	mov	r20, r27
    3558:	50 e0       	ldi	r21, 0x00	; 0
    355a:	18 16       	cp	r1, r24
    355c:	19 06       	cpc	r1, r25
    355e:	24 f4       	brge	.+8      	; 0x3568 <dtoa_prf+0x180>
    3560:	9c 01       	movw	r18, r24
    3562:	2f 5f       	subi	r18, 0xFF	; 255
    3564:	3f 4f       	sbci	r19, 0xFF	; 255
    3566:	02 c0       	rjmp	.+4      	; 0x356c <dtoa_prf+0x184>
    3568:	21 e0       	ldi	r18, 0x01	; 1
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	24 0f       	add	r18, r20
    356e:	35 1f       	adc	r19, r21
    3570:	11 23       	and	r17, r17
    3572:	29 f0       	breq	.+10     	; 0x357e <dtoa_prf+0x196>
    3574:	41 2f       	mov	r20, r17
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	4f 5f       	subi	r20, 0xFF	; 255
    357a:	5f 4f       	sbci	r21, 0xFF	; 255
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <dtoa_prf+0x19a>
    357e:	40 e0       	ldi	r20, 0x00	; 0
    3580:	50 e0       	ldi	r21, 0x00	; 0
    3582:	42 0f       	add	r20, r18
    3584:	53 1f       	adc	r21, r19
    3586:	2b 2d       	mov	r18, r11
    3588:	30 e0       	ldi	r19, 0x00	; 0
    358a:	42 17       	cp	r20, r18
    358c:	53 07       	cpc	r21, r19
    358e:	14 f4       	brge	.+4      	; 0x3594 <dtoa_prf+0x1ac>
    3590:	b4 1a       	sub	r11, r20
    3592:	01 c0       	rjmp	.+2      	; 0x3596 <dtoa_prf+0x1ae>
    3594:	b1 2c       	mov	r11, r1
    3596:	2e 2d       	mov	r18, r14
    3598:	28 71       	andi	r18, 0x18	; 24
    359a:	59 f4       	brne	.+22     	; 0x35b2 <dtoa_prf+0x1ca>
    359c:	f6 01       	movw	r30, r12
    359e:	2b 2d       	mov	r18, r11
    35a0:	30 e2       	ldi	r19, 0x20	; 32
    35a2:	22 23       	and	r18, r18
    35a4:	19 f0       	breq	.+6      	; 0x35ac <dtoa_prf+0x1c4>
    35a6:	31 93       	st	Z+, r19
    35a8:	21 50       	subi	r18, 0x01	; 1
    35aa:	fb cf       	rjmp	.-10     	; 0x35a2 <dtoa_prf+0x1ba>
    35ac:	cb 0c       	add	r12, r11
    35ae:	d1 1c       	adc	r13, r1
    35b0:	b1 2c       	mov	r11, r1
    35b2:	bb 23       	and	r27, r27
    35b4:	31 f0       	breq	.+12     	; 0x35c2 <dtoa_prf+0x1da>
    35b6:	f6 01       	movw	r30, r12
    35b8:	60 83       	st	Z, r22
    35ba:	96 01       	movw	r18, r12
    35bc:	2f 5f       	subi	r18, 0xFF	; 255
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	69 01       	movw	r12, r18
    35c2:	a1 11       	cpse	r26, r1
    35c4:	0b c0       	rjmp	.+22     	; 0x35dc <dtoa_prf+0x1f4>
    35c6:	f6 01       	movw	r30, r12
    35c8:	2b 2d       	mov	r18, r11
    35ca:	30 e3       	ldi	r19, 0x30	; 48
    35cc:	22 23       	and	r18, r18
    35ce:	19 f0       	breq	.+6      	; 0x35d6 <dtoa_prf+0x1ee>
    35d0:	31 93       	st	Z+, r19
    35d2:	21 50       	subi	r18, 0x01	; 1
    35d4:	fb cf       	rjmp	.-10     	; 0x35cc <dtoa_prf+0x1e4>
    35d6:	cb 0c       	add	r12, r11
    35d8:	d1 1c       	adc	r13, r1
    35da:	b1 2c       	mov	r11, r1
    35dc:	f8 0e       	add	r15, r24
    35de:	0a 81       	ldd	r16, Y+2	; 0x02
    35e0:	37 2f       	mov	r19, r23
    35e2:	30 71       	andi	r19, 0x10	; 16
    35e4:	a3 2e       	mov	r10, r19
    35e6:	74 ff       	sbrs	r23, 4
    35e8:	03 c0       	rjmp	.+6      	; 0x35f0 <dtoa_prf+0x208>
    35ea:	01 33       	cpi	r16, 0x31	; 49
    35ec:	09 f4       	brne	.+2      	; 0x35f0 <dtoa_prf+0x208>
    35ee:	fa 94       	dec	r15
    35f0:	1f 14       	cp	r1, r15
    35f2:	2c f4       	brge	.+10     	; 0x35fe <dtoa_prf+0x216>
    35f4:	2f 2d       	mov	r18, r15
    35f6:	29 30       	cpi	r18, 0x09	; 9
    35f8:	18 f0       	brcs	.+6      	; 0x3600 <dtoa_prf+0x218>
    35fa:	28 e0       	ldi	r18, 0x08	; 8
    35fc:	01 c0       	rjmp	.+2      	; 0x3600 <dtoa_prf+0x218>
    35fe:	21 e0       	ldi	r18, 0x01	; 1
    3600:	68 2f       	mov	r22, r24
    3602:	39 2f       	mov	r19, r25
    3604:	97 ff       	sbrs	r25, 7
    3606:	02 c0       	rjmp	.+4      	; 0x360c <dtoa_prf+0x224>
    3608:	60 e0       	ldi	r22, 0x00	; 0
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	46 2f       	mov	r20, r22
    360e:	53 2f       	mov	r21, r19
    3610:	61 2c       	mov	r6, r1
    3612:	71 2c       	mov	r7, r1
    3614:	3e e2       	ldi	r19, 0x2E	; 46
    3616:	93 2e       	mov	r9, r19
    3618:	bc 01       	movw	r22, r24
    361a:	62 1b       	sub	r22, r18
    361c:	71 09       	sbc	r23, r1
    361e:	9b 01       	movw	r18, r22
    3620:	dc 01       	movw	r26, r24
    3622:	a4 1b       	sub	r26, r20
    3624:	b5 0b       	sbc	r27, r21
    3626:	e1 e0       	ldi	r30, 0x01	; 1
    3628:	f0 e0       	ldi	r31, 0x00	; 0
    362a:	ec 0f       	add	r30, r28
    362c:	fd 1f       	adc	r31, r29
    362e:	ae 0f       	add	r26, r30
    3630:	bf 1f       	adc	r27, r31
    3632:	e1 2e       	mov	r14, r17
    3634:	f1 2c       	mov	r15, r1
    3636:	f1 94       	neg	r15
    3638:	e1 94       	neg	r14
    363a:	f1 08       	sbc	r15, r1
    363c:	4f 3f       	cpi	r20, 0xFF	; 255
    363e:	ff ef       	ldi	r31, 0xFF	; 255
    3640:	5f 07       	cpc	r21, r31
    3642:	31 f4       	brne	.+12     	; 0x3650 <dtoa_prf+0x268>
    3644:	f6 01       	movw	r30, r12
    3646:	90 82       	st	Z, r9
    3648:	b6 01       	movw	r22, r12
    364a:	6f 5f       	subi	r22, 0xFF	; 255
    364c:	7f 4f       	sbci	r23, 0xFF	; 255
    364e:	6b 01       	movw	r12, r22
    3650:	84 17       	cp	r24, r20
    3652:	95 07       	cpc	r25, r21
    3654:	4c f0       	brlt	.+18     	; 0x3668 <dtoa_prf+0x280>
    3656:	24 17       	cp	r18, r20
    3658:	35 07       	cpc	r19, r21
    365a:	34 f4       	brge	.+12     	; 0x3668 <dtoa_prf+0x280>
    365c:	bd 01       	movw	r22, r26
    365e:	66 0d       	add	r22, r6
    3660:	77 1d       	adc	r23, r7
    3662:	fb 01       	movw	r30, r22
    3664:	11 81       	ldd	r17, Z+1	; 0x01
    3666:	01 c0       	rjmp	.+2      	; 0x366a <dtoa_prf+0x282>
    3668:	10 e3       	ldi	r17, 0x30	; 48
    366a:	41 50       	subi	r20, 0x01	; 1
    366c:	51 09       	sbc	r21, r1
    366e:	ff ef       	ldi	r31, 0xFF	; 255
    3670:	6f 1a       	sub	r6, r31
    3672:	7f 0a       	sbc	r7, r31
    3674:	b6 01       	movw	r22, r12
    3676:	6f 5f       	subi	r22, 0xFF	; 255
    3678:	7f 4f       	sbci	r23, 0xFF	; 255
    367a:	4e 15       	cp	r20, r14
    367c:	5f 05       	cpc	r21, r15
    367e:	24 f0       	brlt	.+8      	; 0x3688 <dtoa_prf+0x2a0>
    3680:	f6 01       	movw	r30, r12
    3682:	10 83       	st	Z, r17
    3684:	6b 01       	movw	r12, r22
    3686:	da cf       	rjmp	.-76     	; 0x363c <dtoa_prf+0x254>
    3688:	48 17       	cp	r20, r24
    368a:	59 07       	cpc	r21, r25
    368c:	39 f4       	brne	.+14     	; 0x369c <dtoa_prf+0x2b4>
    368e:	06 33       	cpi	r16, 0x36	; 54
    3690:	20 f4       	brcc	.+8      	; 0x369a <dtoa_prf+0x2b2>
    3692:	05 33       	cpi	r16, 0x35	; 53
    3694:	19 f4       	brne	.+6      	; 0x369c <dtoa_prf+0x2b4>
    3696:	a1 10       	cpse	r10, r1
    3698:	01 c0       	rjmp	.+2      	; 0x369c <dtoa_prf+0x2b4>
    369a:	11 e3       	ldi	r17, 0x31	; 49
    369c:	f6 01       	movw	r30, r12
    369e:	10 83       	st	Z, r17
    36a0:	fb 01       	movw	r30, r22
    36a2:	8b 2d       	mov	r24, r11
    36a4:	90 e2       	ldi	r25, 0x20	; 32
    36a6:	88 23       	and	r24, r24
    36a8:	19 f0       	breq	.+6      	; 0x36b0 <dtoa_prf+0x2c8>
    36aa:	91 93       	st	Z+, r25
    36ac:	81 50       	subi	r24, 0x01	; 1
    36ae:	fb cf       	rjmp	.-10     	; 0x36a6 <dtoa_prf+0x2be>
    36b0:	fb 01       	movw	r30, r22
    36b2:	eb 0d       	add	r30, r11
    36b4:	f1 1d       	adc	r31, r1
    36b6:	10 82       	st	Z, r1
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	29 96       	adiw	r28, 0x09	; 9
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	df 90       	pop	r13
    36d6:	cf 90       	pop	r12
    36d8:	bf 90       	pop	r11
    36da:	af 90       	pop	r10
    36dc:	9f 90       	pop	r9
    36de:	7f 90       	pop	r7
    36e0:	6f 90       	pop	r6
    36e2:	08 95       	ret

000036e4 <strtod>:
    36e4:	a0 e0       	ldi	r26, 0x00	; 0
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	e8 e7       	ldi	r30, 0x78	; 120
    36ea:	fb e1       	ldi	r31, 0x1B	; 27
    36ec:	0c 94 19 14 	jmp	0x2832	; 0x2832 <__prologue_saves__+0xc>
    36f0:	8b 01       	movw	r16, r22
    36f2:	61 15       	cp	r22, r1
    36f4:	71 05       	cpc	r23, r1
    36f6:	21 f0       	breq	.+8      	; 0x3700 <strtod+0x1c>
    36f8:	db 01       	movw	r26, r22
    36fa:	8c 93       	st	X, r24
    36fc:	11 96       	adiw	r26, 0x01	; 1
    36fe:	9c 93       	st	X, r25
    3700:	ec 01       	movw	r28, r24
    3702:	5e 01       	movw	r10, r28
    3704:	bf ef       	ldi	r27, 0xFF	; 255
    3706:	ab 1a       	sub	r10, r27
    3708:	bb 0a       	sbc	r11, r27
    370a:	75 01       	movw	r14, r10
    370c:	c8 80       	ld	r12, Y
    370e:	8c 2d       	mov	r24, r12
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <isspace>
    3716:	89 2b       	or	r24, r25
    3718:	11 f0       	breq	.+4      	; 0x371e <strtod+0x3a>
    371a:	e5 01       	movw	r28, r10
    371c:	f2 cf       	rjmp	.-28     	; 0x3702 <strtod+0x1e>
    371e:	ed e2       	ldi	r30, 0x2D	; 45
    3720:	ce 12       	cpse	r12, r30
    3722:	08 c0       	rjmp	.+16     	; 0x3734 <strtod+0x50>
    3724:	7e 01       	movw	r14, r28
    3726:	f2 e0       	ldi	r31, 0x02	; 2
    3728:	ef 0e       	add	r14, r31
    372a:	f1 1c       	adc	r15, r1
    372c:	c9 80       	ldd	r12, Y+1	; 0x01
    372e:	dd 24       	eor	r13, r13
    3730:	d3 94       	inc	r13
    3732:	09 c0       	rjmp	.+18     	; 0x3746 <strtod+0x62>
    3734:	2b e2       	ldi	r18, 0x2B	; 43
    3736:	c2 12       	cpse	r12, r18
    3738:	05 c0       	rjmp	.+10     	; 0x3744 <strtod+0x60>
    373a:	7e 01       	movw	r14, r28
    373c:	42 e0       	ldi	r20, 0x02	; 2
    373e:	e4 0e       	add	r14, r20
    3740:	f1 1c       	adc	r15, r1
    3742:	c9 80       	ldd	r12, Y+1	; 0x01
    3744:	d1 2c       	mov	r13, r1
    3746:	e7 01       	movw	r28, r14
    3748:	21 97       	sbiw	r28, 0x01	; 1
    374a:	43 e0       	ldi	r20, 0x03	; 3
    374c:	50 e0       	ldi	r21, 0x00	; 0
    374e:	60 eb       	ldi	r22, 0xB0	; 176
    3750:	71 e0       	ldi	r23, 0x01	; 1
    3752:	ce 01       	movw	r24, r28
    3754:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <strncasecmp_P>
    3758:	89 2b       	or	r24, r25
    375a:	c1 f4       	brne	.+48     	; 0x378c <strtod+0xa8>
    375c:	23 96       	adiw	r28, 0x03	; 3
    375e:	45 e0       	ldi	r20, 0x05	; 5
    3760:	50 e0       	ldi	r21, 0x00	; 0
    3762:	6b ea       	ldi	r22, 0xAB	; 171
    3764:	71 e0       	ldi	r23, 0x01	; 1
    3766:	ce 01       	movw	r24, r28
    3768:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <strncasecmp_P>
    376c:	89 2b       	or	r24, r25
    376e:	09 f4       	brne	.+2      	; 0x3772 <strtod+0x8e>
    3770:	25 96       	adiw	r28, 0x05	; 5
    3772:	01 15       	cp	r16, r1
    3774:	11 05       	cpc	r17, r1
    3776:	19 f0       	breq	.+6      	; 0x377e <strtod+0x9a>
    3778:	d8 01       	movw	r26, r16
    377a:	cd 93       	st	X+, r28
    377c:	dc 93       	st	X, r29
    377e:	d1 10       	cpse	r13, r1
    3780:	06 c1       	rjmp	.+524    	; 0x398e <strtod+0x2aa>
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	70 e0       	ldi	r23, 0x00	; 0
    3786:	80 e8       	ldi	r24, 0x80	; 128
    3788:	9f e7       	ldi	r25, 0x7F	; 127
    378a:	0a c1       	rjmp	.+532    	; 0x39a0 <strtod+0x2bc>
    378c:	43 e0       	ldi	r20, 0x03	; 3
    378e:	50 e0       	ldi	r21, 0x00	; 0
    3790:	68 ea       	ldi	r22, 0xA8	; 168
    3792:	71 e0       	ldi	r23, 0x01	; 1
    3794:	ce 01       	movw	r24, r28
    3796:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <strncasecmp_P>
    379a:	89 2b       	or	r24, r25
    379c:	59 f4       	brne	.+22     	; 0x37b4 <strtod+0xd0>
    379e:	01 15       	cp	r16, r1
    37a0:	11 05       	cpc	r17, r1
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <strtod+0xc2>
    37a4:	f9 c0       	rjmp	.+498    	; 0x3998 <strtod+0x2b4>
    37a6:	b2 e0       	ldi	r27, 0x02	; 2
    37a8:	eb 0e       	add	r14, r27
    37aa:	f1 1c       	adc	r15, r1
    37ac:	f8 01       	movw	r30, r16
    37ae:	f1 82       	std	Z+1, r15	; 0x01
    37b0:	e0 82       	st	Z, r14
    37b2:	f2 c0       	rjmp	.+484    	; 0x3998 <strtod+0x2b4>
    37b4:	f7 01       	movw	r30, r14
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	70 e0       	ldi	r23, 0x00	; 0
    37ba:	cb 01       	movw	r24, r22
    37bc:	c0 e0       	ldi	r28, 0x00	; 0
    37be:	d0 e0       	ldi	r29, 0x00	; 0
    37c0:	7f 01       	movw	r14, r30
    37c2:	a0 ed       	ldi	r26, 0xD0	; 208
    37c4:	aa 2e       	mov	r10, r26
    37c6:	ac 0c       	add	r10, r12
    37c8:	29 e0       	ldi	r18, 0x09	; 9
    37ca:	2a 15       	cp	r18, r10
    37cc:	30 f1       	brcs	.+76     	; 0x381a <strtod+0x136>
    37ce:	4d 2d       	mov	r20, r13
    37d0:	42 60       	ori	r20, 0x02	; 2
    37d2:	b4 2e       	mov	r11, r20
    37d4:	2d 2d       	mov	r18, r13
    37d6:	28 70       	andi	r18, 0x08	; 8
    37d8:	d2 fe       	sbrs	r13, 2
    37da:	04 c0       	rjmp	.+8      	; 0x37e4 <strtod+0x100>
    37dc:	21 11       	cpse	r18, r1
    37de:	25 c0       	rjmp	.+74     	; 0x382a <strtod+0x146>
    37e0:	21 96       	adiw	r28, 0x01	; 1
    37e2:	23 c0       	rjmp	.+70     	; 0x382a <strtod+0x146>
    37e4:	21 11       	cpse	r18, r1
    37e6:	21 97       	sbiw	r28, 0x01	; 1
    37e8:	a5 e0       	ldi	r26, 0x05	; 5
    37ea:	b0 e0       	ldi	r27, 0x00	; 0
    37ec:	9b 01       	movw	r18, r22
    37ee:	ac 01       	movw	r20, r24
    37f0:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__muluhisi3>
    37f4:	66 0f       	add	r22, r22
    37f6:	77 1f       	adc	r23, r23
    37f8:	88 1f       	adc	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	6a 0d       	add	r22, r10
    37fe:	71 1d       	adc	r23, r1
    3800:	81 1d       	adc	r24, r1
    3802:	91 1d       	adc	r25, r1
    3804:	68 39       	cpi	r22, 0x98	; 152
    3806:	a9 e9       	ldi	r26, 0x99	; 153
    3808:	7a 07       	cpc	r23, r26
    380a:	8a 07       	cpc	r24, r26
    380c:	a9 e1       	ldi	r26, 0x19	; 25
    380e:	9a 07       	cpc	r25, r26
    3810:	60 f0       	brcs	.+24     	; 0x382a <strtod+0x146>
    3812:	bd 2d       	mov	r27, r13
    3814:	b6 60       	ori	r27, 0x06	; 6
    3816:	bb 2e       	mov	r11, r27
    3818:	08 c0       	rjmp	.+16     	; 0x382a <strtod+0x146>
    381a:	2e ef       	ldi	r18, 0xFE	; 254
    381c:	a2 12       	cpse	r10, r18
    381e:	0a c0       	rjmp	.+20     	; 0x3834 <strtod+0x150>
    3820:	d3 fc       	sbrc	r13, 3
    3822:	50 c0       	rjmp	.+160    	; 0x38c4 <strtod+0x1e0>
    3824:	4d 2d       	mov	r20, r13
    3826:	48 60       	ori	r20, 0x08	; 8
    3828:	b4 2e       	mov	r11, r20
    382a:	31 96       	adiw	r30, 0x01	; 1
    382c:	d7 01       	movw	r26, r14
    382e:	cc 90       	ld	r12, X
    3830:	db 2c       	mov	r13, r11
    3832:	c6 cf       	rjmp	.-116    	; 0x37c0 <strtod+0xdc>
    3834:	2c 2d       	mov	r18, r12
    3836:	2f 7d       	andi	r18, 0xDF	; 223
    3838:	25 34       	cpi	r18, 0x45	; 69
    383a:	09 f0       	breq	.+2      	; 0x383e <strtod+0x15a>
    383c:	43 c0       	rjmp	.+134    	; 0x38c4 <strtod+0x1e0>
    383e:	a0 81       	ld	r26, Z
    3840:	ad 32       	cpi	r26, 0x2D	; 45
    3842:	41 f4       	brne	.+16     	; 0x3854 <strtod+0x170>
    3844:	bd 2d       	mov	r27, r13
    3846:	b0 61       	ori	r27, 0x10	; 16
    3848:	db 2e       	mov	r13, r27
    384a:	7f 01       	movw	r14, r30
    384c:	22 e0       	ldi	r18, 0x02	; 2
    384e:	e2 0e       	add	r14, r18
    3850:	f1 1c       	adc	r15, r1
    3852:	0c c0       	rjmp	.+24     	; 0x386c <strtod+0x188>
    3854:	7f 01       	movw	r14, r30
    3856:	ab 32       	cpi	r26, 0x2B	; 43
    3858:	31 f0       	breq	.+12     	; 0x3866 <strtod+0x182>
    385a:	4f ef       	ldi	r20, 0xFF	; 255
    385c:	e4 1a       	sub	r14, r20
    385e:	f4 0a       	sbc	r15, r20
    3860:	21 e0       	ldi	r18, 0x01	; 1
    3862:	30 e0       	ldi	r19, 0x00	; 0
    3864:	06 c0       	rjmp	.+12     	; 0x3872 <strtod+0x18e>
    3866:	a2 e0       	ldi	r26, 0x02	; 2
    3868:	ea 0e       	add	r14, r26
    386a:	f1 1c       	adc	r15, r1
    386c:	a1 81       	ldd	r26, Z+1	; 0x01
    386e:	22 e0       	ldi	r18, 0x02	; 2
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	a0 53       	subi	r26, 0x30	; 48
    3874:	aa 30       	cpi	r26, 0x0A	; 10
    3876:	18 f0       	brcs	.+6      	; 0x387e <strtod+0x19a>
    3878:	e2 1a       	sub	r14, r18
    387a:	f3 0a       	sbc	r15, r19
    387c:	23 c0       	rjmp	.+70     	; 0x38c4 <strtod+0x1e0>
    387e:	f7 01       	movw	r30, r14
    3880:	20 e0       	ldi	r18, 0x00	; 0
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	20 38       	cpi	r18, 0x80	; 128
    3886:	bc e0       	ldi	r27, 0x0C	; 12
    3888:	3b 07       	cpc	r19, r27
    388a:	5c f4       	brge	.+22     	; 0x38a2 <strtod+0x1be>
    388c:	a9 01       	movw	r20, r18
    388e:	44 0f       	add	r20, r20
    3890:	55 1f       	adc	r21, r21
    3892:	44 0f       	add	r20, r20
    3894:	55 1f       	adc	r21, r21
    3896:	24 0f       	add	r18, r20
    3898:	35 1f       	adc	r19, r21
    389a:	22 0f       	add	r18, r18
    389c:	33 1f       	adc	r19, r19
    389e:	2a 0f       	add	r18, r26
    38a0:	31 1d       	adc	r19, r1
    38a2:	af 01       	movw	r20, r30
    38a4:	4f 5f       	subi	r20, 0xFF	; 255
    38a6:	5f 4f       	sbci	r21, 0xFF	; 255
    38a8:	7a 01       	movw	r14, r20
    38aa:	a0 81       	ld	r26, Z
    38ac:	a0 53       	subi	r26, 0x30	; 48
    38ae:	aa 30       	cpi	r26, 0x0A	; 10
    38b0:	10 f4       	brcc	.+4      	; 0x38b6 <strtod+0x1d2>
    38b2:	fa 01       	movw	r30, r20
    38b4:	e7 cf       	rjmp	.-50     	; 0x3884 <strtod+0x1a0>
    38b6:	d4 fe       	sbrs	r13, 4
    38b8:	03 c0       	rjmp	.+6      	; 0x38c0 <strtod+0x1dc>
    38ba:	31 95       	neg	r19
    38bc:	21 95       	neg	r18
    38be:	31 09       	sbc	r19, r1
    38c0:	c2 0f       	add	r28, r18
    38c2:	d3 1f       	adc	r29, r19
    38c4:	d1 fe       	sbrs	r13, 1
    38c6:	09 c0       	rjmp	.+18     	; 0x38da <strtod+0x1f6>
    38c8:	01 15       	cp	r16, r1
    38ca:	11 05       	cpc	r17, r1
    38cc:	31 f0       	breq	.+12     	; 0x38da <strtod+0x1f6>
    38ce:	e1 e0       	ldi	r30, 0x01	; 1
    38d0:	ee 1a       	sub	r14, r30
    38d2:	f1 08       	sbc	r15, r1
    38d4:	d8 01       	movw	r26, r16
    38d6:	ed 92       	st	X+, r14
    38d8:	fc 92       	st	X, r15
    38da:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__floatunsisf>
    38de:	2d 2d       	mov	r18, r13
    38e0:	23 70       	andi	r18, 0x03	; 3
    38e2:	23 30       	cpi	r18, 0x03	; 3
    38e4:	19 f0       	breq	.+6      	; 0x38ec <strtod+0x208>
    38e6:	4b 01       	movw	r8, r22
    38e8:	5c 01       	movw	r10, r24
    38ea:	06 c0       	rjmp	.+12     	; 0x38f8 <strtod+0x214>
    38ec:	4b 01       	movw	r8, r22
    38ee:	5c 01       	movw	r10, r24
    38f0:	b7 fa       	bst	r11, 7
    38f2:	b0 94       	com	r11
    38f4:	b7 f8       	bld	r11, 7
    38f6:	b0 94       	com	r11
    38f8:	20 e0       	ldi	r18, 0x00	; 0
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	a9 01       	movw	r20, r18
    38fe:	c5 01       	movw	r24, r10
    3900:	b4 01       	movw	r22, r8
    3902:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__cmpsf2>
    3906:	88 23       	and	r24, r24
    3908:	09 f4       	brne	.+2      	; 0x390c <strtod+0x228>
    390a:	3e c0       	rjmp	.+124    	; 0x3988 <strtod+0x2a4>
    390c:	d7 ff       	sbrs	r29, 7
    390e:	06 c0       	rjmp	.+12     	; 0x391c <strtod+0x238>
    3910:	d1 95       	neg	r29
    3912:	c1 95       	neg	r28
    3914:	d1 09       	sbc	r29, r1
    3916:	07 ec       	ldi	r16, 0xC7	; 199
    3918:	11 e0       	ldi	r17, 0x01	; 1
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <strtod+0x23c>
    391c:	0f ed       	ldi	r16, 0xDF	; 223
    391e:	11 e0       	ldi	r17, 0x01	; 1
    3920:	68 01       	movw	r12, r16
    3922:	b8 e1       	ldi	r27, 0x18	; 24
    3924:	cb 1a       	sub	r12, r27
    3926:	d1 08       	sbc	r13, r1
    3928:	90 e2       	ldi	r25, 0x20	; 32
    392a:	e9 2e       	mov	r14, r25
    392c:	f1 2c       	mov	r15, r1
    392e:	ce 15       	cp	r28, r14
    3930:	df 05       	cpc	r29, r15
    3932:	74 f0       	brlt	.+28     	; 0x3950 <strtod+0x26c>
    3934:	f8 01       	movw	r30, r16
    3936:	25 91       	lpm	r18, Z+
    3938:	35 91       	lpm	r19, Z+
    393a:	45 91       	lpm	r20, Z+
    393c:	54 91       	lpm	r21, Z
    393e:	c5 01       	movw	r24, r10
    3940:	b4 01       	movw	r22, r8
    3942:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <__mulsf3>
    3946:	4b 01       	movw	r8, r22
    3948:	5c 01       	movw	r10, r24
    394a:	ce 19       	sub	r28, r14
    394c:	df 09       	sbc	r29, r15
    394e:	ef cf       	rjmp	.-34     	; 0x392e <strtod+0x24a>
    3950:	04 50       	subi	r16, 0x04	; 4
    3952:	11 09       	sbc	r17, r1
    3954:	f5 94       	asr	r15
    3956:	e7 94       	ror	r14
    3958:	0c 15       	cp	r16, r12
    395a:	1d 05       	cpc	r17, r13
    395c:	41 f7       	brne	.-48     	; 0x392e <strtod+0x24a>
    395e:	8a 2d       	mov	r24, r10
    3960:	88 0f       	add	r24, r24
    3962:	8b 2d       	mov	r24, r11
    3964:	88 1f       	adc	r24, r24
    3966:	8f 3f       	cpi	r24, 0xFF	; 255
    3968:	49 f0       	breq	.+18     	; 0x397c <strtod+0x298>
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	a9 01       	movw	r20, r18
    3970:	c5 01       	movw	r24, r10
    3972:	b4 01       	movw	r22, r8
    3974:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__cmpsf2>
    3978:	81 11       	cpse	r24, r1
    397a:	06 c0       	rjmp	.+12     	; 0x3988 <strtod+0x2a4>
    397c:	82 e2       	ldi	r24, 0x22	; 34
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	90 93 93 07 	sts	0x0793, r25
    3984:	80 93 92 07 	sts	0x0792, r24
    3988:	c5 01       	movw	r24, r10
    398a:	b4 01       	movw	r22, r8
    398c:	09 c0       	rjmp	.+18     	; 0x39a0 <strtod+0x2bc>
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	80 e8       	ldi	r24, 0x80	; 128
    3994:	9f ef       	ldi	r25, 0xFF	; 255
    3996:	04 c0       	rjmp	.+8      	; 0x39a0 <strtod+0x2bc>
    3998:	60 e0       	ldi	r22, 0x00	; 0
    399a:	70 e0       	ldi	r23, 0x00	; 0
    399c:	80 ec       	ldi	r24, 0xC0	; 192
    399e:	9f e7       	ldi	r25, 0x7F	; 127
    39a0:	cd b7       	in	r28, 0x3d	; 61
    39a2:	de b7       	in	r29, 0x3e	; 62
    39a4:	ec e0       	ldi	r30, 0x0C	; 12
    39a6:	0c 94 35 14 	jmp	0x286a	; 0x286a <__epilogue_restores__+0xc>

000039aa <isspace>:
    39aa:	91 11       	cpse	r25, r1
    39ac:	50 c0       	rjmp	.+160    	; 0x3a4e <__ctype_isfalse>
    39ae:	80 32       	cpi	r24, 0x20	; 32
    39b0:	19 f0       	breq	.+6      	; 0x39b8 <isspace+0xe>
    39b2:	89 50       	subi	r24, 0x09	; 9
    39b4:	85 50       	subi	r24, 0x05	; 5
    39b6:	d0 f7       	brcc	.-12     	; 0x39ac <isspace+0x2>
    39b8:	08 95       	ret

000039ba <strncasecmp_P>:
    39ba:	fb 01       	movw	r30, r22
    39bc:	dc 01       	movw	r26, r24
    39be:	41 50       	subi	r20, 0x01	; 1
    39c0:	50 40       	sbci	r21, 0x00	; 0
    39c2:	88 f0       	brcs	.+34     	; 0x39e6 <strncasecmp_P+0x2c>
    39c4:	8d 91       	ld	r24, X+
    39c6:	81 34       	cpi	r24, 0x41	; 65
    39c8:	1c f0       	brlt	.+6      	; 0x39d0 <strncasecmp_P+0x16>
    39ca:	8b 35       	cpi	r24, 0x5B	; 91
    39cc:	0c f4       	brge	.+2      	; 0x39d0 <strncasecmp_P+0x16>
    39ce:	80 5e       	subi	r24, 0xE0	; 224
    39d0:	65 91       	lpm	r22, Z+
    39d2:	61 34       	cpi	r22, 0x41	; 65
    39d4:	1c f0       	brlt	.+6      	; 0x39dc <strncasecmp_P+0x22>
    39d6:	6b 35       	cpi	r22, 0x5B	; 91
    39d8:	0c f4       	brge	.+2      	; 0x39dc <strncasecmp_P+0x22>
    39da:	60 5e       	subi	r22, 0xE0	; 224
    39dc:	86 1b       	sub	r24, r22
    39de:	61 11       	cpse	r22, r1
    39e0:	71 f3       	breq	.-36     	; 0x39be <strncasecmp_P+0x4>
    39e2:	99 0b       	sbc	r25, r25
    39e4:	08 95       	ret
    39e6:	88 1b       	sub	r24, r24
    39e8:	fc cf       	rjmp	.-8      	; 0x39e2 <strncasecmp_P+0x28>

000039ea <strrev>:
    39ea:	dc 01       	movw	r26, r24
    39ec:	fc 01       	movw	r30, r24
    39ee:	67 2f       	mov	r22, r23
    39f0:	71 91       	ld	r23, Z+
    39f2:	77 23       	and	r23, r23
    39f4:	e1 f7       	brne	.-8      	; 0x39ee <strrev+0x4>
    39f6:	32 97       	sbiw	r30, 0x02	; 2
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <strrev+0x18>
    39fa:	7c 91       	ld	r23, X
    39fc:	6d 93       	st	X+, r22
    39fe:	70 83       	st	Z, r23
    3a00:	62 91       	ld	r22, -Z
    3a02:	ae 17       	cp	r26, r30
    3a04:	bf 07       	cpc	r27, r31
    3a06:	c8 f3       	brcs	.-14     	; 0x39fa <strrev+0x10>
    3a08:	08 95       	ret

00003a0a <__eerd_block_m328p>:
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22

00003a0e <__eerd_blraw_m328p>:
    3a0e:	fc 01       	movw	r30, r24
    3a10:	f9 99       	sbic	0x1f, 1	; 31
    3a12:	fe cf       	rjmp	.-4      	; 0x3a10 <__eerd_blraw_m328p+0x2>
    3a14:	06 c0       	rjmp	.+12     	; 0x3a22 <__eerd_blraw_m328p+0x14>
    3a16:	f2 bd       	out	0x22, r31	; 34
    3a18:	e1 bd       	out	0x21, r30	; 33
    3a1a:	f8 9a       	sbi	0x1f, 0	; 31
    3a1c:	31 96       	adiw	r30, 0x01	; 1
    3a1e:	00 b4       	in	r0, 0x20	; 32
    3a20:	0d 92       	st	X+, r0
    3a22:	41 50       	subi	r20, 0x01	; 1
    3a24:	50 40       	sbci	r21, 0x00	; 0
    3a26:	b8 f7       	brcc	.-18     	; 0x3a16 <__eerd_blraw_m328p+0x8>
    3a28:	08 95       	ret

00003a2a <__eeupd_byte_m328p>:
    3a2a:	26 2f       	mov	r18, r22

00003a2c <__eeupd_r18_m328p>:
    3a2c:	f9 99       	sbic	0x1f, 1	; 31
    3a2e:	fe cf       	rjmp	.-4      	; 0x3a2c <__eeupd_r18_m328p>
    3a30:	92 bd       	out	0x22, r25	; 34
    3a32:	81 bd       	out	0x21, r24	; 33
    3a34:	f8 9a       	sbi	0x1f, 0	; 31
    3a36:	01 97       	sbiw	r24, 0x01	; 1
    3a38:	00 b4       	in	r0, 0x20	; 32
    3a3a:	02 16       	cp	r0, r18
    3a3c:	39 f0       	breq	.+14     	; 0x3a4c <__eeupd_r18_m328p+0x20>
    3a3e:	1f ba       	out	0x1f, r1	; 31
    3a40:	20 bd       	out	0x20, r18	; 32
    3a42:	0f b6       	in	r0, 0x3f	; 63
    3a44:	f8 94       	cli
    3a46:	fa 9a       	sbi	0x1f, 2	; 31
    3a48:	f9 9a       	sbi	0x1f, 1	; 31
    3a4a:	0f be       	out	0x3f, r0	; 63
    3a4c:	08 95       	ret

00003a4e <__ctype_isfalse>:
    3a4e:	99 27       	eor	r25, r25
    3a50:	88 27       	eor	r24, r24

00003a52 <__ctype_istrue>:
    3a52:	08 95       	ret

00003a54 <__muluhisi3>:
    3a54:	0e 94 04 14 	call	0x2808	; 0x2808 <__umulhisi3>
    3a58:	a5 9f       	mul	r26, r21
    3a5a:	90 0d       	add	r25, r0
    3a5c:	b4 9f       	mul	r27, r20
    3a5e:	90 0d       	add	r25, r0
    3a60:	a4 9f       	mul	r26, r20
    3a62:	80 0d       	add	r24, r0
    3a64:	91 1d       	adc	r25, r1
    3a66:	11 24       	eor	r1, r1
    3a68:	08 95       	ret

00003a6a <_exit>:
    3a6a:	f8 94       	cli

00003a6c <__stop_program>:
    3a6c:	ff cf       	rjmp	.-2      	; 0x3a6c <__stop_program>
