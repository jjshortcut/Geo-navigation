
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004b6  00800100  00004c6a  00004d1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004c6a  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  008005b6  008005b6  000051d4  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  000051d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  000051e2  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  0000523e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d58  00000000  00000000  00005626  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017bb  00000000  00000000  0000c37e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a29  00000000  00000000  0000db39  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce8  00000000  00000000  0000f564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c81  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000442b  00000000  00000000  00010ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  000152f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/*
 * get scaled data
 */
void hmc5883l_getdata(double *mx, double *my, double *mz) {
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
       8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
       c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      10:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      14:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      18:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      1c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      20:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      24:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	int16_t mxraw = 0;
      28:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	int16_t myraw = 0;
      2c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	int16_t mzraw = 0;
      30:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	hmc5883l_getrawdata(&mxraw, &myraw, &mzraw);
      34:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      38:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__vector_14>
      3c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      40:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      44:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	float mzt = mzraw - HMC5883L_OFFSETZ;
	*mx = HMC5883L_GAINX1 * mxt + HMC5883L_GAINX2 * myt + HMC5883L_GAINX3 * mzt;
	*my = HMC5883L_GAINY1 * mxt + HMC5883L_GAINY2 * myt + HMC5883L_GAINY3 * mzt;
	*mz = HMC5883L_GAINZ1 * mxt + HMC5883L_GAINZ2 * myt + HMC5883L_GAINZ3 * mzt;
	#else
	*mx = mxraw * hmc5883l_scale;
      48:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__vector_18>
      4c:	0c 94 50 17 	jmp	0x2ea0	; 0x2ea0 <__vector_19>
      50:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      54:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      58:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      5c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      60:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      64:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      68:	fa 0d       	add	r31, r10
      6a:	ff 0e       	add	r15, r31
      6c:	c1 0c       	add	r12, r1
      6e:	b9 0d       	add	r27, r9
      70:	d9 0d       	add	r29, r9
      72:	de 0d       	add	r29, r14
      74:	ff 0e       	add	r15, r31
      76:	3b 0e       	add	r3, r27
      78:	ff 0e       	add	r15, r31
	*my = myraw * hmc5883l_scale;
      7a:	ff 0e       	add	r15, r31
      7c:	4c 0e       	add	r4, r28
      7e:	ff 0e       	add	r15, r31
      80:	f1 0e       	add	r15, r17
      82:	ff 0e       	add	r15, r31
      84:	19 0f       	add	r17, r25
      86:	6b 0e       	add	r6, r27
      88:	79 0c       	add	r7, r9
      8a:	87 0e       	add	r8, r23
      8c:	ff 0e       	add	r15, r31
      8e:	9f 0e       	add	r9, r31
      90:	aa 0e       	add	r10, r26
      92:	af 0e       	add	r10, r31
      94:	d3 0e       	add	r13, r19
      96:	9e 0c       	add	r9, r14
      98:	ff 0e       	add	r15, r31
      9a:	ff 0e       	add	r15, r31
      9c:	ff 0e       	add	r15, r31
      9e:	ff 0e       	add	r15, r31
	*mz = mzraw * hmc5883l_scale;
      a0:	ff 0e       	add	r15, r31
      a2:	ff 0e       	add	r15, r31
      a4:	ff 0e       	add	r15, r31
      a6:	ff 0e       	add	r15, r31
      a8:	ff 0e       	add	r15, r31
      aa:	ff 0e       	add	r15, r31
      ac:	cd 0c       	add	r12, r13
      ae:	d8 0c       	add	r13, r8
      b0:	d6 0d       	add	r29, r6
      b2:	ff 0e       	add	r15, r31
      b4:	0d 0e       	add	r0, r29
      b6:	ff 0e       	add	r15, r31
      b8:	ff 0e       	add	r15, r31
      ba:	ff 0e       	add	r15, r31
      bc:	ff 0e       	add	r15, r31
      be:	ff 0e       	add	r15, r31
      c0:	ff 0e       	add	r15, r31
      c2:	ff 0e       	add	r15, r31
      c4:	ff 0e       	add	r15, r31
	#endif
}
      c6:	ff 0e       	add	r15, r31
      c8:	ff 0e       	add	r15, r31
      ca:	ff 0e       	add	r15, r31
      cc:	ff 0e       	add	r15, r31
      ce:	94 0e       	add	r9, r20
      d0:	47 0e       	add	r4, r23
      d2:	ff 0e       	add	r15, r31
      d4:	bd 0e       	add	r11, r29
      d6:	36 10       	cpse	r3, r6
      d8:	4b 10       	cpse	r4, r11
      da:	60 10       	cpse	r6, r0
      dc:	75 10       	cpse	r7, r5
      de:	8a 10       	cpse	r8, r10
      e0:	9f 10       	cpse	r9, r15
      e2:	b4 10       	cpse	r11, r4
      e4:	c9 10       	cpse	r12, r9
      e6:	fe 11       	cpse	r31, r14
      e8:	0f 12       	cpse	r0, r31
      ea:	34 12       	cpse	r3, r20
      ec:	6d 12       	cpse	r6, r29
      ee:	a6 12       	cpse	r10, r22
      f0:	07 13       	cpse	r16, r23
      f2:	6f 13       	cpse	r22, r31
      f4:	c2 13       	cpse	r28, r18
      f6:	08 4a       	sbci	r16, 0xA8	; 168
      f8:	d7 3b       	cpi	r29, 0xB7	; 183
      fa:	3b ce       	rjmp	.-906    	; 0xfffffd72 <__eeprom_end+0xff7efd64>
      fc:	01 6e       	ori	r16, 0xE1	; 225
      fe:	84 bc       	out	0x24, r8	; 36
     100:	bf fd       	.word	0xfdbf	; ????
     102:	c1 2f       	mov	r28, r17
     104:	3d 6c       	ori	r19, 0xCD	; 205
     106:	74 31       	cpi	r23, 0x14	; 20
     108:	9a bd       	out	0x2a, r25	; 42
     10a:	56 83       	std	Z+6, r21	; 0x06
     10c:	3d da       	rcall	.-2950   	; 0xfffff588 <__eeprom_end+0xff7ef57a>
     10e:	3d 00       	.word	0x003d	; ????
     110:	c7 7f       	andi	r28, 0xF7	; 247
     112:	11 be       	out	0x31, r1	; 49
     114:	d9 e4       	ldi	r29, 0x49	; 73
     116:	bb 4c       	sbci	r27, 0xCB	; 203
     118:	3e 91       	ld	r19, -X
     11a:	6b aa       	std	Y+51, r6	; 0x33
     11c:	aa be       	out	0x3a, r10	; 58
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 05       	cpc	r19, r15
     124:	a8 4c       	sbci	r26, 0xC8	; 200
     126:	cd b2       	in	r12, 0x1d	; 29
     128:	d4 4e       	sbci	r29, 0xE4	; 228
     12a:	b9 38       	cpi	r27, 0x89	; 137
     12c:	36 a9       	ldd	r19, Z+54	; 0x36
     12e:	02 0c       	add	r0, r2
     130:	50 b9       	out	0x00, r21	; 0
     132:	91 86       	std	Z+9, r9	; 0x09
     134:	88 08       	sbc	r8, r8
     136:	3c a6       	std	Y+44, r3	; 0x2c
     138:	aa aa       	std	Y+50, r10	; 0x32
     13a:	2a be       	out	0x3a, r2	; 58
     13c:	00 00       	nop
     13e:	00 80       	ld	r0, Z
     140:	3f 00       	.word	0x003f	; ????

00000142 <__trampolines_end>:
     142:	27 3f       	cpi	r18, 0xF7	; 247
     144:	27 20       	and	r2, r7
     146:	3d 20       	and	r3, r13
     148:	64 65       	ori	r22, 0x54	; 84
     14a:	62 75       	andi	r22, 0x52	; 82
     14c:	67 20       	and	r6, r7
     14e:	6d 65       	ori	r22, 0x5D	; 93
     150:	73 73       	andi	r23, 0x33	; 51
     152:	61 67       	ori	r22, 0x71	; 113
     154:	65 73       	andi	r22, 0x35	; 53
     156:	0a 00       	.word	0x000a	; ????

00000158 <__c.2590>:
     158:	44 65 76 69 63 65 20 72 65 73 65 74 65 64 20 74     Device reseted t
     168:	6f 20 66 61 63 74 6f 72 79 20 73 65 74 74 69 6e     o factory settin
     178:	67 73 21 0a 00                                      gs!..

0000017d <__c.2587>:
     17d:	52 65 73 65 74 74 69 6e 67 20 42 6c 75 65 74 6f     Resetting Blueto
     18d:	6f 74 68 20 73 65 74 74 69 6e 67 73 21 0a 00        oth settings!..

0000019c <__c.2584>:
     19c:	50 6f 77 65 72 69 6e 67 20 6f 66 66 2e 2e 0a 00     Powering off....

000001ac <__c.2581>:
     1ac:	53 68 6f 77 20 55 49 20 4e 6f 72 74 68 20 3d 20     Show UI North = 
	...

000001bd <__c.2578>:
     1bd:	42 72 69 67 68 74 6e 65 73 73 20 73 65 74 20 74     Brightness set t
     1cd:	6f 3a 00                                            o:.

000001d0 <__c.2575>:
     1d0:	54 4f 44 4f 2c 20 69 6d 70 6c 65 6d 65 6e 74 20     TODO, implement 
     1e0:	73 65 74 20 6e 61 76 69 67 61 74 69 6f 6e 20 63     set navigation c
     1f0:	6f 6c 6f 72 0a 00                                   olor..

000001f6 <__c.2571>:
     1f6:	43 6f 6d 70 61 73 73 20 76 61 6c 75 65 20 73 65     Compass value se
     206:	74 20 74 6f 00                                      t to.

0000020b <__c.2568>:
     20b:	44 65 62 75 67 20 6d 73 67 27 73 20 6f 6e 0a 00     Debug msg's on..

0000021b <__c.2566>:
     21b:	44 65 62 75 67 20 6d 73 67 27 73 20 6f 66 66 0a     Debug msg's off.
	...

0000022c <__c.2563>:
     22c:	53 68 6f 77 20 55 49 20 64 69 73 74 61 6e 63 65     Show UI distance
     23c:	20 3d 20 00                                          = .

00000240 <__c.2161>:
     240:	6e 61 6e 00                                         nan.

00000244 <__c.2159>:
     244:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     254:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     264:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     274:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     284:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     294:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     304:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     314:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     324:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     334:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000342 <pstr_nan>:
     342:	4e 41 4e                                            NAN

00000345 <pstr_inity>:
     345:	49 4e 49 54 59                                      INITY

0000034a <pstr_inf>:
     34a:	49 4e 46                                            INF

0000034d <pwr_m10>:
     34d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     35d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000365 <pwr_p10>:
     365:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     375:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000037e <__ctors_end>:
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d8 e0       	ldi	r29, 0x08	; 8
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61

0000038a <__do_copy_data>:
     38a:	15 e0       	ldi	r17, 0x05	; 5
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	ea e6       	ldi	r30, 0x6A	; 106
     392:	fc e4       	ldi	r31, 0x4C	; 76
     394:	02 c0       	rjmp	.+4      	; 0x39a <__do_copy_data+0x10>
     396:	05 90       	lpm	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	a6 3b       	cpi	r26, 0xB6	; 182
     39c:	b1 07       	cpc	r27, r17
     39e:	d9 f7       	brne	.-10     	; 0x396 <__do_copy_data+0xc>

000003a0 <__do_clear_bss>:
     3a0:	28 e0       	ldi	r18, 0x08	; 8
     3a2:	a6 eb       	ldi	r26, 0xB6	; 182
     3a4:	b5 e0       	ldi	r27, 0x05	; 5
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <.do_clear_bss_start>

000003a8 <.do_clear_bss_loop>:
     3a8:	1d 92       	st	X+, r1

000003aa <.do_clear_bss_start>:
     3aa:	a2 31       	cpi	r26, 0x12	; 18
     3ac:	b2 07       	cpc	r27, r18
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <.do_clear_bss_loop>
     3b0:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <main>
     3b4:	0c 94 33 26 	jmp	0x4c66	; 0x4c66 <_exit>

000003b8 <__bad_interrupt>:
     3b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003bc <calculate_bearing>:
#include <avr/io.h>
#include "defines.h"
#include "Geocalc.h"

uint16_t calculate_bearing(double lat1, double lon1, double lat2, double lon2)
{
     3bc:	4f 92       	push	r4
     3be:	5f 92       	push	r5
     3c0:	6f 92       	push	r6
     3c2:	7f 92       	push	r7
     3c4:	8f 92       	push	r8
     3c6:	9f 92       	push	r9
     3c8:	af 92       	push	r10
     3ca:	bf 92       	push	r11
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	64 97       	sbiw	r28, 0x14	; 20
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	2d 83       	std	Y+5, r18	; 0x05
     3ee:	3e 83       	std	Y+6, r19	; 0x06
     3f0:	4f 83       	std	Y+7, r20	; 0x07
     3f2:	58 87       	std	Y+8, r21	; 0x08
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     3f4:	2b ed       	ldi	r18, 0xDB	; 219
     3f6:	3f e0       	ldi	r19, 0x0F	; 15
     3f8:	49 e4       	ldi	r20, 0x49	; 73
     3fa:	50 e4       	ldi	r21, 0x40	; 64
     3fc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	44 e3       	ldi	r20, 0x34	; 52
     406:	53 e4       	ldi	r21, 0x43	; 67
     408:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     40c:	69 83       	std	Y+1, r22	; 0x01
     40e:	7a 83       	std	Y+2, r23	; 0x02
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	9c 83       	std	Y+4, r25	; 0x04
     414:	2b ed       	ldi	r18, 0xDB	; 219
     416:	3f e0       	ldi	r19, 0x0F	; 15
     418:	49 e4       	ldi	r20, 0x49	; 73
     41a:	50 e4       	ldi	r21, 0x40	; 64
     41c:	c8 01       	movw	r24, r16
     41e:	b7 01       	movw	r22, r14
     420:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	44 e3       	ldi	r20, 0x34	; 52
     42a:	53 e4       	ldi	r21, 0x43	; 67
     42c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     430:	2b 01       	movw	r4, r22
     432:	3c 01       	movw	r6, r24
	lon1 = dtor(lon1);
	lat2 = dtor(lat2);
	lon2 = dtor(lon2);

	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
     434:	69 81       	ldd	r22, Y+1	; 0x01
     436:	7a 81       	ldd	r23, Y+2	; 0x02
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <cos>
     440:	69 87       	std	Y+9, r22	; 0x09
     442:	7a 87       	std	Y+10, r23	; 0x0a
     444:	8b 87       	std	Y+11, r24	; 0x0b
     446:	9c 87       	std	Y+12, r25	; 0x0c
     448:	c3 01       	movw	r24, r6
     44a:	b2 01       	movw	r22, r4
     44c:	0e 94 08 20 	call	0x4010	; 0x4010 <sin>
     450:	6d 87       	std	Y+13, r22	; 0x0d
     452:	7e 87       	std	Y+14, r23	; 0x0e
     454:	8f 87       	std	Y+15, r24	; 0x0f
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	69 81       	ldd	r22, Y+1	; 0x01
     45a:	7a 81       	ldd	r23, Y+2	; 0x02
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	0e 94 08 20 	call	0x4010	; 0x4010 <sin>
     464:	69 83       	std	Y+1, r22	; 0x01
     466:	7a 83       	std	Y+2, r23	; 0x02
     468:	8b 83       	std	Y+3, r24	; 0x03
     46a:	9c 83       	std	Y+4, r25	; 0x04
     46c:	c3 01       	movw	r24, r6
     46e:	b2 01       	movw	r22, r4
     470:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <cos>
     474:	2b 01       	movw	r4, r22
     476:	3c 01       	movw	r6, r24
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     478:	2b ed       	ldi	r18, 0xDB	; 219
     47a:	3f e0       	ldi	r19, 0x0F	; 15
     47c:	49 e4       	ldi	r20, 0x49	; 73
     47e:	50 e4       	ldi	r21, 0x40	; 64
     480:	c6 01       	movw	r24, r12
     482:	b5 01       	movw	r22, r10
     484:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	44 e3       	ldi	r20, 0x34	; 52
     48e:	53 e4       	ldi	r21, 0x43	; 67
     490:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     494:	4b 01       	movw	r8, r22
     496:	5c 01       	movw	r10, r24
     498:	2b ed       	ldi	r18, 0xDB	; 219
     49a:	3f e0       	ldi	r19, 0x0F	; 15
     49c:	49 e4       	ldi	r20, 0x49	; 73
     49e:	50 e4       	ldi	r21, 0x40	; 64
     4a0:	6d 81       	ldd	r22, Y+5	; 0x05
     4a2:	7e 81       	ldd	r23, Y+6	; 0x06
     4a4:	8f 81       	ldd	r24, Y+7	; 0x07
     4a6:	98 85       	ldd	r25, Y+8	; 0x08
     4a8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	44 e3       	ldi	r20, 0x34	; 52
     4b2:	53 e4       	ldi	r21, 0x43	; 67
     4b4:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     4b8:	9b 01       	movw	r18, r22
     4ba:	ac 01       	movw	r20, r24
	lon1 = dtor(lon1);
	lat2 = dtor(lat2);
	lon2 = dtor(lon2);

	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
     4bc:	c5 01       	movw	r24, r10
     4be:	b4 01       	movw	r22, r8
     4c0:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     4c4:	4b 01       	movw	r8, r22
     4c6:	5c 01       	movw	r10, r24
     4c8:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <cos>
     4cc:	6d 83       	std	Y+5, r22	; 0x05
     4ce:	7e 83       	std	Y+6, r23	; 0x06
     4d0:	8f 83       	std	Y+7, r24	; 0x07
     4d2:	98 87       	std	Y+8, r25	; 0x08
     4d4:	c5 01       	movw	r24, r10
     4d6:	b4 01       	movw	r22, r8
     4d8:	0e 94 08 20 	call	0x4010	; 0x4010 <sin>
     4dc:	69 8b       	std	Y+17, r22	; 0x11
     4de:	7a 8b       	std	Y+18, r23	; 0x12
     4e0:	8b 8b       	std	Y+19, r24	; 0x13
     4e2:	9c 8b       	std	Y+20, r25	; 0x14
     4e4:	2d 85       	ldd	r18, Y+13	; 0x0d
     4e6:	3e 85       	ldd	r19, Y+14	; 0x0e
     4e8:	4f 85       	ldd	r20, Y+15	; 0x0f
     4ea:	58 89       	ldd	r21, Y+16	; 0x10
     4ec:	69 85       	ldd	r22, Y+9	; 0x09
     4ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     4f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     4f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     4f4:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     4f8:	4b 01       	movw	r8, r22
     4fa:	5c 01       	movw	r10, r24
     4fc:	a3 01       	movw	r20, r6
     4fe:	92 01       	movw	r18, r4
     500:	69 81       	ldd	r22, Y+1	; 0x01
     502:	7a 81       	ldd	r23, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     50c:	2d 81       	ldd	r18, Y+5	; 0x05
     50e:	3e 81       	ldd	r19, Y+6	; 0x06
     510:	4f 81       	ldd	r20, Y+7	; 0x07
     512:	58 85       	ldd	r21, Y+8	; 0x08
     514:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     518:	9b 01       	movw	r18, r22
     51a:	ac 01       	movw	r20, r24
     51c:	c5 01       	movw	r24, r10
     51e:	b4 01       	movw	r22, r8
     520:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     524:	4b 01       	movw	r8, r22
     526:	5c 01       	movw	r10, r24
     528:	29 89       	ldd	r18, Y+17	; 0x11
     52a:	3a 89       	ldd	r19, Y+18	; 0x12
     52c:	4b 89       	ldd	r20, Y+19	; 0x13
     52e:	5c 89       	ldd	r21, Y+20	; 0x14
     530:	c3 01       	movw	r24, r6
     532:	b2 01       	movw	r22, r4
     534:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     538:	a5 01       	movw	r20, r10
     53a:	94 01       	movw	r18, r8
     53c:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <atan2>
}

//Convert radians to degrees
double rtod(double fradians)
{
	return (fradians * 180.0 / PI);
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	44 e3       	ldi	r20, 0x34	; 52
     546:	53 e4       	ldi	r21, 0x43	; 67
     548:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     54c:	2b ed       	ldi	r18, 0xDB	; 219
     54e:	3f e0       	ldi	r19, 0x0F	; 15
     550:	49 e4       	ldi	r20, 0x49	; 73
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
	//convert to degrees
	bearing = rtod(bearing);
	//use mod to turn -90 = 270
	bearing = fmod((bearing + 360.0), 360);
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	44 eb       	ldi	r20, 0xB4	; 180
     55e:	53 e4       	ldi	r21, 0x43	; 67
     560:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	44 eb       	ldi	r20, 0xB4	; 180
     56a:	53 e4       	ldi	r21, 0x43	; 67
     56c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <fmod>
	return (int) bearing + 0.5;
     570:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
     574:	88 27       	eor	r24, r24
     576:	77 fd       	sbrc	r23, 7
     578:	80 95       	com	r24
     57a:	98 2f       	mov	r25, r24
     57c:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	5f e3       	ldi	r21, 0x3F	; 63
     588:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     58c:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fixunssfsi>
}
     590:	cb 01       	movw	r24, r22
     592:	64 96       	adiw	r28, 0x14	; 20
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	7f 90       	pop	r7
     5b8:	6f 90       	pop	r6
     5ba:	5f 90       	pop	r5
     5bc:	4f 90       	pop	r4
     5be:	08 95       	ret

000005c0 <calculate_distance>:

long calculate_distance(double lat1, double lon1, double lat2, double lon2)
{
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2c 97       	sbiw	r28, 0x0c	; 12
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	2b 01       	movw	r4, r22
     5f2:	3c 01       	movw	r6, r24
     5f4:	29 87       	std	Y+9, r18	; 0x09
     5f6:	3a 87       	std	Y+10, r19	; 0x0a
     5f8:	4b 87       	std	Y+11, r20	; 0x0b
     5fa:	5c 87       	std	Y+12, r21	; 0x0c
     5fc:	e9 82       	std	Y+1, r14	; 0x01
     5fe:	fa 82       	std	Y+2, r15	; 0x02
     600:	0b 83       	std	Y+3, r16	; 0x03
     602:	1c 83       	std	Y+4, r17	; 0x04
	//Note lat1/lon1/lat2/lon2 must be in radians
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	c8 01       	movw	r24, r16
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     610:	2b ed       	ldi	r18, 0xDB	; 219
     612:	3f e0       	ldi	r19, 0x0F	; 15
     614:	49 e4       	ldi	r20, 0x49	; 73
     616:	50 e4       	ldi	r21, 0x40	; 64
     618:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	44 e3       	ldi	r20, 0x34	; 52
     622:	53 e4       	ldi	r21, 0x43	; 67
     624:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	5f e3       	ldi	r21, 0x3F	; 63
     630:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     634:	0e 94 08 20 	call	0x4010	; 0x4010 <sin>
     638:	6d 83       	std	Y+5, r22	; 0x05
     63a:	7e 83       	std	Y+6, r23	; 0x06
     63c:	8f 83       	std	Y+7, r24	; 0x07
     63e:	98 87       	std	Y+8, r25	; 0x08
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     640:	2b ed       	ldi	r18, 0xDB	; 219
     642:	3f e0       	ldi	r19, 0x0F	; 15
     644:	49 e4       	ldi	r20, 0x49	; 73
     646:	50 e4       	ldi	r21, 0x40	; 64
     648:	c3 01       	movw	r24, r6
     64a:	b2 01       	movw	r22, r4
     64c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	44 e3       	ldi	r20, 0x34	; 52
     656:	53 e4       	ldi	r21, 0x43	; 67
     658:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     65c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <cos>
     660:	2b 01       	movw	r4, r22
     662:	3c 01       	movw	r6, r24
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     664:	2b ed       	ldi	r18, 0xDB	; 219
     666:	3f e0       	ldi	r19, 0x0F	; 15
     668:	49 e4       	ldi	r20, 0x49	; 73
     66a:	50 e4       	ldi	r21, 0x40	; 64
     66c:	c8 01       	movw	r24, r16
     66e:	b7 01       	movw	r22, r14
     670:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	44 e3       	ldi	r20, 0x34	; 52
     67a:	53 e4       	ldi	r21, 0x43	; 67
     67c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     680:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <cos>
     684:	69 83       	std	Y+1, r22	; 0x01
     686:	7a 83       	std	Y+2, r23	; 0x02
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	9c 83       	std	Y+4, r25	; 0x04
	//Calculate distance form lat1/lon1 to lat2/lon2 using haversine formula
	//Note lat1/lon1/lat2/lon2 must be in radians
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
     68c:	29 85       	ldd	r18, Y+9	; 0x09
     68e:	3a 85       	ldd	r19, Y+10	; 0x0a
     690:	4b 85       	ldd	r20, Y+11	; 0x0b
     692:	5c 85       	ldd	r21, Y+12	; 0x0c
     694:	c6 01       	movw	r24, r12
     696:	b5 01       	movw	r22, r10
     698:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     69c:	2b ed       	ldi	r18, 0xDB	; 219
     69e:	3f e0       	ldi	r19, 0x0F	; 15
     6a0:	49 e4       	ldi	r20, 0x49	; 73
     6a2:	50 e4       	ldi	r21, 0x40	; 64
     6a4:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	44 e3       	ldi	r20, 0x34	; 52
     6ae:	53 e4       	ldi	r21, 0x43	; 67
     6b0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	5f e3       	ldi	r21, 0x3F	; 63
     6bc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     6c0:	0e 94 08 20 	call	0x4010	; 0x4010 <sin>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     6cc:	4b 01       	movw	r8, r22
     6ce:	5c 01       	movw	r10, r24
     6d0:	29 81       	ldd	r18, Y+1	; 0x01
     6d2:	3a 81       	ldd	r19, Y+2	; 0x02
     6d4:	4b 81       	ldd	r20, Y+3	; 0x03
     6d6:	5c 81       	ldd	r21, Y+4	; 0x04
     6d8:	c3 01       	movw	r24, r6
     6da:	b2 01       	movw	r22, r4
     6dc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	2d 81       	ldd	r18, Y+5	; 0x05
     6f2:	3e 81       	ldd	r19, Y+6	; 0x06
     6f4:	4f 81       	ldd	r20, Y+7	; 0x07
     6f6:	58 85       	ldd	r21, Y+8	; 0x08
     6f8:	ca 01       	movw	r24, r20
     6fa:	b9 01       	movw	r22, r18
     6fc:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
	c = 2 * atan2(sqrt(a), sqrt(1 - a));
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e8       	ldi	r24, 0x80	; 128
     71a:	9f e3       	ldi	r25, 0x3F	; 63
     71c:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     720:	0e 94 12 20 	call	0x4024	; 0x4024 <sqrt>
     724:	4b 01       	movw	r8, r22
     726:	5c 01       	movw	r10, r24
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 12 20 	call	0x4024	; 0x4024 <sqrt>
     730:	a5 01       	movw	r20, r10
     732:	94 01       	movw	r18, r8
     734:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <atan2>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>

	dist = 20925656.2 * c;  //radius of the earth (6378140 meters) in feet 20925656.2
     740:	2c e6       	ldi	r18, 0x6C	; 108
     742:	36 ea       	ldi	r19, 0xA6	; 166
     744:	4f e9       	ldi	r20, 0x9F	; 159
     746:	5b e4       	ldi	r21, 0x4B	; 75
     748:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
	return (( (long) dist + 0.5) * 0.0003048);
     74c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
     750:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	5f e3       	ldi	r21, 0x3F	; 63
     75c:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     760:	20 e9       	ldi	r18, 0x90	; 144
     762:	3d ec       	ldi	r19, 0xCD	; 205
     764:	4f e9       	ldi	r20, 0x9F	; 159
     766:	59 e3       	ldi	r21, 0x39	; 57
     768:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     76c:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
}
     770:	2c 96       	adiw	r28, 0x0c	; 12
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	08 95       	ret

0000079e <control_power>:
#include "defines.h"
#include "uart_handler.h"

void control_power(uint8_t value)
{
	if (value)
     79e:	88 23       	and	r24, r24
     7a0:	19 f0       	breq	.+6      	; 0x7a8 <control_power+0xa>
	{
		PWR_ON;		// Device will keep power after switch is released
     7a2:	80 e4       	ldi	r24, 0x40	; 64
     7a4:	8b b9       	out	0x0b, r24	; 11
     7a6:	08 95       	ret
	}
	else
	{
		PWR_OFF;	// Device turn off
     7a8:	5e 98       	cbi	0x0b, 6	; 11
     7aa:	08 95       	ret

000007ac <read_button>:
	}
}

uint8_t read_button(void)
{
	if(debug_on)
     7ac:	80 91 d2 05 	lds	r24, 0x05D2
     7b0:	88 23       	and	r24, r24
     7b2:	81 f0       	breq	.+32     	; 0x7d4 <read_button+0x28>
	{
		uart_puts("Button state = ");
     7b4:	84 e2       	ldi	r24, 0x24	; 36
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(SW_STATUS, 1);
     7bc:	89 b1       	in	r24, 0x09	; 9
     7be:	80 78       	andi	r24, 0x80	; 128
     7c0:	61 e0       	ldi	r22, 0x01	; 1
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		
		if (!SW_STATUS)	// If pressed, pulled low
     7c8:	4f 99       	sbic	0x09, 7	; 9
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <read_button+0x28>
		{
			uart_puts("Pressed\n");
     7cc:	84 e3       	ldi	r24, 0x34	; 52
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		}
	}
	
	return (!SW_STATUS);
     7d4:	89 b1       	in	r24, 0x09	; 9
     7d6:	80 95       	com	r24
}
     7d8:	88 1f       	adc	r24, r24
     7da:	88 27       	eor	r24, r24
     7dc:	88 1f       	adc	r24, r24
     7de:	08 95       	ret

000007e0 <read_charge_status>:

uint8_t read_charge_status(void)
{
	if (!CHARGE_PIN_STATUS) // If 0
     7e0:	32 99       	sbic	0x06, 2	; 6
     7e2:	0a c0       	rjmp	.+20     	; 0x7f8 <read_charge_status+0x18>
	{
		if(debug_on) uart_puts("Charge status: CHARGING\n");
     7e4:	80 91 d2 05 	lds	r24, 0x05D2
     7e8:	88 23       	and	r24, r24
     7ea:	81 f0       	breq	.+32     	; 0x80c <read_charge_status+0x2c>
     7ec:	8d e3       	ldi	r24, 0x3D	; 61
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		return CHARGING;
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	08 95       	ret
	}
	else
	{
		if(debug_on) uart_puts("Charge status: FULL\n");
     7f8:	80 91 d2 05 	lds	r24, 0x05D2
     7fc:	88 23       	and	r24, r24
     7fe:	41 f0       	breq	.+16     	; 0x810 <read_charge_status+0x30>
     800:	86 e5       	ldi	r24, 0x56	; 86
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		return FULL;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	08 95       	ret
uint8_t read_charge_status(void)
{
	if (!CHARGE_PIN_STATUS) // If 0
	{
		if(debug_on) uart_puts("Charge status: CHARGING\n");
		return CHARGING;
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret
	}
	else
	{
		if(debug_on) uart_puts("Charge status: FULL\n");
		return FULL;
     810:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     812:	08 95       	ret

00000814 <check_device_status>:
		PWR_OFF;	// Device turn off
	}
}

void check_device_status(void)
{
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
	device.buttonstate = read_button();				// 1=pressed
     818:	0e 94 d6 03 	call	0x7ac	; 0x7ac <read_button>
     81c:	ce e9       	ldi	r28, 0x9E	; 158
     81e:	d6 e0       	ldi	r29, 0x06	; 6
     820:	88 83       	st	Y, r24
	device.chargingstate = read_charge_status();
     822:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <read_charge_status>
     826:	80 93 9d 06 	sts	0x069D, r24
	//device.battery = read_battery();
	
	if ((device.buttonstate==BUTTON_PRESSED))	// set state
     82a:	88 81       	ld	r24, Y
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	89 f4       	brne	.+34     	; 0x852 <check_device_status+0x3e>
	{
		if ((device.status!=BUTTON_PRESSED))
     830:	80 91 a2 06 	lds	r24, 0x06A2
     834:	81 30       	cpi	r24, 0x01	; 1
     836:	09 f4       	brne	.+2      	; 0x83a <check_device_status+0x26>
     838:	4e c0       	rjmp	.+156    	; 0x8d6 <check_device_status+0xc2>
		{
			uart_puts("Button pressed\n");
     83a:	8b e6       	ldi	r24, 0x6B	; 107
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			device.previousstatus = device.status;
     842:	e2 ea       	ldi	r30, 0xA2	; 162
     844:	f6 e0       	ldi	r31, 0x06	; 6
     846:	80 81       	ld	r24, Z
     848:	80 93 a1 06 	sts	0x06A1, r24
			device.status = BUTTON_PRESSED;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 83       	st	Z, r24
     850:	42 c0       	rjmp	.+132    	; 0x8d6 <check_device_status+0xc2>
		}
	}
	else
	{
		if ((device.buttonstate==BUTTON_NOT_PRESSED)&&(device.status==BUTTON_PRESSED)) // reset state
     852:	81 11       	cpse	r24, r1
     854:	0b c0       	rjmp	.+22     	; 0x86c <check_device_status+0x58>
     856:	80 91 a2 06 	lds	r24, 0x06A2
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	39 f4       	brne	.+14     	; 0x86c <check_device_status+0x58>
		{
			uart_puts("Button released\n");
     85e:	8b e7       	ldi	r24, 0x7B	; 123
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			device.status = BUTTON_NOT_PRESSED;	// released
     866:	10 92 a2 06 	sts	0x06A2, r1
     86a:	35 c0       	rjmp	.+106    	; 0x8d6 <check_device_status+0xc2>
		}
		else if (device.status==BUTTON_NOT_PRESSED)
     86c:	20 91 a2 06 	lds	r18, 0x06A2
     870:	21 11       	cpse	r18, r1
     872:	05 c0       	rjmp	.+10     	; 0x87e <check_device_status+0x6a>
		{
			device.status = device.previousstatus;
     874:	80 91 a1 06 	lds	r24, 0x06A1
     878:	80 93 a2 06 	sts	0x06A2, r24
     87c:	2c c0       	rjmp	.+88     	; 0x8d6 <check_device_status+0xc2>
		}
		else
		{
			if (timeout_timer<TIMEOUT_TIME) // still ok
     87e:	80 91 d5 05 	lds	r24, 0x05D5
     882:	90 91 d6 05 	lds	r25, 0x05D6
     886:	88 38       	cpi	r24, 0x88	; 136
     888:	33 e1       	ldi	r19, 0x13	; 19
     88a:	93 07       	cpc	r25, r19
     88c:	30 f4       	brcc	.+12     	; 0x89a <check_device_status+0x86>
			{
				//device.status = NAVIGATING;
				timeout_timer++;
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	90 93 d6 05 	sts	0x05D6, r25
     894:	80 93 d5 05 	sts	0x05D5, r24
     898:	11 c0       	rjmp	.+34     	; 0x8bc <check_device_status+0xa8>
			}
			else //time-out
			{
				timeout_timer = 40;
     89a:	88 e2       	ldi	r24, 0x28	; 40
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 d6 05 	sts	0x05D6, r25
     8a2:	80 93 d5 05 	sts	0x05D5, r24
				if (device.status!=NO_CONNECTION)
     8a6:	23 30       	cpi	r18, 0x03	; 3
     8a8:	49 f0       	breq	.+18     	; 0x8bc <check_device_status+0xa8>
				{
					device.previousstatus = device.status;
     8aa:	20 93 a1 06 	sts	0x06A1, r18
					device.status = NO_CONNECTION;
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	80 93 a2 06 	sts	0x06A2, r24
					uart_puts("We have NO Connection (time-out)..\n");
     8b4:	8c e8       	ldi	r24, 0x8C	; 140
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				}
			}
			
			if (device.newdata)
     8bc:	80 91 a0 06 	lds	r24, 0x06A0
     8c0:	88 23       	and	r24, r24
     8c2:	49 f0       	breq	.+18     	; 0x8d6 <check_device_status+0xc2>
			{
				device.status = NAVIGATING;
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	80 93 a2 06 	sts	0x06A2, r24
				device.newdata = FALSE;
     8ca:	10 92 a0 06 	sts	0x06A0, r1
				timeout_timer = 0;	// reset timer
     8ce:	10 92 d6 05 	sts	0x05D6, r1
     8d2:	10 92 d5 05 	sts	0x05D5, r1
			}
		}
	}
}
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	08 95       	ret

000008dc <read_battery>:
		return FULL;
	}
}

uint16_t read_battery(void)
{
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
	*   Min val = 3.14*0.5 = 1.57V*1024/3V3 = 487
	*	Min val = 4.2*0.5 = 2.1V*1024/3V3 = 651
	*/
	static uint16_t MIN_BAT_ADC = 487, MAX_BAT_ADC = 660;	
	
	BATT_PWR_ON;
     8e0:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e2:	8f e0       	ldi	r24, 0x0F	; 15
     8e4:	97 e2       	ldi	r25, 0x27	; 39
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <read_battery+0xa>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <read_battery+0x10>
     8ec:	00 00       	nop
	_delay_ms(5);	// Stabilize power supply
	battery_val = read_adc(BATT_PIN);
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	0e 94 08 15 	call	0x2a10	; 0x2a10 <read_adc>
	battery_percentage = (battery_val - MIN_BAT_ADC) * (100-0) / (MAX_BAT_ADC - MIN_BAT_ADC) + 0;
     8f4:	87 5e       	subi	r24, 0xE7	; 231
     8f6:	91 40       	sbci	r25, 0x01	; 1
     8f8:	24 e6       	ldi	r18, 0x64	; 100
     8fa:	28 9f       	mul	r18, r24
     8fc:	a0 01       	movw	r20, r0
     8fe:	29 9f       	mul	r18, r25
     900:	50 0d       	add	r21, r0
     902:	11 24       	eor	r1, r1
     904:	9a 01       	movw	r18, r20
     906:	a3 ed       	ldi	r26, 0xD3	; 211
     908:	ba e7       	ldi	r27, 0x7A	; 122
     90a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__umulhisi3>
     90e:	48 1b       	sub	r20, r24
     910:	59 0b       	sbc	r21, r25
     912:	ea 01       	movw	r28, r20
     914:	d6 95       	lsr	r29
     916:	c7 95       	ror	r28
     918:	8c 0f       	add	r24, r28
     91a:	9d 1f       	adc	r25, r29
	BATT_PWR_OFF;
     91c:	22 e0       	ldi	r18, 0x02	; 2
     91e:	28 b9       	out	0x08, r18	; 8
     920:	ec 01       	movw	r28, r24
     922:	cc 0f       	add	r28, r28
     924:	cd 2f       	mov	r28, r29
     926:	cc 1f       	adc	r28, r28
     928:	dd 0b       	sbc	r29, r29
     92a:	d1 95       	neg	r29
     92c:	c5 36       	cpi	r28, 0x65	; 101
     92e:	d1 05       	cpc	r29, r1
     930:	10 f0       	brcs	.+4      	; 0x936 <__stack+0x37>
     932:	c4 e6       	ldi	r28, 0x64	; 100
     934:	d0 e0       	ldi	r29, 0x00	; 0
	
	if (battery_percentage>100) {battery_percentage=100;}
	
	if (debug_on)
     936:	80 91 d2 05 	lds	r24, 0x05D2
     93a:	88 23       	and	r24, r24
     93c:	61 f0       	breq	.+24     	; 0x956 <__stack+0x57>
	{
		uart_puts("Battery = ");
     93e:	80 eb       	ldi	r24, 0xB0	; 176
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(battery_percentage, 0);
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	ce 01       	movw	r24, r28
     94a:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		uart_puts("%\n");
     94e:	8b eb       	ldi	r24, 0xBB	; 187
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>

	
	//battery_percentage = (battery_percentage>=100) ? 100: battery_percentage;	/* limit */
	//uart_puts("TODO:battery percentage should still be mapped!!\n");
	return (battery_percentage);
}
     956:	ce 01       	movw	r24, r28
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	08 95       	ret

0000095e <init_bluetooth>:

void init_bluetooth(void)
{	/*TODO, AT pin not at correct layout for this module*/
	uart_init( UART_BAUD_SELECT(9600,F_CPU) );	/* Init Uart */
     95e:	83 e3       	ldi	r24, 0x33	; 51
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <uart_init>
	/* Maybe set KEY-pin first? */
	BT_RST_LOW;
     966:	5a 98       	cbi	0x0b, 2	; 11
     968:	8f e1       	ldi	r24, 0x1F	; 31
     96a:	9e e4       	ldi	r25, 0x4E	; 78
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	f1 f7       	brne	.-4      	; 0x96c <init_bluetooth+0xe>
     970:	00 c0       	rjmp	.+0      	; 0x972 <init_bluetooth+0x14>
     972:	00 00       	nop
	_delay_ms(10);
	BT_RST_HIGH;
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	8b b9       	out	0x0b, r24	; 11
     978:	8f e1       	ldi	r24, 0x1F	; 31
     97a:	9e e4       	ldi	r25, 0x4E	; 78
     97c:	01 97       	sbiw	r24, 0x01	; 1
     97e:	f1 f7       	brne	.-4      	; 0x97c <init_bluetooth+0x1e>
     980:	00 c0       	rjmp	.+0      	; 0x982 <init_bluetooth+0x24>
     982:	00 00       	nop
	_delay_ms(10);
	AT_ON;	// Set module into AT mode
     984:	88 e0       	ldi	r24, 0x08	; 8
     986:	8b b9       	out	0x0b, r24	; 11
	
	//uart_puts("AT+ORGL\n");	/* Original settings */
	uart_puts("AT+NAMEBIKENAV\n"); /* Set name */
     988:	8e eb       	ldi	r24, 0xBE	; 190
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	uart_puts("AT+ROLE=0\n");		/* Set role */
     990:	8e ec       	ldi	r24, 0xCE	; 206
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	uart_puts("AT+BAUD4\n");	/* set baudrate */
     998:	89 ed       	ldi	r24, 0xD9	; 217
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	
	/* Clear KEY-pin before reset */
	AT_OFF;	// Reset AT mode
     9a0:	5b 98       	cbi	0x0b, 3	; 11
	uart_puts("AT+RESET\n");	/* Reset module */
     9a2:	83 ee       	ldi	r24, 0xE3	; 227
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Reset baudrate */
     9aa:	83 e3       	ldi	r24, 0x33	; 51
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <uart_init>
     9b2:	08 95       	ret

000009b4 <read_data_raw>:
	i2c_stop();*/
}

// Returns a set of acceleration and raw magnetic readings from the cmp01a.
void read_data_raw(vector *a, vector *m)
{
     9b4:	4f 92       	push	r4
     9b6:	5f 92       	push	r5
     9b8:	6f 92       	push	r6
     9ba:	7f 92       	push	r7
     9bc:	8f 92       	push	r8
     9be:	9f 92       	push	r9
     9c0:	af 92       	push	r10
     9c2:	bf 92       	push	r11
     9c4:	cf 92       	push	r12
     9c6:	df 92       	push	r13
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	7c 01       	movw	r14, r24
     9d6:	eb 01       	movw	r28, r22
	//i2c_start(0x32);
	//i2c_write(0x28 | 1<<7);
	//i2c_start(0x33);
	
	// read accelerometer values
	i2c_start(0x32);
     9d8:	82 e3       	ldi	r24, 0x32	; 50
     9da:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	i2c_write(0xA8);
     9de:	88 ea       	ldi	r24, 0xA8	; 168
     9e0:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_start(0x33);
     9e4:	83 e3       	ldi	r24, 0x33	; 51
     9e6:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	
	uint8_t axl = i2c_readAck();
     9ea:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     9ee:	48 2e       	mov	r4, r24
	uint8_t axh = i2c_readAck();
     9f0:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     9f4:	58 2e       	mov	r5, r24
	uint8_t ayl = i2c_readAck();
     9f6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     9fa:	68 2e       	mov	r6, r24
	uint8_t ayh = i2c_readAck();
     9fc:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a00:	78 2e       	mov	r7, r24
	uint8_t azl = i2c_readAck();
     a02:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a06:	88 2e       	mov	r8, r24
	uint8_t azh = i2c_readNak();
     a08:	0e 94 dd 09 	call	0x13ba	; 0x13ba <i2c_readNak>
     a0c:	98 2e       	mov	r9, r24
	i2c_stop();
     a0e:	0e 94 b7 09 	call	0x136e	; 0x136e <i2c_stop>
	//i2c_write(0x03); // OUTXH_M
	//i2c_start(0x3D);		  // repeated start
	//i2c_write(0x3D); // read mag
	
	// read magnetometer values
	i2c_start(0x3C);
     a12:	8c e3       	ldi	r24, 0x3C	; 60
     a14:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	i2c_write(0x03);
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_start(0x3D);
     a1e:	8d e3       	ldi	r24, 0x3D	; 61
     a20:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	
	uint8_t mxh = i2c_readAck();	/* LSM303DLHC A data = XYZ */
     a24:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a28:	b8 2e       	mov	r11, r24
	uint8_t mxl = i2c_readAck();
     a2a:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a2e:	a8 2e       	mov	r10, r24
	uint8_t mzh = i2c_readAck();	
     a30:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a34:	18 2f       	mov	r17, r24
	uint8_t mzl = i2c_readAck();	/* LSM303DLHC M data = XZY */
     a36:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a3a:	08 2f       	mov	r16, r24
	uint8_t myh = i2c_readAck();
     a3c:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
     a40:	d8 2e       	mov	r13, r24
	uint8_t myl = i2c_readNak();
     a42:	0e 94 dd 09 	call	0x13ba	; 0x13ba <i2c_readNak>
     a46:	c8 2e       	mov	r12, r24
	i2c_stop();
     a48:	0e 94 b7 09 	call	0x136e	; 0x136e <i2c_stop>

	//a->x = (int16_t)((axh << 8) | axl);
	//a->y = (int16_t)((ayh << 8) | ayl);
	//a->z = (int16_t)((azh << 8) | azl);
	a->x = axh << 8 | axl;
     a4c:	64 2d       	mov	r22, r4
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	75 29       	or	r23, r5
     a52:	88 27       	eor	r24, r24
     a54:	77 fd       	sbrc	r23, 7
     a56:	80 95       	com	r24
     a58:	98 2f       	mov	r25, r24
     a5a:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     a5e:	f7 01       	movw	r30, r14
     a60:	60 83       	st	Z, r22
     a62:	71 83       	std	Z+1, r23	; 0x01
     a64:	82 83       	std	Z+2, r24	; 0x02
     a66:	93 83       	std	Z+3, r25	; 0x03
	a->y = ayh << 8 | ayl;
     a68:	66 2d       	mov	r22, r6
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	77 29       	or	r23, r7
     a6e:	88 27       	eor	r24, r24
     a70:	77 fd       	sbrc	r23, 7
     a72:	80 95       	com	r24
     a74:	98 2f       	mov	r25, r24
     a76:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     a7a:	f7 01       	movw	r30, r14
     a7c:	64 83       	std	Z+4, r22	; 0x04
     a7e:	75 83       	std	Z+5, r23	; 0x05
     a80:	86 83       	std	Z+6, r24	; 0x06
     a82:	97 83       	std	Z+7, r25	; 0x07
	a->z = azh << 8 | azl;
     a84:	68 2d       	mov	r22, r8
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	79 29       	or	r23, r9
     a8a:	88 27       	eor	r24, r24
     a8c:	77 fd       	sbrc	r23, 7
     a8e:	80 95       	com	r24
     a90:	98 2f       	mov	r25, r24
     a92:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     a96:	f7 01       	movw	r30, r14
     a98:	60 87       	std	Z+8, r22	; 0x08
     a9a:	71 87       	std	Z+9, r23	; 0x09
     a9c:	82 87       	std	Z+10, r24	; 0x0a
     a9e:	93 87       	std	Z+11, r25	; 0x0b
	m->x = mxh << 8 | mxl;
     aa0:	6a 2d       	mov	r22, r10
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	7b 29       	or	r23, r11
     aa6:	88 27       	eor	r24, r24
     aa8:	77 fd       	sbrc	r23, 7
     aaa:	80 95       	com	r24
     aac:	98 2f       	mov	r25, r24
     aae:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     ab2:	68 83       	st	Y, r22
     ab4:	79 83       	std	Y+1, r23	; 0x01
     ab6:	8a 83       	std	Y+2, r24	; 0x02
     ab8:	9b 83       	std	Y+3, r25	; 0x03
	m->y = myh << 8 | myl;
     aba:	6c 2d       	mov	r22, r12
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	7d 29       	or	r23, r13
     ac0:	88 27       	eor	r24, r24
     ac2:	77 fd       	sbrc	r23, 7
     ac4:	80 95       	com	r24
     ac6:	98 2f       	mov	r25, r24
     ac8:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     acc:	6c 83       	std	Y+4, r22	; 0x04
     ace:	7d 83       	std	Y+5, r23	; 0x05
     ad0:	8e 83       	std	Y+6, r24	; 0x06
     ad2:	9f 83       	std	Y+7, r25	; 0x07
	m->z = mzh << 8 | mzl;
     ad4:	60 2f       	mov	r22, r16
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	71 2b       	or	r23, r17
     ada:	88 27       	eor	r24, r24
     adc:	77 fd       	sbrc	r23, 7
     ade:	80 95       	com	r24
     ae0:	98 2f       	mov	r25, r24
     ae2:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     ae6:	68 87       	std	Y+8, r22	; 0x08
     ae8:	79 87       	std	Y+9, r23	; 0x09
     aea:	8a 87       	std	Y+10, r24	; 0x0a
     aec:	9b 87       	std	Y+11, r25	; 0x0b
	//m->x = (mxl | (mxh << 8));
	//m->y = (myl | (myh << 8));
	//m->z = (mzl | (mzh << 8));
}
     aee:	df 91       	pop	r29
     af0:	cf 91       	pop	r28
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	cf 90       	pop	r12
     afe:	bf 90       	pop	r11
     b00:	af 90       	pop	r10
     b02:	9f 90       	pop	r9
     b04:	8f 90       	pop	r8
     b06:	7f 90       	pop	r7
     b08:	6f 90       	pop	r6
     b0a:	5f 90       	pop	r5
     b0c:	4f 90       	pop	r4
     b0e:	08 95       	ret

00000b10 <read_data>:

// Returns a set of acceleration and adjusted magnetic readings from the cmp01a.
void read_data(vector *a, vector *m)
{
     b10:	8f 92       	push	r8
     b12:	9f 92       	push	r9
     b14:	af 92       	push	r10
     b16:	bf 92       	push	r11
     b18:	cf 92       	push	r12
     b1a:	df 92       	push	r13
     b1c:	ef 92       	push	r14
     b1e:	ff 92       	push	r15
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	eb 01       	movw	r28, r22
	read_data_raw(a, m);
     b26:	0e 94 da 04 	call	0x9b4	; 0x9b4 <read_data_raw>

	// shift and scale
	m->x = (m->x - m_min.x) / (m_max.x - m_min.x) * 2 - 1.0;
     b2a:	c0 90 0c 01 	lds	r12, 0x010C
     b2e:	d0 90 0d 01 	lds	r13, 0x010D
     b32:	e0 90 0e 01 	lds	r14, 0x010E
     b36:	f0 90 0f 01 	lds	r15, 0x010F
     b3a:	a7 01       	movw	r20, r14
     b3c:	96 01       	movw	r18, r12
     b3e:	68 81       	ld	r22, Y
     b40:	79 81       	ldd	r23, Y+1	; 0x01
     b42:	8a 81       	ldd	r24, Y+2	; 0x02
     b44:	9b 81       	ldd	r25, Y+3	; 0x03
     b46:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     b4a:	4b 01       	movw	r8, r22
     b4c:	5c 01       	movw	r10, r24
     b4e:	a7 01       	movw	r20, r14
     b50:	96 01       	movw	r18, r12
     b52:	60 91 00 01 	lds	r22, 0x0100
     b56:	70 91 01 01 	lds	r23, 0x0101
     b5a:	80 91 02 01 	lds	r24, 0x0102
     b5e:	90 91 03 01 	lds	r25, 0x0103
     b62:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	c5 01       	movw	r24, r10
     b6c:	b4 01       	movw	r22, r8
     b6e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     b72:	9b 01       	movw	r18, r22
     b74:	ac 01       	movw	r20, r24
     b76:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e8       	ldi	r20, 0x80	; 128
     b80:	5f e3       	ldi	r21, 0x3F	; 63
     b82:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     b86:	68 83       	st	Y, r22
     b88:	79 83       	std	Y+1, r23	; 0x01
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	9b 83       	std	Y+3, r25	; 0x03
	m->y = (m->y - m_min.y) / (m_max.y - m_min.y) * 2 - 1.0;
     b8e:	c0 90 10 01 	lds	r12, 0x0110
     b92:	d0 90 11 01 	lds	r13, 0x0111
     b96:	e0 90 12 01 	lds	r14, 0x0112
     b9a:	f0 90 13 01 	lds	r15, 0x0113
     b9e:	a7 01       	movw	r20, r14
     ba0:	96 01       	movw	r18, r12
     ba2:	6c 81       	ldd	r22, Y+4	; 0x04
     ba4:	7d 81       	ldd	r23, Y+5	; 0x05
     ba6:	8e 81       	ldd	r24, Y+6	; 0x06
     ba8:	9f 81       	ldd	r25, Y+7	; 0x07
     baa:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     bae:	4b 01       	movw	r8, r22
     bb0:	5c 01       	movw	r10, r24
     bb2:	a7 01       	movw	r20, r14
     bb4:	96 01       	movw	r18, r12
     bb6:	60 91 04 01 	lds	r22, 0x0104
     bba:	70 91 05 01 	lds	r23, 0x0105
     bbe:	80 91 06 01 	lds	r24, 0x0106
     bc2:	90 91 07 01 	lds	r25, 0x0107
     bc6:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c5 01       	movw	r24, r10
     bd0:	b4 01       	movw	r22, r8
     bd2:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	40 e8       	ldi	r20, 0x80	; 128
     be4:	5f e3       	ldi	r21, 0x3F	; 63
     be6:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     bea:	6c 83       	std	Y+4, r22	; 0x04
     bec:	7d 83       	std	Y+5, r23	; 0x05
     bee:	8e 83       	std	Y+6, r24	; 0x06
     bf0:	9f 83       	std	Y+7, r25	; 0x07
	m->z = (m->z - m_min.z) / (m_max.z - m_min.z) * 2 - 1.0;
     bf2:	c0 90 14 01 	lds	r12, 0x0114
     bf6:	d0 90 15 01 	lds	r13, 0x0115
     bfa:	e0 90 16 01 	lds	r14, 0x0116
     bfe:	f0 90 17 01 	lds	r15, 0x0117
     c02:	a7 01       	movw	r20, r14
     c04:	96 01       	movw	r18, r12
     c06:	68 85       	ldd	r22, Y+8	; 0x08
     c08:	79 85       	ldd	r23, Y+9	; 0x09
     c0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     c0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     c0e:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     c12:	4b 01       	movw	r8, r22
     c14:	5c 01       	movw	r10, r24
     c16:	a7 01       	movw	r20, r14
     c18:	96 01       	movw	r18, r12
     c1a:	60 91 08 01 	lds	r22, 0x0108
     c1e:	70 91 09 01 	lds	r23, 0x0109
     c22:	80 91 0a 01 	lds	r24, 0x010A
     c26:	90 91 0b 01 	lds	r25, 0x010B
     c2a:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	c5 01       	movw	r24, r10
     c34:	b4 01       	movw	r22, r8
     c36:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     c3a:	9b 01       	movw	r18, r22
     c3c:	ac 01       	movw	r20, r24
     c3e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e8       	ldi	r20, 0x80	; 128
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     c4e:	68 87       	std	Y+8, r22	; 0x08
     c50:	79 87       	std	Y+9, r23	; 0x09
     c52:	8a 87       	std	Y+10, r24	; 0x0a
     c54:	9b 87       	std	Y+11, r25	; 0x0b
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	ff 90       	pop	r15
     c5c:	ef 90       	pop	r14
     c5e:	df 90       	pop	r13
     c60:	cf 90       	pop	r12
     c62:	bf 90       	pop	r11
     c64:	af 90       	pop	r10
     c66:	9f 90       	pop	r9
     c68:	8f 90       	pop	r8
     c6a:	08 95       	ret

00000c6c <get_heading>:

// Returns a heading (in degrees) given an acceleration vector a due to gravity, a magnetic vector m, and a facing vector p.
int get_heading(const vector *a, const vector *m, const vector *p)
{
     c6c:	cf 92       	push	r12
     c6e:	df 92       	push	r13
     c70:	ef 92       	push	r14
     c72:	ff 92       	push	r15
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	68 97       	sbiw	r28, 0x18	; 24
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
     c8c:	7c 01       	movw	r14, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	8a 01       	movw	r16, r20
	vector E;
	vector N;

	// cross magnetic vector (magnetic north + inclination) with "down" (acceleration vector) to produce "east"
	vector_cross(m, a, &E);
     c92:	ae 01       	movw	r20, r28
     c94:	4f 5f       	subi	r20, 0xFF	; 255
     c96:	5f 4f       	sbci	r21, 0xFF	; 255
     c98:	b7 01       	movw	r22, r14
     c9a:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <vector_cross>
	vector_normalize(&E);
     c9e:	ce 01       	movw	r24, r28
     ca0:	01 96       	adiw	r24, 0x01	; 1
     ca2:	0e 94 a7 18 	call	0x314e	; 0x314e <vector_normalize>

	// cross "down" with "east" to produce "north" (parallel to the ground)
	vector_cross(a, &E, &N);
     ca6:	ae 01       	movw	r20, r28
     ca8:	43 5f       	subi	r20, 0xF3	; 243
     caa:	5f 4f       	sbci	r21, 0xFF	; 255
     cac:	be 01       	movw	r22, r28
     cae:	6f 5f       	subi	r22, 0xFF	; 255
     cb0:	7f 4f       	sbci	r23, 0xFF	; 255
     cb2:	c7 01       	movw	r24, r14
     cb4:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <vector_cross>
	vector_normalize(&N);
     cb8:	ce 01       	movw	r24, r28
     cba:	0d 96       	adiw	r24, 0x0d	; 13
     cbc:	0e 94 a7 18 	call	0x314e	; 0x314e <vector_normalize>

	// compute heading
	int heading = (round(atan2(vector_dot(&E, p), vector_dot(&N, p)) * 180 / M_PI))-PCB_COMPASS_CORR;
     cc0:	b8 01       	movw	r22, r16
     cc2:	ce 01       	movw	r24, r28
     cc4:	0d 96       	adiw	r24, 0x0d	; 13
     cc6:	0e 94 63 18 	call	0x30c6	; 0x30c6 <vector_dot>
     cca:	6b 01       	movw	r12, r22
     ccc:	7c 01       	movw	r14, r24
     cce:	b8 01       	movw	r22, r16
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	0e 94 63 18 	call	0x30c6	; 0x30c6 <vector_dot>
     cd8:	a7 01       	movw	r20, r14
     cda:	96 01       	movw	r18, r12
     cdc:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <atan2>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	44 e3       	ldi	r20, 0x34	; 52
     ce6:	53 e4       	ldi	r21, 0x43	; 67
     ce8:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
     cec:	2b ed       	ldi	r18, 0xDB	; 219
     cee:	3f e0       	ldi	r19, 0x0F	; 15
     cf0:	49 e4       	ldi	r20, 0x49	; 73
     cf2:	50 e4       	ldi	r21, 0x40	; 64
     cf4:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     cf8:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <round>
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	44 eb       	ldi	r20, 0xB4	; 180
     d02:	52 e4       	ldi	r21, 0x42	; 66
     d04:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
     d08:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
     d0c:	9b 01       	movw	r18, r22
	if (heading < 0) heading += 360;
     d0e:	77 23       	and	r23, r23
     d10:	14 f4       	brge	.+4      	; 0xd16 <get_heading+0xaa>
     d12:	28 59       	subi	r18, 0x98	; 152
     d14:	3e 4f       	sbci	r19, 0xFE	; 254
	return heading;
}
     d16:	c9 01       	movw	r24, r18
     d18:	68 96       	adiw	r28, 0x18	; 24
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	df 90       	pop	r13
     d32:	cf 90       	pop	r12
     d34:	08 95       	ret

00000d36 <get_heading_avg>:

/**/
int get_heading_avg(uint8_t number_of_avg)
{
     d36:	6f 92       	push	r6
     d38:	7f 92       	push	r7
     d3a:	8f 92       	push	r8
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	68 97       	sbiw	r28, 0x18	; 24
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
     d62:	19 82       	std	Y+1, r1	; 0x01
     d64:	1a 82       	std	Y+2, r1	; 0x02
     d66:	1b 82       	std	Y+3, r1	; 0x03
     d68:	1c 82       	std	Y+4, r1	; 0x04
     d6a:	1d 82       	std	Y+5, r1	; 0x05
     d6c:	1e 82       	std	Y+6, r1	; 0x06
     d6e:	1f 82       	std	Y+7, r1	; 0x07
     d70:	18 86       	std	Y+8, r1	; 0x08
     d72:	19 86       	std	Y+9, r1	; 0x09
     d74:	1a 86       	std	Y+10, r1	; 0x0a
     d76:	1b 86       	std	Y+11, r1	; 0x0b
     d78:	1c 86       	std	Y+12, r1	; 0x0c
     d7a:	1d 86       	std	Y+13, r1	; 0x0d
     d7c:	1e 86       	std	Y+14, r1	; 0x0e
     d7e:	1f 86       	std	Y+15, r1	; 0x0f
     d80:	18 8a       	std	Y+16, r1	; 0x10
     d82:	19 8a       	std	Y+17, r1	; 0x11
     d84:	1a 8a       	std	Y+18, r1	; 0x12
     d86:	1b 8a       	std	Y+19, r1	; 0x13
     d88:	1c 8a       	std	Y+20, r1	; 0x14
     d8a:	1d 8a       	std	Y+21, r1	; 0x15
     d8c:	1e 8a       	std	Y+22, r1	; 0x16
     d8e:	1f 8a       	std	Y+23, r1	; 0x17
     d90:	18 8e       	std	Y+24, r1	; 0x18
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
     d92:	e8 2e       	mov	r14, r24
     d94:	f1 2c       	mov	r15, r1
     d96:	1e 14       	cp	r1, r14
     d98:	1f 04       	cpc	r1, r15
     d9a:	0c f0       	brlt	.+2      	; 0xd9e <get_heading_avg+0x68>
     d9c:	86 c0       	rjmp	.+268    	; 0xeaa <get_heading_avg+0x174>
     d9e:	00 e0       	ldi	r16, 0x00	; 0
     da0:	10 e0       	ldi	r17, 0x00	; 0
	{
		read_data(&a, &m);
		
		a_avg.x += a.x;
		a_avg.y += a.y;
     da2:	0f 2e       	mov	r0, r31
     da4:	f5 ed       	ldi	r31, 0xD5	; 213
     da6:	8f 2e       	mov	r8, r31
     da8:	f7 e0       	ldi	r31, 0x07	; 7
     daa:	9f 2e       	mov	r9, r31
     dac:	f0 2d       	mov	r31, r0
		a_avg.z += a.z;
     dae:	0f 2e       	mov	r0, r31
     db0:	f9 ed       	ldi	r31, 0xD9	; 217
     db2:	af 2e       	mov	r10, r31
     db4:	f7 e0       	ldi	r31, 0x07	; 7
     db6:	bf 2e       	mov	r11, r31
     db8:	f0 2d       	mov	r31, r0
		m_avg.x += m.x;
		m_avg.y += m.y;
     dba:	0f 2e       	mov	r0, r31
     dbc:	f1 ee       	ldi	r31, 0xE1	; 225
     dbe:	cf 2e       	mov	r12, r31
     dc0:	f7 e0       	ldi	r31, 0x07	; 7
     dc2:	df 2e       	mov	r13, r31
     dc4:	f0 2d       	mov	r31, r0
		m_avg.z += m.z;
     dc6:	0f 2e       	mov	r0, r31
     dc8:	f5 ee       	ldi	r31, 0xE5	; 229
     dca:	6f 2e       	mov	r6, r31
     dcc:	f7 e0       	ldi	r31, 0x07	; 7
     dce:	7f 2e       	mov	r7, r31
     dd0:	f0 2d       	mov	r31, r0
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
	{
		read_data(&a, &m);
     dd2:	6d ed       	ldi	r22, 0xDD	; 221
     dd4:	77 e0       	ldi	r23, 0x07	; 7
     dd6:	81 ed       	ldi	r24, 0xD1	; 209
     dd8:	97 e0       	ldi	r25, 0x07	; 7
     dda:	0e 94 88 05 	call	0xb10	; 0xb10 <read_data>
		
		a_avg.x += a.x;
     dde:	20 91 d1 07 	lds	r18, 0x07D1
     de2:	30 91 d2 07 	lds	r19, 0x07D2
     de6:	40 91 d3 07 	lds	r20, 0x07D3
     dea:	50 91 d4 07 	lds	r21, 0x07D4
     dee:	69 81       	ldd	r22, Y+1	; 0x01
     df0:	7a 81       	ldd	r23, Y+2	; 0x02
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     dfa:	69 83       	std	Y+1, r22	; 0x01
     dfc:	7a 83       	std	Y+2, r23	; 0x02
     dfe:	8b 83       	std	Y+3, r24	; 0x03
     e00:	9c 83       	std	Y+4, r25	; 0x04
		a_avg.y += a.y;
     e02:	f4 01       	movw	r30, r8
     e04:	20 81       	ld	r18, Z
     e06:	31 81       	ldd	r19, Z+1	; 0x01
     e08:	42 81       	ldd	r20, Z+2	; 0x02
     e0a:	53 81       	ldd	r21, Z+3	; 0x03
     e0c:	6d 81       	ldd	r22, Y+5	; 0x05
     e0e:	7e 81       	ldd	r23, Y+6	; 0x06
     e10:	8f 81       	ldd	r24, Y+7	; 0x07
     e12:	98 85       	ldd	r25, Y+8	; 0x08
     e14:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     e18:	6d 83       	std	Y+5, r22	; 0x05
     e1a:	7e 83       	std	Y+6, r23	; 0x06
     e1c:	8f 83       	std	Y+7, r24	; 0x07
     e1e:	98 87       	std	Y+8, r25	; 0x08
		a_avg.z += a.z;
     e20:	f5 01       	movw	r30, r10
     e22:	20 81       	ld	r18, Z
     e24:	31 81       	ldd	r19, Z+1	; 0x01
     e26:	42 81       	ldd	r20, Z+2	; 0x02
     e28:	53 81       	ldd	r21, Z+3	; 0x03
     e2a:	69 85       	ldd	r22, Y+9	; 0x09
     e2c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e30:	9c 85       	ldd	r25, Y+12	; 0x0c
     e32:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     e36:	69 87       	std	Y+9, r22	; 0x09
     e38:	7a 87       	std	Y+10, r23	; 0x0a
     e3a:	8b 87       	std	Y+11, r24	; 0x0b
     e3c:	9c 87       	std	Y+12, r25	; 0x0c
		m_avg.x += m.x;
     e3e:	20 91 dd 07 	lds	r18, 0x07DD
     e42:	30 91 de 07 	lds	r19, 0x07DE
     e46:	40 91 df 07 	lds	r20, 0x07DF
     e4a:	50 91 e0 07 	lds	r21, 0x07E0
     e4e:	6d 85       	ldd	r22, Y+13	; 0x0d
     e50:	7e 85       	ldd	r23, Y+14	; 0x0e
     e52:	8f 85       	ldd	r24, Y+15	; 0x0f
     e54:	98 89       	ldd	r25, Y+16	; 0x10
     e56:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     e5a:	6d 87       	std	Y+13, r22	; 0x0d
     e5c:	7e 87       	std	Y+14, r23	; 0x0e
     e5e:	8f 87       	std	Y+15, r24	; 0x0f
     e60:	98 8b       	std	Y+16, r25	; 0x10
		m_avg.y += m.y;
     e62:	f6 01       	movw	r30, r12
     e64:	20 81       	ld	r18, Z
     e66:	31 81       	ldd	r19, Z+1	; 0x01
     e68:	42 81       	ldd	r20, Z+2	; 0x02
     e6a:	53 81       	ldd	r21, Z+3	; 0x03
     e6c:	69 89       	ldd	r22, Y+17	; 0x11
     e6e:	7a 89       	ldd	r23, Y+18	; 0x12
     e70:	8b 89       	ldd	r24, Y+19	; 0x13
     e72:	9c 89       	ldd	r25, Y+20	; 0x14
     e74:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     e78:	69 8b       	std	Y+17, r22	; 0x11
     e7a:	7a 8b       	std	Y+18, r23	; 0x12
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	9c 8b       	std	Y+20, r25	; 0x14
		m_avg.z += m.z;
     e80:	f3 01       	movw	r30, r6
     e82:	20 81       	ld	r18, Z
     e84:	31 81       	ldd	r19, Z+1	; 0x01
     e86:	42 81       	ldd	r20, Z+2	; 0x02
     e88:	53 81       	ldd	r21, Z+3	; 0x03
     e8a:	6d 89       	ldd	r22, Y+21	; 0x15
     e8c:	7e 89       	ldd	r23, Y+22	; 0x16
     e8e:	8f 89       	ldd	r24, Y+23	; 0x17
     e90:	98 8d       	ldd	r25, Y+24	; 0x18
     e92:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
     e96:	6d 8b       	std	Y+21, r22	; 0x15
     e98:	7e 8b       	std	Y+22, r23	; 0x16
     e9a:	8f 8b       	std	Y+23, r24	; 0x17
     e9c:	98 8f       	std	Y+24, r25	; 0x18
int get_heading_avg(uint8_t number_of_avg)
{
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
     e9e:	0f 5f       	subi	r16, 0xFF	; 255
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	0e 15       	cp	r16, r14
     ea4:	1f 05       	cpc	r17, r15
     ea6:	0c f4       	brge	.+2      	; 0xeaa <get_heading_avg+0x174>
     ea8:	94 cf       	rjmp	.-216    	; 0xdd2 <get_heading_avg+0x9c>
		a_avg.z += a.z;
		m_avg.x += m.x;
		m_avg.y += m.y;
		m_avg.z += m.z;
	}
	a_avg.x /= number_of_avg;
     eaa:	b7 01       	movw	r22, r14
     eac:	88 27       	eor	r24, r24
     eae:	77 fd       	sbrc	r23, 7
     eb0:	80 95       	com	r24
     eb2:	98 2f       	mov	r25, r24
     eb4:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
     eb8:	6b 01       	movw	r12, r22
     eba:	7c 01       	movw	r14, r24
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	69 81       	ldd	r22, Y+1	; 0x01
     ec2:	7a 81       	ldd	r23, Y+2	; 0x02
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	9c 81       	ldd	r25, Y+4	; 0x04
     ec8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     ecc:	69 83       	std	Y+1, r22	; 0x01
     ece:	7a 83       	std	Y+2, r23	; 0x02
     ed0:	8b 83       	std	Y+3, r24	; 0x03
     ed2:	9c 83       	std	Y+4, r25	; 0x04
	a_avg.y /= number_of_avg;
     ed4:	a7 01       	movw	r20, r14
     ed6:	96 01       	movw	r18, r12
     ed8:	6d 81       	ldd	r22, Y+5	; 0x05
     eda:	7e 81       	ldd	r23, Y+6	; 0x06
     edc:	8f 81       	ldd	r24, Y+7	; 0x07
     ede:	98 85       	ldd	r25, Y+8	; 0x08
     ee0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     ee4:	6d 83       	std	Y+5, r22	; 0x05
     ee6:	7e 83       	std	Y+6, r23	; 0x06
     ee8:	8f 83       	std	Y+7, r24	; 0x07
     eea:	98 87       	std	Y+8, r25	; 0x08
	a_avg.z /= number_of_avg;
     eec:	a7 01       	movw	r20, r14
     eee:	96 01       	movw	r18, r12
     ef0:	69 85       	ldd	r22, Y+9	; 0x09
     ef2:	7a 85       	ldd	r23, Y+10	; 0x0a
     ef4:	8b 85       	ldd	r24, Y+11	; 0x0b
     ef6:	9c 85       	ldd	r25, Y+12	; 0x0c
     ef8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     efc:	69 87       	std	Y+9, r22	; 0x09
     efe:	7a 87       	std	Y+10, r23	; 0x0a
     f00:	8b 87       	std	Y+11, r24	; 0x0b
     f02:	9c 87       	std	Y+12, r25	; 0x0c
	m_avg.x /= number_of_avg;
     f04:	a7 01       	movw	r20, r14
     f06:	96 01       	movw	r18, r12
     f08:	6d 85       	ldd	r22, Y+13	; 0x0d
     f0a:	7e 85       	ldd	r23, Y+14	; 0x0e
     f0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0e:	98 89       	ldd	r25, Y+16	; 0x10
     f10:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     f14:	6d 87       	std	Y+13, r22	; 0x0d
     f16:	7e 87       	std	Y+14, r23	; 0x0e
     f18:	8f 87       	std	Y+15, r24	; 0x0f
     f1a:	98 8b       	std	Y+16, r25	; 0x10
	m_avg.y /= number_of_avg;
     f1c:	a7 01       	movw	r20, r14
     f1e:	96 01       	movw	r18, r12
     f20:	69 89       	ldd	r22, Y+17	; 0x11
     f22:	7a 89       	ldd	r23, Y+18	; 0x12
     f24:	8b 89       	ldd	r24, Y+19	; 0x13
     f26:	9c 89       	ldd	r25, Y+20	; 0x14
     f28:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     f2c:	69 8b       	std	Y+17, r22	; 0x11
     f2e:	7a 8b       	std	Y+18, r23	; 0x12
     f30:	8b 8b       	std	Y+19, r24	; 0x13
     f32:	9c 8b       	std	Y+20, r25	; 0x14
	m_avg.z /= number_of_avg;
     f34:	a7 01       	movw	r20, r14
     f36:	96 01       	movw	r18, r12
     f38:	6d 89       	ldd	r22, Y+21	; 0x15
     f3a:	7e 89       	ldd	r23, Y+22	; 0x16
     f3c:	8f 89       	ldd	r24, Y+23	; 0x17
     f3e:	98 8d       	ldd	r25, Y+24	; 0x18
     f40:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
     f44:	6d 8b       	std	Y+21, r22	; 0x15
     f46:	7e 8b       	std	Y+22, r23	; 0x16
     f48:	8f 8b       	std	Y+23, r24	; 0x17
     f4a:	98 8f       	std	Y+24, r25	; 0x18
	
	heading = get_heading(&a_avg, &m_avg, &p); 
     f4c:	48 e1       	ldi	r20, 0x18	; 24
     f4e:	51 e0       	ldi	r21, 0x01	; 1
     f50:	be 01       	movw	r22, r28
     f52:	63 5f       	subi	r22, 0xF3	; 243
     f54:	7f 4f       	sbci	r23, 0xFF	; 255
     f56:	ce 01       	movw	r24, r28
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	0e 94 36 06 	call	0xc6c	; 0xc6c <get_heading>
	return heading; 
}
     f5e:	68 96       	adiw	r28, 0x18	; 24
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	08 95       	ret

00000f88 <calibrate_lsm303>:

int calibrate_lsm303(uint8_t axis, uint8_t minmax)
{
     f88:	cf 92       	push	r12
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	cf 93       	push	r28
     f92:	df 93       	push	r29
     f94:	c8 2f       	mov	r28, r24
     f96:	d6 2f       	mov	r29, r22
	read_data_raw(&a, &m);
     f98:	6d ed       	ldi	r22, 0xDD	; 221
     f9a:	77 e0       	ldi	r23, 0x07	; 7
     f9c:	81 ed       	ldi	r24, 0xD1	; 209
     f9e:	97 e0       	ldi	r25, 0x07	; 7
     fa0:	0e 94 da 04 	call	0x9b4	; 0x9b4 <read_data_raw>
	
	switch (axis)
     fa4:	c2 30       	cpi	r28, 0x02	; 2
     fa6:	09 f4       	brne	.+2      	; 0xfaa <calibrate_lsm303+0x22>
     fa8:	57 c0       	rjmp	.+174    	; 0x1058 <calibrate_lsm303+0xd0>
     faa:	c3 30       	cpi	r28, 0x03	; 3
     fac:	09 f4       	brne	.+2      	; 0xfb0 <calibrate_lsm303+0x28>
     fae:	a5 c0       	rjmp	.+330    	; 0x10fa <calibrate_lsm303+0x172>
     fb0:	c1 30       	cpi	r28, 0x01	; 1
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <calibrate_lsm303+0x2e>
     fb4:	f2 c0       	rjmp	.+484    	; 0x119a <calibrate_lsm303+0x212>
	{
		case X_AXIS:	// Calibrate X Axis
			if (m.x < cal_m_min.x) cal_m_min.x = m.x;
     fb6:	c0 90 dd 07 	lds	r12, 0x07DD
     fba:	d0 90 de 07 	lds	r13, 0x07DE
     fbe:	e0 90 df 07 	lds	r14, 0x07DF
     fc2:	f0 90 e0 07 	lds	r15, 0x07E0
     fc6:	20 91 b8 05 	lds	r18, 0x05B8
     fca:	30 91 b9 05 	lds	r19, 0x05B9
     fce:	40 91 ba 05 	lds	r20, 0x05BA
     fd2:	50 91 bb 05 	lds	r21, 0x05BB
     fd6:	c7 01       	movw	r24, r14
     fd8:	b6 01       	movw	r22, r12
     fda:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
     fde:	88 23       	and	r24, r24
     fe0:	44 f4       	brge	.+16     	; 0xff2 <calibrate_lsm303+0x6a>
     fe2:	c0 92 b8 05 	sts	0x05B8, r12
     fe6:	d0 92 b9 05 	sts	0x05B9, r13
     fea:	e0 92 ba 05 	sts	0x05BA, r14
     fee:	f0 92 bb 05 	sts	0x05BB, r15
			if (m.x > cal_m_max.x) cal_m_max.x = m.x;
     ff2:	20 91 c4 05 	lds	r18, 0x05C4
     ff6:	30 91 c5 05 	lds	r19, 0x05C5
     ffa:	40 91 c6 05 	lds	r20, 0x05C6
     ffe:	50 91 c7 05 	lds	r21, 0x05C7
    1002:	c7 01       	movw	r24, r14
    1004:	b6 01       	movw	r22, r12
    1006:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__gesf2>
    100a:	18 16       	cp	r1, r24
    100c:	44 f4       	brge	.+16     	; 0x101e <calibrate_lsm303+0x96>
    100e:	c0 92 c4 05 	sts	0x05C4, r12
    1012:	d0 92 c5 05 	sts	0x05C5, r13
    1016:	e0 92 c6 05 	sts	0x05C6, r14
    101a:	f0 92 c7 05 	sts	0x05C7, r15
			if (minmax==MIN)
    101e:	d2 30       	cpi	r29, 0x02	; 2
    1020:	61 f4       	brne	.+24     	; 0x103a <calibrate_lsm303+0xb2>
			{
				return cal_m_min.x;
    1022:	60 91 b8 05 	lds	r22, 0x05B8
    1026:	70 91 b9 05 	lds	r23, 0x05B9
    102a:	80 91 ba 05 	lds	r24, 0x05BA
    102e:	90 91 bb 05 	lds	r25, 0x05BB
    1032:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    1036:	cb 01       	movw	r24, r22
    1038:	bb c0       	rjmp	.+374    	; 0x11b0 <calibrate_lsm303+0x228>
			}
			if (minmax==MAX)
    103a:	d1 30       	cpi	r29, 0x01	; 1
    103c:	09 f0       	breq	.+2      	; 0x1040 <calibrate_lsm303+0xb8>
    103e:	b0 c0       	rjmp	.+352    	; 0x11a0 <calibrate_lsm303+0x218>
			{
				return cal_m_max.x;
    1040:	60 91 c4 05 	lds	r22, 0x05C4
    1044:	70 91 c5 05 	lds	r23, 0x05C5
    1048:	80 91 c6 05 	lds	r24, 0x05C6
    104c:	90 91 c7 05 	lds	r25, 0x05C7
    1050:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    1054:	cb 01       	movw	r24, r22
    1056:	ac c0       	rjmp	.+344    	; 0x11b0 <calibrate_lsm303+0x228>
			}
		break;
		
		case Y_AXIS:
			if (m.y < cal_m_min.y) cal_m_min.y = m.y;
    1058:	c0 90 e1 07 	lds	r12, 0x07E1
    105c:	d0 90 e2 07 	lds	r13, 0x07E2
    1060:	e0 90 e3 07 	lds	r14, 0x07E3
    1064:	f0 90 e4 07 	lds	r15, 0x07E4
    1068:	20 91 bc 05 	lds	r18, 0x05BC
    106c:	30 91 bd 05 	lds	r19, 0x05BD
    1070:	40 91 be 05 	lds	r20, 0x05BE
    1074:	50 91 bf 05 	lds	r21, 0x05BF
    1078:	c7 01       	movw	r24, r14
    107a:	b6 01       	movw	r22, r12
    107c:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    1080:	88 23       	and	r24, r24
    1082:	44 f4       	brge	.+16     	; 0x1094 <calibrate_lsm303+0x10c>
    1084:	c0 92 bc 05 	sts	0x05BC, r12
    1088:	d0 92 bd 05 	sts	0x05BD, r13
    108c:	e0 92 be 05 	sts	0x05BE, r14
    1090:	f0 92 bf 05 	sts	0x05BF, r15
			if (m.y > cal_m_max.y) cal_m_max.y = m.y;
    1094:	20 91 c8 05 	lds	r18, 0x05C8
    1098:	30 91 c9 05 	lds	r19, 0x05C9
    109c:	40 91 ca 05 	lds	r20, 0x05CA
    10a0:	50 91 cb 05 	lds	r21, 0x05CB
    10a4:	c7 01       	movw	r24, r14
    10a6:	b6 01       	movw	r22, r12
    10a8:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__gesf2>
    10ac:	18 16       	cp	r1, r24
    10ae:	44 f4       	brge	.+16     	; 0x10c0 <calibrate_lsm303+0x138>
    10b0:	c0 92 c8 05 	sts	0x05C8, r12
    10b4:	d0 92 c9 05 	sts	0x05C9, r13
    10b8:	e0 92 ca 05 	sts	0x05CA, r14
    10bc:	f0 92 cb 05 	sts	0x05CB, r15
			if (minmax==MIN)
    10c0:	d2 30       	cpi	r29, 0x02	; 2
    10c2:	61 f4       	brne	.+24     	; 0x10dc <calibrate_lsm303+0x154>
			{
				return cal_m_min.y;
    10c4:	60 91 bc 05 	lds	r22, 0x05BC
    10c8:	70 91 bd 05 	lds	r23, 0x05BD
    10cc:	80 91 be 05 	lds	r24, 0x05BE
    10d0:	90 91 bf 05 	lds	r25, 0x05BF
    10d4:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    10d8:	cb 01       	movw	r24, r22
    10da:	6a c0       	rjmp	.+212    	; 0x11b0 <calibrate_lsm303+0x228>
			}
			if (minmax==MAX)
    10dc:	d1 30       	cpi	r29, 0x01	; 1
    10de:	09 f0       	breq	.+2      	; 0x10e2 <calibrate_lsm303+0x15a>
    10e0:	62 c0       	rjmp	.+196    	; 0x11a6 <calibrate_lsm303+0x21e>
			{
				return cal_m_max.y;
    10e2:	60 91 c8 05 	lds	r22, 0x05C8
    10e6:	70 91 c9 05 	lds	r23, 0x05C9
    10ea:	80 91 ca 05 	lds	r24, 0x05CA
    10ee:	90 91 cb 05 	lds	r25, 0x05CB
    10f2:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    10f6:	cb 01       	movw	r24, r22
    10f8:	5b c0       	rjmp	.+182    	; 0x11b0 <calibrate_lsm303+0x228>
			}
		break;
		
		case Z_AXIS:
			if (m.z < cal_m_min.z) cal_m_min.z = m.z;
    10fa:	c0 90 e5 07 	lds	r12, 0x07E5
    10fe:	d0 90 e6 07 	lds	r13, 0x07E6
    1102:	e0 90 e7 07 	lds	r14, 0x07E7
    1106:	f0 90 e8 07 	lds	r15, 0x07E8
    110a:	20 91 c0 05 	lds	r18, 0x05C0
    110e:	30 91 c1 05 	lds	r19, 0x05C1
    1112:	40 91 c2 05 	lds	r20, 0x05C2
    1116:	50 91 c3 05 	lds	r21, 0x05C3
    111a:	c7 01       	movw	r24, r14
    111c:	b6 01       	movw	r22, r12
    111e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    1122:	88 23       	and	r24, r24
    1124:	44 f4       	brge	.+16     	; 0x1136 <calibrate_lsm303+0x1ae>
    1126:	c0 92 c0 05 	sts	0x05C0, r12
    112a:	d0 92 c1 05 	sts	0x05C1, r13
    112e:	e0 92 c2 05 	sts	0x05C2, r14
    1132:	f0 92 c3 05 	sts	0x05C3, r15
			if (m.z > cal_m_max.z) cal_m_max.z = m.z;
    1136:	20 91 cc 05 	lds	r18, 0x05CC
    113a:	30 91 cd 05 	lds	r19, 0x05CD
    113e:	40 91 ce 05 	lds	r20, 0x05CE
    1142:	50 91 cf 05 	lds	r21, 0x05CF
    1146:	c7 01       	movw	r24, r14
    1148:	b6 01       	movw	r22, r12
    114a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__gesf2>
    114e:	18 16       	cp	r1, r24
    1150:	44 f4       	brge	.+16     	; 0x1162 <calibrate_lsm303+0x1da>
    1152:	c0 92 cc 05 	sts	0x05CC, r12
    1156:	d0 92 cd 05 	sts	0x05CD, r13
    115a:	e0 92 ce 05 	sts	0x05CE, r14
    115e:	f0 92 cf 05 	sts	0x05CF, r15
			if (minmax==MIN)
    1162:	d2 30       	cpi	r29, 0x02	; 2
    1164:	61 f4       	brne	.+24     	; 0x117e <calibrate_lsm303+0x1f6>
			{
				return cal_m_min.z;
    1166:	60 91 c0 05 	lds	r22, 0x05C0
    116a:	70 91 c1 05 	lds	r23, 0x05C1
    116e:	80 91 c2 05 	lds	r24, 0x05C2
    1172:	90 91 c3 05 	lds	r25, 0x05C3
    1176:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    117a:	cb 01       	movw	r24, r22
    117c:	19 c0       	rjmp	.+50     	; 0x11b0 <calibrate_lsm303+0x228>
			}
			if (minmax==MAX)
    117e:	d1 30       	cpi	r29, 0x01	; 1
    1180:	a9 f4       	brne	.+42     	; 0x11ac <calibrate_lsm303+0x224>
			{
				return cal_m_max.z;
    1182:	60 91 cc 05 	lds	r22, 0x05CC
    1186:	70 91 cd 05 	lds	r23, 0x05CD
    118a:	80 91 ce 05 	lds	r24, 0x05CE
    118e:	90 91 cf 05 	lds	r25, 0x05CF
    1192:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    1196:	cb 01       	movw	r24, r22
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <calibrate_lsm303+0x228>
			}
		break;
		
		default:
			return 0;
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <calibrate_lsm303+0x228>
		break;
	}
	return 0;
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <calibrate_lsm303+0x228>
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <calibrate_lsm303+0x228>
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	ff 90       	pop	r15
    11b6:	ef 90       	pop	r14
    11b8:	df 90       	pop	r13
    11ba:	cf 90       	pop	r12
    11bc:	08 95       	ret

000011be <print_calibration_lsm303>:
	z_max = calibrate_lsm303(Z_AXIS,MAX);
	
	while (x_min>calibrate_lsm303(X_AXIS,MIN))
	{
	}*/
	uart_puts("Xmin:");
    11be:	8d ee       	ldi	r24, 0xED	; 237
    11c0:	91 e0       	ldi	r25, 0x01	; 1
    11c2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(calibrate_lsm303(X_AXIS,MIN),FALSE);
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	0e 94 c4 07 	call	0xf88	; 0xf88 <calibrate_lsm303>
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" Xmax:");
    11d4:	83 ef       	ldi	r24, 0xF3	; 243
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(calibrate_lsm303(X_AXIS,MAX),FALSE);
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 c4 07 	call	0xf88	; 0xf88 <calibrate_lsm303>
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" Ymin:");
    11ea:	8a ef       	ldi	r24, 0xFA	; 250
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(calibrate_lsm303(Y_AXIS,MIN),FALSE);
    11f2:	62 e0       	ldi	r22, 0x02	; 2
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	0e 94 c4 07 	call	0xf88	; 0xf88 <calibrate_lsm303>
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" Ymax:");
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(calibrate_lsm303(Y_AXIS,MAX),FALSE);
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	0e 94 c4 07 	call	0xf88	; 0xf88 <calibrate_lsm303>
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" Zmin:");
    1216:	88 e0       	ldi	r24, 0x08	; 8
    1218:	92 e0       	ldi	r25, 0x02	; 2
    121a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(calibrate_lsm303(Z_AXIS,MIN),FALSE);
    121e:	62 e0       	ldi	r22, 0x02	; 2
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	0e 94 c4 07 	call	0xf88	; 0xf88 <calibrate_lsm303>
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" Zmax:");
    122c:	8f e0       	ldi	r24, 0x0F	; 15
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(calibrate_lsm303(Z_AXIS,MAX),FALSE);
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	83 e0       	ldi	r24, 0x03	; 3
    1238:	0e 94 c4 07 	call	0xf88	; 0xf88 <calibrate_lsm303>
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" (Rotate device until all axis are at their min/max)\n");
    1242:	86 e1       	ldi	r24, 0x16	; 22
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    124a:	08 95       	ret

0000124c <writeAccReg>:
}

void writeAccReg(uint8_t reg, uint8_t value)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	d8 2f       	mov	r29, r24
    1252:	c6 2f       	mov	r28, r22
	i2c_start(0x32);	// ACC address
    1254:	82 e3       	ldi	r24, 0x32	; 50
    1256:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	i2c_write(reg);	
    125a:	8d 2f       	mov	r24, r29
    125c:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_write(value);
    1260:	8c 2f       	mov	r24, r28
    1262:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_stop();
    1266:	0e 94 b7 09 	call	0x136e	; 0x136e <i2c_stop>
}
    126a:	df 91       	pop	r29
    126c:	cf 91       	pop	r28
    126e:	08 95       	ret

00001270 <writeMagReg>:

void writeMagReg(uint8_t reg, uint8_t value)
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	d8 2f       	mov	r29, r24
    1276:	c6 2f       	mov	r28, r22
	i2c_start(0x3C);	// Mag address
    1278:	8c e3       	ldi	r24, 0x3C	; 60
    127a:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	i2c_write(reg);	
    127e:	8d 2f       	mov	r24, r29
    1280:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_write(value);
    1284:	8c 2f       	mov	r24, r28
    1286:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_stop();
    128a:	0e 94 b7 09 	call	0x136e	; 0x136e <i2c_stop>
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <init_lsm303>:
vector m_max = {650, 529, 591};		// calibration
vector a, m;

void init_lsm303(void)
{
	i2c_init();
    1294:	0e 94 8a 09 	call	0x1314	; 0x1314 <i2c_init>
	
	/* TEST */
	
	// 0x08 = 0b00001000
	// FS = 00 (+/- 2 g full scale); HR = 1 (high resolution enable)
	writeAccReg(CTRL_REG4_A, 0x08);
    1298:	68 e0       	ldi	r22, 0x08	; 8
    129a:	83 e2       	ldi	r24, 0x23	; 35
    129c:	0e 94 26 09 	call	0x124c	; 0x124c <writeAccReg>
	
	// lsm303dlhc sensor
	//enable accelerometer
	// 0x47 = 0b01000111
	// ODR = 0100 (50 Hz ODR); LPen = 0 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)
	writeAccReg(CTRL_REG1_A, 0x47);
    12a0:	67 e4       	ldi	r22, 0x47	; 71
    12a2:	80 e2       	ldi	r24, 0x20	; 32
    12a4:	0e 94 26 09 	call	0x124c	; 0x124c <writeAccReg>
	//enable magnetometer

	// 0x0C = 0b00001100
	// DO = 011 (7.5 Hz ODR)
	/* Enable temp sensor in LSM303 */
	writeMagReg(CRA_REG_M, 0x8C);	// Enable temp sensor, 7.5Hz
    12a8:	6c e8       	ldi	r22, 0x8C	; 140
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	0e 94 38 09 	call	0x1270	; 0x1270 <writeMagReg>
	i2c_write(0x0C); // hertz output 7.5
	i2c_stop();*/

	// 0x20 = 0b00100000
	// GN = 001 (+/- 1.3 gauss full scale)
	writeMagReg(CRB_REG_M, 0x20);
    12b0:	60 e2       	ldi	r22, 0x20	; 32
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	0e 94 38 09 	call	0x1270	; 0x1270 <writeMagReg>
	i2c_write(0x20); // continuous conversion mode
	i2c_stop();*/

	// 0x00 = 0b00000000
	// MD = 00 (continuous-conversion mode)
	writeMagReg(MR_REG_M, 0x00);
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	82 e0       	ldi	r24, 0x02	; 2
    12bc:	0e 94 38 09 	call	0x1270	; 0x1270 <writeMagReg>
    12c0:	08 95       	ret

000012c2 <get_temp>:
	i2c_write(value);
	i2c_stop();
}

int get_temp(void)
{
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
	// Enable sensor first (in init)!
	//Temperature data (8LSB/deg - 12-bit resolution).
	i2c_start(0x3C);			// Its in the Mag address
    12c6:	8c e3       	ldi	r24, 0x3C	; 60
    12c8:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>
	i2c_write(TEMP_OUT_H_M);	// Set pointer
    12cc:	81 e3       	ldi	r24, 0x31	; 49
    12ce:	0e 94 c0 09 	call	0x1380	; 0x1380 <i2c_write>
	i2c_start(0x3D);			// Start reading
    12d2:	8d e3       	ldi	r24, 0x3D	; 61
    12d4:	0e 94 90 09 	call	0x1320	; 0x1320 <i2c_start>

	uint8_t mth = i2c_readAck();
    12d8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <i2c_readAck>
    12dc:	c8 2f       	mov	r28, r24
	uint8_t mtl = i2c_readNak();
    12de:	0e 94 dd 09 	call	0x13ba	; 0x13ba <i2c_readNak>
    12e2:	d8 2f       	mov	r29, r24
	
	i2c_stop();
    12e4:	0e 94 b7 09 	call	0x136e	; 0x136e <i2c_stop>
	return (((mth << 8 | mtl)>>4)/4);
    12e8:	2d 2f       	mov	r18, r29
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	c9 01       	movw	r24, r18
    12ee:	9c 2b       	or	r25, r28
    12f0:	95 95       	asr	r25
    12f2:	87 95       	ror	r24
    12f4:	95 95       	asr	r25
    12f6:	87 95       	ror	r24
    12f8:	95 95       	asr	r25
    12fa:	87 95       	ror	r24
    12fc:	95 95       	asr	r25
    12fe:	87 95       	ror	r24
    1300:	99 23       	and	r25, r25
    1302:	0c f4       	brge	.+2      	; 0x1306 <get_temp+0x44>
    1304:	03 96       	adiw	r24, 0x03	; 3
}
    1306:	95 95       	asr	r25
    1308:	87 95       	ror	r24
    130a:	95 95       	asr	r25
    130c:	87 95       	ror	r24
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    1314:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	80 93 b8 00 	sts	0x00B8, r24
    131e:	08 95       	ret

00001320 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1320:	94 ea       	ldi	r25, 0xA4	; 164
    1322:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1326:	ec eb       	ldi	r30, 0xBC	; 188
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	90 81       	ld	r25, Z
    132c:	99 23       	and	r25, r25
    132e:	ec f7       	brge	.-6      	; 0x132a <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1330:	90 91 b9 00 	lds	r25, 0x00B9
    1334:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1336:	98 30       	cpi	r25, 0x08	; 8
    1338:	11 f0       	breq	.+4      	; 0x133e <i2c_start+0x1e>
    133a:	90 31       	cpi	r25, 0x10	; 16
    133c:	a1 f4       	brne	.+40     	; 0x1366 <i2c_start+0x46>

	// send device address
	TWDR = address;
    133e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1342:	84 e8       	ldi	r24, 0x84	; 132
    1344:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1348:	ec eb       	ldi	r30, 0xBC	; 188
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	88 23       	and	r24, r24
    1350:	ec f7       	brge	.-6      	; 0x134c <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1352:	90 91 b9 00 	lds	r25, 0x00B9
    1356:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1358:	98 31       	cpi	r25, 0x18	; 24
    135a:	39 f0       	breq	.+14     	; 0x136a <i2c_start+0x4a>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 34       	cpi	r25, 0x40	; 64
    1360:	29 f4       	brne	.+10     	; 0x136c <i2c_start+0x4c>
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    136a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    136c:	08 95       	ret

0000136e <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    136e:	84 e9       	ldi	r24, 0x94	; 148
    1370:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    1374:	ec eb       	ldi	r30, 0xBC	; 188
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	84 fd       	sbrc	r24, 4
    137c:	fd cf       	rjmp	.-6      	; 0x1378 <i2c_stop+0xa>

}/* i2c_stop */
    137e:	08 95       	ret

00001380 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1380:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1384:	84 e8       	ldi	r24, 0x84	; 132
    1386:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    138a:	ec eb       	ldi	r30, 0xBC	; 188
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	88 23       	and	r24, r24
    1392:	ec f7       	brge	.-6      	; 0x138e <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    1394:	90 91 b9 00 	lds	r25, 0x00B9
    1398:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	98 32       	cpi	r25, 0x28	; 40
    139e:	09 f4       	brne	.+2      	; 0x13a2 <i2c_write+0x22>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    13a2:	08 95       	ret

000013a4 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    13a4:	84 ec       	ldi	r24, 0xC4	; 196
    13a6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    13aa:	ec eb       	ldi	r30, 0xBC	; 188
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	88 23       	and	r24, r24
    13b2:	ec f7       	brge	.-6      	; 0x13ae <i2c_readAck+0xa>

    return TWDR;
    13b4:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    13b8:	08 95       	ret

000013ba <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    13ba:	84 e8       	ldi	r24, 0x84	; 132
    13bc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    13c0:	ec eb       	ldi	r30, 0xBC	; 188
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	88 23       	and	r24, r24
    13c8:	ec f7       	brge	.-6      	; 0x13c4 <i2c_readNak+0xa>
	
    return TWDR;
    13ca:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    13ce:	08 95       	ret

000013d0 <readCommand>:
	return 0;
}
*/

uint16_t readCommand(void)
{
    13d0:	1f 93       	push	r17
    13d2:	cf 93       	push	r28
    13d4:	df 93       	push	r29
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	6a 97       	sbiw	r28, 0x1a	; 26
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
	char cmdValue[16];
	char data[10];
	uint8_t counter = 0;
	unsigned int c;
	
	c = uart_getc();	// get new byte
    13e6:	0e 94 93 17 	call	0x2f26	; 0x2f26 <uart_getc>
    13ea:	9c 01       	movw	r18, r24
    13ec:	22 27       	eor	r18, r18
    13ee:	31 71       	andi	r19, 0x11	; 17
	
	//unsigned int c = uart_getc();
	while (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
    13f0:	23 2b       	or	r18, r19
    13f2:	e1 f4       	brne	.+56     	; 0x142c <readCommand+0x5c>
    13f4:	9c 01       	movw	r18, r24
    13f6:	22 27       	eor	r18, r18
    13f8:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
    13fa:	23 2b       	or	r18, r19
    13fc:	b9 f4       	brne	.+46     	; 0x142c <readCommand+0x5c>
uint16_t readCommand(void)
{
	char *pch;
	char cmdValue[16];
	char data[10];
	uint8_t counter = 0;
    13fe:	10 e0       	ldi	r17, 0x00	; 0
	&&	!(c & UART_FRAME_ERROR)
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
	)
	{
		data[counter] = c;
    1400:	e1 e1       	ldi	r30, 0x11	; 17
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	ec 0f       	add	r30, r28
    1406:	fd 1f       	adc	r31, r29
    1408:	e1 0f       	add	r30, r17
    140a:	f1 1d       	adc	r31, r1
    140c:	80 83       	st	Z, r24
		if (data[counter] == '\n') {
    140e:	8a 30       	cpi	r24, 0x0A	; 10
    1410:	09 f0       	breq	.+2      	; 0x1414 <readCommand+0x44>
			} else {
			counter++;
    1412:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		c = uart_getc();	// get new byte
    1414:	0e 94 93 17 	call	0x2f26	; 0x2f26 <uart_getc>
    1418:	9c 01       	movw	r18, r24
    141a:	22 27       	eor	r18, r18
    141c:	31 71       	andi	r19, 0x11	; 17
	
	c = uart_getc();	// get new byte
	
	//unsigned int c = uart_getc();
	while (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
    141e:	23 2b       	or	r18, r19
    1420:	29 f4       	brne	.+10     	; 0x142c <readCommand+0x5c>
    1422:	9c 01       	movw	r18, r24
    1424:	22 27       	eor	r18, r18
    1426:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
    1428:	23 2b       	or	r18, r19
    142a:	51 f3       	breq	.-44     	; 0x1400 <readCommand+0x30>
	for(uint8_t i=0; i<sizeof(data); i++) {
		uart_putc(data[i]);
	}
	uart_puts("-\n");*/
	
	if (data[0] == '=') {
    142c:	89 89       	ldd	r24, Y+17	; 0x11
    142e:	8d 33       	cpi	r24, 0x3D	; 61
    1430:	91 f4       	brne	.+36     	; 0x1456 <readCommand+0x86>
			// Find the position the equals sign is
			// in the string, keep a pointer to it
			pch = strchr(data, '=');
    1432:	6d e3       	ldi	r22, 0x3D	; 61
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	ce 01       	movw	r24, r28
    1438:	41 96       	adiw	r24, 0x11	; 17
    143a:	0e 94 b1 21 	call	0x4362	; 0x4362 <strchr>
			// Copy everything after that point into
			// the buffer variable
			strcpy(cmdValue, pch+1);
    143e:	bc 01       	movw	r22, r24
    1440:	6f 5f       	subi	r22, 0xFF	; 255
    1442:	7f 4f       	sbci	r23, 0xFF	; 255
    1444:	ce 01       	movw	r24, r28
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	0e 94 bc 21 	call	0x4378	; 0x4378 <strcpy>
			// Now turn this value into an integer and
			// return it to the caller.
			
			return atoi(cmdValue);
    144c:	ce 01       	movw	r24, r28
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	0e 94 ab 20 	call	0x4156	; 0x4156 <atoi>
    1454:	02 c0       	rjmp	.+4      	; 0x145a <readCommand+0x8a>
	}
	else
	{
		return 0;
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    145a:	6a 96       	adiw	r28, 0x1a	; 26
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	08 95       	ret

0000146e <print_int>:

void print_int(int c, uint8_t ln)
{
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	28 97       	sbiw	r28, 0x08	; 8
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	16 2f       	mov	r17, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1486:	4a e0       	ldi	r20, 0x0A	; 10
    1488:	be 01       	movw	r22, r28
    148a:	6f 5f       	subi	r22, 0xFF	; 255
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__itoa_ncheck>
	char buffer[8];
	itoa( c, buffer, 10);
	uart_puts(buffer);
    1492:	ce 01       	movw	r24, r28
    1494:	01 96       	adiw	r24, 0x01	; 1
    1496:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	
	if (ln)	// if add line end
    149a:	11 23       	and	r17, r17
    149c:	21 f0       	breq	.+8      	; 0x14a6 <print_int+0x38>
	{
		uart_puts("\n");
    149e:	84 eb       	ldi	r24, 0xB4	; 180
    14a0:	95 e0       	ldi	r25, 0x05	; 5
    14a2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	}
}
    14a6:	28 96       	adiw	r28, 0x08	; 8
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	08 95       	ret

000014ba <print_float>:

void print_float(double c, uint8_t ln)
{
    14ba:	ff 92       	push	r15
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	64 97       	sbiw	r28, 0x14	; 20
    14ca:	0f b6       	in	r0, 0x3f	; 63
    14cc:	f8 94       	cli
    14ce:	de bf       	out	0x3e, r29	; 62
    14d0:	0f be       	out	0x3f, r0	; 63
    14d2:	cd bf       	out	0x3d, r28	; 61
    14d4:	f4 2e       	mov	r15, r20
	char buffer[20];
	dtostrf(c, 10, 7, buffer);
    14d6:	8e 01       	movw	r16, r28
    14d8:	0f 5f       	subi	r16, 0xFF	; 255
    14da:	1f 4f       	sbci	r17, 0xFF	; 255
    14dc:	27 e0       	ldi	r18, 0x07	; 7
    14de:	4a e0       	ldi	r20, 0x0A	; 10
    14e0:	0e 94 86 20 	call	0x410c	; 0x410c <dtostrf>
	uart_puts(buffer);
    14e4:	c8 01       	movw	r24, r16
    14e6:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	
	if (ln)	// if add line end
    14ea:	ff 20       	and	r15, r15
    14ec:	21 f0       	breq	.+8      	; 0x14f6 <print_float+0x3c>
	{
		uart_puts("\n");
    14ee:	84 eb       	ldi	r24, 0xB4	; 180
    14f0:	95 e0       	ldi	r25, 0x05	; 5
    14f2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	}
}
    14f6:	64 96       	adiw	r28, 0x14	; 20
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	08 95       	ret

0000150e <print_value>:
	uart_puts(buffer);
	uart_puts("\n");
}*/

void print_value (char id, int value)
{
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	28 97       	sbiw	r28, 0x08	; 8
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	18 2f       	mov	r17, r24
    1526:	cb 01       	movw	r24, r22
    1528:	4a e0       	ldi	r20, 0x0A	; 10
    152a:	be 01       	movw	r22, r28
    152c:	6f 5f       	subi	r22, 0xFF	; 255
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	0e 94 f5 21 	call	0x43ea	; 0x43ea <__itoa_ncheck>
	char buffer[8];
	itoa(value, buffer, 10);
	uart_putc(id);
    1534:	81 2f       	mov	r24, r17
    1536:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
	uart_putc('=');
    153a:	8d e3       	ldi	r24, 0x3D	; 61
    153c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
	uart_puts(buffer);
    1540:	ce 01       	movw	r24, r28
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	uart_putc('\n');
    1548:	8a e0       	ldi	r24, 0x0A	; 10
    154a:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
}
    154e:	28 96       	adiw	r28, 0x08	; 8
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	de bf       	out	0x3e, r29	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	cd bf       	out	0x3d, r28	; 61
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	1f 91       	pop	r17
    1560:	08 95       	ret

00001562 <read_int_value>:
		}
	}	
}

unsigned long read_int_value ()
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	60 97       	sbiw	r28, 0x10	; 16
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '=');
    1576:	6d e3       	ldi	r22, 0x3D	; 61
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	84 ea       	ldi	r24, 0xA4	; 164
    157c:	96 e0       	ldi	r25, 0x06	; 6
    157e:	0e 94 b1 21 	call	0x4362	; 0x4362 <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
    1582:	bc 01       	movw	r22, r24
    1584:	6f 5f       	subi	r22, 0xFF	; 255
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	0e 94 bc 21 	call	0x4378	; 0x4378 <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
    1590:	ce 01       	movw	r24, r28
    1592:	01 96       	adiw	r24, 0x01	; 1
    1594:	0e 94 ab 20 	call	0x4156	; 0x4156 <atoi>
    1598:	bc 01       	movw	r22, r24
    159a:	88 27       	eor	r24, r24
    159c:	77 fd       	sbrc	r23, 7
    159e:	80 95       	com	r24
    15a0:	98 2f       	mov	r25, r24
}
    15a2:	60 96       	adiw	r28, 0x10	; 16
    15a4:	0f b6       	in	r0, 0x3f	; 63
    15a6:	f8 94       	cli
    15a8:	de bf       	out	0x3e, r29	; 62
    15aa:	0f be       	out	0x3f, r0	; 63
    15ac:	cd bf       	out	0x3d, r28	; 61
    15ae:	df 91       	pop	r29
    15b0:	cf 91       	pop	r28
    15b2:	08 95       	ret

000015b4 <receive_gps>:
	}
	command_ready = FALSE;
}

uint8_t receive_gps(void)
{
    15b4:	2f 92       	push	r2
    15b6:	3f 92       	push	r3
    15b8:	4f 92       	push	r4
    15ba:	5f 92       	push	r5
    15bc:	6f 92       	push	r6
    15be:	7f 92       	push	r7
    15c0:	8f 92       	push	r8
    15c2:	9f 92       	push	r9
    15c4:	af 92       	push	r10
    15c6:	bf 92       	push	r11
    15c8:	cf 92       	push	r12
    15ca:	df 92       	push	r13
    15cc:	ef 92       	push	r14
    15ce:	ff 92       	push	r15
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	c6 56       	subi	r28, 0x66	; 102
    15de:	d1 09       	sbc	r29, r1
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
	char value[50];
	char buffer[50];
	uint8_t i = 1;
	char *pch;
	
	memset(value, 0, sizeof(value));	// set command to 0
    15ea:	fe 01       	movw	r30, r28
    15ec:	31 96       	adiw	r30, 0x01	; 1
    15ee:	82 e3       	ldi	r24, 0x32	; 50
    15f0:	df 01       	movw	r26, r30
    15f2:	1d 92       	st	X+, r1
    15f4:	8a 95       	dec	r24
    15f6:	e9 f7       	brne	.-6      	; 0x15f2 <receive_gps+0x3e>
	
	for(uint8_t j=0; j<data_count-3; j++) {
    15f8:	80 91 a3 06 	lds	r24, 0x06A3
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	03 97       	sbiw	r24, 0x03	; 3
    1600:	18 16       	cp	r1, r24
    1602:	19 06       	cpc	r1, r25
    1604:	d4 f4       	brge	.+52     	; 0x163a <receive_gps+0x86>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
		value[j] = command_in[j+1];
    160c:	e1 e0       	ldi	r30, 0x01	; 1
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	ec 0f       	add	r30, r28
    1612:	fd 1f       	adc	r31, r29
    1614:	e8 0f       	add	r30, r24
    1616:	f9 1f       	adc	r31, r25
    1618:	dc 01       	movw	r26, r24
    161a:	ac 55       	subi	r26, 0x5C	; 92
    161c:	b9 4f       	sbci	r27, 0xF9	; 249
    161e:	11 96       	adiw	r26, 0x01	; 1
    1620:	8c 91       	ld	r24, X
    1622:	80 83       	st	Z, r24
	uint8_t i = 1;
	char *pch;
	
	memset(value, 0, sizeof(value));	// set command to 0
	
	for(uint8_t j=0; j<data_count-3; j++) {
    1624:	4f 5f       	subi	r20, 0xFF	; 255
    1626:	84 2f       	mov	r24, r20
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	20 91 a3 06 	lds	r18, 0x06A3
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	23 50       	subi	r18, 0x03	; 3
    1632:	31 09       	sbc	r19, r1
    1634:	82 17       	cp	r24, r18
    1636:	93 07       	cpc	r25, r19
    1638:	4c f3       	brlt	.-46     	; 0x160c <receive_gps+0x58>
		value[j] = command_in[j+1];
	}

	uart_puts("in b =<");
    163a:	8e e4       	ldi	r24, 0x4E	; 78
    163c:	93 e0       	ldi	r25, 0x03	; 3
    163e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    1642:	8e 01       	movw	r16, r28
    1644:	0f 5f       	subi	r16, 0xFF	; 255
    1646:	1f 4f       	sbci	r17, 0xFF	; 255
    1648:	7e 01       	movw	r14, r28
    164a:	b3 e3       	ldi	r27, 0x33	; 51
    164c:	eb 0e       	add	r14, r27
    164e:	f1 1c       	adc	r15, r1
	for( i=0; i<50; i++) {
		//value[i] = command_in[i+1];	// copy
		uart_putc(value[i]);
    1650:	f8 01       	movw	r30, r16
    1652:	81 91       	ld	r24, Z+
    1654:	8f 01       	movw	r16, r30
    1656:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
	for(uint8_t j=0; j<data_count-3; j++) {
		value[j] = command_in[j+1];
	}

	uart_puts("in b =<");
	for( i=0; i<50; i++) {
    165a:	0e 15       	cp	r16, r14
    165c:	1f 05       	cpc	r17, r15
    165e:	c1 f7       	brne	.-16     	; 0x1650 <receive_gps+0x9c>
		//value[i] = command_in[i+1];	// copy
		uart_putc(value[i]);
	}
	uart_puts(">\n");
    1660:	86 e5       	ldi	r24, 0x56	; 86
    1662:	93 e0       	ldi	r25, 0x03	; 3
    1664:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	
	if ((command_in[strlen(command_in)-3]) != 'e')	// Check end of string 'e'
    1668:	e4 ea       	ldi	r30, 0xA4	; 164
    166a:	f6 e0       	ldi	r31, 0x06	; 6
    166c:	01 90       	ld	r0, Z+
    166e:	00 20       	and	r0, r0
    1670:	e9 f7       	brne	.-6      	; 0x166c <receive_gps+0xb8>
    1672:	34 97       	sbiw	r30, 0x04	; 4
    1674:	80 81       	ld	r24, Z
    1676:	85 36       	cpi	r24, 0x65	; 101
    1678:	31 f0       	breq	.+12     	; 0x1686 <receive_gps+0xd2>
	{
		uart_puts("Error in format\n");
    167a:	89 e5       	ldi	r24, 0x59	; 89
    167c:	93 e0       	ldi	r25, 0x03	; 3
    167e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		return FALSE;
    1682:	80 e0       	ldi	r24, 0x00	; 0
    1684:	05 c1       	rjmp	.+522    	; 0x1890 <receive_gps+0x2dc>
	}
	
	pch = strtok (value,",");	// return pointer to next token
    1686:	69 e8       	ldi	r22, 0x89	; 137
    1688:	72 e0       	ldi	r23, 0x02	; 2
    168a:	ce 01       	movw	r24, r28
    168c:	01 96       	adiw	r24, 0x01	; 1
    168e:	0e 94 ac 21 	call	0x4358	; 0x4358 <strtok>
	lat_current_temp = atof(pch);
    1692:	0e 94 a7 20 	call	0x414e	; 0x414e <atof>
    1696:	c6 2e       	mov	r12, r22
    1698:	d7 2e       	mov	r13, r23
    169a:	e8 2e       	mov	r14, r24
    169c:	f9 2e       	mov	r15, r25
	
	pch = strtok (NULL,";");	// return pointer to next token
    169e:	6a e6       	ldi	r22, 0x6A	; 106
    16a0:	73 e0       	ldi	r23, 0x03	; 3
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 ac 21 	call	0x4358	; 0x4358 <strtok>
	lon_current_temp = atof(pch);
    16aa:	0e 94 a7 20 	call	0x414e	; 0x414e <atof>
    16ae:	86 2e       	mov	r8, r22
    16b0:	97 2e       	mov	r9, r23
    16b2:	a8 2e       	mov	r10, r24
    16b4:	b9 2e       	mov	r11, r25
	
	pch = strtok (NULL,",");	// return pointer to next token
    16b6:	69 e8       	ldi	r22, 0x89	; 137
    16b8:	72 e0       	ldi	r23, 0x02	; 2
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	0e 94 ac 21 	call	0x4358	; 0x4358 <strtok>
	lat_dest_temp = atof(pch);
    16c2:	0e 94 a7 20 	call	0x414e	; 0x414e <atof>
    16c6:	46 2e       	mov	r4, r22
    16c8:	57 2e       	mov	r5, r23
    16ca:	68 2e       	mov	r6, r24
    16cc:	79 2e       	mov	r7, r25
	
	pch = strtok (NULL,",");	// return pointer to next token
    16ce:	69 e8       	ldi	r22, 0x89	; 137
    16d0:	72 e0       	ldi	r23, 0x02	; 2
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 ac 21 	call	0x4358	; 0x4358 <strtok>
	lon_dest_temp = atof(pch);
    16da:	0e 94 a7 20 	call	0x414e	; 0x414e <atof>
    16de:	26 2e       	mov	r2, r22
    16e0:	37 2e       	mov	r3, r23
    16e2:	a6 96       	adiw	r28, 0x26	; 38
    16e4:	8f af       	std	Y+63, r24	; 0x3f
    16e6:	a6 97       	sbiw	r28, 0x26	; 38
    16e8:	a7 96       	adiw	r28, 0x27	; 39
    16ea:	9f af       	std	Y+63, r25	; 0x3f
    16ec:	a7 97       	sbiw	r28, 0x27	; 39
	
	//sprintf(lat_current_temp, "value = %f");
	if (debug_on)
    16ee:	80 91 d2 05 	lds	r24, 0x05D2
    16f2:	88 23       	and	r24, r24
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <receive_gps+0x144>
    16f6:	5a c0       	rjmp	.+180    	; 0x17ac <receive_gps+0x1f8>
	{
		sprintf(buffer, "Lat curr = %0.5f", lat_current_temp);
    16f8:	ff 92       	push	r15
    16fa:	ef 92       	push	r14
    16fc:	df 92       	push	r13
    16fe:	cf 92       	push	r12
    1700:	8c e6       	ldi	r24, 0x6C	; 108
    1702:	93 e0       	ldi	r25, 0x03	; 3
    1704:	9f 93       	push	r25
    1706:	8f 93       	push	r24
    1708:	8e 01       	movw	r16, r28
    170a:	0d 5c       	subi	r16, 0xCD	; 205
    170c:	1f 4f       	sbci	r17, 0xFF	; 255
    170e:	1f 93       	push	r17
    1710:	0f 93       	push	r16
    1712:	0e 94 54 22 	call	0x44a8	; 0x44a8 <sprintf>
		uart_puts(buffer);
    1716:	c8 01       	movw	r24, r16
    1718:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_puts("\n");
    171c:	84 eb       	ldi	r24, 0xB4	; 180
    171e:	95 e0       	ldi	r25, 0x05	; 5
    1720:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		sprintf(buffer, "Lon curr = %0.5f", lon_current_temp);
    1724:	bf 92       	push	r11
    1726:	af 92       	push	r10
    1728:	9f 92       	push	r9
    172a:	8f 92       	push	r8
    172c:	8d e7       	ldi	r24, 0x7D	; 125
    172e:	93 e0       	ldi	r25, 0x03	; 3
    1730:	9f 93       	push	r25
    1732:	8f 93       	push	r24
    1734:	1f 93       	push	r17
    1736:	0f 93       	push	r16
    1738:	0e 94 54 22 	call	0x44a8	; 0x44a8 <sprintf>
		uart_puts(buffer);
    173c:	c8 01       	movw	r24, r16
    173e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_puts("\n");
    1742:	84 eb       	ldi	r24, 0xB4	; 180
    1744:	95 e0       	ldi	r25, 0x05	; 5
    1746:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		sprintf(buffer, "Lat dest = %0.5f", lat_dest_temp);
    174a:	7f 92       	push	r7
    174c:	6f 92       	push	r6
    174e:	5f 92       	push	r5
    1750:	4f 92       	push	r4
    1752:	8e e8       	ldi	r24, 0x8E	; 142
    1754:	93 e0       	ldi	r25, 0x03	; 3
    1756:	9f 93       	push	r25
    1758:	8f 93       	push	r24
    175a:	1f 93       	push	r17
    175c:	0f 93       	push	r16
    175e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <sprintf>
		uart_puts(buffer);
    1762:	c8 01       	movw	r24, r16
    1764:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_puts("\n");
    1768:	84 eb       	ldi	r24, 0xB4	; 180
    176a:	95 e0       	ldi	r25, 0x05	; 5
    176c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		sprintf(buffer, "Lon dest =  %0.5f", lon_dest_temp);
    1770:	a7 96       	adiw	r28, 0x27	; 39
    1772:	ff ad       	ldd	r31, Y+63	; 0x3f
    1774:	a7 97       	sbiw	r28, 0x27	; 39
    1776:	ff 93       	push	r31
    1778:	a6 96       	adiw	r28, 0x26	; 38
    177a:	8f ad       	ldd	r24, Y+63	; 0x3f
    177c:	a6 97       	sbiw	r28, 0x26	; 38
    177e:	8f 93       	push	r24
    1780:	3f 92       	push	r3
    1782:	2f 92       	push	r2
    1784:	8f e9       	ldi	r24, 0x9F	; 159
    1786:	93 e0       	ldi	r25, 0x03	; 3
    1788:	9f 93       	push	r25
    178a:	8f 93       	push	r24
    178c:	1f 93       	push	r17
    178e:	0f 93       	push	r16
    1790:	0e 94 54 22 	call	0x44a8	; 0x44a8 <sprintf>
		uart_puts(buffer);
    1794:	0f b6       	in	r0, 0x3f	; 63
    1796:	f8 94       	cli
    1798:	de bf       	out	0x3e, r29	; 62
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	cd bf       	out	0x3d, r28	; 61
    179e:	c8 01       	movw	r24, r16
    17a0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_puts("\n");
    17a4:	84 eb       	ldi	r24, 0xB4	; 180
    17a6:	95 e0       	ldi	r25, 0x05	; 5
    17a8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	}
	
	/* coordinates are feasible */
	if ((lat_current_temp!=0)&&
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	a9 01       	movw	r20, r18
    17b2:	6c 2d       	mov	r22, r12
    17b4:	7d 2d       	mov	r23, r13
    17b6:	8e 2d       	mov	r24, r14
    17b8:	9f 2d       	mov	r25, r15
    17ba:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    17be:	88 23       	and	r24, r24
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <receive_gps+0x210>
    17c2:	61 c0       	rjmp	.+194    	; 0x1886 <receive_gps+0x2d2>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	a9 01       	movw	r20, r18
    17ca:	68 2d       	mov	r22, r8
    17cc:	79 2d       	mov	r23, r9
    17ce:	8a 2d       	mov	r24, r10
    17d0:	9b 2d       	mov	r25, r11
    17d2:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	09 f4       	brne	.+2      	; 0x17dc <receive_gps+0x228>
    17da:	55 c0       	rjmp	.+170    	; 0x1886 <receive_gps+0x2d2>
		(lon_current_temp!=0)&&
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	64 2d       	mov	r22, r4
    17e4:	75 2d       	mov	r23, r5
    17e6:	86 2d       	mov	r24, r6
    17e8:	97 2d       	mov	r25, r7
    17ea:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    17ee:	88 23       	and	r24, r24
    17f0:	09 f4       	brne	.+2      	; 0x17f4 <receive_gps+0x240>
    17f2:	49 c0       	rjmp	.+146    	; 0x1886 <receive_gps+0x2d2>
		(lat_dest_temp!=0)&&
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	a6 96       	adiw	r28, 0x26	; 38
    17fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    17fe:	a6 97       	sbiw	r28, 0x26	; 38
    1800:	a7 96       	adiw	r28, 0x27	; 39
    1802:	ef ad       	ldd	r30, Y+63	; 0x3f
    1804:	a7 97       	sbiw	r28, 0x27	; 39
    1806:	62 2d       	mov	r22, r2
    1808:	73 2d       	mov	r23, r3
    180a:	8f 2f       	mov	r24, r31
    180c:	9e 2f       	mov	r25, r30
    180e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    1812:	88 23       	and	r24, r24
    1814:	c1 f1       	breq	.+112    	; 0x1886 <receive_gps+0x2d2>
		(lon_dest_temp!=0))
	{
		lat_current = lat_current_temp;
    1816:	8c 2d       	mov	r24, r12
    1818:	9d 2d       	mov	r25, r13
    181a:	ae 2d       	mov	r26, r14
    181c:	bf 2d       	mov	r27, r15
    181e:	80 93 87 06 	sts	0x0687, r24
    1822:	90 93 88 06 	sts	0x0688, r25
    1826:	a0 93 89 06 	sts	0x0689, r26
    182a:	b0 93 8a 06 	sts	0x068A, r27
		lon_current = lon_current_temp;
    182e:	88 2d       	mov	r24, r8
    1830:	99 2d       	mov	r25, r9
    1832:	aa 2d       	mov	r26, r10
    1834:	bb 2d       	mov	r27, r11
    1836:	80 93 8b 06 	sts	0x068B, r24
    183a:	90 93 8c 06 	sts	0x068C, r25
    183e:	a0 93 8d 06 	sts	0x068D, r26
    1842:	b0 93 8e 06 	sts	0x068E, r27
		lat_dest = lat_dest_temp;
    1846:	84 2d       	mov	r24, r4
    1848:	95 2d       	mov	r25, r5
    184a:	a6 2d       	mov	r26, r6
    184c:	b7 2d       	mov	r27, r7
    184e:	80 93 83 06 	sts	0x0683, r24
    1852:	90 93 84 06 	sts	0x0684, r25
    1856:	a0 93 85 06 	sts	0x0685, r26
    185a:	b0 93 86 06 	sts	0x0686, r27
		lon_dest = lon_dest_temp;
    185e:	a6 96       	adiw	r28, 0x26	; 38
    1860:	3f ad       	ldd	r19, Y+63	; 0x3f
    1862:	a6 97       	sbiw	r28, 0x26	; 38
    1864:	a7 96       	adiw	r28, 0x27	; 39
    1866:	2f ad       	ldd	r18, Y+63	; 0x3f
    1868:	a7 97       	sbiw	r28, 0x27	; 39
    186a:	82 2d       	mov	r24, r2
    186c:	93 2d       	mov	r25, r3
    186e:	a3 2f       	mov	r26, r19
    1870:	b2 2f       	mov	r27, r18
    1872:	80 93 7f 06 	sts	0x067F, r24
    1876:	90 93 80 06 	sts	0x0680, r25
    187a:	a0 93 81 06 	sts	0x0681, r26
    187e:	b0 93 82 06 	sts	0x0682, r27
		return TRUE;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <receive_gps+0x2dc>
	}
	else
	{
		uart_puts("No correct coordinates\n");
    1886:	81 eb       	ldi	r24, 0xB1	; 177
    1888:	93 e0       	ldi	r25, 0x03	; 3
    188a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		return FALSE;
    188e:	80 e0       	ldi	r24, 0x00	; 0
	}
    1890:	ca 59       	subi	r28, 0x9A	; 154
    1892:	df 4f       	sbci	r29, 0xFF	; 255
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	ff 90       	pop	r15
    18a8:	ef 90       	pop	r14
    18aa:	df 90       	pop	r13
    18ac:	cf 90       	pop	r12
    18ae:	bf 90       	pop	r11
    18b0:	af 90       	pop	r10
    18b2:	9f 90       	pop	r9
    18b4:	8f 90       	pop	r8
    18b6:	7f 90       	pop	r7
    18b8:	6f 90       	pop	r6
    18ba:	5f 90       	pop	r5
    18bc:	4f 90       	pop	r4
    18be:	3f 90       	pop	r3
    18c0:	2f 90       	pop	r2
    18c2:	08 95       	ret

000018c4 <process_command>:
	// return it to the caller.
	return atoi(cmdValue);
}

void process_command()
{
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
	uint16_t val = 0;
	static unsigned int test;
	switch (command_in[0]) {
    18d8:	80 91 a4 06 	lds	r24, 0x06A4
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	fc 01       	movw	r30, r24
    18e0:	ff 97       	sbiw	r30, 0x3f	; 63
    18e2:	e7 33       	cpi	r30, 0x37	; 55
    18e4:	f1 05       	cpc	r31, r1
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <process_command+0x26>
    18e8:	8a c2       	rjmp	.+1300   	; 0x1dfe <process_command+0x53a>
    18ea:	ec 5c       	subi	r30, 0xCC	; 204
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__tablejump2__>
		case 'O':
		if (command_in[1] == '?') {
    18f2:	80 91 a5 06 	lds	r24, 0x06A5
    18f6:	8f 33       	cpi	r24, 0x3F	; 63
    18f8:	61 f4       	brne	.+24     	; 0x1912 <process_command+0x4e>
			// Do the query action for S
			uart_puts("Asked S value\n");
    18fa:	89 ec       	ldi	r24, 0xC9	; 201
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			print_value('S',test);
    1902:	60 91 d0 05 	lds	r22, 0x05D0
    1906:	70 91 d1 05 	lds	r23, 0x05D1
    190a:	83 e5       	ldi	r24, 0x53	; 83
    190c:	0e 94 87 0a 	call	0x150e	; 0x150e <print_value>
    1910:	90 c2       	rjmp	.+1312   	; 0x1e32 <process_command+0x56e>
			} else if (command_in[1] == '=') {
    1912:	8d 33       	cpi	r24, 0x3D	; 61
    1914:	09 f0       	breq	.+2      	; 0x1918 <process_command+0x54>
    1916:	8d c2       	rjmp	.+1306   	; 0x1e32 <process_command+0x56e>
			test = read_int_value();
    1918:	0e 94 b1 0a 	call	0x1562	; 0x1562 <read_int_value>
    191c:	70 93 d1 05 	sts	0x05D1, r23
    1920:	60 93 d0 05 	sts	0x05D0, r22
			uart_puts("Received S value\n");
    1924:	88 ed       	ldi	r24, 0xD8	; 216
    1926:	93 e0       	ldi	r25, 0x03	; 3
    1928:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			print_value('S',test);
    192c:	60 91 d0 05 	lds	r22, 0x05D0
    1930:	70 91 d1 05 	lds	r23, 0x05D1
    1934:	83 e5       	ldi	r24, 0x53	; 83
    1936:	0e 94 87 0a 	call	0x150e	; 0x150e <print_value>
    193a:	7b c2       	rjmp	.+1270   	; 0x1e32 <process_command+0x56e>
			// Do the set action for M
		}
		break;
		
		case 'V':	// BUZZER
		if (command_in[1] == '1') 
    193c:	80 91 a5 06 	lds	r24, 0x06A5
    1940:	81 33       	cpi	r24, 0x31	; 49
    1942:	11 f4       	brne	.+4      	; 0x1948 <process_command+0x84>
		{
			PWR_ON;
    1944:	80 e4       	ldi	r24, 0x40	; 64
    1946:	8b b9       	out	0x0b, r24	; 11
		}
		
		if (command_in[1] == '0')
    1948:	80 91 a5 06 	lds	r24, 0x06A5
    194c:	80 33       	cpi	r24, 0x30	; 48
    194e:	09 f4       	brne	.+2      	; 0x1952 <process_command+0x8e>
		{
			PWR_OFF;
    1950:	5e 98       	cbi	0x0b, 6	; 11
		}
		
		if (command_in[1] == 'S')
    1952:	80 91 a5 06 	lds	r24, 0x06A5
    1956:	83 35       	cpi	r24, 0x53	; 83
    1958:	39 f4       	brne	.+14     	; 0x1968 <process_command+0xa4>
		{
			uart_puts("BUZZER!\n");
    195a:	8a ee       	ldi	r24, 0xEA	; 234
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			buzzer(BUZZER_SHORT);	
    1962:	82 e0       	ldi	r24, 0x02	; 2
    1964:	0e 94 73 14 	call	0x28e6	; 0x28e6 <buzzer>
		}
		
		if (command_in[1] == 'L')
    1968:	80 91 a5 06 	lds	r24, 0x06A5
    196c:	8c 34       	cpi	r24, 0x4C	; 76
    196e:	09 f0       	breq	.+2      	; 0x1972 <process_command+0xae>
    1970:	60 c2       	rjmp	.+1216   	; 0x1e32 <process_command+0x56e>
		{
			uart_puts("BUZZER!\n");
    1972:	8a ee       	ldi	r24, 0xEA	; 234
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			buzzer(BUZZER_LONG);
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <buzzer>
    1980:	58 c2       	rjmp	.+1200   	; 0x1e32 <process_command+0x56e>
		}
		
		break;
		
		case 'A':	// Set led
		TEST_ON;
    1982:	88 e0       	ldi	r24, 0x08	; 8
    1984:	88 b9       	out	0x08, r24	; 8
		if (debug_on)	uart_puts("Set led\n");
    1986:	80 91 d2 05 	lds	r24, 0x05D2
    198a:	88 23       	and	r24, r24
    198c:	09 f4       	brne	.+2      	; 0x1990 <process_command+0xcc>
    198e:	51 c2       	rjmp	.+1186   	; 0x1e32 <process_command+0x56e>
    1990:	8c e4       	ldi	r24, 0x4C	; 76
    1992:	92 e0       	ldi	r25, 0x02	; 2
    1994:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    1998:	4c c2       	rjmp	.+1176   	; 0x1e32 <process_command+0x56e>
		break;
			
		case 'a':	// reset led
		TEST_OFF;
    199a:	43 98       	cbi	0x08, 3	; 8
		if (debug_on)	uart_puts("Reset led\n");
    199c:	80 91 d2 05 	lds	r24, 0x05D2
    19a0:	88 23       	and	r24, r24
    19a2:	09 f4       	brne	.+2      	; 0x19a6 <process_command+0xe2>
    19a4:	46 c2       	rjmp	.+1164   	; 0x1e32 <process_command+0x56e>
    19a6:	85 e5       	ldi	r24, 0x55	; 85
    19a8:	92 e0       	ldi	r25, 0x02	; 2
    19aa:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    19ae:	41 c2       	rjmp	.+1154   	; 0x1e32 <process_command+0x56e>
		break;
		
			
		case 'b':	/* Begin of message from phone */
		if (receive_gps())
    19b0:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <receive_gps>
    19b4:	88 23       	and	r24, r24
    19b6:	09 f4       	brne	.+2      	; 0x19ba <process_command+0xf6>
    19b8:	d2 c0       	rjmp	.+420    	; 0x1b5e <process_command+0x29a>
		{
			if (debug_on)
    19ba:	80 91 d2 05 	lds	r24, 0x05D2
    19be:	88 23       	and	r24, r24
    19c0:	09 f4       	brne	.+2      	; 0x19c4 <process_command+0x100>
    19c2:	40 c0       	rjmp	.+128    	; 0x1a44 <process_command+0x180>
			{
				uart_puts("Received correct coordinates:\n");
    19c4:	80 e6       	ldi	r24, 0x60	; 96
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				uart_puts("Location:");
    19cc:	8f e7       	ldi	r24, 0x7F	; 127
    19ce:	92 e0       	ldi	r25, 0x02	; 2
    19d0:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				print_float(lat_current,0);
    19d4:	60 91 87 06 	lds	r22, 0x0687
    19d8:	70 91 88 06 	lds	r23, 0x0688
    19dc:	80 91 89 06 	lds	r24, 0x0689
    19e0:	90 91 8a 06 	lds	r25, 0x068A
    19e4:	40 e0       	ldi	r20, 0x00	; 0
    19e6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>
				uart_puts(",");
    19ea:	89 e8       	ldi	r24, 0x89	; 137
    19ec:	92 e0       	ldi	r25, 0x02	; 2
    19ee:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				print_float(lon_current,0);
    19f2:	60 91 8b 06 	lds	r22, 0x068B
    19f6:	70 91 8c 06 	lds	r23, 0x068C
    19fa:	80 91 8d 06 	lds	r24, 0x068D
    19fe:	90 91 8e 06 	lds	r25, 0x068E
    1a02:	40 e0       	ldi	r20, 0x00	; 0
    1a04:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>
				uart_puts(" Destination: ");
    1a08:	8b e8       	ldi	r24, 0x8B	; 139
    1a0a:	92 e0       	ldi	r25, 0x02	; 2
    1a0c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				print_float(lat_dest,0);
    1a10:	60 91 83 06 	lds	r22, 0x0683
    1a14:	70 91 84 06 	lds	r23, 0x0684
    1a18:	80 91 85 06 	lds	r24, 0x0685
    1a1c:	90 91 86 06 	lds	r25, 0x0686
    1a20:	40 e0       	ldi	r20, 0x00	; 0
    1a22:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>
				uart_puts(",");
    1a26:	89 e8       	ldi	r24, 0x89	; 137
    1a28:	92 e0       	ldi	r25, 0x02	; 2
    1a2a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				print_float(lon_dest,1);
    1a2e:	60 91 7f 06 	lds	r22, 0x067F
    1a32:	70 91 80 06 	lds	r23, 0x0680
    1a36:	80 91 81 06 	lds	r24, 0x0681
    1a3a:	90 91 82 06 	lds	r25, 0x0682
    1a3e:	41 e0       	ldi	r20, 0x01	; 1
    1a40:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>
			}
				
			device.distance = calculate_distance(lat_current,lon_current,lat_dest,lon_dest);
    1a44:	a0 90 7f 06 	lds	r10, 0x067F
    1a48:	b0 90 80 06 	lds	r11, 0x0680
    1a4c:	c0 90 81 06 	lds	r12, 0x0681
    1a50:	d0 90 82 06 	lds	r13, 0x0682
    1a54:	e0 90 83 06 	lds	r14, 0x0683
    1a58:	f0 90 84 06 	lds	r15, 0x0684
    1a5c:	00 91 85 06 	lds	r16, 0x0685
    1a60:	10 91 86 06 	lds	r17, 0x0686
    1a64:	20 91 8b 06 	lds	r18, 0x068B
    1a68:	30 91 8c 06 	lds	r19, 0x068C
    1a6c:	40 91 8d 06 	lds	r20, 0x068D
    1a70:	50 91 8e 06 	lds	r21, 0x068E
    1a74:	60 91 87 06 	lds	r22, 0x0687
    1a78:	70 91 88 06 	lds	r23, 0x0688
    1a7c:	80 91 89 06 	lds	r24, 0x0689
    1a80:	90 91 8a 06 	lds	r25, 0x068A
    1a84:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <calculate_distance>
    1a88:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
    1a8c:	60 93 97 06 	sts	0x0697, r22
    1a90:	70 93 98 06 	sts	0x0698, r23
    1a94:	80 93 99 06 	sts	0x0699, r24
    1a98:	90 93 9a 06 	sts	0x069A, r25
			device.heading = calculate_bearing(lat_current,lon_current,lat_dest,lon_dest);
    1a9c:	a0 90 7f 06 	lds	r10, 0x067F
    1aa0:	b0 90 80 06 	lds	r11, 0x0680
    1aa4:	c0 90 81 06 	lds	r12, 0x0681
    1aa8:	d0 90 82 06 	lds	r13, 0x0682
    1aac:	e0 90 83 06 	lds	r14, 0x0683
    1ab0:	f0 90 84 06 	lds	r15, 0x0684
    1ab4:	00 91 85 06 	lds	r16, 0x0685
    1ab8:	10 91 86 06 	lds	r17, 0x0686
    1abc:	20 91 8b 06 	lds	r18, 0x068B
    1ac0:	30 91 8c 06 	lds	r19, 0x068C
    1ac4:	40 91 8d 06 	lds	r20, 0x068D
    1ac8:	50 91 8e 06 	lds	r21, 0x068E
    1acc:	60 91 87 06 	lds	r22, 0x0687
    1ad0:	70 91 88 06 	lds	r23, 0x0688
    1ad4:	80 91 89 06 	lds	r24, 0x0689
    1ad8:	90 91 8a 06 	lds	r25, 0x068A
    1adc:	0e 94 de 01 	call	0x3bc	; 0x3bc <calculate_bearing>
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__floatunsisf>
    1aea:	60 93 93 06 	sts	0x0693, r22
    1aee:	70 93 94 06 	sts	0x0694, r23
    1af2:	80 93 95 06 	sts	0x0695, r24
    1af6:	90 93 96 06 	sts	0x0696, r25
			if (debug_on)
    1afa:	80 91 d2 05 	lds	r24, 0x05D2
    1afe:	88 23       	and	r24, r24
    1b00:	31 f1       	breq	.+76     	; 0x1b4e <process_command+0x28a>
			{
				uart_puts("Distance = ");
    1b02:	8a e9       	ldi	r24, 0x9A	; 154
    1b04:	92 e0       	ldi	r25, 0x02	; 2
    1b06:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				print_float(device.distance,0);
    1b0a:	60 91 97 06 	lds	r22, 0x0697
    1b0e:	70 91 98 06 	lds	r23, 0x0698
    1b12:	80 91 99 06 	lds	r24, 0x0699
    1b16:	90 91 9a 06 	lds	r25, 0x069A
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>
				uart_puts("KM\n");
    1b20:	86 ea       	ldi	r24, 0xA6	; 166
    1b22:	92 e0       	ldi	r25, 0x02	; 2
    1b24:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				uart_puts("Bearing = ");
    1b28:	8a ea       	ldi	r24, 0xAA	; 170
    1b2a:	92 e0       	ldi	r25, 0x02	; 2
    1b2c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
				print_float(device.heading,0);
    1b30:	60 91 93 06 	lds	r22, 0x0693
    1b34:	70 91 94 06 	lds	r23, 0x0694
    1b38:	80 91 95 06 	lds	r24, 0x0695
    1b3c:	90 91 96 06 	lds	r25, 0x0696
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>
				uart_puts("deg\n");
    1b46:	85 eb       	ldi	r24, 0xB5	; 181
    1b48:	92 e0       	ldi	r25, 0x02	; 2
    1b4a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			}
			uart_puts("OK\n");
    1b4e:	82 e5       	ldi	r24, 0x52	; 82
    1b50:	95 e0       	ldi	r25, 0x05	; 5
    1b52:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			device.newdata=TRUE;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	80 93 a0 06 	sts	0x06A0, r24
    1b5c:	6a c1       	rjmp	.+724    	; 0x1e32 <process_command+0x56e>
		}
		else
		{
			if (debug_on)
    1b5e:	80 91 d2 05 	lds	r24, 0x05D2
    1b62:	88 23       	and	r24, r24
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <process_command+0x2a4>
    1b66:	65 c1       	rjmp	.+714    	; 0x1e32 <process_command+0x56e>
			{
				uart_puts("Received wrong coordinate format\n");
    1b68:	8a eb       	ldi	r24, 0xBA	; 186
    1b6a:	92 e0       	ldi	r25, 0x02	; 2
    1b6c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    1b70:	60 c1       	rjmp	.+704    	; 0x1e32 <process_command+0x56e>
			}
		}
		break;
			
		case 'B':	// Check battery adc value
		device.battery = read_battery();
    1b72:	0e 94 6e 04 	call	0x8dc	; 0x8dc <read_battery>
    1b76:	cb e9       	ldi	r28, 0x9B	; 155
    1b78:	d6 e0       	ldi	r29, 0x06	; 6
    1b7a:	88 83       	st	Y, r24
		setLedPercentage(device.battery,MULTIPLE,GREEN,125);	/* Show battery percentage on display */
    1b7c:	40 e0       	ldi	r20, 0x00	; 0
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 14 10 	call	0x2028	; 0x2028 <Color>
    1b86:	9b 01       	movw	r18, r22
    1b88:	ac 01       	movw	r20, r24
    1b8a:	0d e7       	ldi	r16, 0x7D	; 125
    1b8c:	61 e0       	ldi	r22, 0x01	; 1
    1b8e:	88 81       	ld	r24, Y
    1b90:	0e 94 1c 11 	call	0x2238	; 0x2238 <setLedPercentage>
    1b94:	2f e7       	ldi	r18, 0x7F	; 127
    1b96:	8f e4       	ldi	r24, 0x4F	; 79
    1b98:	92 e1       	ldi	r25, 0x12	; 18
    1b9a:	21 50       	subi	r18, 0x01	; 1
    1b9c:	80 40       	sbci	r24, 0x00	; 0
    1b9e:	90 40       	sbci	r25, 0x00	; 0
    1ba0:	e1 f7       	brne	.-8      	; 0x1b9a <process_command+0x2d6>
    1ba2:	00 c0       	rjmp	.+0      	; 0x1ba4 <process_command+0x2e0>
    1ba4:	00 00       	nop
		_delay_ms(750);		/* Wait for the user to be able to see the battery percentage */
		clearLeds();
    1ba6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <clearLeds>
		//read_battery();
		break;
    1baa:	43 c1       	rjmp	.+646    	; 0x1e32 <process_command+0x56e>
			
		case 'c':	// Give calibration values
		print_calibration_lsm303();	/* Print calibration values of this LSM303 sensor (min/max data) */
    1bac:	0e 94 df 08 	call	0x11be	; 0x11be <print_calibration_lsm303>
		break;
    1bb0:	40 c1       	rjmp	.+640    	; 0x1e32 <process_command+0x56e>
			
		case 'C':	// Check charge status
		device.chargingstate = read_charge_status();
    1bb2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <read_charge_status>
    1bb6:	80 93 9d 06 	sts	0x069D, r24
		break;
    1bba:	3b c1       	rjmp	.+630    	; 0x1e32 <process_command+0x56e>
			
		case 'D':	/* Turn on/off distance on display */
		UI.showdistance = (UI.showdistance) ? FALSE : TRUE;
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	80 91 7e 06 	lds	r24, 0x067E
    1bc2:	81 11       	cpse	r24, r1
    1bc4:	60 e0       	ldi	r22, 0x00	; 0
    1bc6:	60 93 7e 06 	sts	0x067E, r22
		eeprom_update_word(&eeprom_showdistance, UI.showdistance);	/* Save in EEPROM */
    1bca:	70 e0       	ldi	r23, 0x00	; 0
    1bcc:	86 e0       	ldi	r24, 0x06	; 6
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
		if (debug_on)
    1bd4:	80 91 d2 05 	lds	r24, 0x05D2
    1bd8:	88 23       	and	r24, r24
    1bda:	09 f4       	brne	.+2      	; 0x1bde <process_command+0x31a>
    1bdc:	2a c1       	rjmp	.+596    	; 0x1e32 <process_command+0x56e>
		{
			uart_puts_p(PSTR("Show UI distance = "));
    1bde:	8c e2       	ldi	r24, 0x2C	; 44
    1be0:	92 e0       	ldi	r25, 0x02	; 2
    1be2:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
			print_int(UI.showdistance,1);
    1be6:	80 91 7e 06 	lds	r24, 0x067E
    1bea:	61 e0       	ldi	r22, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
    1bf2:	1f c1       	rjmp	.+574    	; 0x1e32 <process_command+0x56e>
		}
		break;
			
		case '?':	// Debug msg on
		if (debug_on)
    1bf4:	80 91 d2 05 	lds	r24, 0x05D2
    1bf8:	88 23       	and	r24, r24
    1bfa:	39 f0       	breq	.+14     	; 0x1c0a <process_command+0x346>
		{
			debug_on = 0;
    1bfc:	10 92 d2 05 	sts	0x05D2, r1
			uart_puts_p(PSTR("Debug msg's off\n"));
    1c00:	8b e1       	ldi	r24, 0x1B	; 27
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
    1c08:	14 c1       	rjmp	.+552    	; 0x1e32 <process_command+0x56e>
		}
		else
		{
			debug_on = 1;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 d2 05 	sts	0x05D2, r24
			uart_puts_p(PSTR("Debug msg's on\n"));
    1c10:	8b e0       	ldi	r24, 0x0B	; 11
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
    1c18:	0c c1       	rjmp	.+536    	; 0x1e32 <process_command+0x56e>
		}
		break;
			
		case 'e':	/* direction test */
		val = readCommand();
    1c1a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <readCommand>
		if (val>=0 && val<=100)
    1c1e:	85 36       	cpi	r24, 0x65	; 101
    1c20:	91 05       	cpc	r25, r1
    1c22:	80 f4       	brcc	.+32     	; 0x1c44 <process_command+0x380>
		{
			device.distance = val;
    1c24:	bc 01       	movw	r22, r24
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__floatunsisf>
    1c2e:	60 93 97 06 	sts	0x0697, r22
    1c32:	70 93 98 06 	sts	0x0698, r23
    1c36:	80 93 99 06 	sts	0x0699, r24
    1c3a:	90 93 9a 06 	sts	0x069A, r25
			device.newdata=TRUE;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	80 93 a0 06 	sts	0x06A0, r24
		}
			
		if (debug_on)
    1c44:	80 91 d2 05 	lds	r24, 0x05D2
    1c48:	88 23       	and	r24, r24
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <process_command+0x38a>
    1c4c:	f2 c0       	rjmp	.+484    	; 0x1e32 <process_command+0x56e>
		{
			uart_puts_p(PSTR("Compass value set to"));
    1c4e:	86 ef       	ldi	r24, 0xF6	; 246
    1c50:	91 e0       	ldi	r25, 0x01	; 1
    1c52:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
			print_int(device.compass,1);
    1c56:	60 91 8f 06 	lds	r22, 0x068F
    1c5a:	70 91 90 06 	lds	r23, 0x0690
    1c5e:	80 91 91 06 	lds	r24, 0x0691
    1c62:	90 91 92 06 	lds	r25, 0x0692
    1c66:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <__fixsfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
    1c74:	de c0       	rjmp	.+444    	; 0x1e32 <process_command+0x56e>
		}
		break;
			
		case 'F':	/* Flashlight mode */
		if (debug_on)
    1c76:	80 91 d2 05 	lds	r24, 0x05D2
    1c7a:	88 23       	and	r24, r24
    1c7c:	21 f0       	breq	.+8      	; 0x1c86 <process_command+0x3c2>
		{
			uart_puts("Flashlight mode = TODO! ");
    1c7e:	8c ed       	ldi	r24, 0xDC	; 220
    1c80:	92 e0       	ldi	r25, 0x02	; 2
    1c82:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		}
		device.newdata=TRUE;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	80 93 a0 06 	sts	0x06A0, r24
		break;
    1c8c:	d2 c0       	rjmp	.+420    	; 0x1e32 <process_command+0x56e>
			
		case 's':	/* Set navigation color */
		uart_puts_p(PSTR("TODO, implement set navigation color\n"));
    1c8e:	80 ed       	ldi	r24, 0xD0	; 208
    1c90:	91 e0       	ldi	r25, 0x01	; 1
    1c92:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
		break;
    1c96:	cd c0       	rjmp	.+410    	; 0x1e32 <process_command+0x56e>
			
		case 'I':	/* Intensity of display */
		setBrightness(readCommand());
    1c98:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <readCommand>
    1c9c:	0e 94 23 10 	call	0x2046	; 0x2046 <setBrightness>
		eeprom_update_word(&eeprom_brightness, getBrightness());	/* Save in EEPROM */
    1ca0:	0e 94 27 10 	call	0x204e	; 0x204e <getBrightness>
    1ca4:	68 2f       	mov	r22, r24
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	8a e0       	ldi	r24, 0x0A	; 10
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
		device.newdata=TRUE;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	80 93 a0 06 	sts	0x06A0, r24
		if (debug_on)
    1cb6:	80 91 d2 05 	lds	r24, 0x05D2
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <process_command+0x3fc>
    1cbe:	b9 c0       	rjmp	.+370    	; 0x1e32 <process_command+0x56e>
		{
			uart_puts_p(PSTR("Brightness set to:"));
    1cc0:	8d eb       	ldi	r24, 0xBD	; 189
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
			print_int(getBrightness(),1);
    1cc8:	0e 94 27 10 	call	0x204e	; 0x204e <getBrightness>
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
    1cd4:	ae c0       	rjmp	.+348    	; 0x1e32 <process_command+0x56e>
		}
		break;
			
		case 'N':	/* Show north point on display */
		UI.shownorth = (UI.shownorth) ? FALSE : TRUE;
    1cd6:	61 e0       	ldi	r22, 0x01	; 1
    1cd8:	80 91 7d 06 	lds	r24, 0x067D
    1cdc:	81 11       	cpse	r24, r1
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	60 93 7d 06 	sts	0x067D, r22
		eeprom_update_word(&eeprom_shownorth, UI.shownorth);	/* Save in EEPROM */
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	84 e0       	ldi	r24, 0x04	; 4
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
		if (debug_on)
    1cee:	80 91 d2 05 	lds	r24, 0x05D2
    1cf2:	88 23       	and	r24, r24
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <process_command+0x434>
    1cf6:	9d c0       	rjmp	.+314    	; 0x1e32 <process_command+0x56e>
		{
			uart_puts_p(PSTR("Show UI North = "));
    1cf8:	8c ea       	ldi	r24, 0xAC	; 172
    1cfa:	91 e0       	ldi	r25, 0x01	; 1
    1cfc:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
			print_int(UI.shownorth,1);
    1d00:	80 91 7d 06 	lds	r24, 0x067D
    1d04:	61 e0       	ldi	r22, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
    1d0c:	92 c0       	rjmp	.+292    	; 0x1e32 <process_command+0x56e>
		}
		break;
			
		case 'P':	// Power off
		if (debug_on)
    1d0e:	80 91 d2 05 	lds	r24, 0x05D2
    1d12:	88 23       	and	r24, r24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <process_command+0x454>
    1d16:	8d c0       	rjmp	.+282    	; 0x1e32 <process_command+0x56e>
		{
			uart_puts_p(PSTR("Powering off..\n"));
    1d18:	8c e9       	ldi	r24, 0x9C	; 156
    1d1a:	91 e0       	ldi	r25, 0x01	; 1
    1d1c:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
			control_power(OFF);
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	0e 94 cf 03 	call	0x79e	; 0x79e <control_power>
    1d26:	85 c0       	rjmp	.+266    	; 0x1e32 <process_command+0x56e>
		}
		break;
			
		case 'r':	// Reset device to factory settings
		if (debug_on)
    1d28:	80 91 d2 05 	lds	r24, 0x05D2
    1d2c:	88 23       	and	r24, r24
    1d2e:	21 f0       	breq	.+8      	; 0x1d38 <process_command+0x474>
		{
			uart_puts_p(PSTR("Resetting Bluetooth settings!\n"));
    1d30:	8d e7       	ldi	r24, 0x7D	; 125
    1d32:	91 e0       	ldi	r25, 0x01	; 1
    1d34:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
		}
		init_bluetooth();
    1d38:	0e 94 af 04 	call	0x95e	; 0x95e <init_bluetooth>
		break;
    1d3c:	7a c0       	rjmp	.+244    	; 0x1e32 <process_command+0x56e>
			
		case 'R':	// Reset device to factory settings
		if (debug_on)
    1d3e:	80 91 d2 05 	lds	r24, 0x05D2
    1d42:	88 23       	and	r24, r24
    1d44:	21 f0       	breq	.+8      	; 0x1d4e <process_command+0x48a>
		{
			uart_puts_p(PSTR("Device reseted to factory settings!\n"));
    1d46:	88 e5       	ldi	r24, 0x58	; 88
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
		}
		reset_factory_settings();
    1d4e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <reset_factory_settings>
		break;
    1d52:	6f c0       	rjmp	.+222    	; 0x1e32 <process_command+0x56e>
			
		case 'S':	// Check switch
		device.buttonstate = read_button();
    1d54:	0e 94 d6 03 	call	0x7ac	; 0x7ac <read_button>
    1d58:	80 93 9e 06 	sts	0x069E, r24
		break;
    1d5c:	6a c0       	rjmp	.+212    	; 0x1e32 <process_command+0x56e>
			
		case 'T':	// get temp of LSM303 sensor
		uart_puts("Temperature = ");
    1d5e:	85 ef       	ldi	r24, 0xF5	; 245
    1d60:	92 e0       	ldi	r25, 0x02	; 2
    1d62:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(get_temp(),FALSE);
    1d66:	0e 94 61 09 	call	0x12c2	; 0x12c2 <get_temp>
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		uart_puts(" deg. C.\n");
    1d70:	84 e0       	ldi	r24, 0x04	; 4
    1d72:	93 e0       	ldi	r25, 0x03	; 3
    1d74:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		break;
    1d78:	5c c0       	rjmp	.+184    	; 0x1e32 <process_command+0x56e>
			
		case 'u':	/* Change UI mode */
		if (debug_on)
    1d7a:	80 91 d2 05 	lds	r24, 0x05D2
    1d7e:	88 23       	and	r24, r24
    1d80:	21 f0       	breq	.+8      	; 0x1d8a <process_command+0x4c6>
		{
			uart_puts("UI mode++");
    1d82:	8e e0       	ldi	r24, 0x0E	; 14
    1d84:	93 e0       	ldi	r25, 0x03	; 3
    1d86:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		}
		setUIModeNext();
    1d8a:	0e 94 04 11 	call	0x2208	; 0x2208 <setUIModeNext>
		eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
    1d8e:	0e 94 19 11 	call	0x2232	; 0x2232 <getUIMode>
    1d92:	68 2f       	mov	r22, r24
    1d94:	70 e0       	ldi	r23, 0x00	; 0
    1d96:	88 e0       	ldi	r24, 0x08	; 8
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
		device.newdata=TRUE;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	80 93 a0 06 	sts	0x06A0, r24
		break;
    1da4:	46 c0       	rjmp	.+140    	; 0x1e32 <process_command+0x56e>
			
		case 'U':	/* Change UI mode */
		//setUIMode();
		setUIMode(readCommand());
    1da6:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <readCommand>
    1daa:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <setUIMode>
		if (debug_on)
    1dae:	80 91 d2 05 	lds	r24, 0x05D2
    1db2:	88 23       	and	r24, r24
    1db4:	51 f0       	breq	.+20     	; 0x1dca <process_command+0x506>
		{
			uart_puts("UI mode = ");
    1db6:	88 e1       	ldi	r24, 0x18	; 24
    1db8:	93 e0       	ldi	r25, 0x03	; 3
    1dba:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			print_int(getUIMode(),1);
    1dbe:	0e 94 19 11 	call	0x2232	; 0x2232 <getUIMode>
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		}
		eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
    1dca:	0e 94 19 11 	call	0x2232	; 0x2232 <getUIMode>
    1dce:	68 2f       	mov	r22, r24
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	88 e0       	ldi	r24, 0x08	; 8
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
		device.newdata=TRUE;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	80 93 a0 06 	sts	0x06A0, r24
		break;
    1de0:	28 c0       	rjmp	.+80     	; 0x1e32 <process_command+0x56e>
			
		case 'K':	/* Change navigation color */
		if (debug_on)
    1de2:	80 91 d2 05 	lds	r24, 0x05D2
    1de6:	88 23       	and	r24, r24
    1de8:	21 f0       	breq	.+8      	; 0x1df2 <process_command+0x52e>
		{
			uart_puts("Navigation color set\n");
    1dea:	83 e2       	ldi	r24, 0x23	; 35
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			//print_int(getUIMode(),1);
		}
		setNavigationColorNext();
    1df2:	0e 94 2a 10 	call	0x2054	; 0x2054 <setNavigationColorNext>
			
		//eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
		device.newdata=TRUE;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	80 93 a0 06 	sts	0x06A0, r24
		break;
    1dfc:	1a c0       	rjmp	.+52     	; 0x1e32 <process_command+0x56e>
			
		default:
		uart_puts("No valid command:");
    1dfe:	89 e3       	ldi	r24, 0x39	; 57
    1e00:	93 e0       	ldi	r25, 0x03	; 3
    1e02:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_putc(command_in[0]);
    1e06:	c4 ea       	ldi	r28, 0xA4	; 164
    1e08:	d6 e0       	ldi	r29, 0x06	; 6
    1e0a:	88 81       	ld	r24, Y
    1e0c:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
		uart_puts(" (");
    1e10:	8b e4       	ldi	r24, 0x4B	; 75
    1e12:	93 e0       	ldi	r25, 0x03	; 3
    1e14:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(command_in[0], 0);
    1e18:	88 81       	ld	r24, Y
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		uart_puts(")\n");
    1e22:	81 ed       	ldi	r24, 0xD1	; 209
    1e24:	94 e0       	ldi	r25, 0x04	; 4
    1e26:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_puts_p(PSTR("'?' = debug messages\n"));
    1e2a:	82 e4       	ldi	r24, 0x42	; 66
    1e2c:	91 e0       	ldi	r25, 0x01	; 1
    1e2e:	0e 94 d0 17 	call	0x2fa0	; 0x2fa0 <uart_puts_p>
		break;
		
	}
	command_ready = FALSE;
    1e32:	10 92 6c 07 	sts	0x076C, r1
}
    1e36:	df 91       	pop	r29
    1e38:	cf 91       	pop	r28
    1e3a:	1f 91       	pop	r17
    1e3c:	0f 91       	pop	r16
    1e3e:	ff 90       	pop	r15
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	08 95       	ret

00001e4c <get_serial>:
	uart_puts(buffer);
	uart_putc('\n');
}

void get_serial(void)
{
    1e4c:	cf 93       	push	r28
	unsigned int c = uart_getc();
    1e4e:	0e 94 93 17 	call	0x2f26	; 0x2f26 <uart_getc>
    1e52:	9c 01       	movw	r18, r24
    1e54:	22 27       	eor	r18, r18
    1e56:	31 71       	andi	r19, 0x11	; 17
	if (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
    1e58:	23 2b       	or	r18, r19
    1e5a:	09 f0       	breq	.+2      	; 0x1e5e <get_serial+0x12>
    1e5c:	40 c0       	rjmp	.+128    	; 0x1ede <get_serial+0x92>
    1e5e:	9c 01       	movw	r18, r24
    1e60:	22 27       	eor	r18, r18
    1e62:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
    1e64:	23 2b       	or	r18, r19
    1e66:	d9 f5       	brne	.+118    	; 0x1ede <get_serial+0x92>
	)
	{
		command_in[data_count] = c;
    1e68:	e0 91 a3 06 	lds	r30, 0x06A3
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	ec 55       	subi	r30, 0x5C	; 92
    1e70:	f9 4f       	sbci	r31, 0xF9	; 249
    1e72:	80 83       	st	Z, r24
		if (command_in[data_count] == '\n')
    1e74:	e0 91 a3 06 	lds	r30, 0x06A3
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	ec 55       	subi	r30, 0x5C	; 92
    1e7c:	f9 4f       	sbci	r31, 0xF9	; 249
    1e7e:	80 81       	ld	r24, Z
    1e80:	8a 30       	cpi	r24, 0x0A	; 10
    1e82:	41 f5       	brne	.+80     	; 0x1ed4 <get_serial+0x88>
		{
			uart_puts("Received =<");
    1e84:	83 ef       	ldi	r24, 0xF3	; 243
    1e86:	93 e0       	ldi	r25, 0x03	; 3
    1e88:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			for(uint8_t i=0; i<data_count; i++) {
    1e8c:	80 91 a3 06 	lds	r24, 0x06A3
    1e90:	88 23       	and	r24, r24
    1e92:	69 f0       	breq	.+26     	; 0x1eae <get_serial+0x62>
    1e94:	c0 e0       	ldi	r28, 0x00	; 0
				uart_putc(command_in[i]);
    1e96:	ec 2f       	mov	r30, r28
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	ec 55       	subi	r30, 0x5C	; 92
    1e9c:	f9 4f       	sbci	r31, 0xF9	; 249
    1e9e:	80 81       	ld	r24, Z
    1ea0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
	{
		command_in[data_count] = c;
		if (command_in[data_count] == '\n')
		{
			uart_puts("Received =<");
			for(uint8_t i=0; i<data_count; i++) {
    1ea4:	cf 5f       	subi	r28, 0xFF	; 255
    1ea6:	80 91 a3 06 	lds	r24, 0x06A3
    1eaa:	c8 17       	cp	r28, r24
    1eac:	a0 f3       	brcs	.-24     	; 0x1e96 <get_serial+0x4a>
				uart_putc(command_in[i]);
			}
			uart_puts(">\n");
    1eae:	86 e5       	ldi	r24, 0x56	; 86
    1eb0:	93 e0       	ldi	r25, 0x03	; 3
    1eb2:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			
			command_ready = TRUE;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	80 93 6c 07 	sts	0x076C, r24
			process_command();
    1ebc:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <process_command>
			data_count = 0;	// reset
    1ec0:	10 92 a3 06 	sts	0x06A3, r1
			memset(command_in, 0, sizeof(command_in));	// set command to 0
    1ec4:	84 e6       	ldi	r24, 0x64	; 100
    1ec6:	e4 ea       	ldi	r30, 0xA4	; 164
    1ec8:	f6 e0       	ldi	r31, 0x06	; 6
    1eca:	df 01       	movw	r26, r30
    1ecc:	1d 92       	st	X+, r1
    1ece:	8a 95       	dec	r24
    1ed0:	e9 f7       	brne	.-6      	; 0x1ecc <get_serial+0x80>
    1ed2:	05 c0       	rjmp	.+10     	; 0x1ede <get_serial+0x92>
		}
		else
		{
			data_count++;
    1ed4:	80 91 a3 06 	lds	r24, 0x06A3
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	80 93 a3 06 	sts	0x06A3, r24
		}
	}	
}
    1ede:	cf 91       	pop	r28
    1ee0:	08 95       	ret

00001ee2 <clearBuffer>:
	//}
}

void clearBuffer(void)
{
	memset(uiBuffer, 0, sizeof uiBuffer);	
    1ee2:	84 e3       	ldi	r24, 0x34	; 52
    1ee4:	e2 e4       	ldi	r30, 0x42	; 66
    1ee6:	f6 e0       	ldi	r31, 0x06	; 6
    1ee8:	df 01       	movw	r26, r30
    1eea:	1d 92       	st	X+, r1
    1eec:	8a 95       	dec	r24
    1eee:	e9 f7       	brne	.-6      	; 0x1eea <clearBuffer+0x8>
    1ef0:	08 95       	ret

00001ef2 <delay>:
	writeFrame(0, wait);
}

void delay(uint16_t wait_ms)
{
	for (uint16_t i = 0; i < wait_ms; i++) {
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f0       	breq	.+26     	; 0x1f10 <delay+0x1e>
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	ef ec       	ldi	r30, 0xCF	; 207
    1efc:	f7 e0       	ldi	r31, 0x07	; 7
    1efe:	31 97       	sbiw	r30, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <delay+0xc>
    1f02:	00 c0       	rjmp	.+0      	; 0x1f04 <delay+0x12>
    1f04:	00 00       	nop
    1f06:	2f 5f       	subi	r18, 0xFF	; 255
    1f08:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0a:	28 17       	cp	r18, r24
    1f0c:	39 07       	cpc	r19, r25
    1f0e:	a9 f7       	brne	.-22     	; 0x1efa <delay+0x8>
    1f10:	08 95       	ret

00001f12 <setPixelColor>:

// Set pixel color from 'packed' 32-bit RGB color:
void setPixelColor(uint16_t n, uint32_t c) 
{
	uint16_t r,g,b;
	if(n < PIXELS+1) 
    1f12:	8d 30       	cpi	r24, 0x0D	; 13
    1f14:	91 05       	cpc	r25, r1
    1f16:	28 f5       	brcc	.+74     	; 0x1f62 <setPixelColor+0x50>
	{
		r = (uint8_t)(c >> 16),
		g = (uint8_t)(c >>  8),
		b = (uint8_t)c;
		
		if(UI.brightness) 
    1f18:	20 91 78 06 	lds	r18, 0x0678
    1f1c:	22 23       	and	r18, r18
    1f1e:	09 f1       	breq	.+66     	; 0x1f62 <setPixelColor+0x50>
		{
			led[n-1].r = (r * UI.brightness) >> 8;
    1f20:	fc 01       	movw	r30, r24
    1f22:	31 97       	sbiw	r30, 0x01	; 1
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	df 01       	movw	r26, r30
    1f28:	aa 0f       	add	r26, r26
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	ea 0f       	add	r30, r26
    1f2e:	fb 1f       	adc	r31, r27
    1f30:	e7 51       	subi	r30, 0x17	; 23
    1f32:	f8 4f       	sbci	r31, 0xF8	; 248
    1f34:	62 9f       	mul	r22, r18
    1f36:	d0 01       	movw	r26, r0
    1f38:	63 9f       	mul	r22, r19
    1f3a:	b0 0d       	add	r27, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	b1 83       	std	Z+1, r27	; 0x01
			led[n-1].g = (g * UI.brightness) >> 8;
    1f40:	52 9f       	mul	r21, r18
    1f42:	b0 01       	movw	r22, r0
    1f44:	53 9f       	mul	r21, r19
    1f46:	70 0d       	add	r23, r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	70 83       	st	Z, r23
			led[n-1].b = (b * UI.brightness) >> 8;	
    1f4c:	42 9f       	mul	r20, r18
    1f4e:	b0 01       	movw	r22, r0
    1f50:	43 9f       	mul	r20, r19
    1f52:	70 0d       	add	r23, r0
    1f54:	11 24       	eor	r1, r1
    1f56:	72 83       	std	Z+2, r23	; 0x02
			ws2812_setleds(led,n);
    1f58:	bc 01       	movw	r22, r24
    1f5a:	89 ee       	ldi	r24, 0xE9	; 233
    1f5c:	97 e0       	ldi	r25, 0x07	; 7
    1f5e:	0e 94 a2 14 	call	0x2944	; 0x2944 <ws2812_setleds>
    1f62:	08 95       	ret

00001f64 <writeFrame>:
uint8_t button_counter = 0;
uint8_t ui_counter = 0;
uint16_t timeout_timer = 0;		// timeout timer for ui

void writeFrame(uint16_t degrees, uint16_t wait_ms)	/* Write buffer to display */
{
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	8b 01       	movw	r16, r22
    1f72:	89 36       	cpi	r24, 0x69	; 105
    1f74:	21 e0       	ldi	r18, 0x01	; 1
    1f76:	92 07       	cpc	r25, r18
    1f78:	10 f0       	brcs	.+4      	; 0x1f7e <writeFrame+0x1a>
    1f7a:	88 e6       	ldi	r24, 0x68	; 104
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t buffer_nr = 1;
	uint8_t pixel_offset = 0;
	
	if (degrees>360)	{degrees=360;}					// if degrees=360
	
	if (degrees)	// if not 0
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	49 f4       	brne	.+18     	; 0x1f94 <writeFrame+0x30>
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1f82:	cc e0       	ldi	r28, 0x0C	; 12
    1f84:	d0 e0       	ldi	r29, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	ff 24       	eor	r15, r15
    1f8c:	f3 94       	inc	r15
    1f8e:	ee 24       	eor	r14, r14
    1f90:	e3 94       	inc	r14
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <writeFrame+0x5c>
	
	if (degrees>360)	{degrees=360;}					// if degrees=360
	
	if (degrees)	// if not 0
	{
		pixel_offset = (degrees/DEGREE_PER_PIXEL);	// rotation of display
    1f94:	9c 01       	movw	r18, r24
    1f96:	a9 e8       	ldi	r26, 0x89	; 137
    1f98:	b8 e8       	ldi	r27, 0x88	; 136
    1f9a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__umulhisi3>
    1f9e:	ec 01       	movw	r28, r24
    1fa0:	d2 95       	swap	r29
    1fa2:	c2 95       	swap	r28
    1fa4:	cf 70       	andi	r28, 0x0F	; 15
    1fa6:	cd 27       	eor	r28, r29
    1fa8:	df 70       	andi	r29, 0x0F	; 15
    1faa:	cd 27       	eor	r28, r29
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1fac:	fc 2e       	mov	r15, r28
    1fae:	f3 94       	inc	r15
    1fb0:	8f 2d       	mov	r24, r15
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	dd 27       	eor	r29, r29
    1fb6:	2c 96       	adiw	r28, 0x0c	; 12
    1fb8:	c8 17       	cp	r28, r24
    1fba:	d9 07       	cpc	r29, r25
    1fbc:	44 f7       	brge	.-48     	; 0x1f8e <writeFrame+0x2a>
    1fbe:	2d c0       	rjmp	.+90     	; 0x201a <writeFrame+0xb6>
			
		if (i>PIXELS)
    1fc0:	2c e0       	ldi	r18, 0x0C	; 12
    1fc2:	2f 15       	cp	r18, r15
    1fc4:	80 f4       	brcc	.+32     	; 0x1fe6 <writeFrame+0x82>
		{
			//uart_puts("to big, rescale\n");
			setPixelColor(i-PIXELS,uiBuffer[buffer_nr]);
    1fc6:	ee 2d       	mov	r30, r14
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	ee 5b       	subi	r30, 0xBE	; 190
    1fd4:	f9 4f       	sbci	r31, 0xF9	; 249
    1fd6:	40 81       	ld	r20, Z
    1fd8:	51 81       	ldd	r21, Z+1	; 0x01
    1fda:	62 81       	ldd	r22, Z+2	; 0x02
    1fdc:	73 81       	ldd	r23, Z+3	; 0x03
    1fde:	0c 97       	sbiw	r24, 0x0c	; 12
    1fe0:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <setPixelColor>
    1fe4:	10 c0       	rjmp	.+32     	; 0x2006 <writeFrame+0xa2>
		}
		else
		{
			//uart_puts("printpixel\n");
			setPixelColor(i,uiBuffer[buffer_nr]);
    1fe6:	ee 2d       	mov	r30, r14
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	ee 0f       	add	r30, r30
    1fec:	ff 1f       	adc	r31, r31
    1fee:	ee 0f       	add	r30, r30
    1ff0:	ff 1f       	adc	r31, r31
    1ff2:	ee 5b       	subi	r30, 0xBE	; 190
    1ff4:	f9 4f       	sbci	r31, 0xF9	; 249
    1ff6:	40 81       	ld	r20, Z
    1ff8:	51 81       	ldd	r21, Z+1	; 0x01
    1ffa:	62 81       	ldd	r22, Z+2	; 0x02
    1ffc:	73 81       	ldd	r23, Z+3	; 0x03
    1ffe:	8f 2d       	mov	r24, r15
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <setPixelColor>
		}
		buffer_nr++;
    2006:	e3 94       	inc	r14
		delay(wait_ms);
    2008:	c8 01       	movw	r24, r16
    200a:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <delay>
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    200e:	f3 94       	inc	r15
    2010:	8f 2d       	mov	r24, r15
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	c8 17       	cp	r28, r24
    2016:	d9 07       	cpc	r29, r25
    2018:	9c f6       	brge	.-90     	; 0x1fc0 <writeFrame+0x5c>
		//print_int(i,1);
	}

	//if (buffer_ready_flag)
	//clearBuffer();	// empty the buffer
}
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	ff 90       	pop	r15
    2024:	ef 90       	pop	r14
    2026:	08 95       	ret

00002028 <Color>:
	}
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	96 2f       	mov	r25, r22
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
    202e:	50 e0       	ldi	r21, 0x00	; 0
    2030:	60 e0       	ldi	r22, 0x00	; 0
    2032:	70 e0       	ldi	r23, 0x00	; 0
    2034:	59 2b       	or	r21, r25
    2036:	8a 01       	movw	r16, r20
    2038:	9b 01       	movw	r18, r22
    203a:	28 2b       	or	r18, r24
    203c:	c9 01       	movw	r24, r18
    203e:	b8 01       	movw	r22, r16
}
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	08 95       	ret

00002046 <setBrightness>:
		}
		brightness = newBrightness;
	}*/
	if(b>=0 && b<=255)
	{
		UI.brightness = b;
    2046:	80 93 78 06 	sts	0x0678, r24
	}
	else
	{
		return FALSE;
	}
}
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	08 95       	ret

0000204e <getBrightness>:

uint8_t getBrightness(void)
{
	return UI.brightness;
}
    204e:	80 91 78 06 	lds	r24, 0x0678
    2052:	08 95       	ret

00002054 <setNavigationColorNext>:

void setNavigationColorNext(void)
{
	static uint8_t color_counter = 0;

	switch (color_counter)
    2054:	80 91 d4 05 	lds	r24, 0x05D4
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	88 30       	cpi	r24, 0x08	; 8
    205c:	91 05       	cpc	r25, r1
    205e:	08 f0       	brcs	.+2      	; 0x2062 <setNavigationColorNext+0xe>
    2060:	ac c0       	rjmp	.+344    	; 0x21ba <setNavigationColorNext+0x166>
    2062:	fc 01       	movw	r30, r24
    2064:	e5 59       	subi	r30, 0x95	; 149
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__tablejump2__>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	af ef       	ldi	r26, 0xFF	; 255
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	80 93 79 06 	sts	0x0679, r24
    2078:	90 93 7a 06 	sts	0x067A, r25
    207c:	a0 93 7b 06 	sts	0x067B, r26
    2080:	b0 93 7c 06 	sts	0x067C, r27

	switch (color_counter)
	{
		case 0:
		setNavigationColor(RED);
		eeprom_update_dword(&eeprom_navigationcolor, RED);
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	6f ef       	ldi	r22, 0xFF	; 255
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    2094:	92 c0       	rjmp	.+292    	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	a0 e0       	ldi	r26, 0x00	; 0
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	80 93 79 06 	sts	0x0679, r24
    20a2:	90 93 7a 06 	sts	0x067A, r25
    20a6:	a0 93 7b 06 	sts	0x067B, r26
    20aa:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(RED);
		eeprom_update_dword(&eeprom_navigationcolor, RED);
		break;
		case 1:
		setNavigationColor(GREEN);
		eeprom_update_dword(&eeprom_navigationcolor, GREEN);
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	5f ef       	ldi	r21, 0xFF	; 255
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    20be:	7d c0       	rjmp	.+250    	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    20c0:	8f ef       	ldi	r24, 0xFF	; 255
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e0       	ldi	r26, 0x00	; 0
    20c6:	b0 e0       	ldi	r27, 0x00	; 0
    20c8:	80 93 79 06 	sts	0x0679, r24
    20cc:	90 93 7a 06 	sts	0x067A, r25
    20d0:	a0 93 7b 06 	sts	0x067B, r26
    20d4:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(GREEN);
		eeprom_update_dword(&eeprom_navigationcolor, GREEN);
		break;
		case 2:
		setNavigationColor(BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, BLUE);
    20d8:	4f ef       	ldi	r20, 0xFF	; 255
    20da:	50 e0       	ldi	r21, 0x00	; 0
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    20e8:	68 c0       	rjmp	.+208    	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    20ea:	8f ef       	ldi	r24, 0xFF	; 255
    20ec:	9f ef       	ldi	r25, 0xFF	; 255
    20ee:	af ef       	ldi	r26, 0xFF	; 255
    20f0:	b0 e0       	ldi	r27, 0x00	; 0
    20f2:	80 93 79 06 	sts	0x0679, r24
    20f6:	90 93 7a 06 	sts	0x067A, r25
    20fa:	a0 93 7b 06 	sts	0x067B, r26
    20fe:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, BLUE);
		break;
		case 3:
		setNavigationColor(WHITE);
		eeprom_update_dword(&eeprom_navigationcolor, WHITE);
    2102:	4f ef       	ldi	r20, 0xFF	; 255
    2104:	5f ef       	ldi	r21, 0xFF	; 255
    2106:	6f ef       	ldi	r22, 0xFF	; 255
    2108:	70 e0       	ldi	r23, 0x00	; 0
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    2112:	53 c0       	rjmp	.+166    	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	94 e6       	ldi	r25, 0x64	; 100
    2118:	af ef       	ldi	r26, 0xFF	; 255
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	80 93 79 06 	sts	0x0679, r24
    2120:	90 93 7a 06 	sts	0x067A, r25
    2124:	a0 93 7b 06 	sts	0x067B, r26
    2128:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(WHITE);
		eeprom_update_dword(&eeprom_navigationcolor, WHITE);
		break;
		case 4:
		setNavigationColor(ORANGE);
		eeprom_update_dword(&eeprom_navigationcolor, ORANGE);
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	54 e6       	ldi	r21, 0x64	; 100
    2130:	6f ef       	ldi	r22, 0xFF	; 255
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	80 e0       	ldi	r24, 0x00	; 0
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    213c:	3e c0       	rjmp	.+124    	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	9f ef       	ldi	r25, 0xFF	; 255
    2142:	a8 ec       	ldi	r26, 0xC8	; 200
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	80 93 79 06 	sts	0x0679, r24
    214a:	90 93 7a 06 	sts	0x067A, r25
    214e:	a0 93 7b 06 	sts	0x067B, r26
    2152:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(ORANGE);
		eeprom_update_dword(&eeprom_navigationcolor, ORANGE);
		break;
		case 5:
		setNavigationColor(YELLOW);
		eeprom_update_dword(&eeprom_navigationcolor, YELLOW);
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	5f ef       	ldi	r21, 0xFF	; 255
    215a:	68 ec       	ldi	r22, 0xC8	; 200
    215c:	70 e0       	ldi	r23, 0x00	; 0
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    2166:	29 c0       	rjmp	.+82     	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	94 e6       	ldi	r25, 0x64	; 100
    216c:	a0 e0       	ldi	r26, 0x00	; 0
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	80 93 79 06 	sts	0x0679, r24
    2174:	90 93 7a 06 	sts	0x067A, r25
    2178:	a0 93 7b 06 	sts	0x067B, r26
    217c:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(YELLOW);
		eeprom_update_dword(&eeprom_navigationcolor, YELLOW);
		break;
		case 6:
		setNavigationColor(LIGHT_BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, LIGHT_BLUE);
    2180:	4f ef       	ldi	r20, 0xFF	; 255
    2182:	54 e6       	ldi	r21, 0x64	; 100
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
    2190:	14 c0       	rjmp	.+40     	; 0x21ba <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2192:	8f ef       	ldi	r24, 0xFF	; 255
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a4 e6       	ldi	r26, 0x64	; 100
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	80 93 79 06 	sts	0x0679, r24
    219e:	90 93 7a 06 	sts	0x067A, r25
    21a2:	a0 93 7b 06 	sts	0x067B, r26
    21a6:	b0 93 7c 06 	sts	0x067C, r27
		setNavigationColor(LIGHT_BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, LIGHT_BLUE);
		break;
		case 7:
		setNavigationColor(VIOLET);
		eeprom_update_dword(&eeprom_navigationcolor, VIOLET);
    21aa:	4f ef       	ldi	r20, 0xFF	; 255
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	64 e6       	ldi	r22, 0x64	; 100
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
		break;
		default:
		break;
	}
	color_counter = (color_counter>=7) ? 0 : color_counter+1;
    21ba:	80 91 d4 05 	lds	r24, 0x05D4
    21be:	87 30       	cpi	r24, 0x07	; 7
    21c0:	10 f4       	brcc	.+4      	; 0x21c6 <setNavigationColorNext+0x172>
    21c2:	8f 5f       	subi	r24, 0xFF	; 255
    21c4:	01 c0       	rjmp	.+2      	; 0x21c8 <setNavigationColorNext+0x174>
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	80 93 d4 05 	sts	0x05D4, r24
    21cc:	08 95       	ret

000021ce <clearLeds>:
}

void clearLeds() {
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
	clearBuffer();	// clearBuffer and writeFrame is more neat but slower..
    21d2:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <clearBuffer>
    21d6:	c0 e0       	ldi	r28, 0x00	; 0
    21d8:	d0 e0       	ldi	r29, 0x00	; 0
	//writeFrame(0,0);
	//TODO:memset(pixels, 0, numBytes);
	for (uint8_t i = 0; i < PIXELS+1; i++) {
		setPixelColor(i, Color(0,0,0));
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	ba 01       	movw	r22, r20
    21e0:	ce 01       	movw	r24, r28
    21e2:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <setPixelColor>
    21e6:	21 96       	adiw	r28, 0x01	; 1

void clearLeds() {
	clearBuffer();	// clearBuffer and writeFrame is more neat but slower..
	//writeFrame(0,0);
	//TODO:memset(pixels, 0, numBytes);
	for (uint8_t i = 0; i < PIXELS+1; i++) {
    21e8:	cd 30       	cpi	r28, 0x0D	; 13
    21ea:	d1 05       	cpc	r29, r1
    21ec:	b1 f7       	brne	.-20     	; 0x21da <clearLeds+0xc>
		setPixelColor(i, Color(0,0,0));
	}
}
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	08 95       	ret

000021f4 <setUIMode>:

uint8_t setUIMode(uint8_t mode)
{
	if(mode>=0 && mode<=MAX_UI_MODES)
    21f4:	88 30       	cpi	r24, 0x08	; 8
    21f6:	30 f4       	brcc	.+12     	; 0x2204 <setUIMode+0x10>
	{
		UI.displaymode = mode;
    21f8:	80 93 77 06 	sts	0x0677, r24
		ui_counter = 0;			/* Clear counter for visuals */
    21fc:	10 92 d7 05 	sts	0x05D7, r1
		return TRUE;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	08 95       	ret
	}
	else
	{
		return FALSE;
    2204:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2206:	08 95       	ret

00002208 <setUIModeNext>:

void setUIModeNext(void)
{
	static uint8_t mode = 0;
	setUIMode(mode);
    2208:	80 91 d3 05 	lds	r24, 0x05D3
    220c:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <setUIMode>
	eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
    2210:	60 91 77 06 	lds	r22, 0x0677
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	88 e0       	ldi	r24, 0x08	; 8
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
	mode = (mode>=MAX_UI_MODES) ? 0 : mode+1;
    221e:	80 91 d3 05 	lds	r24, 0x05D3
    2222:	87 30       	cpi	r24, 0x07	; 7
    2224:	10 f4       	brcc	.+4      	; 0x222a <setUIModeNext+0x22>
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	01 c0       	rjmp	.+2      	; 0x222c <setUIModeNext+0x24>
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	80 93 d3 05 	sts	0x05D3, r24
    2230:	08 95       	ret

00002232 <getUIMode>:
}

uint8_t getUIMode(void)
{
	return UI.displaymode;
}
    2232:	80 91 77 06 	lds	r24, 0x0677
    2236:	08 95       	ret

00002238 <setLedPercentage>:
{
	UI.shownorth = var;
}

void setLedPercentage(uint8_t percent,  uint8_t mode, uint32_t color, uint8_t wait)
{
    2238:	0f 93       	push	r16
    223a:	85 36       	cpi	r24, 0x65	; 101
    223c:	08 f0       	brcs	.+2      	; 0x2240 <setLedPercentage+0x8>
    223e:	84 e6       	ldi	r24, 0x64	; 100
	uint8_t nr_of_leds = 0;
	if (percent>100)	{percent=100;}
		
	nr_of_leds = percent/PERCENT_PER_PIXEL;
    2240:	e8 2f       	mov	r30, r24
    2242:	e6 95       	lsr	r30
    2244:	e6 95       	lsr	r30
    2246:	e6 95       	lsr	r30
		
	if (mode==SINGLE)	// set just 1 led
    2248:	61 11       	cpse	r22, r1
    224a:	1e c0       	rjmp	.+60     	; 0x2288 <setLedPercentage+0x50>
	{
		if (percent==100)
    224c:	84 36       	cpi	r24, 0x64	; 100
    224e:	49 f4       	brne	.+18     	; 0x2262 <setLedPercentage+0x2a>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2250:	20 93 46 06 	sts	0x0646, r18
    2254:	30 93 47 06 	sts	0x0647, r19
    2258:	40 93 48 06 	sts	0x0648, r20
    225c:	50 93 49 06 	sts	0x0649, r21
    2260:	0c c0       	rjmp	.+24     	; 0x227a <setLedPercentage+0x42>
		{
			writeBuffer(1, color);	
		}
		else
		{
			writeBuffer(nr_of_leds+1, color);
    2262:	ef 5f       	subi	r30, 0xFF	; 255
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	ee 0f       	add	r30, r30
    2268:	ff 1f       	adc	r31, r31
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ee 5b       	subi	r30, 0xBE	; 190
    2270:	f9 4f       	sbci	r31, 0xF9	; 249
    2272:	20 83       	st	Z, r18
    2274:	31 83       	std	Z+1, r19	; 0x01
    2276:	42 83       	std	Z+2, r20	; 0x02
    2278:	53 83       	std	Z+3, r21	; 0x03
		}
		else
		{
			writeBuffer(nr_of_leds+1, color);
		}
		writeFrame(0, wait);
    227a:	60 2f       	mov	r22, r16
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <writeFrame>
    2286:	25 c0       	rjmp	.+74     	; 0x22d2 <setLedPercentage+0x9a>
	}
	
	if (mode==MULTIPLE)	// do a color wipe until the last led reached
    2288:	61 30       	cpi	r22, 0x01	; 1
    228a:	19 f5       	brne	.+70     	; 0x22d2 <setLedPercentage+0x9a>
	{
		if (percent==100)
    228c:	84 36       	cpi	r24, 0x64	; 100
    228e:	09 f4       	brne	.+2      	; 0x2292 <setLedPercentage+0x5a>
		{
			nr_of_leds--;
    2290:	e1 50       	subi	r30, 0x01	; 1
		}
		for (uint8_t i = 1; i < (nr_of_leds)+2; i++) {
    2292:	ae 2f       	mov	r26, r30
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	12 96       	adiw	r26, 0x02	; 2
    2298:	a2 30       	cpi	r26, 0x02	; 2
    229a:	b1 05       	cpc	r27, r1
    229c:	a4 f0       	brlt	.+40     	; 0x22c6 <setLedPercentage+0x8e>
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	71 e0       	ldi	r23, 0x01	; 1
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    22a4:	fc 01       	movw	r30, r24
    22a6:	ee 0f       	add	r30, r30
    22a8:	ff 1f       	adc	r31, r31
    22aa:	ee 0f       	add	r30, r30
    22ac:	ff 1f       	adc	r31, r31
    22ae:	ee 5b       	subi	r30, 0xBE	; 190
    22b0:	f9 4f       	sbci	r31, 0xF9	; 249
    22b2:	20 83       	st	Z, r18
    22b4:	31 83       	std	Z+1, r19	; 0x01
    22b6:	42 83       	std	Z+2, r20	; 0x02
    22b8:	53 83       	std	Z+3, r21	; 0x03
	{
		if (percent==100)
		{
			nr_of_leds--;
		}
		for (uint8_t i = 1; i < (nr_of_leds)+2; i++) {
    22ba:	7f 5f       	subi	r23, 0xFF	; 255
    22bc:	87 2f       	mov	r24, r23
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	8a 17       	cp	r24, r26
    22c2:	9b 07       	cpc	r25, r27
    22c4:	7c f3       	brlt	.-34     	; 0x22a4 <setLedPercentage+0x6c>
			writeBuffer(i, color);
		}
		writeFrame(0, wait);
    22c6:	60 2f       	mov	r22, r16
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <writeFrame>
	}
}
    22d2:	0f 91       	pop	r16
    22d4:	08 95       	ret

000022d6 <refreshDisplay>:
		writeFrame(0, wait);	// Write to display
	}
}

void refreshDisplay(uint16_t north_deg, uint16_t destination_deg, uint8_t status)
{
    22d6:	8f 92       	push	r8
    22d8:	9f 92       	push	r9
    22da:	af 92       	push	r10
    22dc:	bf 92       	push	r11
    22de:	cf 92       	push	r12
    22e0:	df 92       	push	r13
    22e2:	ef 92       	push	r14
    22e4:	ff 92       	push	r15
    22e6:	0f 93       	push	r16
    22e8:	1f 93       	push	r17
    22ea:	cf 93       	push	r28
    22ec:	df 93       	push	r29
    22ee:	8b 01       	movw	r16, r22
    22f0:	f4 2e       	mov	r15, r20
	uint16_t rotation_deg = 0;
	uint8_t x = 0;
	/* Calculate rotation */
	//rotation_deg = (north_deg + destination_deg);	/* 45 = 45 + 45*/
	//rotation_deg = (north_deg - destination_deg);	/* 330 = 10 - 20*/
	if (destination_deg>= north_deg)	// 25 - 20
    22f2:	68 17       	cp	r22, r24
    22f4:	79 07       	cpc	r23, r25
    22f6:	20 f0       	brcs	.+8      	; 0x2300 <refreshDisplay+0x2a>
	{
		rotation_deg = destination_deg-north_deg;
    22f8:	eb 01       	movw	r28, r22
    22fa:	c8 1b       	sub	r28, r24
    22fc:	d9 0b       	sbc	r29, r25
    22fe:	05 c0       	rjmp	.+10     	; 0x230a <refreshDisplay+0x34>
	}	// 10 - 20
	else
	{
		rotation_deg = (destination_deg+360)-north_deg;
    2300:	eb 01       	movw	r28, r22
    2302:	c8 1b       	sub	r28, r24
    2304:	d9 0b       	sbc	r29, r25
    2306:	c8 59       	subi	r28, 0x98	; 152
    2308:	de 4f       	sbci	r29, 0xFE	; 254
	}
	
	clearBuffer();	/* Clear buffer with colors */
    230a:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <clearBuffer>
	
	/* Fill frame buffer with data */	
	switch (status)
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	f8 16       	cp	r15, r24
    2312:	09 f1       	breq	.+66     	; 0x2356 <refreshDisplay+0x80>
    2314:	f8 16       	cp	r15, r24
    2316:	08 f4       	brcc	.+2      	; 0x231a <refreshDisplay+0x44>
    2318:	5a c0       	rjmp	.+180    	; 0x23ce <refreshDisplay+0xf8>
    231a:	82 e0       	ldi	r24, 0x02	; 2
    231c:	f8 16       	cp	r15, r24
    231e:	09 f4       	brne	.+2      	; 0x2322 <refreshDisplay+0x4c>
    2320:	61 c0       	rjmp	.+194    	; 0x23e4 <refreshDisplay+0x10e>
    2322:	83 e0       	ldi	r24, 0x03	; 3
    2324:	f8 12       	cpse	r15, r24
    2326:	be c2       	rjmp	.+1404   	; 0x28a4 <refreshDisplay+0x5ce>
	{
		case NO_CONNECTION:
			togglebit = (togglebit) ? FALSE : TRUE;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 91 d9 05 	lds	r25, 0x05D9
    232e:	91 11       	cpse	r25, r1
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	80 93 d9 05 	sts	0x05D9, r24
			if (togglebit)
    2336:	88 23       	and	r24, r24
    2338:	09 f4       	brne	.+2      	; 0x233c <refreshDisplay+0x66>
    233a:	b8 c2       	rjmp	.+1392   	; 0x28ac <refreshDisplay+0x5d6>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	af ef       	ldi	r26, 0xFF	; 255
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	80 93 46 06 	sts	0x0646, r24
    2348:	90 93 47 06 	sts	0x0647, r25
    234c:	a0 93 48 06 	sts	0x0648, r26
    2350:	b0 93 49 06 	sts	0x0649, r27
    2354:	ab c2       	rjmp	.+1366   	; 0x28ac <refreshDisplay+0x5d6>
			{writeBuffer(1,RED);		/* NO connection */}
		break;
		
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
    2356:	80 91 9e 06 	lds	r24, 0x069E
    235a:	81 30       	cpi	r24, 0x01	; 1
    235c:	a9 f5       	brne	.+106    	; 0x23c8 <refreshDisplay+0xf2>
			{
				for(uint8_t i=0; i<=button_counter; i++) {
    235e:	10 91 d8 05 	lds	r17, 0x05D8
    2362:	31 e0       	ldi	r19, 0x01	; 1
    2364:	20 e0       	ldi	r18, 0x00	; 0
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	54 e6       	ldi	r21, 0x64	; 100
    236a:	6f ef       	ldi	r22, 0xFF	; 255
    236c:	70 e0       	ldi	r23, 0x00	; 0
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e0       	ldi	r26, 0x00	; 0
    2374:	b0 e0       	ldi	r27, 0x00	; 0
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
			{
				for(uint8_t i=0; i<=button_counter; i++) {
					if (i<=6)
    2376:	27 30       	cpi	r18, 0x07	; 7
    2378:	68 f4       	brcc	.+26     	; 0x2394 <refreshDisplay+0xbe>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    237a:	e3 2f       	mov	r30, r19
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	ee 0f       	add	r30, r30
    2380:	ff 1f       	adc	r31, r31
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 5b       	subi	r30, 0xBE	; 190
    2388:	f9 4f       	sbci	r31, 0xF9	; 249
    238a:	80 83       	st	Z, r24
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	a2 83       	std	Z+2, r26	; 0x02
    2390:	b3 83       	std	Z+3, r27	; 0x03
    2392:	0c c0       	rjmp	.+24     	; 0x23ac <refreshDisplay+0xd6>
    2394:	e3 2f       	mov	r30, r19
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	ee 0f       	add	r30, r30
    239a:	ff 1f       	adc	r31, r31
    239c:	ee 0f       	add	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	ee 5b       	subi	r30, 0xBE	; 190
    23a2:	f9 4f       	sbci	r31, 0xF9	; 249
    23a4:	40 83       	st	Z, r20
    23a6:	51 83       	std	Z+1, r21	; 0x01
    23a8:	62 83       	std	Z+2, r22	; 0x02
    23aa:	73 83       	std	Z+3, r23	; 0x03
		
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
			{
				for(uint8_t i=0; i<=button_counter; i++) {
    23ac:	2f 5f       	subi	r18, 0xFF	; 255
    23ae:	3f 5f       	subi	r19, 0xFF	; 255
    23b0:	12 17       	cp	r17, r18
    23b2:	08 f7       	brcc	.-62     	; 0x2376 <refreshDisplay+0xa0>
					else
					{
						writeBuffer(i+1,ORANGE);		/*  */
					}
				}
				button_counter++;
    23b4:	1f 5f       	subi	r17, 0xFF	; 255
    23b6:	10 93 d8 05 	sts	0x05D8, r17
					
				if (button_counter>12)	/* Counter full, reset */
    23ba:	1d 30       	cpi	r17, 0x0D	; 13
    23bc:	28 f0       	brcs	.+10     	; 0x23c8 <refreshDisplay+0xf2>
				{
					device.buttonaction = LONG_PRESS;
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	80 93 9f 06 	sts	0x069F, r24
					//uart_puts("Long press action\n");
					//device.status = device.previousstatus;		/* Go to earlier state */
					button_counter=0;
    23c4:	10 92 d8 05 	sts	0x05D8, r1
				}
			}	
			ui_counter = 0;
    23c8:	10 92 d7 05 	sts	0x05D7, r1
		break;
    23cc:	6f c2       	rjmp	.+1246   	; 0x28ac <refreshDisplay+0x5d6>
		
		case BUTTON_NOT_PRESSED:	/* Button released */
			{
				if (button_counter<=6)
    23ce:	80 91 d8 05 	lds	r24, 0x05D8
    23d2:	87 30       	cpi	r24, 0x07	; 7
    23d4:	08 f0       	brcs	.+2      	; 0x23d8 <refreshDisplay+0x102>
    23d6:	72 c2       	rjmp	.+1252   	; 0x28bc <refreshDisplay+0x5e6>
				{
					device.buttonaction = SHORT_PRESS;	/* short press action */
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	80 93 9f 06 	sts	0x069F, r24
					device.buttonaction = MIDDLE_PRESS;	/* Middle press action */
					//uart_puts("Middle press action\n");
				}
				//device.status = device.previousstatus;	/* Go to earlier state */
				//device.status = NAVIGATING;
				button_counter = 0;							/* Released button */
    23de:	10 92 d8 05 	sts	0x05D8, r1
			}
		break;
    23e2:	64 c2       	rjmp	.+1224   	; 0x28ac <refreshDisplay+0x5d6>
		
		case NAVIGATING:
			switch (UI.displaymode)
    23e4:	40 91 77 06 	lds	r20, 0x0677
    23e8:	50 e0       	ldi	r21, 0x00	; 0
    23ea:	48 30       	cpi	r20, 0x08	; 8
    23ec:	51 05       	cpc	r21, r1
    23ee:	08 f0       	brcs	.+2      	; 0x23f2 <refreshDisplay+0x11c>
    23f0:	4c c2       	rjmp	.+1176   	; 0x288a <refreshDisplay+0x5b4>
    23f2:	fa 01       	movw	r30, r20
    23f4:	ed 58       	subi	r30, 0x8D	; 141
    23f6:	ff 4f       	sbci	r31, 0xFF	; 255
    23f8:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__tablejump2__>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    23fc:	80 91 79 06 	lds	r24, 0x0679
    2400:	90 91 7a 06 	lds	r25, 0x067A
    2404:	a0 91 7b 06 	lds	r26, 0x067B
    2408:	b0 91 7c 06 	lds	r27, 0x067C
    240c:	80 93 46 06 	sts	0x0646, r24
    2410:	90 93 47 06 	sts	0x0647, r25
    2414:	a0 93 48 06 	sts	0x0648, r26
    2418:	b0 93 49 06 	sts	0x0649, r27
    241c:	3a c2       	rjmp	.+1140   	; 0x2892 <refreshDisplay+0x5bc>
    241e:	80 91 79 06 	lds	r24, 0x0679
    2422:	90 91 7a 06 	lds	r25, 0x067A
    2426:	a0 91 7b 06 	lds	r26, 0x067B
    242a:	b0 91 7c 06 	lds	r27, 0x067C
    242e:	80 93 46 06 	sts	0x0646, r24
    2432:	90 93 47 06 	sts	0x0647, r25
    2436:	a0 93 48 06 	sts	0x0648, r26
    243a:	b0 93 49 06 	sts	0x0649, r27
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	94 e6       	ldi	r25, 0x64	; 100
    2442:	af ef       	ldi	r26, 0xFF	; 255
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	80 93 4a 06 	sts	0x064A, r24
    244a:	90 93 4b 06 	sts	0x064B, r25
    244e:	a0 93 4c 06 	sts	0x064C, r26
    2452:	b0 93 4d 06 	sts	0x064D, r27
    2456:	80 93 72 06 	sts	0x0672, r24
    245a:	90 93 73 06 	sts	0x0673, r25
    245e:	a0 93 74 06 	sts	0x0674, r26
    2462:	b0 93 75 06 	sts	0x0675, r27
    2466:	15 c2       	rjmp	.+1066   	; 0x2892 <refreshDisplay+0x5bc>
    2468:	80 91 79 06 	lds	r24, 0x0679
    246c:	90 91 7a 06 	lds	r25, 0x067A
    2470:	a0 91 7b 06 	lds	r26, 0x067B
    2474:	b0 91 7c 06 	lds	r27, 0x067C
    2478:	80 93 46 06 	sts	0x0646, r24
    247c:	90 93 47 06 	sts	0x0647, r25
    2480:	a0 93 48 06 	sts	0x0648, r26
    2484:	b0 93 49 06 	sts	0x0649, r27
					writeBuffer(12,ORANGE);		/*  */
				break;
				
				case EXTEND_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					x = ((destination_deg+(DEGREE_PER_PIXEL/2))/DEGREE_PER_PIXEL);	// Make use of rounding numbers
    2488:	98 01       	movw	r18, r16
    248a:	21 5f       	subi	r18, 0xF1	; 241
    248c:	3f 4f       	sbci	r19, 0xFF	; 255
    248e:	a9 e8       	ldi	r26, 0x89	; 137
    2490:	b8 e8       	ldi	r27, 0x88	; 136
    2492:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__umulhisi3>
    2496:	92 95       	swap	r25
    2498:	82 95       	swap	r24
    249a:	8f 70       	andi	r24, 0x0F	; 15
    249c:	89 27       	eor	r24, r25
    249e:	9f 70       	andi	r25, 0x0F	; 15
    24a0:	89 27       	eor	r24, r25
					if (x%2)	// Higher led (even)
    24a2:	80 ff       	sbrs	r24, 0
    24a4:	0d c0       	rjmp	.+26     	; 0x24c0 <refreshDisplay+0x1ea>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	94 e6       	ldi	r25, 0x64	; 100
    24aa:	af ef       	ldi	r26, 0xFF	; 255
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	80 93 72 06 	sts	0x0672, r24
    24b2:	90 93 73 06 	sts	0x0673, r25
    24b6:	a0 93 74 06 	sts	0x0674, r26
    24ba:	b0 93 75 06 	sts	0x0675, r27
    24be:	e9 c1       	rjmp	.+978    	; 0x2892 <refreshDisplay+0x5bc>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	94 e6       	ldi	r25, 0x64	; 100
    24c4:	af ef       	ldi	r26, 0xFF	; 255
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	80 93 4a 06 	sts	0x064A, r24
    24cc:	90 93 4b 06 	sts	0x064B, r25
    24d0:	a0 93 4c 06 	sts	0x064C, r26
    24d4:	b0 93 4d 06 	sts	0x064D, r27
    24d8:	dc c1       	rjmp	.+952    	; 0x2892 <refreshDisplay+0x5bc>
						writeBuffer(2,ORANGE);		/*  */
					}
				break;
				
				case ARROW:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    24da:	80 91 79 06 	lds	r24, 0x0679
    24de:	90 91 7a 06 	lds	r25, 0x067A
    24e2:	a0 91 7b 06 	lds	r26, 0x067B
    24e6:	b0 91 7c 06 	lds	r27, 0x067C
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    24ea:	80 93 46 06 	sts	0x0646, r24
    24ee:	90 93 47 06 	sts	0x0647, r25
    24f2:	a0 93 48 06 	sts	0x0648, r26
    24f6:	b0 93 49 06 	sts	0x0649, r27
    24fa:	80 93 56 06 	sts	0x0656, r24
    24fe:	90 93 57 06 	sts	0x0657, r25
    2502:	a0 93 58 06 	sts	0x0658, r26
    2506:	b0 93 59 06 	sts	0x0659, r27
    250a:	80 93 5a 06 	sts	0x065A, r24
    250e:	90 93 5b 06 	sts	0x065B, r25
    2512:	a0 93 5c 06 	sts	0x065C, r26
    2516:	b0 93 5d 06 	sts	0x065D, r27
    251a:	80 93 5e 06 	sts	0x065E, r24
    251e:	90 93 5f 06 	sts	0x065F, r25
    2522:	a0 93 60 06 	sts	0x0660, r26
    2526:	b0 93 61 06 	sts	0x0661, r27
    252a:	80 93 62 06 	sts	0x0662, r24
    252e:	90 93 63 06 	sts	0x0663, r25
    2532:	a0 93 64 06 	sts	0x0664, r26
    2536:	b0 93 65 06 	sts	0x0665, r27
    253a:	80 93 66 06 	sts	0x0666, r24
    253e:	90 93 67 06 	sts	0x0667, r25
    2542:	a0 93 68 06 	sts	0x0668, r26
    2546:	b0 93 69 06 	sts	0x0669, r27
    254a:	a3 c1       	rjmp	.+838    	; 0x2892 <refreshDisplay+0x5bc>
					writeBuffer(8,UI.navigationcolor);		/*  */
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case ARROW_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    254c:	c0 90 79 06 	lds	r12, 0x0679
    2550:	d0 90 7a 06 	lds	r13, 0x067A
    2554:	e0 90 7b 06 	lds	r14, 0x067B
    2558:	f0 90 7c 06 	lds	r15, 0x067C
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    255c:	c0 92 46 06 	sts	0x0646, r12
    2560:	d0 92 47 06 	sts	0x0647, r13
    2564:	e0 92 48 06 	sts	0x0648, r14
    2568:	f0 92 49 06 	sts	0x0649, r15
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case ARROW_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					x = ((destination_deg+(DEGREE_PER_PIXEL/2))/DEGREE_PER_PIXEL);	// Make use of rounding numbers
    256c:	98 01       	movw	r18, r16
    256e:	21 5f       	subi	r18, 0xF1	; 241
    2570:	3f 4f       	sbci	r19, 0xFF	; 255
    2572:	a9 e8       	ldi	r26, 0x89	; 137
    2574:	b8 e8       	ldi	r27, 0x88	; 136
    2576:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__umulhisi3>
    257a:	92 95       	swap	r25
    257c:	82 95       	swap	r24
    257e:	8f 70       	andi	r24, 0x0F	; 15
    2580:	89 27       	eor	r24, r25
    2582:	9f 70       	andi	r25, 0x0F	; 15
    2584:	89 27       	eor	r24, r25
					if (x%2)	// Higher led (even)
    2586:	80 ff       	sbrs	r24, 0
    2588:	0d c0       	rjmp	.+26     	; 0x25a4 <refreshDisplay+0x2ce>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	94 e6       	ldi	r25, 0x64	; 100
    258e:	af ef       	ldi	r26, 0xFF	; 255
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	80 93 72 06 	sts	0x0672, r24
    2596:	90 93 73 06 	sts	0x0673, r25
    259a:	a0 93 74 06 	sts	0x0674, r26
    259e:	b0 93 75 06 	sts	0x0675, r27
    25a2:	0c c0       	rjmp	.+24     	; 0x25bc <refreshDisplay+0x2e6>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	94 e6       	ldi	r25, 0x64	; 100
    25a8:	af ef       	ldi	r26, 0xFF	; 255
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	80 93 4a 06 	sts	0x064A, r24
    25b0:	90 93 4b 06 	sts	0x064B, r25
    25b4:	a0 93 4c 06 	sts	0x064C, r26
    25b8:	b0 93 4d 06 	sts	0x064D, r27
    25bc:	c0 92 56 06 	sts	0x0656, r12
    25c0:	d0 92 57 06 	sts	0x0657, r13
    25c4:	e0 92 58 06 	sts	0x0658, r14
    25c8:	f0 92 59 06 	sts	0x0659, r15
    25cc:	c0 92 5a 06 	sts	0x065A, r12
    25d0:	d0 92 5b 06 	sts	0x065B, r13
    25d4:	e0 92 5c 06 	sts	0x065C, r14
    25d8:	f0 92 5d 06 	sts	0x065D, r15
    25dc:	c0 92 5e 06 	sts	0x065E, r12
    25e0:	d0 92 5f 06 	sts	0x065F, r13
    25e4:	e0 92 60 06 	sts	0x0660, r14
    25e8:	f0 92 61 06 	sts	0x0661, r15
    25ec:	c0 92 62 06 	sts	0x0662, r12
    25f0:	d0 92 63 06 	sts	0x0663, r13
    25f4:	e0 92 64 06 	sts	0x0664, r14
    25f8:	f0 92 65 06 	sts	0x0665, r15
    25fc:	c0 92 66 06 	sts	0x0666, r12
    2600:	d0 92 67 06 	sts	0x0667, r13
    2604:	e0 92 68 06 	sts	0x0668, r14
    2608:	f0 92 69 06 	sts	0x0669, r15
    260c:	42 c1       	rjmp	.+644    	; 0x2892 <refreshDisplay+0x5bc>
					writeBuffer(8,UI.navigationcolor);		/*  */
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case BARR:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    260e:	c0 90 79 06 	lds	r12, 0x0679
    2612:	d0 90 7a 06 	lds	r13, 0x067A
    2616:	e0 90 7b 06 	lds	r14, 0x067B
    261a:	f0 90 7c 06 	lds	r15, 0x067C
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    261e:	c0 92 46 06 	sts	0x0646, r12
    2622:	d0 92 47 06 	sts	0x0647, r13
    2626:	e0 92 48 06 	sts	0x0648, r14
    262a:	f0 92 49 06 	sts	0x0649, r15
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case BARR:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					if (device.distance>=1)
    262e:	80 90 97 06 	lds	r8, 0x0697
    2632:	90 90 98 06 	lds	r9, 0x0698
    2636:	a0 90 99 06 	lds	r10, 0x0699
    263a:	b0 90 9a 06 	lds	r11, 0x069A
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	c5 01       	movw	r24, r10
    2648:	b4 01       	movw	r22, r8
    264a:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__gesf2>
    264e:	88 23       	and	r24, r24
    2650:	84 f0       	brlt	.+32     	; 0x2672 <refreshDisplay+0x39c>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2652:	c0 92 4a 06 	sts	0x064A, r12
    2656:	d0 92 4b 06 	sts	0x064B, r13
    265a:	e0 92 4c 06 	sts	0x064C, r14
    265e:	f0 92 4d 06 	sts	0x064D, r15
    2662:	c0 92 72 06 	sts	0x0672, r12
    2666:	d0 92 73 06 	sts	0x0673, r13
    266a:	e0 92 74 06 	sts	0x0674, r14
    266e:	f0 92 75 06 	sts	0x0675, r15
					if (device.distance>=1)
					{
						writeBuffer(2,UI.navigationcolor);		/*  */
						writeBuffer(12,UI.navigationcolor);		/*  */
					}
					if(device.distance>=2.5)
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	50 e4       	ldi	r21, 0x40	; 64
    267a:	c5 01       	movw	r24, r10
    267c:	b4 01       	movw	r22, r8
    267e:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__gesf2>
    2682:	88 23       	and	r24, r24
    2684:	84 f0       	brlt	.+32     	; 0x26a6 <refreshDisplay+0x3d0>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2686:	c0 92 4e 06 	sts	0x064E, r12
    268a:	d0 92 4f 06 	sts	0x064F, r13
    268e:	e0 92 50 06 	sts	0x0650, r14
    2692:	f0 92 51 06 	sts	0x0651, r15
    2696:	c0 92 6e 06 	sts	0x066E, r12
    269a:	d0 92 6f 06 	sts	0x066F, r13
    269e:	e0 92 70 06 	sts	0x0670, r14
    26a2:	f0 92 71 06 	sts	0x0671, r15
					if(device.distance>=2.5)
					{
						writeBuffer(3,UI.navigationcolor);		/*  */
						writeBuffer(11,UI.navigationcolor);		/*  */
					}
					if(device.distance>=5)
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 ea       	ldi	r20, 0xA0	; 160
    26ac:	50 e4       	ldi	r21, 0x40	; 64
    26ae:	c5 01       	movw	r24, r10
    26b0:	b4 01       	movw	r22, r8
    26b2:	0e 94 7a 1f 	call	0x3ef4	; 0x3ef4 <__gesf2>
    26b6:	88 23       	and	r24, r24
    26b8:	0c f4       	brge	.+2      	; 0x26bc <refreshDisplay+0x3e6>
    26ba:	eb c0       	rjmp	.+470    	; 0x2892 <refreshDisplay+0x5bc>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    26bc:	c0 92 52 06 	sts	0x0652, r12
    26c0:	d0 92 53 06 	sts	0x0653, r13
    26c4:	e0 92 54 06 	sts	0x0654, r14
    26c8:	f0 92 55 06 	sts	0x0655, r15
    26cc:	c0 92 6a 06 	sts	0x066A, r12
    26d0:	d0 92 6b 06 	sts	0x066B, r13
    26d4:	e0 92 6c 06 	sts	0x066C, r14
    26d8:	f0 92 6d 06 	sts	0x066D, r15
    26dc:	da c0       	rjmp	.+436    	; 0x2892 <refreshDisplay+0x5bc>
					}
				break;
				
				/* UI modes which depends on animations/cycles */
				case ANIMATION_1:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    26de:	80 91 79 06 	lds	r24, 0x0679
    26e2:	90 91 7a 06 	lds	r25, 0x067A
    26e6:	a0 91 7b 06 	lds	r26, 0x067B
    26ea:	b0 91 7c 06 	lds	r27, 0x067C
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    26ee:	80 93 46 06 	sts	0x0646, r24
    26f2:	90 93 47 06 	sts	0x0647, r25
    26f6:	a0 93 48 06 	sts	0x0648, r26
    26fa:	b0 93 49 06 	sts	0x0649, r27
				break;
				
				/* UI modes which depends on animations/cycles */
				case ANIMATION_1:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					switch(ui_counter)
    26fe:	20 91 d7 05 	lds	r18, 0x05D7
    2702:	21 30       	cpi	r18, 0x01	; 1
    2704:	a9 f0       	breq	.+42     	; 0x2730 <refreshDisplay+0x45a>
    2706:	18 f0       	brcs	.+6      	; 0x270e <refreshDisplay+0x438>
    2708:	22 30       	cpi	r18, 0x02	; 2
    270a:	19 f1       	breq	.+70     	; 0x2752 <refreshDisplay+0x47c>
    270c:	34 c0       	rjmp	.+104    	; 0x2776 <refreshDisplay+0x4a0>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    270e:	80 93 52 06 	sts	0x0652, r24
    2712:	90 93 53 06 	sts	0x0653, r25
    2716:	a0 93 54 06 	sts	0x0654, r26
    271a:	b0 93 55 06 	sts	0x0655, r27
    271e:	80 93 6a 06 	sts	0x066A, r24
    2722:	90 93 6b 06 	sts	0x066B, r25
    2726:	a0 93 6c 06 	sts	0x066C, r26
    272a:	b0 93 6d 06 	sts	0x066D, r27
    272e:	ca c0       	rjmp	.+404    	; 0x28c4 <refreshDisplay+0x5ee>
    2730:	80 93 4e 06 	sts	0x064E, r24
    2734:	90 93 4f 06 	sts	0x064F, r25
    2738:	a0 93 50 06 	sts	0x0650, r26
    273c:	b0 93 51 06 	sts	0x0651, r27
    2740:	80 93 6e 06 	sts	0x066E, r24
    2744:	90 93 6f 06 	sts	0x066F, r25
    2748:	a0 93 70 06 	sts	0x0670, r26
    274c:	b0 93 71 06 	sts	0x0671, r27
    2750:	b9 c0       	rjmp	.+370    	; 0x28c4 <refreshDisplay+0x5ee>
    2752:	80 93 4a 06 	sts	0x064A, r24
    2756:	90 93 4b 06 	sts	0x064B, r25
    275a:	a0 93 4c 06 	sts	0x064C, r26
    275e:	b0 93 4d 06 	sts	0x064D, r27
    2762:	80 93 72 06 	sts	0x0672, r24
    2766:	90 93 73 06 	sts	0x0673, r25
    276a:	a0 93 74 06 	sts	0x0674, r26
    276e:	b0 93 75 06 	sts	0x0675, r27
						
						default:
						break;
					}
					ui_counter++;
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	04 c0       	rjmp	.+8      	; 0x277e <refreshDisplay+0x4a8>
						break;
						
						default:
						break;
					}
					ui_counter++;
    2776:	2f 5f       	subi	r18, 0xFF	; 255
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
    2778:	23 30       	cpi	r18, 0x03	; 3
    277a:	08 f0       	brcs	.+2      	; 0x277e <refreshDisplay+0x4a8>
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	20 93 d7 05 	sts	0x05D7, r18
				break;
    2782:	87 c0       	rjmp	.+270    	; 0x2892 <refreshDisplay+0x5bc>
				
				case ANIMATION_2:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    2784:	80 91 79 06 	lds	r24, 0x0679
    2788:	90 91 7a 06 	lds	r25, 0x067A
    278c:	a0 91 7b 06 	lds	r26, 0x067B
    2790:	b0 91 7c 06 	lds	r27, 0x067C
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2794:	80 93 46 06 	sts	0x0646, r24
    2798:	90 93 47 06 	sts	0x0647, r25
    279c:	a0 93 48 06 	sts	0x0648, r26
    27a0:	b0 93 49 06 	sts	0x0649, r27
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
				break;
				
				case ANIMATION_2:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					switch(ui_counter)
    27a4:	20 91 d7 05 	lds	r18, 0x05D7
    27a8:	21 30       	cpi	r18, 0x01	; 1
    27aa:	b1 f1       	breq	.+108    	; 0x2818 <refreshDisplay+0x542>
    27ac:	20 f0       	brcs	.+8      	; 0x27b6 <refreshDisplay+0x4e0>
    27ae:	22 30       	cpi	r18, 0x02	; 2
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <refreshDisplay+0x4de>
    27b2:	53 c0       	rjmp	.+166    	; 0x285a <refreshDisplay+0x584>
    27b4:	63 c0       	rjmp	.+198    	; 0x287c <refreshDisplay+0x5a6>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    27b6:	80 93 4a 06 	sts	0x064A, r24
    27ba:	90 93 4b 06 	sts	0x064B, r25
    27be:	a0 93 4c 06 	sts	0x064C, r26
    27c2:	b0 93 4d 06 	sts	0x064D, r27
    27c6:	80 93 4e 06 	sts	0x064E, r24
    27ca:	90 93 4f 06 	sts	0x064F, r25
    27ce:	a0 93 50 06 	sts	0x0650, r26
    27d2:	b0 93 51 06 	sts	0x0651, r27
    27d6:	80 93 52 06 	sts	0x0652, r24
    27da:	90 93 53 06 	sts	0x0653, r25
    27de:	a0 93 54 06 	sts	0x0654, r26
    27e2:	b0 93 55 06 	sts	0x0655, r27
    27e6:	80 93 6a 06 	sts	0x066A, r24
    27ea:	90 93 6b 06 	sts	0x066B, r25
    27ee:	a0 93 6c 06 	sts	0x066C, r26
    27f2:	b0 93 6d 06 	sts	0x066D, r27
    27f6:	80 93 6e 06 	sts	0x066E, r24
    27fa:	90 93 6f 06 	sts	0x066F, r25
    27fe:	a0 93 70 06 	sts	0x0670, r26
    2802:	b0 93 71 06 	sts	0x0671, r27
    2806:	80 93 72 06 	sts	0x0672, r24
    280a:	90 93 73 06 	sts	0x0673, r25
    280e:	a0 93 74 06 	sts	0x0674, r26
    2812:	b0 93 75 06 	sts	0x0675, r27
    2816:	58 c0       	rjmp	.+176    	; 0x28c8 <refreshDisplay+0x5f2>
    2818:	80 93 4a 06 	sts	0x064A, r24
    281c:	90 93 4b 06 	sts	0x064B, r25
    2820:	a0 93 4c 06 	sts	0x064C, r26
    2824:	b0 93 4d 06 	sts	0x064D, r27
    2828:	80 93 4e 06 	sts	0x064E, r24
    282c:	90 93 4f 06 	sts	0x064F, r25
    2830:	a0 93 50 06 	sts	0x0650, r26
    2834:	b0 93 51 06 	sts	0x0651, r27
    2838:	80 93 6e 06 	sts	0x066E, r24
    283c:	90 93 6f 06 	sts	0x066F, r25
    2840:	a0 93 70 06 	sts	0x0670, r26
    2844:	b0 93 71 06 	sts	0x0671, r27
    2848:	80 93 72 06 	sts	0x0672, r24
    284c:	90 93 73 06 	sts	0x0673, r25
    2850:	a0 93 74 06 	sts	0x0674, r26
    2854:	b0 93 75 06 	sts	0x0675, r27
    2858:	37 c0       	rjmp	.+110    	; 0x28c8 <refreshDisplay+0x5f2>
    285a:	80 93 4a 06 	sts	0x064A, r24
    285e:	90 93 4b 06 	sts	0x064B, r25
    2862:	a0 93 4c 06 	sts	0x064C, r26
    2866:	b0 93 4d 06 	sts	0x064D, r27
    286a:	80 93 72 06 	sts	0x0672, r24
    286e:	90 93 73 06 	sts	0x0673, r25
    2872:	a0 93 74 06 	sts	0x0674, r26
    2876:	b0 93 75 06 	sts	0x0675, r27
    287a:	26 c0       	rjmp	.+76     	; 0x28c8 <refreshDisplay+0x5f2>
						break;
						
						default:
						break;
					}
					ui_counter++;
    287c:	2f 5f       	subi	r18, 0xFF	; 255
					ui_counter = (ui_counter>=4) ? 0 : ui_counter;
    287e:	24 30       	cpi	r18, 0x04	; 4
    2880:	08 f0       	brcs	.+2      	; 0x2884 <refreshDisplay+0x5ae>
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	20 93 d7 05 	sts	0x05D7, r18
				break;
    2888:	04 c0       	rjmp	.+8      	; 0x2892 <refreshDisplay+0x5bc>
				
				default:
					uart_puts("default error in UI case!\n");
    288a:	8b e1       	ldi	r24, 0x1B	; 27
    288c:	94 e0       	ldi	r25, 0x04	; 4
    288e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
			if (UI.shownorth)		/* Add north to display */
			{
				//????writeBuffer(1-(rotation_deg/DEGREE_PER_PIXEL), BLUE, TRUE);
			}
			
			if (UI.showdistance)	/* Add distance (KM's) to display */
    2892:	80 91 7e 06 	lds	r24, 0x067E
    2896:	88 23       	and	r24, r24
    2898:	49 f0       	breq	.+18     	; 0x28ac <refreshDisplay+0x5d6>
			{
				/*for (uint8_t i = 2; i < (device.distance/PERCENT_PER_PIXEL)+1; i++) {
					writeBuffer(i, VIOLET, TRUE);
				}*/
				uart_puts("TODO SHOW UI DISTANCE\n");	
    289a:	86 e3       	ldi	r24, 0x36	; 54
    289c:	94 e0       	ldi	r25, 0x04	; 4
    289e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    28a2:	04 c0       	rjmp	.+8      	; 0x28ac <refreshDisplay+0x5d6>
			}
		break;
		
		default:
		uart_puts("UNKNOWN status!\n");
    28a4:	8d e4       	ldi	r24, 0x4D	; 77
    28a6:	94 e0       	ldi	r25, 0x04	; 4
    28a8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		uart_puts(" calc rotation = ");
		print_int(rotation_deg,1);*/
		// 45 = 0 + 45
		// 165 = 120 + 45
		// 400 (wanted = ) = 355 + 45
		writeFrame(rotation_deg, 0);	/* Write buffer to display */
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	70 e0       	ldi	r23, 0x00	; 0
    28b0:	ce 01       	movw	r24, r28
    28b2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <writeFrame>
		UI.refresh = FALSE;
    28b6:	10 92 76 06 	sts	0x0676, r1
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <refreshDisplay+0x5f6>
					device.buttonaction = SHORT_PRESS;	/* short press action */
					//uart_puts("Short press action\n");
				}
				if (button_counter>6)
				{
					device.buttonaction = MIDDLE_PRESS;	/* Middle press action */
    28bc:	82 e0       	ldi	r24, 0x02	; 2
    28be:	80 93 9f 06 	sts	0x069F, r24
    28c2:	8d cd       	rjmp	.-1254   	; 0x23de <refreshDisplay+0x108>
						break;
						
						default:
						break;
					}
					ui_counter++;
    28c4:	2f 5f       	subi	r18, 0xFF	; 255
    28c6:	5b cf       	rjmp	.-330    	; 0x277e <refreshDisplay+0x4a8>
						break;
						
						default:
						break;
					}
					ui_counter++;
    28c8:	2f 5f       	subi	r18, 0xFF	; 255
    28ca:	dc cf       	rjmp	.-72     	; 0x2884 <refreshDisplay+0x5ae>
		// 45 = 0 + 45
		// 165 = 120 + 45
		// 400 (wanted = ) = 355 + 45
		writeFrame(rotation_deg, 0);	/* Write buffer to display */
		UI.refresh = FALSE;
}
    28cc:	df 91       	pop	r29
    28ce:	cf 91       	pop	r28
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	ff 90       	pop	r15
    28d6:	ef 90       	pop	r14
    28d8:	df 90       	pop	r13
    28da:	cf 90       	pop	r12
    28dc:	bf 90       	pop	r11
    28de:	af 90       	pop	r10
    28e0:	9f 90       	pop	r9
    28e2:	8f 90       	pop	r8
    28e4:	08 95       	ret

000028e6 <buzzer>:

void buzzer(uint8_t status)
{
    28e6:	cf 93       	push	r28
    28e8:	df 93       	push	r29
	uint8_t i;
	
	switch (status)
    28ea:	81 30       	cpi	r24, 0x01	; 1
    28ec:	31 f0       	breq	.+12     	; 0x28fa <buzzer+0x14>
    28ee:	38 f0       	brcs	.+14     	; 0x28fe <buzzer+0x18>
    28f0:	82 30       	cpi	r24, 0x02	; 2
    28f2:	41 f0       	breq	.+16     	; 0x2904 <buzzer+0x1e>
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	a9 f0       	breq	.+42     	; 0x2922 <buzzer+0x3c>
    28f8:	22 c0       	rjmp	.+68     	; 0x293e <buzzer+0x58>
	{
		case BUZZER_ON:
			PWR_OFF;
    28fa:	5e 98       	cbi	0x0b, 6	; 11
		break;
    28fc:	20 c0       	rjmp	.+64     	; 0x293e <buzzer+0x58>
		
		case BUZZER_OFF:
			PWR_ON;
    28fe:	80 e4       	ldi	r24, 0x40	; 64
    2900:	8b b9       	out	0x0b, r24	; 11
		break;
    2902:	1d c0       	rjmp	.+58     	; 0x293e <buzzer+0x58>

void buzzer(uint8_t status)
{
	uint8_t i;
	
	switch (status)
    2904:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		
		case BUZZER_SHORT:
			for(i=0; i<3; i++)
			{
				PWR_ON;
    2906:	d0 e4       	ldi	r29, 0x40	; 64
    2908:	db b9       	out	0x0b, r29	; 11
				delay(250);
    290a:	8a ef       	ldi	r24, 0xFA	; 250
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <delay>
				PWR_OFF;
    2912:	5e 98       	cbi	0x0b, 6	; 11
				delay(250);
    2914:	8a ef       	ldi	r24, 0xFA	; 250
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <delay>
    291c:	c1 50       	subi	r28, 0x01	; 1
		case BUZZER_OFF:
			PWR_ON;
		break;
		
		case BUZZER_SHORT:
			for(i=0; i<3; i++)
    291e:	a1 f7       	brne	.-24     	; 0x2908 <buzzer+0x22>
    2920:	0e c0       	rjmp	.+28     	; 0x293e <buzzer+0x58>

void buzzer(uint8_t status)
{
	uint8_t i;
	
	switch (status)
    2922:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		
		case BUZZER_LONG:
		for(i=0; i<3; i++)
			{
				PWR_ON;
    2924:	d0 e4       	ldi	r29, 0x40	; 64
    2926:	db b9       	out	0x0b, r29	; 11
				delay(750);
    2928:	8e ee       	ldi	r24, 0xEE	; 238
    292a:	92 e0       	ldi	r25, 0x02	; 2
    292c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <delay>
				PWR_OFF;
    2930:	5e 98       	cbi	0x0b, 6	; 11
				delay(500);
    2932:	84 ef       	ldi	r24, 0xF4	; 244
    2934:	91 e0       	ldi	r25, 0x01	; 1
    2936:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <delay>
    293a:	c1 50       	subi	r28, 0x01	; 1
				delay(250);
			}
		break;
		
		case BUZZER_LONG:
		for(i=0; i<3; i++)
    293c:	a1 f7       	brne	.-24     	; 0x2926 <buzzer+0x40>
		break;
		
		default:
		break;
	}
}
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    2944:	9b 01       	movw	r18, r22
    2946:	22 0f       	add	r18, r18
    2948:	33 1f       	adc	r19, r19
    294a:	62 0f       	add	r22, r18
    294c:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    294e:	20 9a       	sbi	0x04, 0	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
    2950:	35 b1       	in	r19, 0x05	; 5
    2952:	3e 7f       	andi	r19, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
    2954:	45 b1       	in	r20, 0x05	; 5
    2956:	41 60       	ori	r20, 0x01	; 1
  
  sreg_prev=SREG;
    2958:	af b7       	in	r26, 0x3f	; 63
  cli();  
    295a:	f8 94       	cli

  while (datlen--) {
    295c:	61 15       	cp	r22, r1
    295e:	71 05       	cpc	r23, r1
    2960:	89 f0       	breq	.+34     	; 0x2984 <loop56+0x18>
    2962:	fc 01       	movw	r30, r24
    2964:	86 0f       	add	r24, r22
    2966:	97 1f       	adc	r25, r23
    curbyte=*data++;
    2968:	21 91       	ld	r18, Z+
    
    asm volatile(
    296a:	58 e0       	ldi	r21, 0x08	; 8

0000296c <loop56>:
    296c:	45 b9       	out	0x05, r20	; 5
    296e:	27 ff       	sbrs	r18, 7
    2970:	35 b9       	out	0x05, r19	; 5
    2972:	22 0f       	add	r18, r18
    2974:	00 00       	nop
    2976:	00 c0       	rjmp	.+0      	; 0x2978 <loop56+0xc>
    2978:	35 b9       	out	0x05, r19	; 5
    297a:	5a 95       	dec	r21
    297c:	b9 f7       	brne	.-18     	; 0x296c <loop56>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    297e:	e8 17       	cp	r30, r24
    2980:	f9 07       	cpc	r31, r25
    2982:	91 f7       	brne	.-28     	; 0x2968 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    2984:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2986:	85 e8       	ldi	r24, 0x85	; 133
    2988:	8a 95       	dec	r24
    298a:	f1 f7       	brne	.-4      	; 0x2988 <loop56+0x1c>
    298c:	00 00       	nop
    298e:	08 95       	ret

00002990 <__vector_14>:
double mx = 0;
double my = 0;
double mz = 0;*/

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
    2990:	1f 92       	push	r1
    2992:	0f 92       	push	r0
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	0f 92       	push	r0
    2998:	11 24       	eor	r1, r1
    299a:	8f 93       	push	r24
	volatile static uint8_t refresh_counter;
	refresh_counter++;
    299c:	80 91 dc 05 	lds	r24, 0x05DC
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	80 93 dc 05 	sts	0x05DC, r24
	if (refresh_counter>=(DISPLAY_REFRESH_MS/INTERRUPT_DISPLAY_MS))
    29a6:	80 91 dc 05 	lds	r24, 0x05DC
    29aa:	83 30       	cpi	r24, 0x03	; 3
    29ac:	28 f0       	brcs	.+10     	; 0x29b8 <__vector_14+0x28>
	{
		UI.refresh = TRUE;
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	80 93 76 06 	sts	0x0676, r24
		refresh_counter = 0;
    29b4:	10 92 dc 05 	sts	0x05DC, r1
		//TEST_TOGGLE;
	}
}
    29b8:	8f 91       	pop	r24
    29ba:	0f 90       	pop	r0
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	0f 90       	pop	r0
    29c0:	1f 90       	pop	r1
    29c2:	18 95       	reti

000029c4 <init_io>:
	//DDRC &= ~(1 << PORTC4) | (1 << PORTC5);
	//PORTC = (1 << PORTC4) | (1 << PORTC5); // enable pull-ups on SDA and SCL, respectively
	
	//PWR_ON_INIT;				// Init power on pin
	
	SW_PIN_DDR &= ~(1<<SW_PIN);	// Buttons/switches as input
    29c4:	57 98       	cbi	0x0a, 7	; 10
	SW_PIN_PORT |= (1<<SW_PIN);	// With pullups on
    29c6:	5f 9a       	sbi	0x0b, 7	; 11
	
	CHARGE_ST_DDR &= ~(1<<CHARGE_ST_PIN);	// Charge status pin as input
    29c8:	3a 98       	cbi	0x07, 2	; 7
	
	DDRC |= (1<<TEST_PIN);	// Init test pin as output
    29ca:	3b 9a       	sbi	0x07, 3	; 7
	DDRB |= (1<<0);	// PB0 AS OUTPUT
    29cc:	20 9a       	sbi	0x04, 0	; 4
	BATT_PWR_INIT;	// Leds as output
    29ce:	39 9a       	sbi	0x07, 1	; 7
	BATT_PWR_OFF;	// Leds off
    29d0:	82 e0       	ldi	r24, 0x02	; 2
    29d2:	88 b9       	out	0x08, r24	; 8
    29d4:	08 95       	ret

000029d6 <init_int>:
void init_int(void)
{
	//OCRn =  [ (clock_speed / Prescaler_value) * Desired_time_in_Seconds ] - 1
	
	//print_int((((F_CPU/1024)*(DISPLAY_REFRESH_MS/1000))-1),TRUE);
	TCCR0A |= (1 << WGM01);		// Set the Timer Mode to CTC
    29d6:	84 b5       	in	r24, 0x24	; 36
    29d8:	82 60       	ori	r24, 0x02	; 2
    29da:	84 bd       	out	0x24, r24	; 36
	//OCR0A = 125;				// Set the value that you want to count to 16ms
	OCR0A = (((((F_CPU/1024)*INTERRUPT_DISPLAY_MS)/1000))-1);
    29dc:	88 ef       	ldi	r24, 0xF8	; 248
    29de:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);			//Set the ISR COMPA vect
    29e0:	ee e6       	ldi	r30, 0x6E	; 110
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	82 60       	ori	r24, 0x02	; 2
    29e8:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS00)|(1<<CS02);	// set prescaler to 1024 and start the timer
    29ea:	85 b5       	in	r24, 0x25	; 37
    29ec:	85 60       	ori	r24, 0x05	; 5
    29ee:	85 bd       	out	0x25, r24	; 37
	sei();								//enable global interrupts
    29f0:	78 94       	sei
    29f2:	08 95       	ret

000029f4 <init_adc>:
}

void init_adc(void)
{
	ADMUX |= (1<<REFS0);						/* Select Vref=AVcc */
    29f4:	ec e7       	ldi	r30, 0x7C	; 124
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	80 64       	ori	r24, 0x40	; 64
    29fc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	/* set prescaller to 128  */
    29fe:	ea e7       	ldi	r30, 0x7A	; 122
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	87 60       	ori	r24, 0x07	; 7
    2a06:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN);						/* Enable ADC */
    2a08:	80 81       	ld	r24, Z
    2a0a:	80 68       	ori	r24, 0x80	; 128
    2a0c:	80 83       	st	Z, r24
    2a0e:	08 95       	ret

00002a10 <read_adc>:
	* the binary representations of the numbers of the pins so we can
	* just 'OR' the pin's number with ADMUX to select that pin.
	* We first zero the four bits by setting ADMUX equal to its higher
	* four bits. */
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (adcx & 0x0F);
    2a10:	ec e7       	ldi	r30, 0x7C	; 124
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	90 81       	ld	r25, Z
    2a16:	8f 70       	andi	r24, 0x0F	; 15
    2a18:	90 7f       	andi	r25, 0xF0	; 240
    2a1a:	98 2b       	or	r25, r24
    2a1c:	90 83       	st	Z, r25
	
	/* This starts the conversion. */
	//single conversion mode
	ADCSRA |= (1<<ADSC);
    2a1e:	ea e7       	ldi	r30, 0x7A	; 122
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	80 64       	ori	r24, 0x40	; 64
    2a26:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while( ADCSRA & (1<<ADSC) );
    2a28:	80 81       	ld	r24, Z
    2a2a:	86 fd       	sbrc	r24, 6
    2a2c:	fd cf       	rjmp	.-6      	; 0x2a28 <read_adc+0x18>
	
	/* Finally, we return the converted value to the calling function. */
	return ADC;
    2a2e:	80 91 78 00 	lds	r24, 0x0078
    2a32:	90 91 79 00 	lds	r25, 0x0079
}
    2a36:	08 95       	ret

00002a38 <do_button_action>:
	uart_puts(" Y = "); print_float(my, 0);
	uart_puts(" Z = "); print_float(mz, 1);
}*/

void do_button_action(void)
{
    2a38:	cf 92       	push	r12
    2a3a:	df 92       	push	r13
    2a3c:	ef 92       	push	r14
    2a3e:	ff 92       	push	r15
    2a40:	0f 93       	push	r16
	switch (device.buttonaction)
    2a42:	80 91 9f 06 	lds	r24, 0x069F
    2a46:	82 30       	cpi	r24, 0x02	; 2
    2a48:	b1 f0       	breq	.+44     	; 0x2a76 <do_button_action+0x3e>
    2a4a:	83 30       	cpi	r24, 0x03	; 3
    2a4c:	21 f1       	breq	.+72     	; 0x2a96 <do_button_action+0x5e>
    2a4e:	81 30       	cpi	r24, 0x01	; 1
    2a50:	09 f0       	breq	.+2      	; 0x2a54 <do_button_action+0x1c>
    2a52:	56 c0       	rjmp	.+172    	; 0x2b00 <do_button_action+0xc8>
	{
		case SHORT_PRESS:	// Minus
			if (UI.displaymode>0)
    2a54:	80 91 77 06 	lds	r24, 0x0677
    2a58:	88 23       	and	r24, r24
    2a5a:	19 f0       	breq	.+6      	; 0x2a62 <do_button_action+0x2a>
			{
				UI.displaymode--;
    2a5c:	81 50       	subi	r24, 0x01	; 1
    2a5e:	80 93 77 06 	sts	0x0677, r24
			}
			
			if (debug_on)
    2a62:	80 91 d2 05 	lds	r24, 0x05D2
    2a66:	88 23       	and	r24, r24
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <do_button_action+0x34>
    2a6a:	4e c0       	rjmp	.+156    	; 0x2b08 <do_button_action+0xd0>
			{uart_puts("Short press action executed\n");}
    2a6c:	8e e5       	ldi	r24, 0x5E	; 94
    2a6e:	94 e0       	ldi	r25, 0x04	; 4
    2a70:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    2a74:	49 c0       	rjmp	.+146    	; 0x2b08 <do_button_action+0xd0>
		break;
		
		case MIDDLE_PRESS:	// Plus
			if (UI.displaymode<7)
    2a76:	80 91 77 06 	lds	r24, 0x0677
    2a7a:	87 30       	cpi	r24, 0x07	; 7
    2a7c:	18 f4       	brcc	.+6      	; 0x2a84 <do_button_action+0x4c>
			{
				UI.displaymode++;
    2a7e:	8f 5f       	subi	r24, 0xFF	; 255
    2a80:	80 93 77 06 	sts	0x0677, r24
			}
			
			if (debug_on)
    2a84:	80 91 d2 05 	lds	r24, 0x05D2
    2a88:	88 23       	and	r24, r24
    2a8a:	f1 f1       	breq	.+124    	; 0x2b08 <do_button_action+0xd0>
			{uart_puts("Middle press action executed\n");}
    2a8c:	8b e7       	ldi	r24, 0x7B	; 123
    2a8e:	94 e0       	ldi	r25, 0x04	; 4
    2a90:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    2a94:	39 c0       	rjmp	.+114    	; 0x2b08 <do_button_action+0xd0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a96:	2f e7       	ldi	r18, 0x7F	; 127
    2a98:	8f e4       	ldi	r24, 0x4F	; 79
    2a9a:	92 e1       	ldi	r25, 0x12	; 18
    2a9c:	21 50       	subi	r18, 0x01	; 1
    2a9e:	80 40       	sbci	r24, 0x00	; 0
    2aa0:	90 40       	sbci	r25, 0x00	; 0
    2aa2:	e1 f7       	brne	.-8      	; 0x2a9c <do_button_action+0x64>
    2aa4:	00 c0       	rjmp	.+0      	; 0x2aa6 <do_button_action+0x6e>
    2aa6:	00 00       	nop
		break;
		
		case LONG_PRESS:
			_delay_ms(750);
			clearLeds();
    2aa8:	0e 94 e7 10 	call	0x21ce	; 0x21ce <clearLeds>
    2aac:	2f e7       	ldi	r18, 0x7F	; 127
    2aae:	8a e1       	ldi	r24, 0x1A	; 26
    2ab0:	96 e0       	ldi	r25, 0x06	; 6
    2ab2:	21 50       	subi	r18, 0x01	; 1
    2ab4:	80 40       	sbci	r24, 0x00	; 0
    2ab6:	90 40       	sbci	r25, 0x00	; 0
    2ab8:	e1 f7       	brne	.-8      	; 0x2ab2 <do_button_action+0x7a>
    2aba:	00 c0       	rjmp	.+0      	; 0x2abc <do_button_action+0x84>
    2abc:	00 00       	nop
			_delay_ms(250);
			setLedPercentage(read_battery(),MULTIPLE,GREEN,100);	/* Do something*/
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	6f ef       	ldi	r22, 0xFF	; 255
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
    2ac4:	0e 94 14 10 	call	0x2028	; 0x2028 <Color>
    2ac8:	6b 01       	movw	r12, r22
    2aca:	7c 01       	movw	r14, r24
    2acc:	0e 94 6e 04 	call	0x8dc	; 0x8dc <read_battery>
    2ad0:	04 e6       	ldi	r16, 0x64	; 100
    2ad2:	a7 01       	movw	r20, r14
    2ad4:	96 01       	movw	r18, r12
    2ad6:	61 e0       	ldi	r22, 0x01	; 1
    2ad8:	0e 94 1c 11 	call	0x2238	; 0x2238 <setLedPercentage>
    2adc:	2f e7       	ldi	r18, 0x7F	; 127
    2ade:	8f e4       	ldi	r24, 0x4F	; 79
    2ae0:	92 e1       	ldi	r25, 0x12	; 18
    2ae2:	21 50       	subi	r18, 0x01	; 1
    2ae4:	80 40       	sbci	r24, 0x00	; 0
    2ae6:	90 40       	sbci	r25, 0x00	; 0
    2ae8:	e1 f7       	brne	.-8      	; 0x2ae2 <do_button_action+0xaa>
    2aea:	00 c0       	rjmp	.+0      	; 0x2aec <do_button_action+0xb4>
    2aec:	00 00       	nop
			_delay_ms(750);
			
			if (debug_on)
    2aee:	80 91 d2 05 	lds	r24, 0x05D2
    2af2:	88 23       	and	r24, r24
    2af4:	49 f0       	breq	.+18     	; 0x2b08 <do_button_action+0xd0>
			{uart_puts("Long press action executed\n");}	
    2af6:	89 e9       	ldi	r24, 0x99	; 153
    2af8:	94 e0       	ldi	r25, 0x04	; 4
    2afa:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
    2afe:	04 c0       	rjmp	.+8      	; 0x2b08 <do_button_action+0xd0>
		break;
		
		default:
			uart_puts("Error in button press! (fix!)\n");
    2b00:	85 eb       	ldi	r24, 0xB5	; 181
    2b02:	94 e0       	ldi	r25, 0x04	; 4
    2b04:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		break;
	}
	device.buttonaction = FALSE;
    2b08:	10 92 9f 06 	sts	0x069F, r1
}
    2b0c:	0f 91       	pop	r16
    2b0e:	ff 90       	pop	r15
    2b10:	ef 90       	pop	r14
    2b12:	df 90       	pop	r13
    2b14:	cf 90       	pop	r12
    2b16:	08 95       	ret

00002b18 <filtered_compass_reading>:
		break;
	}
}

uint16_t filtered_compass_reading(uint16_t heading_current)
{
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
    2b24:	7c 01       	movw	r14, r24
	int16_t heading_new = get_heading_avg(10);
    2b26:	8a e0       	ldi	r24, 0x0A	; 10
    2b28:	0e 94 9b 06 	call	0xd36	; 0xd36 <get_heading_avg>
    2b2c:	8c 01       	movw	r16, r24
	uint16_t difference = 0;
	static uint16_t error_counter = 0;
	int error = 0;
	
	// Calculate error
	error = heading_current - heading_new;
    2b2e:	e7 01       	movw	r28, r14
    2b30:	c8 1b       	sub	r28, r24
    2b32:	d9 0b       	sbc	r29, r25
	if (error>180)
    2b34:	c5 3b       	cpi	r28, 0xB5	; 181
    2b36:	d1 05       	cpc	r29, r1
    2b38:	14 f0       	brlt	.+4      	; 0x2b3e <filtered_compass_reading+0x26>
	{
		error -= 360;	// for angles > 180 correct in the opposite direction
    2b3a:	c8 56       	subi	r28, 0x68	; 104
    2b3c:	d1 40       	sbci	r29, 0x01	; 1
		{
			difference = (heading_current+360)-heading_new;
		}
	}*/
	
	if (debug_on)
    2b3e:	80 91 d2 05 	lds	r24, 0x05D2
    2b42:	88 23       	and	r24, r24
    2b44:	c9 f0       	breq	.+50     	; 0x2b78 <filtered_compass_reading+0x60>
	{
		uart_puts("Current: ");
    2b46:	8c e2       	ldi	r24, 0x2C	; 44
    2b48:	95 e0       	ldi	r25, 0x05	; 5
    2b4a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(heading_current,FALSE);
    2b4e:	60 e0       	ldi	r22, 0x00	; 0
    2b50:	c7 01       	movw	r24, r14
    2b52:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		uart_puts(" New: ");
    2b56:	86 e3       	ldi	r24, 0x36	; 54
    2b58:	95 e0       	ldi	r25, 0x05	; 5
    2b5a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(heading_new,FALSE);
    2b5e:	60 e0       	ldi	r22, 0x00	; 0
    2b60:	c8 01       	movw	r24, r16
    2b62:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
		uart_puts(" Error: ");
    2b66:	8d e3       	ldi	r24, 0x3D	; 61
    2b68:	95 e0       	ldi	r25, 0x05	; 5
    2b6a:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		print_int(difference,FALSE);
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	}
	
	if ((error>SENSOR_THRESHOLD)&&(error_counter<ERROR_THRESHOLD_NR))
    2b78:	cb 35       	cpi	r28, 0x5B	; 91
    2b7a:	d1 05       	cpc	r29, r1
    2b7c:	d4 f0       	brlt	.+52     	; 0x2bb2 <filtered_compass_reading+0x9a>
    2b7e:	80 91 da 05 	lds	r24, 0x05DA
    2b82:	90 91 db 05 	lds	r25, 0x05DB
    2b86:	49 97       	sbiw	r24, 0x19	; 25
    2b88:	a0 f4       	brcc	.+40     	; 0x2bb2 <filtered_compass_reading+0x9a>
	{
		if (debug_on)
    2b8a:	80 91 d2 05 	lds	r24, 0x05D2
    2b8e:	88 23       	and	r24, r24
    2b90:	21 f0       	breq	.+8      	; 0x2b9a <filtered_compass_reading+0x82>
		{uart_puts(" Outlier!\n");}
    2b92:	86 e4       	ldi	r24, 0x46	; 70
    2b94:	95 e0       	ldi	r25, 0x05	; 5
    2b96:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		error_counter++;
    2b9a:	80 91 da 05 	lds	r24, 0x05DA
    2b9e:	90 91 db 05 	lds	r25, 0x05DB
    2ba2:	01 96       	adiw	r24, 0x01	; 1
    2ba4:	90 93 db 05 	sts	0x05DB, r25
    2ba8:	80 93 da 05 	sts	0x05DA, r24
		return (heading_current);	// data was an outlier	
    2bac:	8e 2d       	mov	r24, r14
    2bae:	9f 2d       	mov	r25, r15
    2bb0:	0e c0       	rjmp	.+28     	; 0x2bce <filtered_compass_reading+0xb6>
	}
	else
	{
		if (debug_on)
    2bb2:	80 91 d2 05 	lds	r24, 0x05D2
    2bb6:	88 23       	and	r24, r24
    2bb8:	21 f0       	breq	.+8      	; 0x2bc2 <filtered_compass_reading+0xaa>
		{uart_puts(" OK\n");}
    2bba:	81 e5       	ldi	r24, 0x51	; 81
    2bbc:	95 e0       	ldi	r25, 0x05	; 5
    2bbe:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		error_counter=0;
    2bc2:	10 92 db 05 	sts	0x05DB, r1
    2bc6:	10 92 da 05 	sts	0x05DA, r1
		return (heading_new);
    2bca:	80 2f       	mov	r24, r16
    2bcc:	91 2f       	mov	r25, r17
	}
}
    2bce:	df 91       	pop	r29
    2bd0:	cf 91       	pop	r28
    2bd2:	1f 91       	pop	r17
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
    2bda:	08 95       	ret

00002bdc <load_eeprom_settings>:
	return heading_total;
}*/

void load_eeprom_settings(void)
{
	UI.brightness = eeprom_read_word(&eeprom_brightness);
    2bdc:	8a e0       	ldi	r24, 0x0A	; 10
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__eerd_word_m328p>
    2be4:	80 93 78 06 	sts	0x0678, r24
	UI.displaymode = eeprom_read_word(&eeprom_displaymode);
    2be8:	88 e0       	ldi	r24, 0x08	; 8
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__eerd_word_m328p>
    2bf0:	80 93 77 06 	sts	0x0677, r24
	UI.navigationcolor = eeprom_read_dword(&eeprom_navigationcolor);
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <__eerd_dword_m328p>
    2bfc:	60 93 79 06 	sts	0x0679, r22
    2c00:	70 93 7a 06 	sts	0x067A, r23
    2c04:	80 93 7b 06 	sts	0x067B, r24
    2c08:	90 93 7c 06 	sts	0x067C, r25
	UI.showdistance = eeprom_read_word(&eeprom_showdistance);
    2c0c:	86 e0       	ldi	r24, 0x06	; 6
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__eerd_word_m328p>
    2c14:	80 93 7e 06 	sts	0x067E, r24
	UI.shownorth = eeprom_read_word(&eeprom_shownorth);
    2c18:	84 e0       	ldi	r24, 0x04	; 4
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__eerd_word_m328p>
    2c20:	80 93 7d 06 	sts	0x067D, r24
    2c24:	08 95       	ret

00002c26 <reset_factory_settings>:
}

void reset_factory_settings(void)
{
	setBrightness(45);				/* Set brightness of leds */
    2c26:	8d e2       	ldi	r24, 0x2D	; 45
    2c28:	0e 94 23 10 	call	0x2046	; 0x2046 <setBrightness>
	setUIMode(NORMAL);				/* Set display modus */
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <setUIMode>
	UI.navigationcolor = YELLOW;	/* Set color of navigation */
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	6f ef       	ldi	r22, 0xFF	; 255
    2c36:	88 ec       	ldi	r24, 0xC8	; 200
    2c38:	0e 94 14 10 	call	0x2028	; 0x2028 <Color>
    2c3c:	60 93 79 06 	sts	0x0679, r22
    2c40:	70 93 7a 06 	sts	0x067A, r23
    2c44:	80 93 7b 06 	sts	0x067B, r24
    2c48:	90 93 7c 06 	sts	0x067C, r25
	UI.showdistance = FALSE;
    2c4c:	10 92 7e 06 	sts	0x067E, r1
	UI.shownorth = FALSE;
    2c50:	10 92 7d 06 	sts	0x067D, r1
	
	/* Save values in EEPROM */
	eeprom_update_word(&eeprom_brightness, getBrightness());
    2c54:	0e 94 27 10 	call	0x204e	; 0x204e <getBrightness>
    2c58:	68 2f       	mov	r22, r24
    2c5a:	70 e0       	ldi	r23, 0x00	; 0
    2c5c:	8a e0       	ldi	r24, 0x0A	; 10
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
	eeprom_update_word(&eeprom_displaymode, getUIMode());
    2c64:	0e 94 19 11 	call	0x2232	; 0x2232 <getUIMode>
    2c68:	68 2f       	mov	r22, r24
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	88 e0       	ldi	r24, 0x08	; 8
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
	eeprom_update_dword(&eeprom_navigationcolor, YELLOW);	/* 32 bits! */
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	6f ef       	ldi	r22, 0xFF	; 255
    2c78:	88 ec       	ldi	r24, 0xC8	; 200
    2c7a:	0e 94 14 10 	call	0x2028	; 0x2028 <Color>
    2c7e:	ab 01       	movw	r20, r22
    2c80:	bc 01       	movw	r22, r24
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <__eeupd_dword_m328p>
	eeprom_update_word(&eeprom_showdistance, FALSE);
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	70 e0       	ldi	r23, 0x00	; 0
    2c8e:	86 e0       	ldi	r24, 0x06	; 6
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
	eeprom_update_word(&eeprom_shownorth, FALSE);
    2c96:	60 e0       	ldi	r22, 0x00	; 0
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	84 e0       	ldi	r24, 0x04	; 4
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
    2ca2:	08 95       	ret

00002ca4 <main>:
}

int main(void)
{
	//OSCCAL = OSCILLATOR_CAL_VAL;		/* Calibrate the internal oscillator*/
	init_io();			/* Init IO*/
    2ca4:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <init_io>
	init_int();			/* Init int for resfresh display every x ms	*/
    2ca8:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <init_int>
	init_adc();			/* Init ADC */
    2cac:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <init_adc>
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Init Uart */
    2cb0:	83 e3       	ldi	r24, 0x33	; 51
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <uart_init>
	sei();						/* Enable global interrupts for uart*/
    2cb8:	78 94       	sei
	
	//init_bluetooth();			/* Setup the bluetooth device (1 time only)	*/
	init_lsm303();				/* Init the acc/mag sensor				*/
    2cba:	0e 94 4a 09 	call	0x1294	; 0x1294 <init_lsm303>
	
	//buzzer(BUZZER_SHORT);
	
	/* Set initial values of device */
	device.status = NO_CONNECTION;	/* Start condition */
    2cbe:	83 e0       	ldi	r24, 0x03	; 3
    2cc0:	80 93 a2 06 	sts	0x06A2, r24
	device.previousstatus = NO_CONNECTION;
    2cc4:	80 93 a1 06 	sts	0x06A1, r24
	device.compass = get_heading_avg(10);	/* Get initial value */
    2cc8:	8a e0       	ldi	r24, 0x0A	; 10
    2cca:	0e 94 9b 06 	call	0xd36	; 0xd36 <get_heading_avg>
    2cce:	bc 01       	movw	r22, r24
    2cd0:	88 27       	eor	r24, r24
    2cd2:	77 fd       	sbrc	r23, 7
    2cd4:	80 95       	com	r24
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	0e 94 10 1e 	call	0x3c20	; 0x3c20 <__floatsisf>
    2cdc:	60 93 8f 06 	sts	0x068F, r22
    2ce0:	70 93 90 06 	sts	0x0690, r23
    2ce4:	80 93 91 06 	sts	0x0691, r24
    2ce8:	90 93 92 06 	sts	0x0692, r25
	
	if(eeprom_read_word(&eeprom_first_startup))
    2cec:	8c e0       	ldi	r24, 0x0C	; 12
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 da 22 	call	0x45b4	; 0x45b4 <__eerd_word_m328p>
    2cf4:	89 2b       	or	r24, r25
    2cf6:	61 f0       	breq	.+24     	; 0x2d10 <main+0x6c>
	{
		eeprom_update_word(&eeprom_first_startup, FALSE);
    2cf8:	60 e0       	ldi	r22, 0x00	; 0
    2cfa:	70 e0       	ldi	r23, 0x00	; 0
    2cfc:	8c e0       	ldi	r24, 0x0C	; 12
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <__eeupd_word_m328p>
		reset_factory_settings();	/* Set device to initial values*/
    2d04:	0e 94 13 16 	call	0x2c26	; 0x2c26 <reset_factory_settings>
		uart_puts("First time startup, doing factory presets\n");
    2d08:	86 e5       	ldi	r24, 0x56	; 86
    2d0a:	95 e0       	ldi	r25, 0x05	; 5
    2d0c:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	}
	
	/* Load initial values of device */	
	load_eeprom_settings();		/* Load program settings from EEPROM	*/
    2d10:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <load_eeprom_settings>
	
	/* Now the device is ready! */
	uart_puts("BikeNav 2017 V");		/* Print version number					*/
    2d14:	81 e8       	ldi	r24, 0x81	; 129
    2d16:	95 e0       	ldi	r25, 0x05	; 5
    2d18:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_float(VERSION,1);
    2d1c:	41 e0       	ldi	r20, 0x01	; 1
    2d1e:	60 e0       	ldi	r22, 0x00	; 0
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	80 e8       	ldi	r24, 0x80	; 128
    2d24:	9f e3       	ldi	r25, 0x3F	; 63
    2d26:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <print_float>

	UI.navigationcolor = YELLOW;	/* Set color of navigation */
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	6f ef       	ldi	r22, 0xFF	; 255
    2d2e:	88 ec       	ldi	r24, 0xC8	; 200
    2d30:	0e 94 14 10 	call	0x2028	; 0x2028 <Color>
    2d34:	60 93 79 06 	sts	0x0679, r22
    2d38:	70 93 7a 06 	sts	0x067A, r23
    2d3c:	80 93 7b 06 	sts	0x067B, r24
    2d40:	90 93 7c 06 	sts	0x067C, r25
	clearLeds();					/* Clear leds */
    2d44:	0e 94 e7 10 	call	0x21ce	; 0x21ce <clearLeds>
	
	device.battery = read_battery();
    2d48:	0e 94 6e 04 	call	0x8dc	; 0x8dc <read_battery>
    2d4c:	cb e9       	ldi	r28, 0x9B	; 155
    2d4e:	d6 e0       	ldi	r29, 0x06	; 6
    2d50:	88 83       	st	Y, r24
	uart_puts("Battery = ");
    2d52:	80 eb       	ldi	r24, 0xB0	; 176
    2d54:	91 e0       	ldi	r25, 0x01	; 1
    2d56:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(device.battery,0);
    2d5a:	88 81       	ld	r24, Y
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts("%\n");
    2d64:	8b eb       	ldi	r24, 0xBB	; 187
    2d66:	91 e0       	ldi	r25, 0x01	; 1
    2d68:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	//setLedPercentage(device.battery,MULTIPLE,GREEN,100);	/* Show battery percentage on display */
	//_delay_ms(750);	
	clearLeds();					/* Clear leds */
    2d6c:	0e 94 e7 10 	call	0x21ce	; 0x21ce <clearLeds>
	
	device.temperature = get_temp();
    2d70:	0e 94 61 09 	call	0x12c2	; 0x12c2 <get_temp>
    2d74:	cc e9       	ldi	r28, 0x9C	; 156
    2d76:	d6 e0       	ldi	r29, 0x06	; 6
    2d78:	88 83       	st	Y, r24
	uart_puts("Temperature = ");
    2d7a:	85 ef       	ldi	r24, 0xF5	; 245
    2d7c:	92 e0       	ldi	r25, 0x02	; 2
    2d7e:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	print_int(device.temperature,0);
    2d82:	88 81       	ld	r24, Y
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 37 0a 	call	0x146e	; 0x146e <print_int>
	uart_puts(" deg. C.\n");
    2d8c:	84 e0       	ldi	r24, 0x04	; 4
    2d8e:	93 e0       	ldi	r25, 0x03	; 3
    2d90:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
	//setLedValue(device.temperature,100);
	//_delay_ms(750);		/* Wait for the user to be able to see the battery percentage */
	
	
	uart_puts("TODO: FIX UART receive coordinates!!\n");
    2d94:	80 e9       	ldi	r24, 0x90	; 144
    2d96:	95 e0       	ldi	r25, 0x05	; 5
    2d98:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <uart_puts>
		//TEST_TOGGLE;
		//process_serial();							/* Check for serial messages */	
		
		//device.compass = rollingAverage(get_heading_avg(10));	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);
		device.compass = filtered_compass_reading(device.compass); // Has a threshold for new compass sensor data
    2d9c:	cf e8       	ldi	r28, 0x8F	; 143
    2d9e:	d6 e0       	ldi	r29, 0x06	; 6
		//device.compass = rollingAverage(device.compass);	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);		/* get compass values (north) */
		
		
		if (UI.refresh)	// Refresh display
    2da0:	0f 2e       	mov	r0, r31
    2da2:	f6 e7       	ldi	r31, 0x76	; 118
    2da4:	ef 2e       	mov	r14, r31
    2da6:	f6 e0       	ldi	r31, 0x06	; 6
    2da8:	ff 2e       	mov	r15, r31
    2daa:	f0 2d       	mov	r31, r0
		{
			check_device_status();						/* Check status of device for time-out's and button etc. */
			refreshDisplay(device.compass, device.heading, device.status);	
    2dac:	0f 2e       	mov	r0, r31
    2dae:	f2 ea       	ldi	r31, 0xA2	; 162
    2db0:	af 2e       	mov	r10, r31
    2db2:	f6 e0       	ldi	r31, 0x06	; 6
    2db4:	bf 2e       	mov	r11, r31
    2db6:	f0 2d       	mov	r31, r0
    2db8:	0f 2e       	mov	r0, r31
    2dba:	f3 e9       	ldi	r31, 0x93	; 147
    2dbc:	cf 2e       	mov	r12, r31
    2dbe:	f6 e0       	ldi	r31, 0x06	; 6
    2dc0:	df 2e       	mov	r13, r31
    2dc2:	f0 2d       	mov	r31, r0
		}
		
		//print_status();
		if (device.buttonaction)	// button action active
    2dc4:	0f e9       	ldi	r16, 0x9F	; 159
    2dc6:	16 e0       	ldi	r17, 0x06	; 6
	while(1)
	{	
		
		//if (command_ready == TRUE) {
			//copy_command();
			get_serial();
    2dc8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <get_serial>
			if (command_ready)
    2dcc:	80 91 6c 07 	lds	r24, 0x076C
		//TEST_TOGGLE;
		//process_serial();							/* Check for serial messages */	
		
		//device.compass = rollingAverage(get_heading_avg(10));	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);
		device.compass = filtered_compass_reading(device.compass); // Has a threshold for new compass sensor data
    2dd0:	68 81       	ld	r22, Y
    2dd2:	79 81       	ldd	r23, Y+1	; 0x01
    2dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd8:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fixunssfsi>
    2ddc:	cb 01       	movw	r24, r22
    2dde:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <filtered_compass_reading>
    2de2:	bc 01       	movw	r22, r24
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__floatunsisf>
    2dec:	68 83       	st	Y, r22
    2dee:	79 83       	std	Y+1, r23	; 0x01
    2df0:	8a 83       	std	Y+2, r24	; 0x02
    2df2:	9b 83       	std	Y+3, r25	; 0x03
		//device.compass = rollingAverage(device.compass);	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);		/* get compass values (north) */
		
		
		if (UI.refresh)	// Refresh display
    2df4:	f7 01       	movw	r30, r14
    2df6:	80 81       	ld	r24, Z
    2df8:	88 23       	and	r24, r24
    2dfa:	c1 f0       	breq	.+48     	; 0x2e2c <main+0x188>
		{
			check_device_status();						/* Check status of device for time-out's and button etc. */
    2dfc:	0e 94 0a 04 	call	0x814	; 0x814 <check_device_status>
			refreshDisplay(device.compass, device.heading, device.status);	
    2e00:	f6 01       	movw	r30, r12
    2e02:	60 81       	ld	r22, Z
    2e04:	71 81       	ldd	r23, Z+1	; 0x01
    2e06:	82 81       	ldd	r24, Z+2	; 0x02
    2e08:	93 81       	ldd	r25, Z+3	; 0x03
    2e0a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fixunssfsi>
    2e0e:	2b 01       	movw	r4, r22
    2e10:	3c 01       	movw	r6, r24
    2e12:	68 81       	ld	r22, Y
    2e14:	79 81       	ldd	r23, Y+1	; 0x01
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__fixunssfsi>
    2e1e:	dc 01       	movw	r26, r24
    2e20:	cb 01       	movw	r24, r22
    2e22:	f5 01       	movw	r30, r10
    2e24:	40 81       	ld	r20, Z
    2e26:	b2 01       	movw	r22, r4
    2e28:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <refreshDisplay>
		}
		
		//print_status();
		if (device.buttonaction)	// button action active
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	80 81       	ld	r24, Z
    2e30:	81 11       	cpse	r24, r1
		{
			do_button_action();	
    2e32:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <do_button_action>
    2e36:	8f ec       	ldi	r24, 0xCF	; 207
    2e38:	97 e0       	ldi	r25, 0x07	; 7
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <main+0x196>
    2e3e:	00 c0       	rjmp	.+0      	; 0x2e40 <main+0x19c>
    2e40:	00 00       	nop
    2e42:	c2 cf       	rjmp	.-124    	; 0x2dc8 <main+0x124>

00002e44 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2e44:	1f 92       	push	r1
    2e46:	0f 92       	push	r0
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	0f 92       	push	r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	2f 93       	push	r18
    2e50:	8f 93       	push	r24
    2e52:	9f 93       	push	r25
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2e58:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    2e5c:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2e60:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2e62:	e0 91 df 05 	lds	r30, 0x05DF
    2e66:	ef 5f       	subi	r30, 0xFF	; 255
    2e68:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
    2e6a:	90 91 de 05 	lds	r25, 0x05DE
    2e6e:	e9 17       	cp	r30, r25
    2e70:	39 f0       	breq	.+14     	; 0x2e80 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2e72:	e0 93 df 05 	sts	0x05DF, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	ee 51       	subi	r30, 0x1E	; 30
    2e7a:	fa 4f       	sbci	r31, 0xFA	; 250
    2e7c:	20 83       	st	Z, r18
    2e7e:	01 c0       	rjmp	.+2      	; 0x2e82 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2e80:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    2e82:	90 91 dd 05 	lds	r25, 0x05DD
    2e86:	89 2b       	or	r24, r25
    2e88:	80 93 dd 05 	sts	0x05DD, r24
}
    2e8c:	ff 91       	pop	r31
    2e8e:	ef 91       	pop	r30
    2e90:	9f 91       	pop	r25
    2e92:	8f 91       	pop	r24
    2e94:	2f 91       	pop	r18
    2e96:	0f 90       	pop	r0
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	0f 90       	pop	r0
    2e9c:	1f 90       	pop	r1
    2e9e:	18 95       	reti

00002ea0 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    2ea0:	1f 92       	push	r1
    2ea2:	0f 92       	push	r0
    2ea4:	0f b6       	in	r0, 0x3f	; 63
    2ea6:	0f 92       	push	r0
    2ea8:	11 24       	eor	r1, r1
    2eaa:	8f 93       	push	r24
    2eac:	9f 93       	push	r25
    2eae:	ef 93       	push	r30
    2eb0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    2eb2:	90 91 e1 05 	lds	r25, 0x05E1
    2eb6:	80 91 e0 05 	lds	r24, 0x05E0
    2eba:	98 17       	cp	r25, r24
    2ebc:	69 f0       	breq	.+26     	; 0x2ed8 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    2ebe:	e0 91 e0 05 	lds	r30, 0x05E0
    2ec2:	ef 5f       	subi	r30, 0xFF	; 255
    2ec4:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    2ec6:	e0 93 e0 05 	sts	0x05E0, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	ee 5d       	subi	r30, 0xDE	; 222
    2ece:	f9 4f       	sbci	r31, 0xF9	; 249
    2ed0:	80 81       	ld	r24, Z
    2ed2:	80 93 c6 00 	sts	0x00C6, r24
    2ed6:	05 c0       	rjmp	.+10     	; 0x2ee2 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    2ed8:	e1 ec       	ldi	r30, 0xC1	; 193
    2eda:	f0 e0       	ldi	r31, 0x00	; 0
    2edc:	80 81       	ld	r24, Z
    2ede:	8f 7d       	andi	r24, 0xDF	; 223
    2ee0:	80 83       	st	Z, r24
    }
}
    2ee2:	ff 91       	pop	r31
    2ee4:	ef 91       	pop	r30
    2ee6:	9f 91       	pop	r25
    2ee8:	8f 91       	pop	r24
    2eea:	0f 90       	pop	r0
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	0f 90       	pop	r0
    2ef0:	1f 90       	pop	r1
    2ef2:	18 95       	reti

00002ef4 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    2ef4:	10 92 e1 05 	sts	0x05E1, r1
    UART_TxTail = 0;
    2ef8:	10 92 e0 05 	sts	0x05E0, r1
    UART_RxHead = 0;
    2efc:	10 92 df 05 	sts	0x05DF, r1
    UART_RxTail = 0;
    2f00:	10 92 de 05 	sts	0x05DE, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    2f04:	99 23       	and	r25, r25
    2f06:	24 f4       	brge	.+8      	; 0x2f10 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    2f08:	22 e0       	ldi	r18, 0x02	; 2
    2f0a:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    2f0e:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    2f10:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    2f14:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    2f18:	88 e9       	ldi	r24, 0x98	; 152
    2f1a:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    2f1e:	86 e0       	ldi	r24, 0x06	; 6
    2f20:	80 93 c2 00 	sts	0x00C2, r24
    2f24:	08 95       	ret

00002f26 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    2f26:	90 91 df 05 	lds	r25, 0x05DF
    2f2a:	80 91 de 05 	lds	r24, 0x05DE
    2f2e:	98 17       	cp	r25, r24
    2f30:	81 f0       	breq	.+32     	; 0x2f52 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    2f32:	e0 91 de 05 	lds	r30, 0x05DE
    2f36:	ef 5f       	subi	r30, 0xFF	; 255
    2f38:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
    2f3a:	e0 93 de 05 	sts	0x05DE, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    2f3e:	f0 e0       	ldi	r31, 0x00	; 0
    2f40:	ee 51       	subi	r30, 0x1E	; 30
    2f42:	fa 4f       	sbci	r31, 0xFA	; 250
    2f44:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
    2f46:	90 91 dd 05 	lds	r25, 0x05DD
    UART_LastRxError = 0;
    2f4a:	10 92 dd 05 	sts	0x05DD, r1
    return data;
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
    2f56:	08 95       	ret

00002f58 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    2f58:	20 91 e1 05 	lds	r18, 0x05E1
    2f5c:	2f 5f       	subi	r18, 0xFF	; 255
    2f5e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    2f60:	90 91 e0 05 	lds	r25, 0x05E0
    2f64:	29 17       	cp	r18, r25
    2f66:	e1 f3       	breq	.-8      	; 0x2f60 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    2f68:	e2 2f       	mov	r30, r18
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	ee 5d       	subi	r30, 0xDE	; 222
    2f6e:	f9 4f       	sbci	r31, 0xF9	; 249
    2f70:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    2f72:	20 93 e1 05 	sts	0x05E1, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    2f76:	e1 ec       	ldi	r30, 0xC1	; 193
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	80 62       	ori	r24, 0x20	; 32
    2f7e:	80 83       	st	Z, r24
    2f80:	08 95       	ret

00002f82 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    2f82:	cf 93       	push	r28
    2f84:	df 93       	push	r29
    2f86:	ec 01       	movw	r28, r24
    while (*s) 
    2f88:	88 81       	ld	r24, Y
    2f8a:	88 23       	and	r24, r24
    2f8c:	31 f0       	breq	.+12     	; 0x2f9a <uart_puts+0x18>
    2f8e:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    2f90:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    2f94:	89 91       	ld	r24, Y+
    2f96:	81 11       	cpse	r24, r1
    2f98:	fb cf       	rjmp	.-10     	; 0x2f90 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	08 95       	ret

00002fa0 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    2fa0:	cf 93       	push	r28
    2fa2:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2fa4:	ec 01       	movw	r28, r24
    2fa6:	21 96       	adiw	r28, 0x01	; 1
    2fa8:	fc 01       	movw	r30, r24
    2faa:	84 91       	lpm	r24, Z
    2fac:	88 23       	and	r24, r24
    2fae:	39 f0       	breq	.+14     	; 0x2fbe <uart_puts_p+0x1e>
      uart_putc(c);
    2fb0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	84 91       	lpm	r24, Z
    2fb8:	21 96       	adiw	r28, 0x01	; 1
    2fba:	81 11       	cpse	r24, r1
    2fbc:	f9 cf       	rjmp	.-14     	; 0x2fb0 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	08 95       	ret

00002fc4 <vector_cross>:
#include "vector.h"
#include <math.h>

void vector_cross(const vector *a, const vector *b, vector *out)
{
    2fc4:	af 92       	push	r10
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	cf 93       	push	r28
    2fd6:	df 93       	push	r29
    2fd8:	ec 01       	movw	r28, r24
    2fda:	8b 01       	movw	r16, r22
    2fdc:	5a 01       	movw	r10, r20
	out->x = a->y * b->z - a->z * b->y;
    2fde:	fb 01       	movw	r30, r22
    2fe0:	20 85       	ldd	r18, Z+8	; 0x08
    2fe2:	31 85       	ldd	r19, Z+9	; 0x09
    2fe4:	42 85       	ldd	r20, Z+10	; 0x0a
    2fe6:	53 85       	ldd	r21, Z+11	; 0x0b
    2fe8:	6c 81       	ldd	r22, Y+4	; 0x04
    2fea:	7d 81       	ldd	r23, Y+5	; 0x05
    2fec:	8e 81       	ldd	r24, Y+6	; 0x06
    2fee:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff0:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    2ff4:	6b 01       	movw	r12, r22
    2ff6:	7c 01       	movw	r14, r24
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	24 81       	ldd	r18, Z+4	; 0x04
    2ffc:	35 81       	ldd	r19, Z+5	; 0x05
    2ffe:	46 81       	ldd	r20, Z+6	; 0x06
    3000:	57 81       	ldd	r21, Z+7	; 0x07
    3002:	68 85       	ldd	r22, Y+8	; 0x08
    3004:	79 85       	ldd	r23, Y+9	; 0x09
    3006:	8a 85       	ldd	r24, Y+10	; 0x0a
    3008:	9b 85       	ldd	r25, Y+11	; 0x0b
    300a:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    300e:	9b 01       	movw	r18, r22
    3010:	ac 01       	movw	r20, r24
    3012:	c7 01       	movw	r24, r14
    3014:	b6 01       	movw	r22, r12
    3016:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
    301a:	f5 01       	movw	r30, r10
    301c:	60 83       	st	Z, r22
    301e:	71 83       	std	Z+1, r23	; 0x01
    3020:	82 83       	std	Z+2, r24	; 0x02
    3022:	93 83       	std	Z+3, r25	; 0x03
	out->y = a->z * b->x - a->x * b->z;
    3024:	f8 01       	movw	r30, r16
    3026:	20 81       	ld	r18, Z
    3028:	31 81       	ldd	r19, Z+1	; 0x01
    302a:	42 81       	ldd	r20, Z+2	; 0x02
    302c:	53 81       	ldd	r21, Z+3	; 0x03
    302e:	68 85       	ldd	r22, Y+8	; 0x08
    3030:	79 85       	ldd	r23, Y+9	; 0x09
    3032:	8a 85       	ldd	r24, Y+10	; 0x0a
    3034:	9b 85       	ldd	r25, Y+11	; 0x0b
    3036:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    303a:	6b 01       	movw	r12, r22
    303c:	7c 01       	movw	r14, r24
    303e:	f8 01       	movw	r30, r16
    3040:	20 85       	ldd	r18, Z+8	; 0x08
    3042:	31 85       	ldd	r19, Z+9	; 0x09
    3044:	42 85       	ldd	r20, Z+10	; 0x0a
    3046:	53 85       	ldd	r21, Z+11	; 0x0b
    3048:	68 81       	ld	r22, Y
    304a:	79 81       	ldd	r23, Y+1	; 0x01
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	9b 81       	ldd	r25, Y+3	; 0x03
    3050:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    3054:	9b 01       	movw	r18, r22
    3056:	ac 01       	movw	r20, r24
    3058:	c7 01       	movw	r24, r14
    305a:	b6 01       	movw	r22, r12
    305c:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
    3060:	f5 01       	movw	r30, r10
    3062:	64 83       	std	Z+4, r22	; 0x04
    3064:	75 83       	std	Z+5, r23	; 0x05
    3066:	86 83       	std	Z+6, r24	; 0x06
    3068:	97 83       	std	Z+7, r25	; 0x07
	out->z = a->x * b->y - a->y * b->x;
    306a:	f8 01       	movw	r30, r16
    306c:	24 81       	ldd	r18, Z+4	; 0x04
    306e:	35 81       	ldd	r19, Z+5	; 0x05
    3070:	46 81       	ldd	r20, Z+6	; 0x06
    3072:	57 81       	ldd	r21, Z+7	; 0x07
    3074:	68 81       	ld	r22, Y
    3076:	79 81       	ldd	r23, Y+1	; 0x01
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    3080:	6b 01       	movw	r12, r22
    3082:	7c 01       	movw	r14, r24
    3084:	f8 01       	movw	r30, r16
    3086:	20 81       	ld	r18, Z
    3088:	31 81       	ldd	r19, Z+1	; 0x01
    308a:	42 81       	ldd	r20, Z+2	; 0x02
    308c:	53 81       	ldd	r21, Z+3	; 0x03
    308e:	6c 81       	ldd	r22, Y+4	; 0x04
    3090:	7d 81       	ldd	r23, Y+5	; 0x05
    3092:	8e 81       	ldd	r24, Y+6	; 0x06
    3094:	9f 81       	ldd	r25, Y+7	; 0x07
    3096:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    309a:	9b 01       	movw	r18, r22
    309c:	ac 01       	movw	r20, r24
    309e:	c7 01       	movw	r24, r14
    30a0:	b6 01       	movw	r22, r12
    30a2:	0e 94 a7 1c 	call	0x394e	; 0x394e <__subsf3>
    30a6:	f5 01       	movw	r30, r10
    30a8:	60 87       	std	Z+8, r22	; 0x08
    30aa:	71 87       	std	Z+9, r23	; 0x09
    30ac:	82 87       	std	Z+10, r24	; 0x0a
    30ae:	93 87       	std	Z+11, r25	; 0x0b
}
    30b0:	df 91       	pop	r29
    30b2:	cf 91       	pop	r28
    30b4:	1f 91       	pop	r17
    30b6:	0f 91       	pop	r16
    30b8:	ff 90       	pop	r15
    30ba:	ef 90       	pop	r14
    30bc:	df 90       	pop	r13
    30be:	cf 90       	pop	r12
    30c0:	bf 90       	pop	r11
    30c2:	af 90       	pop	r10
    30c4:	08 95       	ret

000030c6 <vector_dot>:

float vector_dot(const vector *a, const vector *b)
{
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	ec 01       	movw	r28, r24
    30d8:	8b 01       	movw	r16, r22
  return a->x * b->x + a->y * b->y + a->z * b->z;
    30da:	fb 01       	movw	r30, r22
    30dc:	20 81       	ld	r18, Z
    30de:	31 81       	ldd	r19, Z+1	; 0x01
    30e0:	42 81       	ldd	r20, Z+2	; 0x02
    30e2:	53 81       	ldd	r21, Z+3	; 0x03
    30e4:	68 81       	ld	r22, Y
    30e6:	79 81       	ldd	r23, Y+1	; 0x01
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	9b 81       	ldd	r25, Y+3	; 0x03
    30ec:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    30f0:	6b 01       	movw	r12, r22
    30f2:	7c 01       	movw	r14, r24
    30f4:	f8 01       	movw	r30, r16
    30f6:	24 81       	ldd	r18, Z+4	; 0x04
    30f8:	35 81       	ldd	r19, Z+5	; 0x05
    30fa:	46 81       	ldd	r20, Z+6	; 0x06
    30fc:	57 81       	ldd	r21, Z+7	; 0x07
    30fe:	6c 81       	ldd	r22, Y+4	; 0x04
    3100:	7d 81       	ldd	r23, Y+5	; 0x05
    3102:	8e 81       	ldd	r24, Y+6	; 0x06
    3104:	9f 81       	ldd	r25, Y+7	; 0x07
    3106:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    310a:	9b 01       	movw	r18, r22
    310c:	ac 01       	movw	r20, r24
    310e:	c7 01       	movw	r24, r14
    3110:	b6 01       	movw	r22, r12
    3112:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
    3116:	6b 01       	movw	r12, r22
    3118:	7c 01       	movw	r14, r24
    311a:	f8 01       	movw	r30, r16
    311c:	20 85       	ldd	r18, Z+8	; 0x08
    311e:	31 85       	ldd	r19, Z+9	; 0x09
    3120:	42 85       	ldd	r20, Z+10	; 0x0a
    3122:	53 85       	ldd	r21, Z+11	; 0x0b
    3124:	68 85       	ldd	r22, Y+8	; 0x08
    3126:	79 85       	ldd	r23, Y+9	; 0x09
    3128:	8a 85       	ldd	r24, Y+10	; 0x0a
    312a:	9b 85       	ldd	r25, Y+11	; 0x0b
    312c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    3130:	9b 01       	movw	r18, r22
    3132:	ac 01       	movw	r20, r24
    3134:	c7 01       	movw	r24, r14
    3136:	b6 01       	movw	r22, r12
    3138:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__addsf3>
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
    314c:	08 95       	ret

0000314e <vector_normalize>:

void vector_normalize(vector *a)
{
    314e:	cf 92       	push	r12
    3150:	df 92       	push	r13
    3152:	ef 92       	push	r14
    3154:	ff 92       	push	r15
    3156:	cf 93       	push	r28
    3158:	df 93       	push	r29
    315a:	ec 01       	movw	r28, r24
	float mag = sqrt(vector_dot(a, a));
    315c:	bc 01       	movw	r22, r24
    315e:	0e 94 63 18 	call	0x30c6	; 0x30c6 <vector_dot>
    3162:	0e 94 12 20 	call	0x4024	; 0x4024 <sqrt>
    3166:	6b 01       	movw	r12, r22
    3168:	7c 01       	movw	r14, r24
	a->x /= mag;
    316a:	9b 01       	movw	r18, r22
    316c:	ac 01       	movw	r20, r24
    316e:	68 81       	ld	r22, Y
    3170:	79 81       	ldd	r23, Y+1	; 0x01
    3172:	8a 81       	ldd	r24, Y+2	; 0x02
    3174:	9b 81       	ldd	r25, Y+3	; 0x03
    3176:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
    317a:	68 83       	st	Y, r22
    317c:	79 83       	std	Y+1, r23	; 0x01
    317e:	8a 83       	std	Y+2, r24	; 0x02
    3180:	9b 83       	std	Y+3, r25	; 0x03
	a->y /= mag;
    3182:	a7 01       	movw	r20, r14
    3184:	96 01       	movw	r18, r12
    3186:	6c 81       	ldd	r22, Y+4	; 0x04
    3188:	7d 81       	ldd	r23, Y+5	; 0x05
    318a:	8e 81       	ldd	r24, Y+6	; 0x06
    318c:	9f 81       	ldd	r25, Y+7	; 0x07
    318e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
    3192:	6c 83       	std	Y+4, r22	; 0x04
    3194:	7d 83       	std	Y+5, r23	; 0x05
    3196:	8e 83       	std	Y+6, r24	; 0x06
    3198:	9f 83       	std	Y+7, r25	; 0x07
	a->z /= mag;
    319a:	a7 01       	movw	r20, r14
    319c:	96 01       	movw	r18, r12
    319e:	68 85       	ldd	r22, Y+8	; 0x08
    31a0:	79 85       	ldd	r23, Y+9	; 0x09
    31a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31a6:	0e 94 75 1d 	call	0x3aea	; 0x3aea <__divsf3>
    31aa:	68 87       	std	Y+8, r22	; 0x08
    31ac:	79 87       	std	Y+9, r23	; 0x09
    31ae:	8a 87       	std	Y+10, r24	; 0x0a
    31b0:	9b 87       	std	Y+11, r25	; 0x0b
}
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	ff 90       	pop	r15
    31b8:	ef 90       	pop	r14
    31ba:	df 90       	pop	r13
    31bc:	cf 90       	pop	r12
    31be:	08 95       	ret

000031c0 <vfprintf>:
    31c0:	a3 e1       	ldi	r26, 0x13	; 19
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	e6 ee       	ldi	r30, 0xE6	; 230
    31c6:	f8 e1       	ldi	r31, 0x18	; 24
    31c8:	0c 94 70 1c 	jmp	0x38e0	; 0x38e0 <__prologue_saves__>
    31cc:	7c 01       	movw	r14, r24
    31ce:	1b 01       	movw	r2, r22
    31d0:	6a 01       	movw	r12, r20
    31d2:	fc 01       	movw	r30, r24
    31d4:	17 82       	std	Z+7, r1	; 0x07
    31d6:	16 82       	std	Z+6, r1	; 0x06
    31d8:	83 81       	ldd	r24, Z+3	; 0x03
    31da:	81 ff       	sbrs	r24, 1
    31dc:	66 c3       	rjmp	.+1740   	; 0x38aa <vfprintf+0x6ea>
    31de:	be 01       	movw	r22, r28
    31e0:	6f 5f       	subi	r22, 0xFF	; 255
    31e2:	7f 4f       	sbci	r23, 0xFF	; 255
    31e4:	4b 01       	movw	r8, r22
    31e6:	f7 01       	movw	r30, r14
    31e8:	93 81       	ldd	r25, Z+3	; 0x03
    31ea:	f1 01       	movw	r30, r2
    31ec:	93 fd       	sbrc	r25, 3
    31ee:	85 91       	lpm	r24, Z+
    31f0:	93 ff       	sbrs	r25, 3
    31f2:	81 91       	ld	r24, Z+
    31f4:	1f 01       	movw	r2, r30
    31f6:	88 23       	and	r24, r24
    31f8:	09 f4       	brne	.+2      	; 0x31fc <vfprintf+0x3c>
    31fa:	53 c3       	rjmp	.+1702   	; 0x38a2 <vfprintf+0x6e2>
    31fc:	85 32       	cpi	r24, 0x25	; 37
    31fe:	39 f4       	brne	.+14     	; 0x320e <vfprintf+0x4e>
    3200:	93 fd       	sbrc	r25, 3
    3202:	85 91       	lpm	r24, Z+
    3204:	93 ff       	sbrs	r25, 3
    3206:	81 91       	ld	r24, Z+
    3208:	1f 01       	movw	r2, r30
    320a:	85 32       	cpi	r24, 0x25	; 37
    320c:	39 f4       	brne	.+14     	; 0x321c <vfprintf+0x5c>
    320e:	b7 01       	movw	r22, r14
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3216:	56 01       	movw	r10, r12
    3218:	65 01       	movw	r12, r10
    321a:	e5 cf       	rjmp	.-54     	; 0x31e6 <vfprintf+0x26>
    321c:	10 e0       	ldi	r17, 0x00	; 0
    321e:	51 2c       	mov	r5, r1
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	20 32       	cpi	r18, 0x20	; 32
    3224:	a0 f4       	brcc	.+40     	; 0x324e <vfprintf+0x8e>
    3226:	8b 32       	cpi	r24, 0x2B	; 43
    3228:	69 f0       	breq	.+26     	; 0x3244 <vfprintf+0x84>
    322a:	30 f4       	brcc	.+12     	; 0x3238 <vfprintf+0x78>
    322c:	80 32       	cpi	r24, 0x20	; 32
    322e:	59 f0       	breq	.+22     	; 0x3246 <vfprintf+0x86>
    3230:	83 32       	cpi	r24, 0x23	; 35
    3232:	69 f4       	brne	.+26     	; 0x324e <vfprintf+0x8e>
    3234:	20 61       	ori	r18, 0x10	; 16
    3236:	2c c0       	rjmp	.+88     	; 0x3290 <vfprintf+0xd0>
    3238:	8d 32       	cpi	r24, 0x2D	; 45
    323a:	39 f0       	breq	.+14     	; 0x324a <vfprintf+0x8a>
    323c:	80 33       	cpi	r24, 0x30	; 48
    323e:	39 f4       	brne	.+14     	; 0x324e <vfprintf+0x8e>
    3240:	21 60       	ori	r18, 0x01	; 1
    3242:	26 c0       	rjmp	.+76     	; 0x3290 <vfprintf+0xd0>
    3244:	22 60       	ori	r18, 0x02	; 2
    3246:	24 60       	ori	r18, 0x04	; 4
    3248:	23 c0       	rjmp	.+70     	; 0x3290 <vfprintf+0xd0>
    324a:	28 60       	ori	r18, 0x08	; 8
    324c:	21 c0       	rjmp	.+66     	; 0x3290 <vfprintf+0xd0>
    324e:	27 fd       	sbrc	r18, 7
    3250:	27 c0       	rjmp	.+78     	; 0x32a0 <vfprintf+0xe0>
    3252:	30 ed       	ldi	r19, 0xD0	; 208
    3254:	38 0f       	add	r19, r24
    3256:	3a 30       	cpi	r19, 0x0A	; 10
    3258:	78 f4       	brcc	.+30     	; 0x3278 <vfprintf+0xb8>
    325a:	26 ff       	sbrs	r18, 6
    325c:	06 c0       	rjmp	.+12     	; 0x326a <vfprintf+0xaa>
    325e:	fa e0       	ldi	r31, 0x0A	; 10
    3260:	1f 9f       	mul	r17, r31
    3262:	30 0d       	add	r19, r0
    3264:	11 24       	eor	r1, r1
    3266:	13 2f       	mov	r17, r19
    3268:	13 c0       	rjmp	.+38     	; 0x3290 <vfprintf+0xd0>
    326a:	6a e0       	ldi	r22, 0x0A	; 10
    326c:	56 9e       	mul	r5, r22
    326e:	30 0d       	add	r19, r0
    3270:	11 24       	eor	r1, r1
    3272:	53 2e       	mov	r5, r19
    3274:	20 62       	ori	r18, 0x20	; 32
    3276:	0c c0       	rjmp	.+24     	; 0x3290 <vfprintf+0xd0>
    3278:	8e 32       	cpi	r24, 0x2E	; 46
    327a:	21 f4       	brne	.+8      	; 0x3284 <vfprintf+0xc4>
    327c:	26 fd       	sbrc	r18, 6
    327e:	11 c3       	rjmp	.+1570   	; 0x38a2 <vfprintf+0x6e2>
    3280:	20 64       	ori	r18, 0x40	; 64
    3282:	06 c0       	rjmp	.+12     	; 0x3290 <vfprintf+0xd0>
    3284:	8c 36       	cpi	r24, 0x6C	; 108
    3286:	11 f4       	brne	.+4      	; 0x328c <vfprintf+0xcc>
    3288:	20 68       	ori	r18, 0x80	; 128
    328a:	02 c0       	rjmp	.+4      	; 0x3290 <vfprintf+0xd0>
    328c:	88 36       	cpi	r24, 0x68	; 104
    328e:	41 f4       	brne	.+16     	; 0x32a0 <vfprintf+0xe0>
    3290:	f1 01       	movw	r30, r2
    3292:	93 fd       	sbrc	r25, 3
    3294:	85 91       	lpm	r24, Z+
    3296:	93 ff       	sbrs	r25, 3
    3298:	81 91       	ld	r24, Z+
    329a:	1f 01       	movw	r2, r30
    329c:	81 11       	cpse	r24, r1
    329e:	c1 cf       	rjmp	.-126    	; 0x3222 <vfprintf+0x62>
    32a0:	9b eb       	ldi	r25, 0xBB	; 187
    32a2:	98 0f       	add	r25, r24
    32a4:	93 30       	cpi	r25, 0x03	; 3
    32a6:	18 f4       	brcc	.+6      	; 0x32ae <vfprintf+0xee>
    32a8:	20 61       	ori	r18, 0x10	; 16
    32aa:	80 5e       	subi	r24, 0xE0	; 224
    32ac:	06 c0       	rjmp	.+12     	; 0x32ba <vfprintf+0xfa>
    32ae:	9b e9       	ldi	r25, 0x9B	; 155
    32b0:	98 0f       	add	r25, r24
    32b2:	93 30       	cpi	r25, 0x03	; 3
    32b4:	08 f0       	brcs	.+2      	; 0x32b8 <vfprintf+0xf8>
    32b6:	aa c1       	rjmp	.+852    	; 0x360c <vfprintf+0x44c>
    32b8:	2f 7e       	andi	r18, 0xEF	; 239
    32ba:	26 ff       	sbrs	r18, 6
    32bc:	16 e0       	ldi	r17, 0x06	; 6
    32be:	2f 73       	andi	r18, 0x3F	; 63
    32c0:	72 2e       	mov	r7, r18
    32c2:	85 36       	cpi	r24, 0x65	; 101
    32c4:	21 f4       	brne	.+8      	; 0x32ce <vfprintf+0x10e>
    32c6:	f2 2f       	mov	r31, r18
    32c8:	f0 64       	ori	r31, 0x40	; 64
    32ca:	7f 2e       	mov	r7, r31
    32cc:	08 c0       	rjmp	.+16     	; 0x32de <vfprintf+0x11e>
    32ce:	86 36       	cpi	r24, 0x66	; 102
    32d0:	21 f4       	brne	.+8      	; 0x32da <vfprintf+0x11a>
    32d2:	62 2f       	mov	r22, r18
    32d4:	60 68       	ori	r22, 0x80	; 128
    32d6:	76 2e       	mov	r7, r22
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <vfprintf+0x11e>
    32da:	11 11       	cpse	r17, r1
    32dc:	11 50       	subi	r17, 0x01	; 1
    32de:	77 fe       	sbrs	r7, 7
    32e0:	07 c0       	rjmp	.+14     	; 0x32f0 <vfprintf+0x130>
    32e2:	1c 33       	cpi	r17, 0x3C	; 60
    32e4:	48 f4       	brcc	.+18     	; 0x32f8 <vfprintf+0x138>
    32e6:	44 24       	eor	r4, r4
    32e8:	43 94       	inc	r4
    32ea:	41 0e       	add	r4, r17
    32ec:	27 e0       	ldi	r18, 0x07	; 7
    32ee:	0b c0       	rjmp	.+22     	; 0x3306 <vfprintf+0x146>
    32f0:	18 30       	cpi	r17, 0x08	; 8
    32f2:	30 f4       	brcc	.+12     	; 0x3300 <vfprintf+0x140>
    32f4:	21 2f       	mov	r18, r17
    32f6:	06 c0       	rjmp	.+12     	; 0x3304 <vfprintf+0x144>
    32f8:	27 e0       	ldi	r18, 0x07	; 7
    32fa:	4c e3       	ldi	r20, 0x3C	; 60
    32fc:	44 2e       	mov	r4, r20
    32fe:	03 c0       	rjmp	.+6      	; 0x3306 <vfprintf+0x146>
    3300:	27 e0       	ldi	r18, 0x07	; 7
    3302:	17 e0       	ldi	r17, 0x07	; 7
    3304:	41 2c       	mov	r4, r1
    3306:	56 01       	movw	r10, r12
    3308:	74 e0       	ldi	r23, 0x04	; 4
    330a:	a7 0e       	add	r10, r23
    330c:	b1 1c       	adc	r11, r1
    330e:	f6 01       	movw	r30, r12
    3310:	60 81       	ld	r22, Z
    3312:	71 81       	ldd	r23, Z+1	; 0x01
    3314:	82 81       	ldd	r24, Z+2	; 0x02
    3316:	93 81       	ldd	r25, Z+3	; 0x03
    3318:	04 2d       	mov	r16, r4
    331a:	a4 01       	movw	r20, r8
    331c:	0e 94 c9 20 	call	0x4192	; 0x4192 <__ftoa_engine>
    3320:	6c 01       	movw	r12, r24
    3322:	09 81       	ldd	r16, Y+1	; 0x01
    3324:	00 ff       	sbrs	r16, 0
    3326:	02 c0       	rjmp	.+4      	; 0x332c <vfprintf+0x16c>
    3328:	03 ff       	sbrs	r16, 3
    332a:	06 c0       	rjmp	.+12     	; 0x3338 <vfprintf+0x178>
    332c:	71 fc       	sbrc	r7, 1
    332e:	07 c0       	rjmp	.+14     	; 0x333e <vfprintf+0x17e>
    3330:	72 fc       	sbrc	r7, 2
    3332:	08 c0       	rjmp	.+16     	; 0x3344 <vfprintf+0x184>
    3334:	61 2c       	mov	r6, r1
    3336:	08 c0       	rjmp	.+16     	; 0x3348 <vfprintf+0x188>
    3338:	3d e2       	ldi	r19, 0x2D	; 45
    333a:	63 2e       	mov	r6, r19
    333c:	05 c0       	rjmp	.+10     	; 0x3348 <vfprintf+0x188>
    333e:	2b e2       	ldi	r18, 0x2B	; 43
    3340:	62 2e       	mov	r6, r18
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <vfprintf+0x188>
    3344:	90 e2       	ldi	r25, 0x20	; 32
    3346:	69 2e       	mov	r6, r25
    3348:	80 2f       	mov	r24, r16
    334a:	8c 70       	andi	r24, 0x0C	; 12
    334c:	99 f1       	breq	.+102    	; 0x33b4 <vfprintf+0x1f4>
    334e:	66 20       	and	r6, r6
    3350:	11 f0       	breq	.+4      	; 0x3356 <vfprintf+0x196>
    3352:	84 e0       	ldi	r24, 0x04	; 4
    3354:	01 c0       	rjmp	.+2      	; 0x3358 <vfprintf+0x198>
    3356:	83 e0       	ldi	r24, 0x03	; 3
    3358:	85 15       	cp	r24, r5
    335a:	10 f0       	brcs	.+4      	; 0x3360 <vfprintf+0x1a0>
    335c:	51 2c       	mov	r5, r1
    335e:	0b c0       	rjmp	.+22     	; 0x3376 <vfprintf+0x1b6>
    3360:	58 1a       	sub	r5, r24
    3362:	73 fc       	sbrc	r7, 3
    3364:	08 c0       	rjmp	.+16     	; 0x3376 <vfprintf+0x1b6>
    3366:	b7 01       	movw	r22, r14
    3368:	80 e2       	ldi	r24, 0x20	; 32
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3370:	5a 94       	dec	r5
    3372:	c9 f7       	brne	.-14     	; 0x3366 <vfprintf+0x1a6>
    3374:	f3 cf       	rjmp	.-26     	; 0x335c <vfprintf+0x19c>
    3376:	66 20       	and	r6, r6
    3378:	29 f0       	breq	.+10     	; 0x3384 <vfprintf+0x1c4>
    337a:	b7 01       	movw	r22, r14
    337c:	86 2d       	mov	r24, r6
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3384:	03 fd       	sbrc	r16, 3
    3386:	03 c0       	rjmp	.+6      	; 0x338e <vfprintf+0x1ce>
    3388:	04 e4       	ldi	r16, 0x44	; 68
    338a:	12 e0       	ldi	r17, 0x02	; 2
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <vfprintf+0x1d2>
    338e:	00 e4       	ldi	r16, 0x40	; 64
    3390:	12 e0       	ldi	r17, 0x02	; 2
    3392:	f7 2d       	mov	r31, r7
    3394:	f0 71       	andi	r31, 0x10	; 16
    3396:	7f 2e       	mov	r7, r31
    3398:	f8 01       	movw	r30, r16
    339a:	84 91       	lpm	r24, Z
    339c:	88 23       	and	r24, r24
    339e:	09 f4       	brne	.+2      	; 0x33a2 <vfprintf+0x1e2>
    33a0:	76 c2       	rjmp	.+1260   	; 0x388e <vfprintf+0x6ce>
    33a2:	71 10       	cpse	r7, r1
    33a4:	80 52       	subi	r24, 0x20	; 32
    33a6:	b7 01       	movw	r22, r14
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    33ae:	0f 5f       	subi	r16, 0xFF	; 255
    33b0:	1f 4f       	sbci	r17, 0xFF	; 255
    33b2:	f2 cf       	rjmp	.-28     	; 0x3398 <vfprintf+0x1d8>
    33b4:	77 fe       	sbrs	r7, 7
    33b6:	0f c0       	rjmp	.+30     	; 0x33d6 <vfprintf+0x216>
    33b8:	4c 0c       	add	r4, r12
    33ba:	04 ff       	sbrs	r16, 4
    33bc:	04 c0       	rjmp	.+8      	; 0x33c6 <vfprintf+0x206>
    33be:	8a 81       	ldd	r24, Y+2	; 0x02
    33c0:	81 33       	cpi	r24, 0x31	; 49
    33c2:	09 f4       	brne	.+2      	; 0x33c6 <vfprintf+0x206>
    33c4:	4a 94       	dec	r4
    33c6:	14 14       	cp	r1, r4
    33c8:	74 f5       	brge	.+92     	; 0x3426 <vfprintf+0x266>
    33ca:	f8 e0       	ldi	r31, 0x08	; 8
    33cc:	f4 15       	cp	r31, r4
    33ce:	78 f5       	brcc	.+94     	; 0x342e <vfprintf+0x26e>
    33d0:	88 e0       	ldi	r24, 0x08	; 8
    33d2:	48 2e       	mov	r4, r24
    33d4:	2c c0       	rjmp	.+88     	; 0x342e <vfprintf+0x26e>
    33d6:	76 fc       	sbrc	r7, 6
    33d8:	2a c0       	rjmp	.+84     	; 0x342e <vfprintf+0x26e>
    33da:	81 2f       	mov	r24, r17
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	8c 15       	cp	r24, r12
    33e0:	9d 05       	cpc	r25, r13
    33e2:	9c f0       	brlt	.+38     	; 0x340a <vfprintf+0x24a>
    33e4:	6c ef       	ldi	r22, 0xFC	; 252
    33e6:	c6 16       	cp	r12, r22
    33e8:	6f ef       	ldi	r22, 0xFF	; 255
    33ea:	d6 06       	cpc	r13, r22
    33ec:	74 f0       	brlt	.+28     	; 0x340a <vfprintf+0x24a>
    33ee:	77 2d       	mov	r23, r7
    33f0:	70 68       	ori	r23, 0x80	; 128
    33f2:	77 2e       	mov	r7, r23
    33f4:	0a c0       	rjmp	.+20     	; 0x340a <vfprintf+0x24a>
    33f6:	e2 e0       	ldi	r30, 0x02	; 2
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	ec 0f       	add	r30, r28
    33fc:	fd 1f       	adc	r31, r29
    33fe:	e1 0f       	add	r30, r17
    3400:	f1 1d       	adc	r31, r1
    3402:	80 81       	ld	r24, Z
    3404:	80 33       	cpi	r24, 0x30	; 48
    3406:	19 f4       	brne	.+6      	; 0x340e <vfprintf+0x24e>
    3408:	11 50       	subi	r17, 0x01	; 1
    340a:	11 11       	cpse	r17, r1
    340c:	f4 cf       	rjmp	.-24     	; 0x33f6 <vfprintf+0x236>
    340e:	77 fe       	sbrs	r7, 7
    3410:	0e c0       	rjmp	.+28     	; 0x342e <vfprintf+0x26e>
    3412:	44 24       	eor	r4, r4
    3414:	43 94       	inc	r4
    3416:	41 0e       	add	r4, r17
    3418:	81 2f       	mov	r24, r17
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	c8 16       	cp	r12, r24
    341e:	d9 06       	cpc	r13, r25
    3420:	2c f4       	brge	.+10     	; 0x342c <vfprintf+0x26c>
    3422:	1c 19       	sub	r17, r12
    3424:	04 c0       	rjmp	.+8      	; 0x342e <vfprintf+0x26e>
    3426:	44 24       	eor	r4, r4
    3428:	43 94       	inc	r4
    342a:	01 c0       	rjmp	.+2      	; 0x342e <vfprintf+0x26e>
    342c:	10 e0       	ldi	r17, 0x00	; 0
    342e:	77 fe       	sbrs	r7, 7
    3430:	07 c0       	rjmp	.+14     	; 0x3440 <vfprintf+0x280>
    3432:	1c 14       	cp	r1, r12
    3434:	1d 04       	cpc	r1, r13
    3436:	3c f4       	brge	.+14     	; 0x3446 <vfprintf+0x286>
    3438:	96 01       	movw	r18, r12
    343a:	2f 5f       	subi	r18, 0xFF	; 255
    343c:	3f 4f       	sbci	r19, 0xFF	; 255
    343e:	05 c0       	rjmp	.+10     	; 0x344a <vfprintf+0x28a>
    3440:	25 e0       	ldi	r18, 0x05	; 5
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	02 c0       	rjmp	.+4      	; 0x344a <vfprintf+0x28a>
    3446:	21 e0       	ldi	r18, 0x01	; 1
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	66 20       	and	r6, r6
    344c:	11 f0       	breq	.+4      	; 0x3452 <vfprintf+0x292>
    344e:	2f 5f       	subi	r18, 0xFF	; 255
    3450:	3f 4f       	sbci	r19, 0xFF	; 255
    3452:	11 23       	and	r17, r17
    3454:	31 f0       	breq	.+12     	; 0x3462 <vfprintf+0x2a2>
    3456:	41 2f       	mov	r20, r17
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	4f 5f       	subi	r20, 0xFF	; 255
    345c:	5f 4f       	sbci	r21, 0xFF	; 255
    345e:	24 0f       	add	r18, r20
    3460:	35 1f       	adc	r19, r21
    3462:	45 2d       	mov	r20, r5
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	24 17       	cp	r18, r20
    3468:	35 07       	cpc	r19, r21
    346a:	14 f4       	brge	.+4      	; 0x3470 <vfprintf+0x2b0>
    346c:	52 1a       	sub	r5, r18
    346e:	01 c0       	rjmp	.+2      	; 0x3472 <vfprintf+0x2b2>
    3470:	51 2c       	mov	r5, r1
    3472:	87 2d       	mov	r24, r7
    3474:	89 70       	andi	r24, 0x09	; 9
    3476:	49 f4       	brne	.+18     	; 0x348a <vfprintf+0x2ca>
    3478:	55 20       	and	r5, r5
    347a:	39 f0       	breq	.+14     	; 0x348a <vfprintf+0x2ca>
    347c:	b7 01       	movw	r22, r14
    347e:	80 e2       	ldi	r24, 0x20	; 32
    3480:	90 e0       	ldi	r25, 0x00	; 0
    3482:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3486:	5a 94       	dec	r5
    3488:	f7 cf       	rjmp	.-18     	; 0x3478 <vfprintf+0x2b8>
    348a:	66 20       	and	r6, r6
    348c:	29 f0       	breq	.+10     	; 0x3498 <vfprintf+0x2d8>
    348e:	b7 01       	movw	r22, r14
    3490:	86 2d       	mov	r24, r6
    3492:	90 e0       	ldi	r25, 0x00	; 0
    3494:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3498:	73 fc       	sbrc	r7, 3
    349a:	09 c0       	rjmp	.+18     	; 0x34ae <vfprintf+0x2ee>
    349c:	55 20       	and	r5, r5
    349e:	39 f0       	breq	.+14     	; 0x34ae <vfprintf+0x2ee>
    34a0:	b7 01       	movw	r22, r14
    34a2:	80 e3       	ldi	r24, 0x30	; 48
    34a4:	90 e0       	ldi	r25, 0x00	; 0
    34a6:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    34aa:	5a 94       	dec	r5
    34ac:	f7 cf       	rjmp	.-18     	; 0x349c <vfprintf+0x2dc>
    34ae:	77 fe       	sbrs	r7, 7
    34b0:	5f c0       	rjmp	.+190    	; 0x3570 <vfprintf+0x3b0>
    34b2:	9c 2d       	mov	r25, r12
    34b4:	8d 2d       	mov	r24, r13
    34b6:	d7 fe       	sbrs	r13, 7
    34b8:	02 c0       	rjmp	.+4      	; 0x34be <vfprintf+0x2fe>
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	69 2e       	mov	r6, r25
    34c0:	78 2e       	mov	r7, r24
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	50 e0       	ldi	r21, 0x00	; 0
    34c6:	c6 01       	movw	r24, r12
    34c8:	84 19       	sub	r24, r4
    34ca:	91 09       	sbc	r25, r1
    34cc:	9d 87       	std	Y+13, r25	; 0x0d
    34ce:	8c 87       	std	Y+12, r24	; 0x0c
    34d0:	96 01       	movw	r18, r12
    34d2:	26 19       	sub	r18, r6
    34d4:	37 09       	sbc	r19, r7
    34d6:	28 0d       	add	r18, r8
    34d8:	39 1d       	adc	r19, r9
    34da:	81 2f       	mov	r24, r17
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	ee 27       	eor	r30, r30
    34e0:	ff 27       	eor	r31, r31
    34e2:	e8 1b       	sub	r30, r24
    34e4:	f9 0b       	sbc	r31, r25
    34e6:	ff 87       	std	Y+15, r31	; 0x0f
    34e8:	ee 87       	std	Y+14, r30	; 0x0e
    34ea:	ff ef       	ldi	r31, 0xFF	; 255
    34ec:	6f 16       	cp	r6, r31
    34ee:	7f 06       	cpc	r7, r31
    34f0:	69 f4       	brne	.+26     	; 0x350c <vfprintf+0x34c>
    34f2:	b7 01       	movw	r22, r14
    34f4:	8e e2       	ldi	r24, 0x2E	; 46
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	2b 8b       	std	Y+19, r18	; 0x13
    34fa:	3a 8b       	std	Y+18, r19	; 0x12
    34fc:	48 8b       	std	Y+16, r20	; 0x10
    34fe:	59 8b       	std	Y+17, r21	; 0x11
    3500:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3504:	59 89       	ldd	r21, Y+17	; 0x11
    3506:	48 89       	ldd	r20, Y+16	; 0x10
    3508:	3a 89       	ldd	r19, Y+18	; 0x12
    350a:	2b 89       	ldd	r18, Y+19	; 0x13
    350c:	c6 14       	cp	r12, r6
    350e:	d7 04       	cpc	r13, r7
    3510:	54 f0       	brlt	.+20     	; 0x3526 <vfprintf+0x366>
    3512:	6c 85       	ldd	r22, Y+12	; 0x0c
    3514:	7d 85       	ldd	r23, Y+13	; 0x0d
    3516:	66 15       	cp	r22, r6
    3518:	77 05       	cpc	r23, r7
    351a:	2c f4       	brge	.+10     	; 0x3526 <vfprintf+0x366>
    351c:	f9 01       	movw	r30, r18
    351e:	e4 0f       	add	r30, r20
    3520:	f5 1f       	adc	r31, r21
    3522:	81 81       	ldd	r24, Z+1	; 0x01
    3524:	01 c0       	rjmp	.+2      	; 0x3528 <vfprintf+0x368>
    3526:	80 e3       	ldi	r24, 0x30	; 48
    3528:	71 e0       	ldi	r23, 0x01	; 1
    352a:	67 1a       	sub	r6, r23
    352c:	71 08       	sbc	r7, r1
    352e:	4f 5f       	subi	r20, 0xFF	; 255
    3530:	5f 4f       	sbci	r21, 0xFF	; 255
    3532:	ee 85       	ldd	r30, Y+14	; 0x0e
    3534:	ff 85       	ldd	r31, Y+15	; 0x0f
    3536:	6e 16       	cp	r6, r30
    3538:	7f 06       	cpc	r7, r31
    353a:	6c f0       	brlt	.+26     	; 0x3556 <vfprintf+0x396>
    353c:	b7 01       	movw	r22, r14
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	2b 8b       	std	Y+19, r18	; 0x13
    3542:	3a 8b       	std	Y+18, r19	; 0x12
    3544:	48 8b       	std	Y+16, r20	; 0x10
    3546:	59 8b       	std	Y+17, r21	; 0x11
    3548:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    354c:	2b 89       	ldd	r18, Y+19	; 0x13
    354e:	3a 89       	ldd	r19, Y+18	; 0x12
    3550:	48 89       	ldd	r20, Y+16	; 0x10
    3552:	59 89       	ldd	r21, Y+17	; 0x11
    3554:	ca cf       	rjmp	.-108    	; 0x34ea <vfprintf+0x32a>
    3556:	6c 14       	cp	r6, r12
    3558:	7d 04       	cpc	r7, r13
    355a:	39 f4       	brne	.+14     	; 0x356a <vfprintf+0x3aa>
    355c:	9a 81       	ldd	r25, Y+2	; 0x02
    355e:	96 33       	cpi	r25, 0x36	; 54
    3560:	18 f4       	brcc	.+6      	; 0x3568 <vfprintf+0x3a8>
    3562:	95 33       	cpi	r25, 0x35	; 53
    3564:	11 f4       	brne	.+4      	; 0x356a <vfprintf+0x3aa>
    3566:	04 ff       	sbrs	r16, 4
    3568:	81 e3       	ldi	r24, 0x31	; 49
    356a:	b7 01       	movw	r22, r14
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	4b c0       	rjmp	.+150    	; 0x3606 <vfprintf+0x446>
    3570:	8a 81       	ldd	r24, Y+2	; 0x02
    3572:	81 33       	cpi	r24, 0x31	; 49
    3574:	09 f0       	breq	.+2      	; 0x3578 <vfprintf+0x3b8>
    3576:	0f 7e       	andi	r16, 0xEF	; 239
    3578:	b7 01       	movw	r22, r14
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3580:	11 11       	cpse	r17, r1
    3582:	05 c0       	rjmp	.+10     	; 0x358e <vfprintf+0x3ce>
    3584:	74 fe       	sbrs	r7, 4
    3586:	18 c0       	rjmp	.+48     	; 0x35b8 <vfprintf+0x3f8>
    3588:	85 e4       	ldi	r24, 0x45	; 69
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	17 c0       	rjmp	.+46     	; 0x35bc <vfprintf+0x3fc>
    358e:	b7 01       	movw	r22, r14
    3590:	8e e2       	ldi	r24, 0x2E	; 46
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3598:	82 e0       	ldi	r24, 0x02	; 2
    359a:	66 24       	eor	r6, r6
    359c:	63 94       	inc	r6
    359e:	68 0e       	add	r6, r24
    35a0:	f4 01       	movw	r30, r8
    35a2:	e8 0f       	add	r30, r24
    35a4:	f1 1d       	adc	r31, r1
    35a6:	80 81       	ld	r24, Z
    35a8:	b7 01       	movw	r22, r14
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    35b0:	11 50       	subi	r17, 0x01	; 1
    35b2:	41 f3       	breq	.-48     	; 0x3584 <vfprintf+0x3c4>
    35b4:	86 2d       	mov	r24, r6
    35b6:	f1 cf       	rjmp	.-30     	; 0x359a <vfprintf+0x3da>
    35b8:	85 e6       	ldi	r24, 0x65	; 101
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	b7 01       	movw	r22, r14
    35be:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    35c2:	d7 fc       	sbrc	r13, 7
    35c4:	05 c0       	rjmp	.+10     	; 0x35d0 <vfprintf+0x410>
    35c6:	c1 14       	cp	r12, r1
    35c8:	d1 04       	cpc	r13, r1
    35ca:	39 f4       	brne	.+14     	; 0x35da <vfprintf+0x41a>
    35cc:	04 ff       	sbrs	r16, 4
    35ce:	05 c0       	rjmp	.+10     	; 0x35da <vfprintf+0x41a>
    35d0:	d1 94       	neg	r13
    35d2:	c1 94       	neg	r12
    35d4:	d1 08       	sbc	r13, r1
    35d6:	8d e2       	ldi	r24, 0x2D	; 45
    35d8:	01 c0       	rjmp	.+2      	; 0x35dc <vfprintf+0x41c>
    35da:	8b e2       	ldi	r24, 0x2B	; 43
    35dc:	b7 01       	movw	r22, r14
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    35e4:	80 e3       	ldi	r24, 0x30	; 48
    35e6:	6a e0       	ldi	r22, 0x0A	; 10
    35e8:	c6 16       	cp	r12, r22
    35ea:	d1 04       	cpc	r13, r1
    35ec:	2c f0       	brlt	.+10     	; 0x35f8 <vfprintf+0x438>
    35ee:	8f 5f       	subi	r24, 0xFF	; 255
    35f0:	fa e0       	ldi	r31, 0x0A	; 10
    35f2:	cf 1a       	sub	r12, r31
    35f4:	d1 08       	sbc	r13, r1
    35f6:	f7 cf       	rjmp	.-18     	; 0x35e6 <vfprintf+0x426>
    35f8:	b7 01       	movw	r22, r14
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3600:	b7 01       	movw	r22, r14
    3602:	c6 01       	movw	r24, r12
    3604:	c0 96       	adiw	r24, 0x30	; 48
    3606:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    360a:	41 c1       	rjmp	.+642    	; 0x388e <vfprintf+0x6ce>
    360c:	83 36       	cpi	r24, 0x63	; 99
    360e:	31 f0       	breq	.+12     	; 0x361c <vfprintf+0x45c>
    3610:	83 37       	cpi	r24, 0x73	; 115
    3612:	79 f0       	breq	.+30     	; 0x3632 <vfprintf+0x472>
    3614:	83 35       	cpi	r24, 0x53	; 83
    3616:	09 f0       	breq	.+2      	; 0x361a <vfprintf+0x45a>
    3618:	58 c0       	rjmp	.+176    	; 0x36ca <vfprintf+0x50a>
    361a:	21 c0       	rjmp	.+66     	; 0x365e <vfprintf+0x49e>
    361c:	56 01       	movw	r10, r12
    361e:	72 e0       	ldi	r23, 0x02	; 2
    3620:	a7 0e       	add	r10, r23
    3622:	b1 1c       	adc	r11, r1
    3624:	f6 01       	movw	r30, r12
    3626:	80 81       	ld	r24, Z
    3628:	89 83       	std	Y+1, r24	; 0x01
    362a:	01 e0       	ldi	r16, 0x01	; 1
    362c:	10 e0       	ldi	r17, 0x00	; 0
    362e:	64 01       	movw	r12, r8
    3630:	14 c0       	rjmp	.+40     	; 0x365a <vfprintf+0x49a>
    3632:	56 01       	movw	r10, r12
    3634:	f2 e0       	ldi	r31, 0x02	; 2
    3636:	af 0e       	add	r10, r31
    3638:	b1 1c       	adc	r11, r1
    363a:	f6 01       	movw	r30, r12
    363c:	c0 80       	ld	r12, Z
    363e:	d1 80       	ldd	r13, Z+1	; 0x01
    3640:	26 ff       	sbrs	r18, 6
    3642:	03 c0       	rjmp	.+6      	; 0x364a <vfprintf+0x48a>
    3644:	61 2f       	mov	r22, r17
    3646:	70 e0       	ldi	r23, 0x00	; 0
    3648:	02 c0       	rjmp	.+4      	; 0x364e <vfprintf+0x48e>
    364a:	6f ef       	ldi	r22, 0xFF	; 255
    364c:	7f ef       	ldi	r23, 0xFF	; 255
    364e:	c6 01       	movw	r24, r12
    3650:	2b 8b       	std	Y+19, r18	; 0x13
    3652:	0e 94 c3 21 	call	0x4386	; 0x4386 <strnlen>
    3656:	8c 01       	movw	r16, r24
    3658:	2b 89       	ldd	r18, Y+19	; 0x13
    365a:	2f 77       	andi	r18, 0x7F	; 127
    365c:	15 c0       	rjmp	.+42     	; 0x3688 <vfprintf+0x4c8>
    365e:	56 01       	movw	r10, r12
    3660:	f2 e0       	ldi	r31, 0x02	; 2
    3662:	af 0e       	add	r10, r31
    3664:	b1 1c       	adc	r11, r1
    3666:	f6 01       	movw	r30, r12
    3668:	c0 80       	ld	r12, Z
    366a:	d1 80       	ldd	r13, Z+1	; 0x01
    366c:	26 ff       	sbrs	r18, 6
    366e:	03 c0       	rjmp	.+6      	; 0x3676 <vfprintf+0x4b6>
    3670:	61 2f       	mov	r22, r17
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	02 c0       	rjmp	.+4      	; 0x367a <vfprintf+0x4ba>
    3676:	6f ef       	ldi	r22, 0xFF	; 255
    3678:	7f ef       	ldi	r23, 0xFF	; 255
    367a:	c6 01       	movw	r24, r12
    367c:	2b 8b       	std	Y+19, r18	; 0x13
    367e:	0e 94 a1 21 	call	0x4342	; 0x4342 <strnlen_P>
    3682:	8c 01       	movw	r16, r24
    3684:	2b 89       	ldd	r18, Y+19	; 0x13
    3686:	20 68       	ori	r18, 0x80	; 128
    3688:	72 2e       	mov	r7, r18
    368a:	23 fd       	sbrc	r18, 3
    368c:	1a c0       	rjmp	.+52     	; 0x36c2 <vfprintf+0x502>
    368e:	85 2d       	mov	r24, r5
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	08 17       	cp	r16, r24
    3694:	19 07       	cpc	r17, r25
    3696:	a8 f4       	brcc	.+42     	; 0x36c2 <vfprintf+0x502>
    3698:	b7 01       	movw	r22, r14
    369a:	80 e2       	ldi	r24, 0x20	; 32
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    36a2:	5a 94       	dec	r5
    36a4:	f4 cf       	rjmp	.-24     	; 0x368e <vfprintf+0x4ce>
    36a6:	f6 01       	movw	r30, r12
    36a8:	77 fc       	sbrc	r7, 7
    36aa:	85 91       	lpm	r24, Z+
    36ac:	77 fe       	sbrs	r7, 7
    36ae:	81 91       	ld	r24, Z+
    36b0:	6f 01       	movw	r12, r30
    36b2:	b7 01       	movw	r22, r14
    36b4:	90 e0       	ldi	r25, 0x00	; 0
    36b6:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    36ba:	51 10       	cpse	r5, r1
    36bc:	5a 94       	dec	r5
    36be:	01 50       	subi	r16, 0x01	; 1
    36c0:	11 09       	sbc	r17, r1
    36c2:	01 15       	cp	r16, r1
    36c4:	11 05       	cpc	r17, r1
    36c6:	79 f7       	brne	.-34     	; 0x36a6 <vfprintf+0x4e6>
    36c8:	e2 c0       	rjmp	.+452    	; 0x388e <vfprintf+0x6ce>
    36ca:	84 36       	cpi	r24, 0x64	; 100
    36cc:	11 f0       	breq	.+4      	; 0x36d2 <vfprintf+0x512>
    36ce:	89 36       	cpi	r24, 0x69	; 105
    36d0:	51 f5       	brne	.+84     	; 0x3726 <vfprintf+0x566>
    36d2:	56 01       	movw	r10, r12
    36d4:	27 ff       	sbrs	r18, 7
    36d6:	09 c0       	rjmp	.+18     	; 0x36ea <vfprintf+0x52a>
    36d8:	f4 e0       	ldi	r31, 0x04	; 4
    36da:	af 0e       	add	r10, r31
    36dc:	b1 1c       	adc	r11, r1
    36de:	f6 01       	movw	r30, r12
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	82 81       	ldd	r24, Z+2	; 0x02
    36e6:	93 81       	ldd	r25, Z+3	; 0x03
    36e8:	0a c0       	rjmp	.+20     	; 0x36fe <vfprintf+0x53e>
    36ea:	f2 e0       	ldi	r31, 0x02	; 2
    36ec:	af 0e       	add	r10, r31
    36ee:	b1 1c       	adc	r11, r1
    36f0:	f6 01       	movw	r30, r12
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	88 27       	eor	r24, r24
    36f8:	77 fd       	sbrc	r23, 7
    36fa:	80 95       	com	r24
    36fc:	98 2f       	mov	r25, r24
    36fe:	02 2f       	mov	r16, r18
    3700:	0f 76       	andi	r16, 0x6F	; 111
    3702:	97 ff       	sbrs	r25, 7
    3704:	08 c0       	rjmp	.+16     	; 0x3716 <vfprintf+0x556>
    3706:	90 95       	com	r25
    3708:	80 95       	com	r24
    370a:	70 95       	com	r23
    370c:	61 95       	neg	r22
    370e:	7f 4f       	sbci	r23, 0xFF	; 255
    3710:	8f 4f       	sbci	r24, 0xFF	; 255
    3712:	9f 4f       	sbci	r25, 0xFF	; 255
    3714:	00 68       	ori	r16, 0x80	; 128
    3716:	2a e0       	ldi	r18, 0x0A	; 10
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	a4 01       	movw	r20, r8
    371c:	0e 94 76 22 	call	0x44ec	; 0x44ec <__ultoa_invert>
    3720:	c8 2e       	mov	r12, r24
    3722:	c8 18       	sub	r12, r8
    3724:	3e c0       	rjmp	.+124    	; 0x37a2 <vfprintf+0x5e2>
    3726:	02 2f       	mov	r16, r18
    3728:	85 37       	cpi	r24, 0x75	; 117
    372a:	21 f4       	brne	.+8      	; 0x3734 <vfprintf+0x574>
    372c:	0f 7e       	andi	r16, 0xEF	; 239
    372e:	2a e0       	ldi	r18, 0x0A	; 10
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	1d c0       	rjmp	.+58     	; 0x376e <vfprintf+0x5ae>
    3734:	09 7f       	andi	r16, 0xF9	; 249
    3736:	8f 36       	cpi	r24, 0x6F	; 111
    3738:	91 f0       	breq	.+36     	; 0x375e <vfprintf+0x59e>
    373a:	18 f4       	brcc	.+6      	; 0x3742 <vfprintf+0x582>
    373c:	88 35       	cpi	r24, 0x58	; 88
    373e:	59 f0       	breq	.+22     	; 0x3756 <vfprintf+0x596>
    3740:	b0 c0       	rjmp	.+352    	; 0x38a2 <vfprintf+0x6e2>
    3742:	80 37       	cpi	r24, 0x70	; 112
    3744:	19 f0       	breq	.+6      	; 0x374c <vfprintf+0x58c>
    3746:	88 37       	cpi	r24, 0x78	; 120
    3748:	11 f0       	breq	.+4      	; 0x374e <vfprintf+0x58e>
    374a:	ab c0       	rjmp	.+342    	; 0x38a2 <vfprintf+0x6e2>
    374c:	00 61       	ori	r16, 0x10	; 16
    374e:	04 ff       	sbrs	r16, 4
    3750:	09 c0       	rjmp	.+18     	; 0x3764 <vfprintf+0x5a4>
    3752:	04 60       	ori	r16, 0x04	; 4
    3754:	07 c0       	rjmp	.+14     	; 0x3764 <vfprintf+0x5a4>
    3756:	24 ff       	sbrs	r18, 4
    3758:	08 c0       	rjmp	.+16     	; 0x376a <vfprintf+0x5aa>
    375a:	06 60       	ori	r16, 0x06	; 6
    375c:	06 c0       	rjmp	.+12     	; 0x376a <vfprintf+0x5aa>
    375e:	28 e0       	ldi	r18, 0x08	; 8
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	05 c0       	rjmp	.+10     	; 0x376e <vfprintf+0x5ae>
    3764:	20 e1       	ldi	r18, 0x10	; 16
    3766:	30 e0       	ldi	r19, 0x00	; 0
    3768:	02 c0       	rjmp	.+4      	; 0x376e <vfprintf+0x5ae>
    376a:	20 e1       	ldi	r18, 0x10	; 16
    376c:	32 e0       	ldi	r19, 0x02	; 2
    376e:	56 01       	movw	r10, r12
    3770:	07 ff       	sbrs	r16, 7
    3772:	09 c0       	rjmp	.+18     	; 0x3786 <vfprintf+0x5c6>
    3774:	f4 e0       	ldi	r31, 0x04	; 4
    3776:	af 0e       	add	r10, r31
    3778:	b1 1c       	adc	r11, r1
    377a:	f6 01       	movw	r30, r12
    377c:	60 81       	ld	r22, Z
    377e:	71 81       	ldd	r23, Z+1	; 0x01
    3780:	82 81       	ldd	r24, Z+2	; 0x02
    3782:	93 81       	ldd	r25, Z+3	; 0x03
    3784:	08 c0       	rjmp	.+16     	; 0x3796 <vfprintf+0x5d6>
    3786:	f2 e0       	ldi	r31, 0x02	; 2
    3788:	af 0e       	add	r10, r31
    378a:	b1 1c       	adc	r11, r1
    378c:	f6 01       	movw	r30, r12
    378e:	60 81       	ld	r22, Z
    3790:	71 81       	ldd	r23, Z+1	; 0x01
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	a4 01       	movw	r20, r8
    3798:	0e 94 76 22 	call	0x44ec	; 0x44ec <__ultoa_invert>
    379c:	c8 2e       	mov	r12, r24
    379e:	c8 18       	sub	r12, r8
    37a0:	0f 77       	andi	r16, 0x7F	; 127
    37a2:	06 ff       	sbrs	r16, 6
    37a4:	0b c0       	rjmp	.+22     	; 0x37bc <vfprintf+0x5fc>
    37a6:	20 2f       	mov	r18, r16
    37a8:	2e 7f       	andi	r18, 0xFE	; 254
    37aa:	c1 16       	cp	r12, r17
    37ac:	50 f4       	brcc	.+20     	; 0x37c2 <vfprintf+0x602>
    37ae:	04 ff       	sbrs	r16, 4
    37b0:	0a c0       	rjmp	.+20     	; 0x37c6 <vfprintf+0x606>
    37b2:	02 fd       	sbrc	r16, 2
    37b4:	08 c0       	rjmp	.+16     	; 0x37c6 <vfprintf+0x606>
    37b6:	20 2f       	mov	r18, r16
    37b8:	2e 7e       	andi	r18, 0xEE	; 238
    37ba:	05 c0       	rjmp	.+10     	; 0x37c6 <vfprintf+0x606>
    37bc:	dc 2c       	mov	r13, r12
    37be:	20 2f       	mov	r18, r16
    37c0:	03 c0       	rjmp	.+6      	; 0x37c8 <vfprintf+0x608>
    37c2:	dc 2c       	mov	r13, r12
    37c4:	01 c0       	rjmp	.+2      	; 0x37c8 <vfprintf+0x608>
    37c6:	d1 2e       	mov	r13, r17
    37c8:	24 ff       	sbrs	r18, 4
    37ca:	0d c0       	rjmp	.+26     	; 0x37e6 <vfprintf+0x626>
    37cc:	fe 01       	movw	r30, r28
    37ce:	ec 0d       	add	r30, r12
    37d0:	f1 1d       	adc	r31, r1
    37d2:	80 81       	ld	r24, Z
    37d4:	80 33       	cpi	r24, 0x30	; 48
    37d6:	11 f4       	brne	.+4      	; 0x37dc <vfprintf+0x61c>
    37d8:	29 7e       	andi	r18, 0xE9	; 233
    37da:	09 c0       	rjmp	.+18     	; 0x37ee <vfprintf+0x62e>
    37dc:	22 ff       	sbrs	r18, 2
    37de:	06 c0       	rjmp	.+12     	; 0x37ec <vfprintf+0x62c>
    37e0:	d3 94       	inc	r13
    37e2:	d3 94       	inc	r13
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <vfprintf+0x62e>
    37e6:	82 2f       	mov	r24, r18
    37e8:	86 78       	andi	r24, 0x86	; 134
    37ea:	09 f0       	breq	.+2      	; 0x37ee <vfprintf+0x62e>
    37ec:	d3 94       	inc	r13
    37ee:	23 fd       	sbrc	r18, 3
    37f0:	13 c0       	rjmp	.+38     	; 0x3818 <vfprintf+0x658>
    37f2:	20 ff       	sbrs	r18, 0
    37f4:	06 c0       	rjmp	.+12     	; 0x3802 <vfprintf+0x642>
    37f6:	1c 2d       	mov	r17, r12
    37f8:	d5 14       	cp	r13, r5
    37fa:	18 f4       	brcc	.+6      	; 0x3802 <vfprintf+0x642>
    37fc:	15 0d       	add	r17, r5
    37fe:	1d 19       	sub	r17, r13
    3800:	d5 2c       	mov	r13, r5
    3802:	d5 14       	cp	r13, r5
    3804:	68 f4       	brcc	.+26     	; 0x3820 <vfprintf+0x660>
    3806:	b7 01       	movw	r22, r14
    3808:	80 e2       	ldi	r24, 0x20	; 32
    380a:	90 e0       	ldi	r25, 0x00	; 0
    380c:	2b 8b       	std	Y+19, r18	; 0x13
    380e:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3812:	d3 94       	inc	r13
    3814:	2b 89       	ldd	r18, Y+19	; 0x13
    3816:	f5 cf       	rjmp	.-22     	; 0x3802 <vfprintf+0x642>
    3818:	d5 14       	cp	r13, r5
    381a:	10 f4       	brcc	.+4      	; 0x3820 <vfprintf+0x660>
    381c:	5d 18       	sub	r5, r13
    381e:	01 c0       	rjmp	.+2      	; 0x3822 <vfprintf+0x662>
    3820:	51 2c       	mov	r5, r1
    3822:	24 ff       	sbrs	r18, 4
    3824:	12 c0       	rjmp	.+36     	; 0x384a <vfprintf+0x68a>
    3826:	b7 01       	movw	r22, r14
    3828:	80 e3       	ldi	r24, 0x30	; 48
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	2b 8b       	std	Y+19, r18	; 0x13
    382e:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3832:	2b 89       	ldd	r18, Y+19	; 0x13
    3834:	22 ff       	sbrs	r18, 2
    3836:	17 c0       	rjmp	.+46     	; 0x3866 <vfprintf+0x6a6>
    3838:	21 ff       	sbrs	r18, 1
    383a:	03 c0       	rjmp	.+6      	; 0x3842 <vfprintf+0x682>
    383c:	88 e5       	ldi	r24, 0x58	; 88
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	02 c0       	rjmp	.+4      	; 0x3846 <vfprintf+0x686>
    3842:	88 e7       	ldi	r24, 0x78	; 120
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	b7 01       	movw	r22, r14
    3848:	0c c0       	rjmp	.+24     	; 0x3862 <vfprintf+0x6a2>
    384a:	82 2f       	mov	r24, r18
    384c:	86 78       	andi	r24, 0x86	; 134
    384e:	59 f0       	breq	.+22     	; 0x3866 <vfprintf+0x6a6>
    3850:	21 fd       	sbrc	r18, 1
    3852:	02 c0       	rjmp	.+4      	; 0x3858 <vfprintf+0x698>
    3854:	80 e2       	ldi	r24, 0x20	; 32
    3856:	01 c0       	rjmp	.+2      	; 0x385a <vfprintf+0x69a>
    3858:	8b e2       	ldi	r24, 0x2B	; 43
    385a:	27 fd       	sbrc	r18, 7
    385c:	8d e2       	ldi	r24, 0x2D	; 45
    385e:	b7 01       	movw	r22, r14
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3866:	c1 16       	cp	r12, r17
    3868:	38 f4       	brcc	.+14     	; 0x3878 <vfprintf+0x6b8>
    386a:	b7 01       	movw	r22, r14
    386c:	80 e3       	ldi	r24, 0x30	; 48
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    3874:	11 50       	subi	r17, 0x01	; 1
    3876:	f7 cf       	rjmp	.-18     	; 0x3866 <vfprintf+0x6a6>
    3878:	ca 94       	dec	r12
    387a:	f4 01       	movw	r30, r8
    387c:	ec 0d       	add	r30, r12
    387e:	f1 1d       	adc	r31, r1
    3880:	80 81       	ld	r24, Z
    3882:	b7 01       	movw	r22, r14
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    388a:	c1 10       	cpse	r12, r1
    388c:	f5 cf       	rjmp	.-22     	; 0x3878 <vfprintf+0x6b8>
    388e:	55 20       	and	r5, r5
    3890:	09 f4       	brne	.+2      	; 0x3894 <vfprintf+0x6d4>
    3892:	c2 cc       	rjmp	.-1660   	; 0x3218 <vfprintf+0x58>
    3894:	b7 01       	movw	r22, r14
    3896:	80 e2       	ldi	r24, 0x20	; 32
    3898:	90 e0       	ldi	r25, 0x00	; 0
    389a:	0e 94 22 22 	call	0x4444	; 0x4444 <fputc>
    389e:	5a 94       	dec	r5
    38a0:	f6 cf       	rjmp	.-20     	; 0x388e <vfprintf+0x6ce>
    38a2:	f7 01       	movw	r30, r14
    38a4:	86 81       	ldd	r24, Z+6	; 0x06
    38a6:	97 81       	ldd	r25, Z+7	; 0x07
    38a8:	02 c0       	rjmp	.+4      	; 0x38ae <vfprintf+0x6ee>
    38aa:	8f ef       	ldi	r24, 0xFF	; 255
    38ac:	9f ef       	ldi	r25, 0xFF	; 255
    38ae:	63 96       	adiw	r28, 0x13	; 19
    38b0:	e2 e1       	ldi	r30, 0x12	; 18
    38b2:	0c 94 8c 1c 	jmp	0x3918	; 0x3918 <__epilogue_restores__>

000038b6 <__tablejump2__>:
    38b6:	ee 0f       	add	r30, r30
    38b8:	ff 1f       	adc	r31, r31

000038ba <__tablejump__>:
    38ba:	05 90       	lpm	r0, Z+
    38bc:	f4 91       	lpm	r31, Z
    38be:	e0 2d       	mov	r30, r0
    38c0:	09 94       	ijmp

000038c2 <__umulhisi3>:
    38c2:	a2 9f       	mul	r26, r18
    38c4:	b0 01       	movw	r22, r0
    38c6:	b3 9f       	mul	r27, r19
    38c8:	c0 01       	movw	r24, r0
    38ca:	a3 9f       	mul	r26, r19
    38cc:	70 0d       	add	r23, r0
    38ce:	81 1d       	adc	r24, r1
    38d0:	11 24       	eor	r1, r1
    38d2:	91 1d       	adc	r25, r1
    38d4:	b2 9f       	mul	r27, r18
    38d6:	70 0d       	add	r23, r0
    38d8:	81 1d       	adc	r24, r1
    38da:	11 24       	eor	r1, r1
    38dc:	91 1d       	adc	r25, r1
    38de:	08 95       	ret

000038e0 <__prologue_saves__>:
    38e0:	2f 92       	push	r2
    38e2:	3f 92       	push	r3
    38e4:	4f 92       	push	r4
    38e6:	5f 92       	push	r5
    38e8:	6f 92       	push	r6
    38ea:	7f 92       	push	r7
    38ec:	8f 92       	push	r8
    38ee:	9f 92       	push	r9
    38f0:	af 92       	push	r10
    38f2:	bf 92       	push	r11
    38f4:	cf 92       	push	r12
    38f6:	df 92       	push	r13
    38f8:	ef 92       	push	r14
    38fa:	ff 92       	push	r15
    38fc:	0f 93       	push	r16
    38fe:	1f 93       	push	r17
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	cd b7       	in	r28, 0x3d	; 61
    3906:	de b7       	in	r29, 0x3e	; 62
    3908:	ca 1b       	sub	r28, r26
    390a:	db 0b       	sbc	r29, r27
    390c:	0f b6       	in	r0, 0x3f	; 63
    390e:	f8 94       	cli
    3910:	de bf       	out	0x3e, r29	; 62
    3912:	0f be       	out	0x3f, r0	; 63
    3914:	cd bf       	out	0x3d, r28	; 61
    3916:	09 94       	ijmp

00003918 <__epilogue_restores__>:
    3918:	2a 88       	ldd	r2, Y+18	; 0x12
    391a:	39 88       	ldd	r3, Y+17	; 0x11
    391c:	48 88       	ldd	r4, Y+16	; 0x10
    391e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3920:	6e 84       	ldd	r6, Y+14	; 0x0e
    3922:	7d 84       	ldd	r7, Y+13	; 0x0d
    3924:	8c 84       	ldd	r8, Y+12	; 0x0c
    3926:	9b 84       	ldd	r9, Y+11	; 0x0b
    3928:	aa 84       	ldd	r10, Y+10	; 0x0a
    392a:	b9 84       	ldd	r11, Y+9	; 0x09
    392c:	c8 84       	ldd	r12, Y+8	; 0x08
    392e:	df 80       	ldd	r13, Y+7	; 0x07
    3930:	ee 80       	ldd	r14, Y+6	; 0x06
    3932:	fd 80       	ldd	r15, Y+5	; 0x05
    3934:	0c 81       	ldd	r16, Y+4	; 0x04
    3936:	1b 81       	ldd	r17, Y+3	; 0x03
    3938:	aa 81       	ldd	r26, Y+2	; 0x02
    393a:	b9 81       	ldd	r27, Y+1	; 0x01
    393c:	ce 0f       	add	r28, r30
    393e:	d1 1d       	adc	r29, r1
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	ed 01       	movw	r28, r26
    394c:	08 95       	ret

0000394e <__subsf3>:
    394e:	50 58       	subi	r21, 0x80	; 128

00003950 <__addsf3>:
    3950:	bb 27       	eor	r27, r27
    3952:	aa 27       	eor	r26, r26
    3954:	0e d0       	rcall	.+28     	; 0x3972 <__addsf3x>
    3956:	83 c2       	rjmp	.+1286   	; 0x3e5e <__fp_round>
    3958:	4c d2       	rcall	.+1176   	; 0x3df2 <__fp_pscA>
    395a:	30 f0       	brcs	.+12     	; 0x3968 <__addsf3+0x18>
    395c:	51 d2       	rcall	.+1186   	; 0x3e00 <__fp_pscB>
    395e:	20 f0       	brcs	.+8      	; 0x3968 <__addsf3+0x18>
    3960:	31 f4       	brne	.+12     	; 0x396e <__addsf3+0x1e>
    3962:	9f 3f       	cpi	r25, 0xFF	; 255
    3964:	11 f4       	brne	.+4      	; 0x396a <__addsf3+0x1a>
    3966:	1e f4       	brtc	.+6      	; 0x396e <__addsf3+0x1e>
    3968:	1c c2       	rjmp	.+1080   	; 0x3da2 <__fp_nan>
    396a:	0e f4       	brtc	.+2      	; 0x396e <__addsf3+0x1e>
    396c:	e0 95       	com	r30
    396e:	e7 fb       	bst	r30, 7
    3970:	04 c2       	rjmp	.+1032   	; 0x3d7a <__fp_inf>

00003972 <__addsf3x>:
    3972:	e9 2f       	mov	r30, r25
    3974:	96 d2       	rcall	.+1324   	; 0x3ea2 <__fp_split3>
    3976:	80 f3       	brcs	.-32     	; 0x3958 <__addsf3+0x8>
    3978:	ba 17       	cp	r27, r26
    397a:	62 07       	cpc	r22, r18
    397c:	73 07       	cpc	r23, r19
    397e:	84 07       	cpc	r24, r20
    3980:	95 07       	cpc	r25, r21
    3982:	18 f0       	brcs	.+6      	; 0x398a <__addsf3x+0x18>
    3984:	71 f4       	brne	.+28     	; 0x39a2 <__addsf3x+0x30>
    3986:	9e f5       	brtc	.+102    	; 0x39ee <__addsf3x+0x7c>
    3988:	ae c2       	rjmp	.+1372   	; 0x3ee6 <__fp_zero>
    398a:	0e f4       	brtc	.+2      	; 0x398e <__addsf3x+0x1c>
    398c:	e0 95       	com	r30
    398e:	0b 2e       	mov	r0, r27
    3990:	ba 2f       	mov	r27, r26
    3992:	a0 2d       	mov	r26, r0
    3994:	0b 01       	movw	r0, r22
    3996:	b9 01       	movw	r22, r18
    3998:	90 01       	movw	r18, r0
    399a:	0c 01       	movw	r0, r24
    399c:	ca 01       	movw	r24, r20
    399e:	a0 01       	movw	r20, r0
    39a0:	11 24       	eor	r1, r1
    39a2:	ff 27       	eor	r31, r31
    39a4:	59 1b       	sub	r21, r25
    39a6:	99 f0       	breq	.+38     	; 0x39ce <__addsf3x+0x5c>
    39a8:	59 3f       	cpi	r21, 0xF9	; 249
    39aa:	50 f4       	brcc	.+20     	; 0x39c0 <__addsf3x+0x4e>
    39ac:	50 3e       	cpi	r21, 0xE0	; 224
    39ae:	68 f1       	brcs	.+90     	; 0x3a0a <__addsf3x+0x98>
    39b0:	1a 16       	cp	r1, r26
    39b2:	f0 40       	sbci	r31, 0x00	; 0
    39b4:	a2 2f       	mov	r26, r18
    39b6:	23 2f       	mov	r18, r19
    39b8:	34 2f       	mov	r19, r20
    39ba:	44 27       	eor	r20, r20
    39bc:	58 5f       	subi	r21, 0xF8	; 248
    39be:	f3 cf       	rjmp	.-26     	; 0x39a6 <__addsf3x+0x34>
    39c0:	46 95       	lsr	r20
    39c2:	37 95       	ror	r19
    39c4:	27 95       	ror	r18
    39c6:	a7 95       	ror	r26
    39c8:	f0 40       	sbci	r31, 0x00	; 0
    39ca:	53 95       	inc	r21
    39cc:	c9 f7       	brne	.-14     	; 0x39c0 <__addsf3x+0x4e>
    39ce:	7e f4       	brtc	.+30     	; 0x39ee <__addsf3x+0x7c>
    39d0:	1f 16       	cp	r1, r31
    39d2:	ba 0b       	sbc	r27, r26
    39d4:	62 0b       	sbc	r22, r18
    39d6:	73 0b       	sbc	r23, r19
    39d8:	84 0b       	sbc	r24, r20
    39da:	ba f0       	brmi	.+46     	; 0x3a0a <__addsf3x+0x98>
    39dc:	91 50       	subi	r25, 0x01	; 1
    39de:	a1 f0       	breq	.+40     	; 0x3a08 <__addsf3x+0x96>
    39e0:	ff 0f       	add	r31, r31
    39e2:	bb 1f       	adc	r27, r27
    39e4:	66 1f       	adc	r22, r22
    39e6:	77 1f       	adc	r23, r23
    39e8:	88 1f       	adc	r24, r24
    39ea:	c2 f7       	brpl	.-16     	; 0x39dc <__addsf3x+0x6a>
    39ec:	0e c0       	rjmp	.+28     	; 0x3a0a <__addsf3x+0x98>
    39ee:	ba 0f       	add	r27, r26
    39f0:	62 1f       	adc	r22, r18
    39f2:	73 1f       	adc	r23, r19
    39f4:	84 1f       	adc	r24, r20
    39f6:	48 f4       	brcc	.+18     	; 0x3a0a <__addsf3x+0x98>
    39f8:	87 95       	ror	r24
    39fa:	77 95       	ror	r23
    39fc:	67 95       	ror	r22
    39fe:	b7 95       	ror	r27
    3a00:	f7 95       	ror	r31
    3a02:	9e 3f       	cpi	r25, 0xFE	; 254
    3a04:	08 f0       	brcs	.+2      	; 0x3a08 <__addsf3x+0x96>
    3a06:	b3 cf       	rjmp	.-154    	; 0x396e <__addsf3+0x1e>
    3a08:	93 95       	inc	r25
    3a0a:	88 0f       	add	r24, r24
    3a0c:	08 f0       	brcs	.+2      	; 0x3a10 <__addsf3x+0x9e>
    3a0e:	99 27       	eor	r25, r25
    3a10:	ee 0f       	add	r30, r30
    3a12:	97 95       	ror	r25
    3a14:	87 95       	ror	r24
    3a16:	08 95       	ret
    3a18:	ec d1       	rcall	.+984    	; 0x3df2 <__fp_pscA>
    3a1a:	58 f0       	brcs	.+22     	; 0x3a32 <__addsf3x+0xc0>
    3a1c:	80 e8       	ldi	r24, 0x80	; 128
    3a1e:	91 e0       	ldi	r25, 0x01	; 1
    3a20:	09 f4       	brne	.+2      	; 0x3a24 <__addsf3x+0xb2>
    3a22:	9e ef       	ldi	r25, 0xFE	; 254
    3a24:	ed d1       	rcall	.+986    	; 0x3e00 <__fp_pscB>
    3a26:	28 f0       	brcs	.+10     	; 0x3a32 <__addsf3x+0xc0>
    3a28:	40 e8       	ldi	r20, 0x80	; 128
    3a2a:	51 e0       	ldi	r21, 0x01	; 1
    3a2c:	59 f4       	brne	.+22     	; 0x3a44 <atan2+0xe>
    3a2e:	5e ef       	ldi	r21, 0xFE	; 254
    3a30:	09 c0       	rjmp	.+18     	; 0x3a44 <atan2+0xe>
    3a32:	b7 c1       	rjmp	.+878    	; 0x3da2 <__fp_nan>
    3a34:	58 c2       	rjmp	.+1200   	; 0x3ee6 <__fp_zero>

00003a36 <atan2>:
    3a36:	e9 2f       	mov	r30, r25
    3a38:	e0 78       	andi	r30, 0x80	; 128
    3a3a:	33 d2       	rcall	.+1126   	; 0x3ea2 <__fp_split3>
    3a3c:	68 f3       	brcs	.-38     	; 0x3a18 <__addsf3x+0xa6>
    3a3e:	09 2e       	mov	r0, r25
    3a40:	05 2a       	or	r0, r21
    3a42:	c1 f3       	breq	.-16     	; 0x3a34 <__addsf3x+0xc2>
    3a44:	26 17       	cp	r18, r22
    3a46:	37 07       	cpc	r19, r23
    3a48:	48 07       	cpc	r20, r24
    3a4a:	59 07       	cpc	r21, r25
    3a4c:	38 f0       	brcs	.+14     	; 0x3a5c <atan2+0x26>
    3a4e:	0e 2e       	mov	r0, r30
    3a50:	07 f8       	bld	r0, 7
    3a52:	e0 25       	eor	r30, r0
    3a54:	69 f0       	breq	.+26     	; 0x3a70 <atan2+0x3a>
    3a56:	e0 25       	eor	r30, r0
    3a58:	e0 64       	ori	r30, 0x40	; 64
    3a5a:	0a c0       	rjmp	.+20     	; 0x3a70 <atan2+0x3a>
    3a5c:	ef 63       	ori	r30, 0x3F	; 63
    3a5e:	07 f8       	bld	r0, 7
    3a60:	00 94       	com	r0
    3a62:	07 fa       	bst	r0, 7
    3a64:	db 01       	movw	r26, r22
    3a66:	b9 01       	movw	r22, r18
    3a68:	9d 01       	movw	r18, r26
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	ca 01       	movw	r24, r20
    3a6e:	ad 01       	movw	r20, r26
    3a70:	ef 93       	push	r30
    3a72:	4a d0       	rcall	.+148    	; 0x3b08 <__divsf3_pse>
    3a74:	f4 d1       	rcall	.+1000   	; 0x3e5e <__fp_round>
    3a76:	0a d0       	rcall	.+20     	; 0x3a8c <atan>
    3a78:	5f 91       	pop	r21
    3a7a:	55 23       	and	r21, r21
    3a7c:	31 f0       	breq	.+12     	; 0x3a8a <atan2+0x54>
    3a7e:	2b ed       	ldi	r18, 0xDB	; 219
    3a80:	3f e0       	ldi	r19, 0x0F	; 15
    3a82:	49 e4       	ldi	r20, 0x49	; 73
    3a84:	50 fd       	sbrc	r21, 0
    3a86:	49 ec       	ldi	r20, 0xC9	; 201
    3a88:	63 cf       	rjmp	.-314    	; 0x3950 <__addsf3>
    3a8a:	08 95       	ret

00003a8c <atan>:
    3a8c:	df 93       	push	r29
    3a8e:	dd 27       	eor	r29, r29
    3a90:	b9 2f       	mov	r27, r25
    3a92:	bf 77       	andi	r27, 0x7F	; 127
    3a94:	40 e8       	ldi	r20, 0x80	; 128
    3a96:	5f e3       	ldi	r21, 0x3F	; 63
    3a98:	16 16       	cp	r1, r22
    3a9a:	17 06       	cpc	r1, r23
    3a9c:	48 07       	cpc	r20, r24
    3a9e:	5b 07       	cpc	r21, r27
    3aa0:	10 f4       	brcc	.+4      	; 0x3aa6 <atan+0x1a>
    3aa2:	d9 2f       	mov	r29, r25
    3aa4:	2b d2       	rcall	.+1110   	; 0x3efc <inverse>
    3aa6:	9f 93       	push	r25
    3aa8:	8f 93       	push	r24
    3aaa:	7f 93       	push	r23
    3aac:	6f 93       	push	r22
    3aae:	f8 d2       	rcall	.+1520   	; 0x40a0 <square>
    3ab0:	e6 ef       	ldi	r30, 0xF6	; 246
    3ab2:	f0 e0       	ldi	r31, 0x00	; 0
    3ab4:	79 d1       	rcall	.+754    	; 0x3da8 <__fp_powser>
    3ab6:	d3 d1       	rcall	.+934    	; 0x3e5e <__fp_round>
    3ab8:	2f 91       	pop	r18
    3aba:	3f 91       	pop	r19
    3abc:	4f 91       	pop	r20
    3abe:	5f 91       	pop	r21
    3ac0:	30 d2       	rcall	.+1120   	; 0x3f22 <__mulsf3x>
    3ac2:	dd 23       	and	r29, r29
    3ac4:	49 f0       	breq	.+18     	; 0x3ad8 <atan+0x4c>
    3ac6:	90 58       	subi	r25, 0x80	; 128
    3ac8:	a2 ea       	ldi	r26, 0xA2	; 162
    3aca:	2a ed       	ldi	r18, 0xDA	; 218
    3acc:	3f e0       	ldi	r19, 0x0F	; 15
    3ace:	49 ec       	ldi	r20, 0xC9	; 201
    3ad0:	5f e3       	ldi	r21, 0x3F	; 63
    3ad2:	d0 78       	andi	r29, 0x80	; 128
    3ad4:	5d 27       	eor	r21, r29
    3ad6:	4d df       	rcall	.-358    	; 0x3972 <__addsf3x>
    3ad8:	df 91       	pop	r29
    3ada:	c1 c1       	rjmp	.+898    	; 0x3e5e <__fp_round>

00003adc <__cmpsf2>:
    3adc:	2a d1       	rcall	.+596    	; 0x3d32 <__fp_cmp>
    3ade:	08 f4       	brcc	.+2      	; 0x3ae2 <__cmpsf2+0x6>
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	08 95       	ret

00003ae4 <cos>:
    3ae4:	95 d1       	rcall	.+810    	; 0x3e10 <__fp_rempio2>
    3ae6:	e3 95       	inc	r30
    3ae8:	cb c1       	rjmp	.+918    	; 0x3e80 <__fp_sinus>

00003aea <__divsf3>:
    3aea:	0c d0       	rcall	.+24     	; 0x3b04 <__divsf3x>
    3aec:	b8 c1       	rjmp	.+880    	; 0x3e5e <__fp_round>
    3aee:	88 d1       	rcall	.+784    	; 0x3e00 <__fp_pscB>
    3af0:	40 f0       	brcs	.+16     	; 0x3b02 <__divsf3+0x18>
    3af2:	7f d1       	rcall	.+766    	; 0x3df2 <__fp_pscA>
    3af4:	30 f0       	brcs	.+12     	; 0x3b02 <__divsf3+0x18>
    3af6:	21 f4       	brne	.+8      	; 0x3b00 <__divsf3+0x16>
    3af8:	5f 3f       	cpi	r21, 0xFF	; 255
    3afa:	19 f0       	breq	.+6      	; 0x3b02 <__divsf3+0x18>
    3afc:	3e c1       	rjmp	.+636    	; 0x3d7a <__fp_inf>
    3afe:	51 11       	cpse	r21, r1
    3b00:	f3 c1       	rjmp	.+998    	; 0x3ee8 <__fp_szero>
    3b02:	4f c1       	rjmp	.+670    	; 0x3da2 <__fp_nan>

00003b04 <__divsf3x>:
    3b04:	ce d1       	rcall	.+924    	; 0x3ea2 <__fp_split3>
    3b06:	98 f3       	brcs	.-26     	; 0x3aee <__divsf3+0x4>

00003b08 <__divsf3_pse>:
    3b08:	99 23       	and	r25, r25
    3b0a:	c9 f3       	breq	.-14     	; 0x3afe <__divsf3+0x14>
    3b0c:	55 23       	and	r21, r21
    3b0e:	b1 f3       	breq	.-20     	; 0x3afc <__divsf3+0x12>
    3b10:	95 1b       	sub	r25, r21
    3b12:	55 0b       	sbc	r21, r21
    3b14:	bb 27       	eor	r27, r27
    3b16:	aa 27       	eor	r26, r26
    3b18:	62 17       	cp	r22, r18
    3b1a:	73 07       	cpc	r23, r19
    3b1c:	84 07       	cpc	r24, r20
    3b1e:	38 f0       	brcs	.+14     	; 0x3b2e <__divsf3_pse+0x26>
    3b20:	9f 5f       	subi	r25, 0xFF	; 255
    3b22:	5f 4f       	sbci	r21, 0xFF	; 255
    3b24:	22 0f       	add	r18, r18
    3b26:	33 1f       	adc	r19, r19
    3b28:	44 1f       	adc	r20, r20
    3b2a:	aa 1f       	adc	r26, r26
    3b2c:	a9 f3       	breq	.-22     	; 0x3b18 <__divsf3_pse+0x10>
    3b2e:	33 d0       	rcall	.+102    	; 0x3b96 <__divsf3_pse+0x8e>
    3b30:	0e 2e       	mov	r0, r30
    3b32:	3a f0       	brmi	.+14     	; 0x3b42 <__divsf3_pse+0x3a>
    3b34:	e0 e8       	ldi	r30, 0x80	; 128
    3b36:	30 d0       	rcall	.+96     	; 0x3b98 <__divsf3_pse+0x90>
    3b38:	91 50       	subi	r25, 0x01	; 1
    3b3a:	50 40       	sbci	r21, 0x00	; 0
    3b3c:	e6 95       	lsr	r30
    3b3e:	00 1c       	adc	r0, r0
    3b40:	ca f7       	brpl	.-14     	; 0x3b34 <__divsf3_pse+0x2c>
    3b42:	29 d0       	rcall	.+82     	; 0x3b96 <__divsf3_pse+0x8e>
    3b44:	fe 2f       	mov	r31, r30
    3b46:	27 d0       	rcall	.+78     	; 0x3b96 <__divsf3_pse+0x8e>
    3b48:	66 0f       	add	r22, r22
    3b4a:	77 1f       	adc	r23, r23
    3b4c:	88 1f       	adc	r24, r24
    3b4e:	bb 1f       	adc	r27, r27
    3b50:	26 17       	cp	r18, r22
    3b52:	37 07       	cpc	r19, r23
    3b54:	48 07       	cpc	r20, r24
    3b56:	ab 07       	cpc	r26, r27
    3b58:	b0 e8       	ldi	r27, 0x80	; 128
    3b5a:	09 f0       	breq	.+2      	; 0x3b5e <__divsf3_pse+0x56>
    3b5c:	bb 0b       	sbc	r27, r27
    3b5e:	80 2d       	mov	r24, r0
    3b60:	bf 01       	movw	r22, r30
    3b62:	ff 27       	eor	r31, r31
    3b64:	93 58       	subi	r25, 0x83	; 131
    3b66:	5f 4f       	sbci	r21, 0xFF	; 255
    3b68:	2a f0       	brmi	.+10     	; 0x3b74 <__divsf3_pse+0x6c>
    3b6a:	9e 3f       	cpi	r25, 0xFE	; 254
    3b6c:	51 05       	cpc	r21, r1
    3b6e:	68 f0       	brcs	.+26     	; 0x3b8a <__divsf3_pse+0x82>
    3b70:	04 c1       	rjmp	.+520    	; 0x3d7a <__fp_inf>
    3b72:	ba c1       	rjmp	.+884    	; 0x3ee8 <__fp_szero>
    3b74:	5f 3f       	cpi	r21, 0xFF	; 255
    3b76:	ec f3       	brlt	.-6      	; 0x3b72 <__divsf3_pse+0x6a>
    3b78:	98 3e       	cpi	r25, 0xE8	; 232
    3b7a:	dc f3       	brlt	.-10     	; 0x3b72 <__divsf3_pse+0x6a>
    3b7c:	86 95       	lsr	r24
    3b7e:	77 95       	ror	r23
    3b80:	67 95       	ror	r22
    3b82:	b7 95       	ror	r27
    3b84:	f7 95       	ror	r31
    3b86:	9f 5f       	subi	r25, 0xFF	; 255
    3b88:	c9 f7       	brne	.-14     	; 0x3b7c <__divsf3_pse+0x74>
    3b8a:	88 0f       	add	r24, r24
    3b8c:	91 1d       	adc	r25, r1
    3b8e:	96 95       	lsr	r25
    3b90:	87 95       	ror	r24
    3b92:	97 f9       	bld	r25, 7
    3b94:	08 95       	ret
    3b96:	e1 e0       	ldi	r30, 0x01	; 1
    3b98:	66 0f       	add	r22, r22
    3b9a:	77 1f       	adc	r23, r23
    3b9c:	88 1f       	adc	r24, r24
    3b9e:	bb 1f       	adc	r27, r27
    3ba0:	62 17       	cp	r22, r18
    3ba2:	73 07       	cpc	r23, r19
    3ba4:	84 07       	cpc	r24, r20
    3ba6:	ba 07       	cpc	r27, r26
    3ba8:	20 f0       	brcs	.+8      	; 0x3bb2 <__divsf3_pse+0xaa>
    3baa:	62 1b       	sub	r22, r18
    3bac:	73 0b       	sbc	r23, r19
    3bae:	84 0b       	sbc	r24, r20
    3bb0:	ba 0b       	sbc	r27, r26
    3bb2:	ee 1f       	adc	r30, r30
    3bb4:	88 f7       	brcc	.-30     	; 0x3b98 <__divsf3_pse+0x90>
    3bb6:	e0 95       	com	r30
    3bb8:	08 95       	ret

00003bba <__fixsfsi>:
    3bba:	04 d0       	rcall	.+8      	; 0x3bc4 <__fixunssfsi>
    3bbc:	68 94       	set
    3bbe:	b1 11       	cpse	r27, r1
    3bc0:	93 c1       	rjmp	.+806    	; 0x3ee8 <__fp_szero>
    3bc2:	08 95       	ret

00003bc4 <__fixunssfsi>:
    3bc4:	76 d1       	rcall	.+748    	; 0x3eb2 <__fp_splitA>
    3bc6:	88 f0       	brcs	.+34     	; 0x3bea <__fixunssfsi+0x26>
    3bc8:	9f 57       	subi	r25, 0x7F	; 127
    3bca:	90 f0       	brcs	.+36     	; 0x3bf0 <__fixunssfsi+0x2c>
    3bcc:	b9 2f       	mov	r27, r25
    3bce:	99 27       	eor	r25, r25
    3bd0:	b7 51       	subi	r27, 0x17	; 23
    3bd2:	a0 f0       	brcs	.+40     	; 0x3bfc <__fixunssfsi+0x38>
    3bd4:	d1 f0       	breq	.+52     	; 0x3c0a <__fixunssfsi+0x46>
    3bd6:	66 0f       	add	r22, r22
    3bd8:	77 1f       	adc	r23, r23
    3bda:	88 1f       	adc	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	1a f0       	brmi	.+6      	; 0x3be6 <__fixunssfsi+0x22>
    3be0:	ba 95       	dec	r27
    3be2:	c9 f7       	brne	.-14     	; 0x3bd6 <__fixunssfsi+0x12>
    3be4:	12 c0       	rjmp	.+36     	; 0x3c0a <__fixunssfsi+0x46>
    3be6:	b1 30       	cpi	r27, 0x01	; 1
    3be8:	81 f0       	breq	.+32     	; 0x3c0a <__fixunssfsi+0x46>
    3bea:	7d d1       	rcall	.+762    	; 0x3ee6 <__fp_zero>
    3bec:	b1 e0       	ldi	r27, 0x01	; 1
    3bee:	08 95       	ret
    3bf0:	7a c1       	rjmp	.+756    	; 0x3ee6 <__fp_zero>
    3bf2:	67 2f       	mov	r22, r23
    3bf4:	78 2f       	mov	r23, r24
    3bf6:	88 27       	eor	r24, r24
    3bf8:	b8 5f       	subi	r27, 0xF8	; 248
    3bfa:	39 f0       	breq	.+14     	; 0x3c0a <__fixunssfsi+0x46>
    3bfc:	b9 3f       	cpi	r27, 0xF9	; 249
    3bfe:	cc f3       	brlt	.-14     	; 0x3bf2 <__fixunssfsi+0x2e>
    3c00:	86 95       	lsr	r24
    3c02:	77 95       	ror	r23
    3c04:	67 95       	ror	r22
    3c06:	b3 95       	inc	r27
    3c08:	d9 f7       	brne	.-10     	; 0x3c00 <__fixunssfsi+0x3c>
    3c0a:	3e f4       	brtc	.+14     	; 0x3c1a <__fixunssfsi+0x56>
    3c0c:	90 95       	com	r25
    3c0e:	80 95       	com	r24
    3c10:	70 95       	com	r23
    3c12:	61 95       	neg	r22
    3c14:	7f 4f       	sbci	r23, 0xFF	; 255
    3c16:	8f 4f       	sbci	r24, 0xFF	; 255
    3c18:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1a:	08 95       	ret

00003c1c <__floatunsisf>:
    3c1c:	e8 94       	clt
    3c1e:	09 c0       	rjmp	.+18     	; 0x3c32 <__floatsisf+0x12>

00003c20 <__floatsisf>:
    3c20:	97 fb       	bst	r25, 7
    3c22:	3e f4       	brtc	.+14     	; 0x3c32 <__floatsisf+0x12>
    3c24:	90 95       	com	r25
    3c26:	80 95       	com	r24
    3c28:	70 95       	com	r23
    3c2a:	61 95       	neg	r22
    3c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    3c30:	9f 4f       	sbci	r25, 0xFF	; 255
    3c32:	99 23       	and	r25, r25
    3c34:	a9 f0       	breq	.+42     	; 0x3c60 <__floatsisf+0x40>
    3c36:	f9 2f       	mov	r31, r25
    3c38:	96 e9       	ldi	r25, 0x96	; 150
    3c3a:	bb 27       	eor	r27, r27
    3c3c:	93 95       	inc	r25
    3c3e:	f6 95       	lsr	r31
    3c40:	87 95       	ror	r24
    3c42:	77 95       	ror	r23
    3c44:	67 95       	ror	r22
    3c46:	b7 95       	ror	r27
    3c48:	f1 11       	cpse	r31, r1
    3c4a:	f8 cf       	rjmp	.-16     	; 0x3c3c <__floatsisf+0x1c>
    3c4c:	fa f4       	brpl	.+62     	; 0x3c8c <__floatsisf+0x6c>
    3c4e:	bb 0f       	add	r27, r27
    3c50:	11 f4       	brne	.+4      	; 0x3c56 <__floatsisf+0x36>
    3c52:	60 ff       	sbrs	r22, 0
    3c54:	1b c0       	rjmp	.+54     	; 0x3c8c <__floatsisf+0x6c>
    3c56:	6f 5f       	subi	r22, 0xFF	; 255
    3c58:	7f 4f       	sbci	r23, 0xFF	; 255
    3c5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c5e:	16 c0       	rjmp	.+44     	; 0x3c8c <__floatsisf+0x6c>
    3c60:	88 23       	and	r24, r24
    3c62:	11 f0       	breq	.+4      	; 0x3c68 <__floatsisf+0x48>
    3c64:	96 e9       	ldi	r25, 0x96	; 150
    3c66:	11 c0       	rjmp	.+34     	; 0x3c8a <__floatsisf+0x6a>
    3c68:	77 23       	and	r23, r23
    3c6a:	21 f0       	breq	.+8      	; 0x3c74 <__floatsisf+0x54>
    3c6c:	9e e8       	ldi	r25, 0x8E	; 142
    3c6e:	87 2f       	mov	r24, r23
    3c70:	76 2f       	mov	r23, r22
    3c72:	05 c0       	rjmp	.+10     	; 0x3c7e <__floatsisf+0x5e>
    3c74:	66 23       	and	r22, r22
    3c76:	71 f0       	breq	.+28     	; 0x3c94 <__floatsisf+0x74>
    3c78:	96 e8       	ldi	r25, 0x86	; 134
    3c7a:	86 2f       	mov	r24, r22
    3c7c:	70 e0       	ldi	r23, 0x00	; 0
    3c7e:	60 e0       	ldi	r22, 0x00	; 0
    3c80:	2a f0       	brmi	.+10     	; 0x3c8c <__floatsisf+0x6c>
    3c82:	9a 95       	dec	r25
    3c84:	66 0f       	add	r22, r22
    3c86:	77 1f       	adc	r23, r23
    3c88:	88 1f       	adc	r24, r24
    3c8a:	da f7       	brpl	.-10     	; 0x3c82 <__floatsisf+0x62>
    3c8c:	88 0f       	add	r24, r24
    3c8e:	96 95       	lsr	r25
    3c90:	87 95       	ror	r24
    3c92:	97 f9       	bld	r25, 7
    3c94:	08 95       	ret
    3c96:	ad d0       	rcall	.+346    	; 0x3df2 <__fp_pscA>
    3c98:	18 f0       	brcs	.+6      	; 0x3ca0 <__floatsisf+0x80>
    3c9a:	11 f0       	breq	.+4      	; 0x3ca0 <__floatsisf+0x80>
    3c9c:	b1 d0       	rcall	.+354    	; 0x3e00 <__fp_pscB>
    3c9e:	38 f4       	brcc	.+14     	; 0x3cae <fmod+0xa>
    3ca0:	80 c0       	rjmp	.+256    	; 0x3da2 <__fp_nan>
    3ca2:	22 c1       	rjmp	.+580    	; 0x3ee8 <__fp_szero>

00003ca4 <fmod>:
    3ca4:	e9 2f       	mov	r30, r25
    3ca6:	fd d0       	rcall	.+506    	; 0x3ea2 <__fp_split3>
    3ca8:	b0 f3       	brcs	.-20     	; 0x3c96 <__floatsisf+0x76>
    3caa:	55 23       	and	r21, r21
    3cac:	c9 f3       	breq	.-14     	; 0x3ca0 <__floatsisf+0x80>
    3cae:	e7 fb       	bst	r30, 7
    3cb0:	62 17       	cp	r22, r18
    3cb2:	73 07       	cpc	r23, r19
    3cb4:	84 07       	cpc	r24, r20
    3cb6:	95 07       	cpc	r25, r21
    3cb8:	a8 f1       	brcs	.+106    	; 0x3d24 <fmod+0x80>
    3cba:	99 f3       	breq	.-26     	; 0x3ca2 <__floatsisf+0x82>
    3cbc:	e9 2f       	mov	r30, r25
    3cbe:	ff 27       	eor	r31, r31
    3cc0:	88 23       	and	r24, r24
    3cc2:	2a f0       	brmi	.+10     	; 0x3cce <fmod+0x2a>
    3cc4:	31 97       	sbiw	r30, 0x01	; 1
    3cc6:	66 0f       	add	r22, r22
    3cc8:	77 1f       	adc	r23, r23
    3cca:	88 1f       	adc	r24, r24
    3ccc:	da f7       	brpl	.-10     	; 0x3cc4 <fmod+0x20>
    3cce:	95 2f       	mov	r25, r21
    3cd0:	55 27       	eor	r21, r21
    3cd2:	44 23       	and	r20, r20
    3cd4:	32 f0       	brmi	.+12     	; 0x3ce2 <fmod+0x3e>
    3cd6:	91 50       	subi	r25, 0x01	; 1
    3cd8:	50 40       	sbci	r21, 0x00	; 0
    3cda:	22 0f       	add	r18, r18
    3cdc:	33 1f       	adc	r19, r19
    3cde:	44 1f       	adc	r20, r20
    3ce0:	d2 f7       	brpl	.-12     	; 0x3cd6 <fmod+0x32>
    3ce2:	bb 27       	eor	r27, r27
    3ce4:	e9 1b       	sub	r30, r25
    3ce6:	f5 0b       	sbc	r31, r21
    3ce8:	62 1b       	sub	r22, r18
    3cea:	73 0b       	sbc	r23, r19
    3cec:	84 0b       	sbc	r24, r20
    3cee:	b1 09       	sbc	r27, r1
    3cf0:	c1 f2       	breq	.-80     	; 0x3ca2 <__floatsisf+0x82>
    3cf2:	22 f4       	brpl	.+8      	; 0x3cfc <fmod+0x58>
    3cf4:	62 0f       	add	r22, r18
    3cf6:	73 1f       	adc	r23, r19
    3cf8:	84 1f       	adc	r24, r20
    3cfa:	b1 1d       	adc	r27, r1
    3cfc:	31 97       	sbiw	r30, 0x01	; 1
    3cfe:	2a f0       	brmi	.+10     	; 0x3d0a <fmod+0x66>
    3d00:	66 0f       	add	r22, r22
    3d02:	77 1f       	adc	r23, r23
    3d04:	88 1f       	adc	r24, r24
    3d06:	bb 1f       	adc	r27, r27
    3d08:	ef cf       	rjmp	.-34     	; 0x3ce8 <fmod+0x44>
    3d0a:	91 50       	subi	r25, 0x01	; 1
    3d0c:	50 40       	sbci	r21, 0x00	; 0
    3d0e:	5a f0       	brmi	.+22     	; 0x3d26 <fmod+0x82>
    3d10:	41 f0       	breq	.+16     	; 0x3d22 <fmod+0x7e>
    3d12:	88 23       	and	r24, r24
    3d14:	32 f0       	brmi	.+12     	; 0x3d22 <fmod+0x7e>
    3d16:	66 0f       	add	r22, r22
    3d18:	77 1f       	adc	r23, r23
    3d1a:	88 1f       	adc	r24, r24
    3d1c:	91 50       	subi	r25, 0x01	; 1
    3d1e:	50 40       	sbci	r21, 0x00	; 0
    3d20:	c1 f7       	brne	.-16     	; 0x3d12 <fmod+0x6e>
    3d22:	93 95       	inc	r25
    3d24:	30 c0       	rjmp	.+96     	; 0x3d86 <__fp_mpack>
    3d26:	86 95       	lsr	r24
    3d28:	77 95       	ror	r23
    3d2a:	67 95       	ror	r22
    3d2c:	9f 5f       	subi	r25, 0xFF	; 255
    3d2e:	d9 f7       	brne	.-10     	; 0x3d26 <fmod+0x82>
    3d30:	f8 cf       	rjmp	.-16     	; 0x3d22 <fmod+0x7e>

00003d32 <__fp_cmp>:
    3d32:	99 0f       	add	r25, r25
    3d34:	00 08       	sbc	r0, r0
    3d36:	55 0f       	add	r21, r21
    3d38:	aa 0b       	sbc	r26, r26
    3d3a:	e0 e8       	ldi	r30, 0x80	; 128
    3d3c:	fe ef       	ldi	r31, 0xFE	; 254
    3d3e:	16 16       	cp	r1, r22
    3d40:	17 06       	cpc	r1, r23
    3d42:	e8 07       	cpc	r30, r24
    3d44:	f9 07       	cpc	r31, r25
    3d46:	c0 f0       	brcs	.+48     	; 0x3d78 <__fp_cmp+0x46>
    3d48:	12 16       	cp	r1, r18
    3d4a:	13 06       	cpc	r1, r19
    3d4c:	e4 07       	cpc	r30, r20
    3d4e:	f5 07       	cpc	r31, r21
    3d50:	98 f0       	brcs	.+38     	; 0x3d78 <__fp_cmp+0x46>
    3d52:	62 1b       	sub	r22, r18
    3d54:	73 0b       	sbc	r23, r19
    3d56:	84 0b       	sbc	r24, r20
    3d58:	95 0b       	sbc	r25, r21
    3d5a:	39 f4       	brne	.+14     	; 0x3d6a <__fp_cmp+0x38>
    3d5c:	0a 26       	eor	r0, r26
    3d5e:	61 f0       	breq	.+24     	; 0x3d78 <__fp_cmp+0x46>
    3d60:	23 2b       	or	r18, r19
    3d62:	24 2b       	or	r18, r20
    3d64:	25 2b       	or	r18, r21
    3d66:	21 f4       	brne	.+8      	; 0x3d70 <__fp_cmp+0x3e>
    3d68:	08 95       	ret
    3d6a:	0a 26       	eor	r0, r26
    3d6c:	09 f4       	brne	.+2      	; 0x3d70 <__fp_cmp+0x3e>
    3d6e:	a1 40       	sbci	r26, 0x01	; 1
    3d70:	a6 95       	lsr	r26
    3d72:	8f ef       	ldi	r24, 0xFF	; 255
    3d74:	81 1d       	adc	r24, r1
    3d76:	81 1d       	adc	r24, r1
    3d78:	08 95       	ret

00003d7a <__fp_inf>:
    3d7a:	97 f9       	bld	r25, 7
    3d7c:	9f 67       	ori	r25, 0x7F	; 127
    3d7e:	80 e8       	ldi	r24, 0x80	; 128
    3d80:	70 e0       	ldi	r23, 0x00	; 0
    3d82:	60 e0       	ldi	r22, 0x00	; 0
    3d84:	08 95       	ret

00003d86 <__fp_mpack>:
    3d86:	9f 3f       	cpi	r25, 0xFF	; 255
    3d88:	31 f0       	breq	.+12     	; 0x3d96 <__fp_mpack_finite+0xc>

00003d8a <__fp_mpack_finite>:
    3d8a:	91 50       	subi	r25, 0x01	; 1
    3d8c:	20 f4       	brcc	.+8      	; 0x3d96 <__fp_mpack_finite+0xc>
    3d8e:	87 95       	ror	r24
    3d90:	77 95       	ror	r23
    3d92:	67 95       	ror	r22
    3d94:	b7 95       	ror	r27
    3d96:	88 0f       	add	r24, r24
    3d98:	91 1d       	adc	r25, r1
    3d9a:	96 95       	lsr	r25
    3d9c:	87 95       	ror	r24
    3d9e:	97 f9       	bld	r25, 7
    3da0:	08 95       	ret

00003da2 <__fp_nan>:
    3da2:	9f ef       	ldi	r25, 0xFF	; 255
    3da4:	80 ec       	ldi	r24, 0xC0	; 192
    3da6:	08 95       	ret

00003da8 <__fp_powser>:
    3da8:	df 93       	push	r29
    3daa:	cf 93       	push	r28
    3dac:	1f 93       	push	r17
    3dae:	0f 93       	push	r16
    3db0:	ff 92       	push	r15
    3db2:	ef 92       	push	r14
    3db4:	df 92       	push	r13
    3db6:	7b 01       	movw	r14, r22
    3db8:	8c 01       	movw	r16, r24
    3dba:	68 94       	set
    3dbc:	05 c0       	rjmp	.+10     	; 0x3dc8 <__fp_powser+0x20>
    3dbe:	da 2e       	mov	r13, r26
    3dc0:	ef 01       	movw	r28, r30
    3dc2:	af d0       	rcall	.+350    	; 0x3f22 <__mulsf3x>
    3dc4:	fe 01       	movw	r30, r28
    3dc6:	e8 94       	clt
    3dc8:	a5 91       	lpm	r26, Z+
    3dca:	25 91       	lpm	r18, Z+
    3dcc:	35 91       	lpm	r19, Z+
    3dce:	45 91       	lpm	r20, Z+
    3dd0:	55 91       	lpm	r21, Z+
    3dd2:	ae f3       	brts	.-22     	; 0x3dbe <__fp_powser+0x16>
    3dd4:	ef 01       	movw	r28, r30
    3dd6:	cd dd       	rcall	.-1126   	; 0x3972 <__addsf3x>
    3dd8:	fe 01       	movw	r30, r28
    3dda:	97 01       	movw	r18, r14
    3ddc:	a8 01       	movw	r20, r16
    3dde:	da 94       	dec	r13
    3de0:	79 f7       	brne	.-34     	; 0x3dc0 <__fp_powser+0x18>
    3de2:	df 90       	pop	r13
    3de4:	ef 90       	pop	r14
    3de6:	ff 90       	pop	r15
    3de8:	0f 91       	pop	r16
    3dea:	1f 91       	pop	r17
    3dec:	cf 91       	pop	r28
    3dee:	df 91       	pop	r29
    3df0:	08 95       	ret

00003df2 <__fp_pscA>:
    3df2:	00 24       	eor	r0, r0
    3df4:	0a 94       	dec	r0
    3df6:	16 16       	cp	r1, r22
    3df8:	17 06       	cpc	r1, r23
    3dfa:	18 06       	cpc	r1, r24
    3dfc:	09 06       	cpc	r0, r25
    3dfe:	08 95       	ret

00003e00 <__fp_pscB>:
    3e00:	00 24       	eor	r0, r0
    3e02:	0a 94       	dec	r0
    3e04:	12 16       	cp	r1, r18
    3e06:	13 06       	cpc	r1, r19
    3e08:	14 06       	cpc	r1, r20
    3e0a:	05 06       	cpc	r0, r21
    3e0c:	08 95       	ret
    3e0e:	c9 cf       	rjmp	.-110    	; 0x3da2 <__fp_nan>

00003e10 <__fp_rempio2>:
    3e10:	50 d0       	rcall	.+160    	; 0x3eb2 <__fp_splitA>
    3e12:	e8 f3       	brcs	.-6      	; 0x3e0e <__fp_pscB+0xe>
    3e14:	e8 94       	clt
    3e16:	e0 e0       	ldi	r30, 0x00	; 0
    3e18:	bb 27       	eor	r27, r27
    3e1a:	9f 57       	subi	r25, 0x7F	; 127
    3e1c:	f0 f0       	brcs	.+60     	; 0x3e5a <__fp_rempio2+0x4a>
    3e1e:	2a ed       	ldi	r18, 0xDA	; 218
    3e20:	3f e0       	ldi	r19, 0x0F	; 15
    3e22:	49 ec       	ldi	r20, 0xC9	; 201
    3e24:	06 c0       	rjmp	.+12     	; 0x3e32 <__fp_rempio2+0x22>
    3e26:	ee 0f       	add	r30, r30
    3e28:	bb 0f       	add	r27, r27
    3e2a:	66 1f       	adc	r22, r22
    3e2c:	77 1f       	adc	r23, r23
    3e2e:	88 1f       	adc	r24, r24
    3e30:	28 f0       	brcs	.+10     	; 0x3e3c <__fp_rempio2+0x2c>
    3e32:	b2 3a       	cpi	r27, 0xA2	; 162
    3e34:	62 07       	cpc	r22, r18
    3e36:	73 07       	cpc	r23, r19
    3e38:	84 07       	cpc	r24, r20
    3e3a:	28 f0       	brcs	.+10     	; 0x3e46 <__fp_rempio2+0x36>
    3e3c:	b2 5a       	subi	r27, 0xA2	; 162
    3e3e:	62 0b       	sbc	r22, r18
    3e40:	73 0b       	sbc	r23, r19
    3e42:	84 0b       	sbc	r24, r20
    3e44:	e3 95       	inc	r30
    3e46:	9a 95       	dec	r25
    3e48:	72 f7       	brpl	.-36     	; 0x3e26 <__fp_rempio2+0x16>
    3e4a:	80 38       	cpi	r24, 0x80	; 128
    3e4c:	30 f4       	brcc	.+12     	; 0x3e5a <__fp_rempio2+0x4a>
    3e4e:	9a 95       	dec	r25
    3e50:	bb 0f       	add	r27, r27
    3e52:	66 1f       	adc	r22, r22
    3e54:	77 1f       	adc	r23, r23
    3e56:	88 1f       	adc	r24, r24
    3e58:	d2 f7       	brpl	.-12     	; 0x3e4e <__fp_rempio2+0x3e>
    3e5a:	90 48       	sbci	r25, 0x80	; 128
    3e5c:	96 cf       	rjmp	.-212    	; 0x3d8a <__fp_mpack_finite>

00003e5e <__fp_round>:
    3e5e:	09 2e       	mov	r0, r25
    3e60:	03 94       	inc	r0
    3e62:	00 0c       	add	r0, r0
    3e64:	11 f4       	brne	.+4      	; 0x3e6a <__fp_round+0xc>
    3e66:	88 23       	and	r24, r24
    3e68:	52 f0       	brmi	.+20     	; 0x3e7e <__fp_round+0x20>
    3e6a:	bb 0f       	add	r27, r27
    3e6c:	40 f4       	brcc	.+16     	; 0x3e7e <__fp_round+0x20>
    3e6e:	bf 2b       	or	r27, r31
    3e70:	11 f4       	brne	.+4      	; 0x3e76 <__fp_round+0x18>
    3e72:	60 ff       	sbrs	r22, 0
    3e74:	04 c0       	rjmp	.+8      	; 0x3e7e <__fp_round+0x20>
    3e76:	6f 5f       	subi	r22, 0xFF	; 255
    3e78:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e7e:	08 95       	ret

00003e80 <__fp_sinus>:
    3e80:	ef 93       	push	r30
    3e82:	e0 ff       	sbrs	r30, 0
    3e84:	06 c0       	rjmp	.+12     	; 0x3e92 <__fp_sinus+0x12>
    3e86:	a2 ea       	ldi	r26, 0xA2	; 162
    3e88:	2a ed       	ldi	r18, 0xDA	; 218
    3e8a:	3f e0       	ldi	r19, 0x0F	; 15
    3e8c:	49 ec       	ldi	r20, 0xC9	; 201
    3e8e:	5f eb       	ldi	r21, 0xBF	; 191
    3e90:	70 dd       	rcall	.-1312   	; 0x3972 <__addsf3x>
    3e92:	e5 df       	rcall	.-54     	; 0x3e5e <__fp_round>
    3e94:	0f 90       	pop	r0
    3e96:	03 94       	inc	r0
    3e98:	01 fc       	sbrc	r0, 1
    3e9a:	90 58       	subi	r25, 0x80	; 128
    3e9c:	e3 e2       	ldi	r30, 0x23	; 35
    3e9e:	f1 e0       	ldi	r31, 0x01	; 1
    3ea0:	24 c1       	rjmp	.+584    	; 0x40ea <__fp_powsodd>

00003ea2 <__fp_split3>:
    3ea2:	57 fd       	sbrc	r21, 7
    3ea4:	90 58       	subi	r25, 0x80	; 128
    3ea6:	44 0f       	add	r20, r20
    3ea8:	55 1f       	adc	r21, r21
    3eaa:	59 f0       	breq	.+22     	; 0x3ec2 <__fp_splitA+0x10>
    3eac:	5f 3f       	cpi	r21, 0xFF	; 255
    3eae:	71 f0       	breq	.+28     	; 0x3ecc <__fp_splitA+0x1a>
    3eb0:	47 95       	ror	r20

00003eb2 <__fp_splitA>:
    3eb2:	88 0f       	add	r24, r24
    3eb4:	97 fb       	bst	r25, 7
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	61 f0       	breq	.+24     	; 0x3ed2 <__fp_splitA+0x20>
    3eba:	9f 3f       	cpi	r25, 0xFF	; 255
    3ebc:	79 f0       	breq	.+30     	; 0x3edc <__fp_splitA+0x2a>
    3ebe:	87 95       	ror	r24
    3ec0:	08 95       	ret
    3ec2:	12 16       	cp	r1, r18
    3ec4:	13 06       	cpc	r1, r19
    3ec6:	14 06       	cpc	r1, r20
    3ec8:	55 1f       	adc	r21, r21
    3eca:	f2 cf       	rjmp	.-28     	; 0x3eb0 <__fp_split3+0xe>
    3ecc:	46 95       	lsr	r20
    3ece:	f1 df       	rcall	.-30     	; 0x3eb2 <__fp_splitA>
    3ed0:	08 c0       	rjmp	.+16     	; 0x3ee2 <__fp_splitA+0x30>
    3ed2:	16 16       	cp	r1, r22
    3ed4:	17 06       	cpc	r1, r23
    3ed6:	18 06       	cpc	r1, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	f1 cf       	rjmp	.-30     	; 0x3ebe <__fp_splitA+0xc>
    3edc:	86 95       	lsr	r24
    3ede:	71 05       	cpc	r23, r1
    3ee0:	61 05       	cpc	r22, r1
    3ee2:	08 94       	sec
    3ee4:	08 95       	ret

00003ee6 <__fp_zero>:
    3ee6:	e8 94       	clt

00003ee8 <__fp_szero>:
    3ee8:	bb 27       	eor	r27, r27
    3eea:	66 27       	eor	r22, r22
    3eec:	77 27       	eor	r23, r23
    3eee:	cb 01       	movw	r24, r22
    3ef0:	97 f9       	bld	r25, 7
    3ef2:	08 95       	ret

00003ef4 <__gesf2>:
    3ef4:	1e df       	rcall	.-452    	; 0x3d32 <__fp_cmp>
    3ef6:	08 f4       	brcc	.+2      	; 0x3efa <__gesf2+0x6>
    3ef8:	8f ef       	ldi	r24, 0xFF	; 255
    3efa:	08 95       	ret

00003efc <inverse>:
    3efc:	9b 01       	movw	r18, r22
    3efe:	ac 01       	movw	r20, r24
    3f00:	60 e0       	ldi	r22, 0x00	; 0
    3f02:	70 e0       	ldi	r23, 0x00	; 0
    3f04:	80 e8       	ldi	r24, 0x80	; 128
    3f06:	9f e3       	ldi	r25, 0x3F	; 63
    3f08:	f0 cd       	rjmp	.-1056   	; 0x3aea <__divsf3>

00003f0a <__mulsf3>:
    3f0a:	0b d0       	rcall	.+22     	; 0x3f22 <__mulsf3x>
    3f0c:	a8 cf       	rjmp	.-176    	; 0x3e5e <__fp_round>
    3f0e:	71 df       	rcall	.-286    	; 0x3df2 <__fp_pscA>
    3f10:	28 f0       	brcs	.+10     	; 0x3f1c <__mulsf3+0x12>
    3f12:	76 df       	rcall	.-276    	; 0x3e00 <__fp_pscB>
    3f14:	18 f0       	brcs	.+6      	; 0x3f1c <__mulsf3+0x12>
    3f16:	95 23       	and	r25, r21
    3f18:	09 f0       	breq	.+2      	; 0x3f1c <__mulsf3+0x12>
    3f1a:	2f cf       	rjmp	.-418    	; 0x3d7a <__fp_inf>
    3f1c:	42 cf       	rjmp	.-380    	; 0x3da2 <__fp_nan>
    3f1e:	11 24       	eor	r1, r1
    3f20:	e3 cf       	rjmp	.-58     	; 0x3ee8 <__fp_szero>

00003f22 <__mulsf3x>:
    3f22:	bf df       	rcall	.-130    	; 0x3ea2 <__fp_split3>
    3f24:	a0 f3       	brcs	.-24     	; 0x3f0e <__mulsf3+0x4>

00003f26 <__mulsf3_pse>:
    3f26:	95 9f       	mul	r25, r21
    3f28:	d1 f3       	breq	.-12     	; 0x3f1e <__mulsf3+0x14>
    3f2a:	95 0f       	add	r25, r21
    3f2c:	50 e0       	ldi	r21, 0x00	; 0
    3f2e:	55 1f       	adc	r21, r21
    3f30:	62 9f       	mul	r22, r18
    3f32:	f0 01       	movw	r30, r0
    3f34:	72 9f       	mul	r23, r18
    3f36:	bb 27       	eor	r27, r27
    3f38:	f0 0d       	add	r31, r0
    3f3a:	b1 1d       	adc	r27, r1
    3f3c:	63 9f       	mul	r22, r19
    3f3e:	aa 27       	eor	r26, r26
    3f40:	f0 0d       	add	r31, r0
    3f42:	b1 1d       	adc	r27, r1
    3f44:	aa 1f       	adc	r26, r26
    3f46:	64 9f       	mul	r22, r20
    3f48:	66 27       	eor	r22, r22
    3f4a:	b0 0d       	add	r27, r0
    3f4c:	a1 1d       	adc	r26, r1
    3f4e:	66 1f       	adc	r22, r22
    3f50:	82 9f       	mul	r24, r18
    3f52:	22 27       	eor	r18, r18
    3f54:	b0 0d       	add	r27, r0
    3f56:	a1 1d       	adc	r26, r1
    3f58:	62 1f       	adc	r22, r18
    3f5a:	73 9f       	mul	r23, r19
    3f5c:	b0 0d       	add	r27, r0
    3f5e:	a1 1d       	adc	r26, r1
    3f60:	62 1f       	adc	r22, r18
    3f62:	83 9f       	mul	r24, r19
    3f64:	a0 0d       	add	r26, r0
    3f66:	61 1d       	adc	r22, r1
    3f68:	22 1f       	adc	r18, r18
    3f6a:	74 9f       	mul	r23, r20
    3f6c:	33 27       	eor	r19, r19
    3f6e:	a0 0d       	add	r26, r0
    3f70:	61 1d       	adc	r22, r1
    3f72:	23 1f       	adc	r18, r19
    3f74:	84 9f       	mul	r24, r20
    3f76:	60 0d       	add	r22, r0
    3f78:	21 1d       	adc	r18, r1
    3f7a:	82 2f       	mov	r24, r18
    3f7c:	76 2f       	mov	r23, r22
    3f7e:	6a 2f       	mov	r22, r26
    3f80:	11 24       	eor	r1, r1
    3f82:	9f 57       	subi	r25, 0x7F	; 127
    3f84:	50 40       	sbci	r21, 0x00	; 0
    3f86:	8a f0       	brmi	.+34     	; 0x3faa <__mulsf3_pse+0x84>
    3f88:	e1 f0       	breq	.+56     	; 0x3fc2 <__mulsf3_pse+0x9c>
    3f8a:	88 23       	and	r24, r24
    3f8c:	4a f0       	brmi	.+18     	; 0x3fa0 <__mulsf3_pse+0x7a>
    3f8e:	ee 0f       	add	r30, r30
    3f90:	ff 1f       	adc	r31, r31
    3f92:	bb 1f       	adc	r27, r27
    3f94:	66 1f       	adc	r22, r22
    3f96:	77 1f       	adc	r23, r23
    3f98:	88 1f       	adc	r24, r24
    3f9a:	91 50       	subi	r25, 0x01	; 1
    3f9c:	50 40       	sbci	r21, 0x00	; 0
    3f9e:	a9 f7       	brne	.-22     	; 0x3f8a <__mulsf3_pse+0x64>
    3fa0:	9e 3f       	cpi	r25, 0xFE	; 254
    3fa2:	51 05       	cpc	r21, r1
    3fa4:	70 f0       	brcs	.+28     	; 0x3fc2 <__mulsf3_pse+0x9c>
    3fa6:	e9 ce       	rjmp	.-558    	; 0x3d7a <__fp_inf>
    3fa8:	9f cf       	rjmp	.-194    	; 0x3ee8 <__fp_szero>
    3faa:	5f 3f       	cpi	r21, 0xFF	; 255
    3fac:	ec f3       	brlt	.-6      	; 0x3fa8 <__mulsf3_pse+0x82>
    3fae:	98 3e       	cpi	r25, 0xE8	; 232
    3fb0:	dc f3       	brlt	.-10     	; 0x3fa8 <__mulsf3_pse+0x82>
    3fb2:	86 95       	lsr	r24
    3fb4:	77 95       	ror	r23
    3fb6:	67 95       	ror	r22
    3fb8:	b7 95       	ror	r27
    3fba:	f7 95       	ror	r31
    3fbc:	e7 95       	ror	r30
    3fbe:	9f 5f       	subi	r25, 0xFF	; 255
    3fc0:	c1 f7       	brne	.-16     	; 0x3fb2 <__mulsf3_pse+0x8c>
    3fc2:	fe 2b       	or	r31, r30
    3fc4:	88 0f       	add	r24, r24
    3fc6:	91 1d       	adc	r25, r1
    3fc8:	96 95       	lsr	r25
    3fca:	87 95       	ror	r24
    3fcc:	97 f9       	bld	r25, 7
    3fce:	08 95       	ret

00003fd0 <round>:
    3fd0:	70 df       	rcall	.-288    	; 0x3eb2 <__fp_splitA>
    3fd2:	e0 f0       	brcs	.+56     	; 0x400c <round+0x3c>
    3fd4:	9e 37       	cpi	r25, 0x7E	; 126
    3fd6:	d8 f0       	brcs	.+54     	; 0x400e <round+0x3e>
    3fd8:	96 39       	cpi	r25, 0x96	; 150
    3fda:	b8 f4       	brcc	.+46     	; 0x400a <round+0x3a>
    3fdc:	9e 38       	cpi	r25, 0x8E	; 142
    3fde:	48 f4       	brcc	.+18     	; 0x3ff2 <round+0x22>
    3fe0:	67 2f       	mov	r22, r23
    3fe2:	78 2f       	mov	r23, r24
    3fe4:	88 27       	eor	r24, r24
    3fe6:	98 5f       	subi	r25, 0xF8	; 248
    3fe8:	f9 cf       	rjmp	.-14     	; 0x3fdc <round+0xc>
    3fea:	86 95       	lsr	r24
    3fec:	77 95       	ror	r23
    3fee:	67 95       	ror	r22
    3ff0:	93 95       	inc	r25
    3ff2:	95 39       	cpi	r25, 0x95	; 149
    3ff4:	d0 f3       	brcs	.-12     	; 0x3fea <round+0x1a>
    3ff6:	b6 2f       	mov	r27, r22
    3ff8:	b1 70       	andi	r27, 0x01	; 1
    3ffa:	6b 0f       	add	r22, r27
    3ffc:	71 1d       	adc	r23, r1
    3ffe:	81 1d       	adc	r24, r1
    4000:	20 f4       	brcc	.+8      	; 0x400a <round+0x3a>
    4002:	87 95       	ror	r24
    4004:	77 95       	ror	r23
    4006:	67 95       	ror	r22
    4008:	93 95       	inc	r25
    400a:	4d c0       	rjmp	.+154    	; 0x40a6 <__fp_mintl>
    400c:	bc ce       	rjmp	.-648    	; 0x3d86 <__fp_mpack>
    400e:	6c cf       	rjmp	.-296    	; 0x3ee8 <__fp_szero>

00004010 <sin>:
    4010:	9f 93       	push	r25
    4012:	fe de       	rcall	.-516    	; 0x3e10 <__fp_rempio2>
    4014:	0f 90       	pop	r0
    4016:	07 fc       	sbrc	r0, 7
    4018:	ee 5f       	subi	r30, 0xFE	; 254
    401a:	32 cf       	rjmp	.-412    	; 0x3e80 <__fp_sinus>
    401c:	11 f4       	brne	.+4      	; 0x4022 <sin+0x12>
    401e:	0e f4       	brtc	.+2      	; 0x4022 <sin+0x12>
    4020:	c0 ce       	rjmp	.-640    	; 0x3da2 <__fp_nan>
    4022:	b1 ce       	rjmp	.-670    	; 0x3d86 <__fp_mpack>

00004024 <sqrt>:
    4024:	46 df       	rcall	.-372    	; 0x3eb2 <__fp_splitA>
    4026:	d0 f3       	brcs	.-12     	; 0x401c <sin+0xc>
    4028:	99 23       	and	r25, r25
    402a:	d9 f3       	breq	.-10     	; 0x4022 <sin+0x12>
    402c:	ce f3       	brts	.-14     	; 0x4020 <sin+0x10>
    402e:	9f 57       	subi	r25, 0x7F	; 127
    4030:	55 0b       	sbc	r21, r21
    4032:	87 ff       	sbrs	r24, 7
    4034:	53 d0       	rcall	.+166    	; 0x40dc <__fp_norm2>
    4036:	00 24       	eor	r0, r0
    4038:	a0 e6       	ldi	r26, 0x60	; 96
    403a:	40 ea       	ldi	r20, 0xA0	; 160
    403c:	90 01       	movw	r18, r0
    403e:	80 58       	subi	r24, 0x80	; 128
    4040:	56 95       	lsr	r21
    4042:	97 95       	ror	r25
    4044:	28 f4       	brcc	.+10     	; 0x4050 <sqrt+0x2c>
    4046:	80 5c       	subi	r24, 0xC0	; 192
    4048:	66 0f       	add	r22, r22
    404a:	77 1f       	adc	r23, r23
    404c:	88 1f       	adc	r24, r24
    404e:	20 f0       	brcs	.+8      	; 0x4058 <sqrt+0x34>
    4050:	26 17       	cp	r18, r22
    4052:	37 07       	cpc	r19, r23
    4054:	48 07       	cpc	r20, r24
    4056:	30 f4       	brcc	.+12     	; 0x4064 <sqrt+0x40>
    4058:	62 1b       	sub	r22, r18
    405a:	73 0b       	sbc	r23, r19
    405c:	84 0b       	sbc	r24, r20
    405e:	20 29       	or	r18, r0
    4060:	31 29       	or	r19, r1
    4062:	4a 2b       	or	r20, r26
    4064:	a6 95       	lsr	r26
    4066:	17 94       	ror	r1
    4068:	07 94       	ror	r0
    406a:	20 25       	eor	r18, r0
    406c:	31 25       	eor	r19, r1
    406e:	4a 27       	eor	r20, r26
    4070:	58 f7       	brcc	.-42     	; 0x4048 <sqrt+0x24>
    4072:	66 0f       	add	r22, r22
    4074:	77 1f       	adc	r23, r23
    4076:	88 1f       	adc	r24, r24
    4078:	20 f0       	brcs	.+8      	; 0x4082 <sqrt+0x5e>
    407a:	26 17       	cp	r18, r22
    407c:	37 07       	cpc	r19, r23
    407e:	48 07       	cpc	r20, r24
    4080:	30 f4       	brcc	.+12     	; 0x408e <sqrt+0x6a>
    4082:	62 0b       	sbc	r22, r18
    4084:	73 0b       	sbc	r23, r19
    4086:	84 0b       	sbc	r24, r20
    4088:	20 0d       	add	r18, r0
    408a:	31 1d       	adc	r19, r1
    408c:	41 1d       	adc	r20, r1
    408e:	a0 95       	com	r26
    4090:	81 f7       	brne	.-32     	; 0x4072 <sqrt+0x4e>
    4092:	b9 01       	movw	r22, r18
    4094:	84 2f       	mov	r24, r20
    4096:	91 58       	subi	r25, 0x81	; 129
    4098:	88 0f       	add	r24, r24
    409a:	96 95       	lsr	r25
    409c:	87 95       	ror	r24
    409e:	08 95       	ret

000040a0 <square>:
    40a0:	9b 01       	movw	r18, r22
    40a2:	ac 01       	movw	r20, r24
    40a4:	32 cf       	rjmp	.-412    	; 0x3f0a <__mulsf3>

000040a6 <__fp_mintl>:
    40a6:	88 23       	and	r24, r24
    40a8:	71 f4       	brne	.+28     	; 0x40c6 <__fp_mintl+0x20>
    40aa:	77 23       	and	r23, r23
    40ac:	21 f0       	breq	.+8      	; 0x40b6 <__fp_mintl+0x10>
    40ae:	98 50       	subi	r25, 0x08	; 8
    40b0:	87 2b       	or	r24, r23
    40b2:	76 2f       	mov	r23, r22
    40b4:	07 c0       	rjmp	.+14     	; 0x40c4 <__fp_mintl+0x1e>
    40b6:	66 23       	and	r22, r22
    40b8:	11 f4       	brne	.+4      	; 0x40be <__fp_mintl+0x18>
    40ba:	99 27       	eor	r25, r25
    40bc:	0d c0       	rjmp	.+26     	; 0x40d8 <__fp_mintl+0x32>
    40be:	90 51       	subi	r25, 0x10	; 16
    40c0:	86 2b       	or	r24, r22
    40c2:	70 e0       	ldi	r23, 0x00	; 0
    40c4:	60 e0       	ldi	r22, 0x00	; 0
    40c6:	2a f0       	brmi	.+10     	; 0x40d2 <__fp_mintl+0x2c>
    40c8:	9a 95       	dec	r25
    40ca:	66 0f       	add	r22, r22
    40cc:	77 1f       	adc	r23, r23
    40ce:	88 1f       	adc	r24, r24
    40d0:	da f7       	brpl	.-10     	; 0x40c8 <__fp_mintl+0x22>
    40d2:	88 0f       	add	r24, r24
    40d4:	96 95       	lsr	r25
    40d6:	87 95       	ror	r24
    40d8:	97 f9       	bld	r25, 7
    40da:	08 95       	ret

000040dc <__fp_norm2>:
    40dc:	91 50       	subi	r25, 0x01	; 1
    40de:	50 40       	sbci	r21, 0x00	; 0
    40e0:	66 0f       	add	r22, r22
    40e2:	77 1f       	adc	r23, r23
    40e4:	88 1f       	adc	r24, r24
    40e6:	d2 f7       	brpl	.-12     	; 0x40dc <__fp_norm2>
    40e8:	08 95       	ret

000040ea <__fp_powsodd>:
    40ea:	9f 93       	push	r25
    40ec:	8f 93       	push	r24
    40ee:	7f 93       	push	r23
    40f0:	6f 93       	push	r22
    40f2:	ff 93       	push	r31
    40f4:	ef 93       	push	r30
    40f6:	9b 01       	movw	r18, r22
    40f8:	ac 01       	movw	r20, r24
    40fa:	07 df       	rcall	.-498    	; 0x3f0a <__mulsf3>
    40fc:	ef 91       	pop	r30
    40fe:	ff 91       	pop	r31
    4100:	53 de       	rcall	.-858    	; 0x3da8 <__fp_powser>
    4102:	2f 91       	pop	r18
    4104:	3f 91       	pop	r19
    4106:	4f 91       	pop	r20
    4108:	5f 91       	pop	r21
    410a:	ff ce       	rjmp	.-514    	; 0x3f0a <__mulsf3>

0000410c <dtostrf>:
    410c:	ef 92       	push	r14
    410e:	0f 93       	push	r16
    4110:	1f 93       	push	r17
    4112:	cf 93       	push	r28
    4114:	df 93       	push	r29
    4116:	e8 01       	movw	r28, r16
    4118:	47 ff       	sbrs	r20, 7
    411a:	02 c0       	rjmp	.+4      	; 0x4120 <dtostrf+0x14>
    411c:	34 e1       	ldi	r19, 0x14	; 20
    411e:	01 c0       	rjmp	.+2      	; 0x4122 <dtostrf+0x16>
    4120:	34 e0       	ldi	r19, 0x04	; 4
    4122:	e4 2f       	mov	r30, r20
    4124:	ff 27       	eor	r31, r31
    4126:	e7 fd       	sbrc	r30, 7
    4128:	f0 95       	com	r31
    412a:	f7 ff       	sbrs	r31, 7
    412c:	03 c0       	rjmp	.+6      	; 0x4134 <dtostrf+0x28>
    412e:	f1 95       	neg	r31
    4130:	e1 95       	neg	r30
    4132:	f1 09       	sbc	r31, r1
    4134:	e3 2e       	mov	r14, r19
    4136:	02 2f       	mov	r16, r18
    4138:	2e 2f       	mov	r18, r30
    413a:	ae 01       	movw	r20, r28
    413c:	0e 94 f2 22 	call	0x45e4	; 0x45e4 <dtoa_prf>
    4140:	ce 01       	movw	r24, r28
    4142:	df 91       	pop	r29
    4144:	cf 91       	pop	r28
    4146:	1f 91       	pop	r17
    4148:	0f 91       	pop	r16
    414a:	ef 90       	pop	r14
    414c:	08 95       	ret

0000414e <atof>:
    414e:	66 27       	eor	r22, r22
    4150:	77 27       	eor	r23, r23
    4152:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <strtod>

00004156 <atoi>:
    4156:	fc 01       	movw	r30, r24
    4158:	88 27       	eor	r24, r24
    415a:	99 27       	eor	r25, r25
    415c:	e8 94       	clt
    415e:	21 91       	ld	r18, Z+
    4160:	20 32       	cpi	r18, 0x20	; 32
    4162:	e9 f3       	breq	.-6      	; 0x415e <atoi+0x8>
    4164:	29 30       	cpi	r18, 0x09	; 9
    4166:	10 f0       	brcs	.+4      	; 0x416c <atoi+0x16>
    4168:	2e 30       	cpi	r18, 0x0E	; 14
    416a:	c8 f3       	brcs	.-14     	; 0x415e <atoi+0x8>
    416c:	2b 32       	cpi	r18, 0x2B	; 43
    416e:	41 f0       	breq	.+16     	; 0x4180 <atoi+0x2a>
    4170:	2d 32       	cpi	r18, 0x2D	; 45
    4172:	39 f4       	brne	.+14     	; 0x4182 <atoi+0x2c>
    4174:	68 94       	set
    4176:	04 c0       	rjmp	.+8      	; 0x4180 <atoi+0x2a>
    4178:	0e 94 00 22 	call	0x4400	; 0x4400 <__mulhi_const_10>
    417c:	82 0f       	add	r24, r18
    417e:	91 1d       	adc	r25, r1
    4180:	21 91       	ld	r18, Z+
    4182:	20 53       	subi	r18, 0x30	; 48
    4184:	2a 30       	cpi	r18, 0x0A	; 10
    4186:	c0 f3       	brcs	.-16     	; 0x4178 <atoi+0x22>
    4188:	1e f4       	brtc	.+6      	; 0x4190 <atoi+0x3a>
    418a:	90 95       	com	r25
    418c:	81 95       	neg	r24
    418e:	9f 4f       	sbci	r25, 0xFF	; 255
    4190:	08 95       	ret

00004192 <__ftoa_engine>:
    4192:	28 30       	cpi	r18, 0x08	; 8
    4194:	08 f0       	brcs	.+2      	; 0x4198 <__ftoa_engine+0x6>
    4196:	27 e0       	ldi	r18, 0x07	; 7
    4198:	33 27       	eor	r19, r19
    419a:	da 01       	movw	r26, r20
    419c:	99 0f       	add	r25, r25
    419e:	31 1d       	adc	r19, r1
    41a0:	87 fd       	sbrc	r24, 7
    41a2:	91 60       	ori	r25, 0x01	; 1
    41a4:	00 96       	adiw	r24, 0x00	; 0
    41a6:	61 05       	cpc	r22, r1
    41a8:	71 05       	cpc	r23, r1
    41aa:	39 f4       	brne	.+14     	; 0x41ba <__ftoa_engine+0x28>
    41ac:	32 60       	ori	r19, 0x02	; 2
    41ae:	2e 5f       	subi	r18, 0xFE	; 254
    41b0:	3d 93       	st	X+, r19
    41b2:	30 e3       	ldi	r19, 0x30	; 48
    41b4:	2a 95       	dec	r18
    41b6:	e1 f7       	brne	.-8      	; 0x41b0 <__ftoa_engine+0x1e>
    41b8:	08 95       	ret
    41ba:	9f 3f       	cpi	r25, 0xFF	; 255
    41bc:	30 f0       	brcs	.+12     	; 0x41ca <__ftoa_engine+0x38>
    41be:	80 38       	cpi	r24, 0x80	; 128
    41c0:	71 05       	cpc	r23, r1
    41c2:	61 05       	cpc	r22, r1
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <__ftoa_engine+0x36>
    41c6:	3c 5f       	subi	r19, 0xFC	; 252
    41c8:	3c 5f       	subi	r19, 0xFC	; 252
    41ca:	3d 93       	st	X+, r19
    41cc:	91 30       	cpi	r25, 0x01	; 1
    41ce:	08 f0       	brcs	.+2      	; 0x41d2 <__ftoa_engine+0x40>
    41d0:	80 68       	ori	r24, 0x80	; 128
    41d2:	91 1d       	adc	r25, r1
    41d4:	df 93       	push	r29
    41d6:	cf 93       	push	r28
    41d8:	1f 93       	push	r17
    41da:	0f 93       	push	r16
    41dc:	ff 92       	push	r15
    41de:	ef 92       	push	r14
    41e0:	19 2f       	mov	r17, r25
    41e2:	98 7f       	andi	r25, 0xF8	; 248
    41e4:	96 95       	lsr	r25
    41e6:	e9 2f       	mov	r30, r25
    41e8:	96 95       	lsr	r25
    41ea:	96 95       	lsr	r25
    41ec:	e9 0f       	add	r30, r25
    41ee:	ff 27       	eor	r31, r31
    41f0:	ee 55       	subi	r30, 0x5E	; 94
    41f2:	fd 4f       	sbci	r31, 0xFD	; 253
    41f4:	99 27       	eor	r25, r25
    41f6:	33 27       	eor	r19, r19
    41f8:	ee 24       	eor	r14, r14
    41fa:	ff 24       	eor	r15, r15
    41fc:	a7 01       	movw	r20, r14
    41fe:	e7 01       	movw	r28, r14
    4200:	05 90       	lpm	r0, Z+
    4202:	08 94       	sec
    4204:	07 94       	ror	r0
    4206:	28 f4       	brcc	.+10     	; 0x4212 <__ftoa_engine+0x80>
    4208:	36 0f       	add	r19, r22
    420a:	e7 1e       	adc	r14, r23
    420c:	f8 1e       	adc	r15, r24
    420e:	49 1f       	adc	r20, r25
    4210:	51 1d       	adc	r21, r1
    4212:	66 0f       	add	r22, r22
    4214:	77 1f       	adc	r23, r23
    4216:	88 1f       	adc	r24, r24
    4218:	99 1f       	adc	r25, r25
    421a:	06 94       	lsr	r0
    421c:	a1 f7       	brne	.-24     	; 0x4206 <__ftoa_engine+0x74>
    421e:	05 90       	lpm	r0, Z+
    4220:	07 94       	ror	r0
    4222:	28 f4       	brcc	.+10     	; 0x422e <__ftoa_engine+0x9c>
    4224:	e7 0e       	add	r14, r23
    4226:	f8 1e       	adc	r15, r24
    4228:	49 1f       	adc	r20, r25
    422a:	56 1f       	adc	r21, r22
    422c:	c1 1d       	adc	r28, r1
    422e:	77 0f       	add	r23, r23
    4230:	88 1f       	adc	r24, r24
    4232:	99 1f       	adc	r25, r25
    4234:	66 1f       	adc	r22, r22
    4236:	06 94       	lsr	r0
    4238:	a1 f7       	brne	.-24     	; 0x4222 <__ftoa_engine+0x90>
    423a:	05 90       	lpm	r0, Z+
    423c:	07 94       	ror	r0
    423e:	28 f4       	brcc	.+10     	; 0x424a <__ftoa_engine+0xb8>
    4240:	f8 0e       	add	r15, r24
    4242:	49 1f       	adc	r20, r25
    4244:	56 1f       	adc	r21, r22
    4246:	c7 1f       	adc	r28, r23
    4248:	d1 1d       	adc	r29, r1
    424a:	88 0f       	add	r24, r24
    424c:	99 1f       	adc	r25, r25
    424e:	66 1f       	adc	r22, r22
    4250:	77 1f       	adc	r23, r23
    4252:	06 94       	lsr	r0
    4254:	a1 f7       	brne	.-24     	; 0x423e <__ftoa_engine+0xac>
    4256:	05 90       	lpm	r0, Z+
    4258:	07 94       	ror	r0
    425a:	20 f4       	brcc	.+8      	; 0x4264 <__ftoa_engine+0xd2>
    425c:	49 0f       	add	r20, r25
    425e:	56 1f       	adc	r21, r22
    4260:	c7 1f       	adc	r28, r23
    4262:	d8 1f       	adc	r29, r24
    4264:	99 0f       	add	r25, r25
    4266:	66 1f       	adc	r22, r22
    4268:	77 1f       	adc	r23, r23
    426a:	88 1f       	adc	r24, r24
    426c:	06 94       	lsr	r0
    426e:	a9 f7       	brne	.-22     	; 0x425a <__ftoa_engine+0xc8>
    4270:	84 91       	lpm	r24, Z
    4272:	10 95       	com	r17
    4274:	17 70       	andi	r17, 0x07	; 7
    4276:	41 f0       	breq	.+16     	; 0x4288 <__ftoa_engine+0xf6>
    4278:	d6 95       	lsr	r29
    427a:	c7 95       	ror	r28
    427c:	57 95       	ror	r21
    427e:	47 95       	ror	r20
    4280:	f7 94       	ror	r15
    4282:	e7 94       	ror	r14
    4284:	1a 95       	dec	r17
    4286:	c1 f7       	brne	.-16     	; 0x4278 <__ftoa_engine+0xe6>
    4288:	e8 e4       	ldi	r30, 0x48	; 72
    428a:	f2 e0       	ldi	r31, 0x02	; 2
    428c:	68 94       	set
    428e:	15 90       	lpm	r1, Z+
    4290:	15 91       	lpm	r17, Z+
    4292:	35 91       	lpm	r19, Z+
    4294:	65 91       	lpm	r22, Z+
    4296:	95 91       	lpm	r25, Z+
    4298:	05 90       	lpm	r0, Z+
    429a:	7f e2       	ldi	r23, 0x2F	; 47
    429c:	73 95       	inc	r23
    429e:	e1 18       	sub	r14, r1
    42a0:	f1 0a       	sbc	r15, r17
    42a2:	43 0b       	sbc	r20, r19
    42a4:	56 0b       	sbc	r21, r22
    42a6:	c9 0b       	sbc	r28, r25
    42a8:	d0 09       	sbc	r29, r0
    42aa:	c0 f7       	brcc	.-16     	; 0x429c <__ftoa_engine+0x10a>
    42ac:	e1 0c       	add	r14, r1
    42ae:	f1 1e       	adc	r15, r17
    42b0:	43 1f       	adc	r20, r19
    42b2:	56 1f       	adc	r21, r22
    42b4:	c9 1f       	adc	r28, r25
    42b6:	d0 1d       	adc	r29, r0
    42b8:	7e f4       	brtc	.+30     	; 0x42d8 <__ftoa_engine+0x146>
    42ba:	70 33       	cpi	r23, 0x30	; 48
    42bc:	11 f4       	brne	.+4      	; 0x42c2 <__ftoa_engine+0x130>
    42be:	8a 95       	dec	r24
    42c0:	e6 cf       	rjmp	.-52     	; 0x428e <__ftoa_engine+0xfc>
    42c2:	e8 94       	clt
    42c4:	01 50       	subi	r16, 0x01	; 1
    42c6:	30 f0       	brcs	.+12     	; 0x42d4 <__ftoa_engine+0x142>
    42c8:	08 0f       	add	r16, r24
    42ca:	0a f4       	brpl	.+2      	; 0x42ce <__ftoa_engine+0x13c>
    42cc:	00 27       	eor	r16, r16
    42ce:	02 17       	cp	r16, r18
    42d0:	08 f4       	brcc	.+2      	; 0x42d4 <__ftoa_engine+0x142>
    42d2:	20 2f       	mov	r18, r16
    42d4:	23 95       	inc	r18
    42d6:	02 2f       	mov	r16, r18
    42d8:	7a 33       	cpi	r23, 0x3A	; 58
    42da:	28 f0       	brcs	.+10     	; 0x42e6 <__ftoa_engine+0x154>
    42dc:	79 e3       	ldi	r23, 0x39	; 57
    42de:	7d 93       	st	X+, r23
    42e0:	2a 95       	dec	r18
    42e2:	e9 f7       	brne	.-6      	; 0x42de <__ftoa_engine+0x14c>
    42e4:	10 c0       	rjmp	.+32     	; 0x4306 <__ftoa_engine+0x174>
    42e6:	7d 93       	st	X+, r23
    42e8:	2a 95       	dec	r18
    42ea:	89 f6       	brne	.-94     	; 0x428e <__ftoa_engine+0xfc>
    42ec:	06 94       	lsr	r0
    42ee:	97 95       	ror	r25
    42f0:	67 95       	ror	r22
    42f2:	37 95       	ror	r19
    42f4:	17 95       	ror	r17
    42f6:	17 94       	ror	r1
    42f8:	e1 18       	sub	r14, r1
    42fa:	f1 0a       	sbc	r15, r17
    42fc:	43 0b       	sbc	r20, r19
    42fe:	56 0b       	sbc	r21, r22
    4300:	c9 0b       	sbc	r28, r25
    4302:	d0 09       	sbc	r29, r0
    4304:	98 f0       	brcs	.+38     	; 0x432c <__ftoa_engine+0x19a>
    4306:	23 95       	inc	r18
    4308:	7e 91       	ld	r23, -X
    430a:	73 95       	inc	r23
    430c:	7a 33       	cpi	r23, 0x3A	; 58
    430e:	08 f0       	brcs	.+2      	; 0x4312 <__ftoa_engine+0x180>
    4310:	70 e3       	ldi	r23, 0x30	; 48
    4312:	7c 93       	st	X, r23
    4314:	20 13       	cpse	r18, r16
    4316:	b8 f7       	brcc	.-18     	; 0x4306 <__ftoa_engine+0x174>
    4318:	7e 91       	ld	r23, -X
    431a:	70 61       	ori	r23, 0x10	; 16
    431c:	7d 93       	st	X+, r23
    431e:	30 f0       	brcs	.+12     	; 0x432c <__ftoa_engine+0x19a>
    4320:	83 95       	inc	r24
    4322:	71 e3       	ldi	r23, 0x31	; 49
    4324:	7d 93       	st	X+, r23
    4326:	70 e3       	ldi	r23, 0x30	; 48
    4328:	2a 95       	dec	r18
    432a:	e1 f7       	brne	.-8      	; 0x4324 <__ftoa_engine+0x192>
    432c:	11 24       	eor	r1, r1
    432e:	ef 90       	pop	r14
    4330:	ff 90       	pop	r15
    4332:	0f 91       	pop	r16
    4334:	1f 91       	pop	r17
    4336:	cf 91       	pop	r28
    4338:	df 91       	pop	r29
    433a:	99 27       	eor	r25, r25
    433c:	87 fd       	sbrc	r24, 7
    433e:	90 95       	com	r25
    4340:	08 95       	ret

00004342 <strnlen_P>:
    4342:	fc 01       	movw	r30, r24
    4344:	05 90       	lpm	r0, Z+
    4346:	61 50       	subi	r22, 0x01	; 1
    4348:	70 40       	sbci	r23, 0x00	; 0
    434a:	01 10       	cpse	r0, r1
    434c:	d8 f7       	brcc	.-10     	; 0x4344 <strnlen_P+0x2>
    434e:	80 95       	com	r24
    4350:	90 95       	com	r25
    4352:	8e 0f       	add	r24, r30
    4354:	9f 1f       	adc	r25, r31
    4356:	08 95       	ret

00004358 <strtok>:
    4358:	46 eb       	ldi	r20, 0xB6	; 182
    435a:	55 e0       	ldi	r21, 0x05	; 5
    435c:	0e 94 ce 21 	call	0x439c	; 0x439c <strtok_r>
    4360:	08 95       	ret

00004362 <strchr>:
    4362:	fc 01       	movw	r30, r24
    4364:	81 91       	ld	r24, Z+
    4366:	86 17       	cp	r24, r22
    4368:	21 f0       	breq	.+8      	; 0x4372 <strchr+0x10>
    436a:	88 23       	and	r24, r24
    436c:	d9 f7       	brne	.-10     	; 0x4364 <strchr+0x2>
    436e:	99 27       	eor	r25, r25
    4370:	08 95       	ret
    4372:	31 97       	sbiw	r30, 0x01	; 1
    4374:	cf 01       	movw	r24, r30
    4376:	08 95       	ret

00004378 <strcpy>:
    4378:	fb 01       	movw	r30, r22
    437a:	dc 01       	movw	r26, r24
    437c:	01 90       	ld	r0, Z+
    437e:	0d 92       	st	X+, r0
    4380:	00 20       	and	r0, r0
    4382:	e1 f7       	brne	.-8      	; 0x437c <strcpy+0x4>
    4384:	08 95       	ret

00004386 <strnlen>:
    4386:	fc 01       	movw	r30, r24
    4388:	61 50       	subi	r22, 0x01	; 1
    438a:	70 40       	sbci	r23, 0x00	; 0
    438c:	01 90       	ld	r0, Z+
    438e:	01 10       	cpse	r0, r1
    4390:	d8 f7       	brcc	.-10     	; 0x4388 <strnlen+0x2>
    4392:	80 95       	com	r24
    4394:	90 95       	com	r25
    4396:	8e 0f       	add	r24, r30
    4398:	9f 1f       	adc	r25, r31
    439a:	08 95       	ret

0000439c <strtok_r>:
    439c:	fa 01       	movw	r30, r20
    439e:	a1 91       	ld	r26, Z+
    43a0:	b0 81       	ld	r27, Z
    43a2:	00 97       	sbiw	r24, 0x00	; 0
    43a4:	19 f4       	brne	.+6      	; 0x43ac <strtok_r+0x10>
    43a6:	10 97       	sbiw	r26, 0x00	; 0
    43a8:	e1 f0       	breq	.+56     	; 0x43e2 <strtok_r+0x46>
    43aa:	cd 01       	movw	r24, r26
    43ac:	dc 01       	movw	r26, r24
    43ae:	cd 01       	movw	r24, r26
    43b0:	0d 90       	ld	r0, X+
    43b2:	00 20       	and	r0, r0
    43b4:	11 f4       	brne	.+4      	; 0x43ba <strtok_r+0x1e>
    43b6:	c0 01       	movw	r24, r0
    43b8:	13 c0       	rjmp	.+38     	; 0x43e0 <strtok_r+0x44>
    43ba:	fb 01       	movw	r30, r22
    43bc:	21 91       	ld	r18, Z+
    43be:	22 23       	and	r18, r18
    43c0:	19 f0       	breq	.+6      	; 0x43c8 <strtok_r+0x2c>
    43c2:	20 15       	cp	r18, r0
    43c4:	d9 f7       	brne	.-10     	; 0x43bc <strtok_r+0x20>
    43c6:	f3 cf       	rjmp	.-26     	; 0x43ae <strtok_r+0x12>
    43c8:	fb 01       	movw	r30, r22
    43ca:	21 91       	ld	r18, Z+
    43cc:	20 15       	cp	r18, r0
    43ce:	19 f4       	brne	.+6      	; 0x43d6 <strtok_r+0x3a>
    43d0:	1e 92       	st	-X, r1
    43d2:	11 96       	adiw	r26, 0x01	; 1
    43d4:	06 c0       	rjmp	.+12     	; 0x43e2 <strtok_r+0x46>
    43d6:	22 23       	and	r18, r18
    43d8:	c1 f7       	brne	.-16     	; 0x43ca <strtok_r+0x2e>
    43da:	0d 90       	ld	r0, X+
    43dc:	00 20       	and	r0, r0
    43de:	a1 f7       	brne	.-24     	; 0x43c8 <strtok_r+0x2c>
    43e0:	d0 01       	movw	r26, r0
    43e2:	fa 01       	movw	r30, r20
    43e4:	a1 93       	st	Z+, r26
    43e6:	b0 83       	st	Z, r27
    43e8:	08 95       	ret

000043ea <__itoa_ncheck>:
    43ea:	bb 27       	eor	r27, r27
    43ec:	4a 30       	cpi	r20, 0x0A	; 10
    43ee:	31 f4       	brne	.+12     	; 0x43fc <__itoa_ncheck+0x12>
    43f0:	99 23       	and	r25, r25
    43f2:	22 f4       	brpl	.+8      	; 0x43fc <__itoa_ncheck+0x12>
    43f4:	bd e2       	ldi	r27, 0x2D	; 45
    43f6:	90 95       	com	r25
    43f8:	81 95       	neg	r24
    43fa:	9f 4f       	sbci	r25, 0xFF	; 255
    43fc:	0c 94 09 22 	jmp	0x4412	; 0x4412 <__utoa_common>

00004400 <__mulhi_const_10>:
    4400:	7a e0       	ldi	r23, 0x0A	; 10
    4402:	97 9f       	mul	r25, r23
    4404:	90 2d       	mov	r25, r0
    4406:	87 9f       	mul	r24, r23
    4408:	80 2d       	mov	r24, r0
    440a:	91 0d       	add	r25, r1
    440c:	11 24       	eor	r1, r1
    440e:	08 95       	ret

00004410 <__utoa_ncheck>:
    4410:	bb 27       	eor	r27, r27

00004412 <__utoa_common>:
    4412:	fb 01       	movw	r30, r22
    4414:	55 27       	eor	r21, r21
    4416:	aa 27       	eor	r26, r26
    4418:	88 0f       	add	r24, r24
    441a:	99 1f       	adc	r25, r25
    441c:	aa 1f       	adc	r26, r26
    441e:	a4 17       	cp	r26, r20
    4420:	10 f0       	brcs	.+4      	; 0x4426 <__utoa_common+0x14>
    4422:	a4 1b       	sub	r26, r20
    4424:	83 95       	inc	r24
    4426:	50 51       	subi	r21, 0x10	; 16
    4428:	b9 f7       	brne	.-18     	; 0x4418 <__utoa_common+0x6>
    442a:	a0 5d       	subi	r26, 0xD0	; 208
    442c:	aa 33       	cpi	r26, 0x3A	; 58
    442e:	08 f0       	brcs	.+2      	; 0x4432 <__utoa_common+0x20>
    4430:	a9 5d       	subi	r26, 0xD9	; 217
    4432:	a1 93       	st	Z+, r26
    4434:	00 97       	sbiw	r24, 0x00	; 0
    4436:	79 f7       	brne	.-34     	; 0x4416 <__utoa_common+0x4>
    4438:	b1 11       	cpse	r27, r1
    443a:	b1 93       	st	Z+, r27
    443c:	11 92       	st	Z+, r1
    443e:	cb 01       	movw	r24, r22
    4440:	0c 94 f3 25 	jmp	0x4be6	; 0x4be6 <strrev>

00004444 <fputc>:
    4444:	0f 93       	push	r16
    4446:	1f 93       	push	r17
    4448:	cf 93       	push	r28
    444a:	df 93       	push	r29
    444c:	18 2f       	mov	r17, r24
    444e:	09 2f       	mov	r16, r25
    4450:	eb 01       	movw	r28, r22
    4452:	8b 81       	ldd	r24, Y+3	; 0x03
    4454:	81 fd       	sbrc	r24, 1
    4456:	03 c0       	rjmp	.+6      	; 0x445e <fputc+0x1a>
    4458:	8f ef       	ldi	r24, 0xFF	; 255
    445a:	9f ef       	ldi	r25, 0xFF	; 255
    445c:	20 c0       	rjmp	.+64     	; 0x449e <fputc+0x5a>
    445e:	82 ff       	sbrs	r24, 2
    4460:	10 c0       	rjmp	.+32     	; 0x4482 <fputc+0x3e>
    4462:	4e 81       	ldd	r20, Y+6	; 0x06
    4464:	5f 81       	ldd	r21, Y+7	; 0x07
    4466:	2c 81       	ldd	r18, Y+4	; 0x04
    4468:	3d 81       	ldd	r19, Y+5	; 0x05
    446a:	42 17       	cp	r20, r18
    446c:	53 07       	cpc	r21, r19
    446e:	7c f4       	brge	.+30     	; 0x448e <fputc+0x4a>
    4470:	e8 81       	ld	r30, Y
    4472:	f9 81       	ldd	r31, Y+1	; 0x01
    4474:	9f 01       	movw	r18, r30
    4476:	2f 5f       	subi	r18, 0xFF	; 255
    4478:	3f 4f       	sbci	r19, 0xFF	; 255
    447a:	39 83       	std	Y+1, r19	; 0x01
    447c:	28 83       	st	Y, r18
    447e:	10 83       	st	Z, r17
    4480:	06 c0       	rjmp	.+12     	; 0x448e <fputc+0x4a>
    4482:	e8 85       	ldd	r30, Y+8	; 0x08
    4484:	f9 85       	ldd	r31, Y+9	; 0x09
    4486:	81 2f       	mov	r24, r17
    4488:	09 95       	icall
    448a:	89 2b       	or	r24, r25
    448c:	29 f7       	brne	.-54     	; 0x4458 <fputc+0x14>
    448e:	2e 81       	ldd	r18, Y+6	; 0x06
    4490:	3f 81       	ldd	r19, Y+7	; 0x07
    4492:	2f 5f       	subi	r18, 0xFF	; 255
    4494:	3f 4f       	sbci	r19, 0xFF	; 255
    4496:	3f 83       	std	Y+7, r19	; 0x07
    4498:	2e 83       	std	Y+6, r18	; 0x06
    449a:	81 2f       	mov	r24, r17
    449c:	90 2f       	mov	r25, r16
    449e:	df 91       	pop	r29
    44a0:	cf 91       	pop	r28
    44a2:	1f 91       	pop	r17
    44a4:	0f 91       	pop	r16
    44a6:	08 95       	ret

000044a8 <sprintf>:
    44a8:	ae e0       	ldi	r26, 0x0E	; 14
    44aa:	b0 e0       	ldi	r27, 0x00	; 0
    44ac:	ea e5       	ldi	r30, 0x5A	; 90
    44ae:	f2 e2       	ldi	r31, 0x22	; 34
    44b0:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__prologue_saves__+0x1c>
    44b4:	0d 89       	ldd	r16, Y+21	; 0x15
    44b6:	1e 89       	ldd	r17, Y+22	; 0x16
    44b8:	86 e0       	ldi	r24, 0x06	; 6
    44ba:	8c 83       	std	Y+4, r24	; 0x04
    44bc:	1a 83       	std	Y+2, r17	; 0x02
    44be:	09 83       	std	Y+1, r16	; 0x01
    44c0:	8f ef       	ldi	r24, 0xFF	; 255
    44c2:	9f e7       	ldi	r25, 0x7F	; 127
    44c4:	9e 83       	std	Y+6, r25	; 0x06
    44c6:	8d 83       	std	Y+5, r24	; 0x05
    44c8:	ae 01       	movw	r20, r28
    44ca:	47 5e       	subi	r20, 0xE7	; 231
    44cc:	5f 4f       	sbci	r21, 0xFF	; 255
    44ce:	6f 89       	ldd	r22, Y+23	; 0x17
    44d0:	78 8d       	ldd	r23, Y+24	; 0x18
    44d2:	ce 01       	movw	r24, r28
    44d4:	01 96       	adiw	r24, 0x01	; 1
    44d6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <vfprintf>
    44da:	ef 81       	ldd	r30, Y+7	; 0x07
    44dc:	f8 85       	ldd	r31, Y+8	; 0x08
    44de:	e0 0f       	add	r30, r16
    44e0:	f1 1f       	adc	r31, r17
    44e2:	10 82       	st	Z, r1
    44e4:	2e 96       	adiw	r28, 0x0e	; 14
    44e6:	e4 e0       	ldi	r30, 0x04	; 4
    44e8:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <__epilogue_restores__+0x1c>

000044ec <__ultoa_invert>:
    44ec:	fa 01       	movw	r30, r20
    44ee:	aa 27       	eor	r26, r26
    44f0:	28 30       	cpi	r18, 0x08	; 8
    44f2:	51 f1       	breq	.+84     	; 0x4548 <__ultoa_invert+0x5c>
    44f4:	20 31       	cpi	r18, 0x10	; 16
    44f6:	81 f1       	breq	.+96     	; 0x4558 <__ultoa_invert+0x6c>
    44f8:	e8 94       	clt
    44fa:	6f 93       	push	r22
    44fc:	6e 7f       	andi	r22, 0xFE	; 254
    44fe:	6e 5f       	subi	r22, 0xFE	; 254
    4500:	7f 4f       	sbci	r23, 0xFF	; 255
    4502:	8f 4f       	sbci	r24, 0xFF	; 255
    4504:	9f 4f       	sbci	r25, 0xFF	; 255
    4506:	af 4f       	sbci	r26, 0xFF	; 255
    4508:	b1 e0       	ldi	r27, 0x01	; 1
    450a:	3e d0       	rcall	.+124    	; 0x4588 <__ultoa_invert+0x9c>
    450c:	b4 e0       	ldi	r27, 0x04	; 4
    450e:	3c d0       	rcall	.+120    	; 0x4588 <__ultoa_invert+0x9c>
    4510:	67 0f       	add	r22, r23
    4512:	78 1f       	adc	r23, r24
    4514:	89 1f       	adc	r24, r25
    4516:	9a 1f       	adc	r25, r26
    4518:	a1 1d       	adc	r26, r1
    451a:	68 0f       	add	r22, r24
    451c:	79 1f       	adc	r23, r25
    451e:	8a 1f       	adc	r24, r26
    4520:	91 1d       	adc	r25, r1
    4522:	a1 1d       	adc	r26, r1
    4524:	6a 0f       	add	r22, r26
    4526:	71 1d       	adc	r23, r1
    4528:	81 1d       	adc	r24, r1
    452a:	91 1d       	adc	r25, r1
    452c:	a1 1d       	adc	r26, r1
    452e:	20 d0       	rcall	.+64     	; 0x4570 <__ultoa_invert+0x84>
    4530:	09 f4       	brne	.+2      	; 0x4534 <__ultoa_invert+0x48>
    4532:	68 94       	set
    4534:	3f 91       	pop	r19
    4536:	2a e0       	ldi	r18, 0x0A	; 10
    4538:	26 9f       	mul	r18, r22
    453a:	11 24       	eor	r1, r1
    453c:	30 19       	sub	r19, r0
    453e:	30 5d       	subi	r19, 0xD0	; 208
    4540:	31 93       	st	Z+, r19
    4542:	de f6       	brtc	.-74     	; 0x44fa <__ultoa_invert+0xe>
    4544:	cf 01       	movw	r24, r30
    4546:	08 95       	ret
    4548:	46 2f       	mov	r20, r22
    454a:	47 70       	andi	r20, 0x07	; 7
    454c:	40 5d       	subi	r20, 0xD0	; 208
    454e:	41 93       	st	Z+, r20
    4550:	b3 e0       	ldi	r27, 0x03	; 3
    4552:	0f d0       	rcall	.+30     	; 0x4572 <__ultoa_invert+0x86>
    4554:	c9 f7       	brne	.-14     	; 0x4548 <__ultoa_invert+0x5c>
    4556:	f6 cf       	rjmp	.-20     	; 0x4544 <__ultoa_invert+0x58>
    4558:	46 2f       	mov	r20, r22
    455a:	4f 70       	andi	r20, 0x0F	; 15
    455c:	40 5d       	subi	r20, 0xD0	; 208
    455e:	4a 33       	cpi	r20, 0x3A	; 58
    4560:	18 f0       	brcs	.+6      	; 0x4568 <__ultoa_invert+0x7c>
    4562:	49 5d       	subi	r20, 0xD9	; 217
    4564:	31 fd       	sbrc	r19, 1
    4566:	40 52       	subi	r20, 0x20	; 32
    4568:	41 93       	st	Z+, r20
    456a:	02 d0       	rcall	.+4      	; 0x4570 <__ultoa_invert+0x84>
    456c:	a9 f7       	brne	.-22     	; 0x4558 <__ultoa_invert+0x6c>
    456e:	ea cf       	rjmp	.-44     	; 0x4544 <__ultoa_invert+0x58>
    4570:	b4 e0       	ldi	r27, 0x04	; 4
    4572:	a6 95       	lsr	r26
    4574:	97 95       	ror	r25
    4576:	87 95       	ror	r24
    4578:	77 95       	ror	r23
    457a:	67 95       	ror	r22
    457c:	ba 95       	dec	r27
    457e:	c9 f7       	brne	.-14     	; 0x4572 <__ultoa_invert+0x86>
    4580:	00 97       	sbiw	r24, 0x00	; 0
    4582:	61 05       	cpc	r22, r1
    4584:	71 05       	cpc	r23, r1
    4586:	08 95       	ret
    4588:	9b 01       	movw	r18, r22
    458a:	ac 01       	movw	r20, r24
    458c:	0a 2e       	mov	r0, r26
    458e:	06 94       	lsr	r0
    4590:	57 95       	ror	r21
    4592:	47 95       	ror	r20
    4594:	37 95       	ror	r19
    4596:	27 95       	ror	r18
    4598:	ba 95       	dec	r27
    459a:	c9 f7       	brne	.-14     	; 0x458e <__ultoa_invert+0xa2>
    459c:	62 0f       	add	r22, r18
    459e:	73 1f       	adc	r23, r19
    45a0:	84 1f       	adc	r24, r20
    45a2:	95 1f       	adc	r25, r21
    45a4:	a0 1d       	adc	r26, r0
    45a6:	08 95       	ret

000045a8 <__eerd_dword_m328p>:
    45a8:	a6 e1       	ldi	r26, 0x16	; 22
    45aa:	b0 e0       	ldi	r27, 0x00	; 0
    45ac:	44 e0       	ldi	r20, 0x04	; 4
    45ae:	50 e0       	ldi	r21, 0x00	; 0
    45b0:	0c 94 05 26 	jmp	0x4c0a	; 0x4c0a <__eerd_blraw_m328p>

000045b4 <__eerd_word_m328p>:
    45b4:	a8 e1       	ldi	r26, 0x18	; 24
    45b6:	b0 e0       	ldi	r27, 0x00	; 0
    45b8:	42 e0       	ldi	r20, 0x02	; 2
    45ba:	50 e0       	ldi	r21, 0x00	; 0
    45bc:	0c 94 05 26 	jmp	0x4c0a	; 0x4c0a <__eerd_blraw_m328p>

000045c0 <__eeupd_dword_m328p>:
    45c0:	03 96       	adiw	r24, 0x03	; 3
    45c2:	27 2f       	mov	r18, r23
    45c4:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__eeupd_r18_m328p>
    45c8:	0e 94 13 26 	call	0x4c26	; 0x4c26 <__eeupd_byte_m328p>
    45cc:	25 2f       	mov	r18, r21
    45ce:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__eeupd_r18_m328p>
    45d2:	24 2f       	mov	r18, r20
    45d4:	0c 94 14 26 	jmp	0x4c28	; 0x4c28 <__eeupd_r18_m328p>

000045d8 <__eeupd_word_m328p>:
    45d8:	01 96       	adiw	r24, 0x01	; 1
    45da:	27 2f       	mov	r18, r23
    45dc:	0e 94 14 26 	call	0x4c28	; 0x4c28 <__eeupd_r18_m328p>
    45e0:	0c 94 13 26 	jmp	0x4c26	; 0x4c26 <__eeupd_byte_m328p>

000045e4 <dtoa_prf>:
    45e4:	6f 92       	push	r6
    45e6:	7f 92       	push	r7
    45e8:	9f 92       	push	r9
    45ea:	af 92       	push	r10
    45ec:	bf 92       	push	r11
    45ee:	cf 92       	push	r12
    45f0:	df 92       	push	r13
    45f2:	ef 92       	push	r14
    45f4:	ff 92       	push	r15
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
    45fe:	cd b7       	in	r28, 0x3d	; 61
    4600:	de b7       	in	r29, 0x3e	; 62
    4602:	29 97       	sbiw	r28, 0x09	; 9
    4604:	0f b6       	in	r0, 0x3f	; 63
    4606:	f8 94       	cli
    4608:	de bf       	out	0x3e, r29	; 62
    460a:	0f be       	out	0x3f, r0	; 63
    460c:	cd bf       	out	0x3d, r28	; 61
    460e:	6a 01       	movw	r12, r20
    4610:	b2 2e       	mov	r11, r18
    4612:	10 2f       	mov	r17, r16
    4614:	0c 33       	cpi	r16, 0x3C	; 60
    4616:	20 f4       	brcc	.+8      	; 0x4620 <dtoa_prf+0x3c>
    4618:	ff 24       	eor	r15, r15
    461a:	f3 94       	inc	r15
    461c:	f0 0e       	add	r15, r16
    461e:	02 c0       	rjmp	.+4      	; 0x4624 <dtoa_prf+0x40>
    4620:	4c e3       	ldi	r20, 0x3C	; 60
    4622:	f4 2e       	mov	r15, r20
    4624:	0f 2d       	mov	r16, r15
    4626:	27 e0       	ldi	r18, 0x07	; 7
    4628:	ae 01       	movw	r20, r28
    462a:	4f 5f       	subi	r20, 0xFF	; 255
    462c:	5f 4f       	sbci	r21, 0xFF	; 255
    462e:	0e 94 c9 20 	call	0x4192	; 0x4192 <__ftoa_engine>
    4632:	79 81       	ldd	r23, Y+1	; 0x01
    4634:	27 2f       	mov	r18, r23
    4636:	29 70       	andi	r18, 0x09	; 9
    4638:	21 30       	cpi	r18, 0x01	; 1
    463a:	31 f0       	breq	.+12     	; 0x4648 <dtoa_prf+0x64>
    463c:	e1 fc       	sbrc	r14, 1
    463e:	06 c0       	rjmp	.+12     	; 0x464c <dtoa_prf+0x68>
    4640:	e0 fc       	sbrc	r14, 0
    4642:	06 c0       	rjmp	.+12     	; 0x4650 <dtoa_prf+0x6c>
    4644:	60 e0       	ldi	r22, 0x00	; 0
    4646:	05 c0       	rjmp	.+10     	; 0x4652 <dtoa_prf+0x6e>
    4648:	6d e2       	ldi	r22, 0x2D	; 45
    464a:	03 c0       	rjmp	.+6      	; 0x4652 <dtoa_prf+0x6e>
    464c:	6b e2       	ldi	r22, 0x2B	; 43
    464e:	01 c0       	rjmp	.+2      	; 0x4652 <dtoa_prf+0x6e>
    4650:	60 e2       	ldi	r22, 0x20	; 32
    4652:	ae 2d       	mov	r26, r14
    4654:	a0 71       	andi	r26, 0x10	; 16
    4656:	73 ff       	sbrs	r23, 3
    4658:	36 c0       	rjmp	.+108    	; 0x46c6 <dtoa_prf+0xe2>
    465a:	66 23       	and	r22, r22
    465c:	11 f0       	breq	.+4      	; 0x4662 <dtoa_prf+0x7e>
    465e:	84 e0       	ldi	r24, 0x04	; 4
    4660:	01 c0       	rjmp	.+2      	; 0x4664 <dtoa_prf+0x80>
    4662:	83 e0       	ldi	r24, 0x03	; 3
    4664:	8b 15       	cp	r24, r11
    4666:	10 f4       	brcc	.+4      	; 0x466c <dtoa_prf+0x88>
    4668:	b8 1a       	sub	r11, r24
    466a:	01 c0       	rjmp	.+2      	; 0x466e <dtoa_prf+0x8a>
    466c:	b1 2c       	mov	r11, r1
    466e:	a1 11       	cpse	r26, r1
    4670:	0b c0       	rjmp	.+22     	; 0x4688 <dtoa_prf+0xa4>
    4672:	f6 01       	movw	r30, r12
    4674:	8b 2d       	mov	r24, r11
    4676:	90 e2       	ldi	r25, 0x20	; 32
    4678:	88 23       	and	r24, r24
    467a:	19 f0       	breq	.+6      	; 0x4682 <dtoa_prf+0x9e>
    467c:	91 93       	st	Z+, r25
    467e:	81 50       	subi	r24, 0x01	; 1
    4680:	fb cf       	rjmp	.-10     	; 0x4678 <dtoa_prf+0x94>
    4682:	cb 0c       	add	r12, r11
    4684:	d1 1c       	adc	r13, r1
    4686:	b1 2c       	mov	r11, r1
    4688:	66 23       	and	r22, r22
    468a:	31 f0       	breq	.+12     	; 0x4698 <dtoa_prf+0xb4>
    468c:	f6 01       	movw	r30, r12
    468e:	60 83       	st	Z, r22
    4690:	96 01       	movw	r18, r12
    4692:	2f 5f       	subi	r18, 0xFF	; 255
    4694:	3f 4f       	sbci	r19, 0xFF	; 255
    4696:	69 01       	movw	r12, r18
    4698:	c6 01       	movw	r24, r12
    469a:	03 96       	adiw	r24, 0x03	; 3
    469c:	e2 fe       	sbrs	r14, 2
    469e:	05 c0       	rjmp	.+10     	; 0x46aa <dtoa_prf+0xc6>
    46a0:	2e e4       	ldi	r18, 0x4E	; 78
    46a2:	f6 01       	movw	r30, r12
    46a4:	20 83       	st	Z, r18
    46a6:	31 e4       	ldi	r19, 0x41	; 65
    46a8:	04 c0       	rjmp	.+8      	; 0x46b2 <dtoa_prf+0xce>
    46aa:	2e e6       	ldi	r18, 0x6E	; 110
    46ac:	f6 01       	movw	r30, r12
    46ae:	20 83       	st	Z, r18
    46b0:	31 e6       	ldi	r19, 0x61	; 97
    46b2:	31 83       	std	Z+1, r19	; 0x01
    46b4:	22 83       	std	Z+2, r18	; 0x02
    46b6:	fc 01       	movw	r30, r24
    46b8:	2b 2d       	mov	r18, r11
    46ba:	30 e2       	ldi	r19, 0x20	; 32
    46bc:	22 23       	and	r18, r18
    46be:	f1 f1       	breq	.+124    	; 0x473c <dtoa_prf+0x158>
    46c0:	31 93       	st	Z+, r19
    46c2:	21 50       	subi	r18, 0x01	; 1
    46c4:	fb cf       	rjmp	.-10     	; 0x46bc <dtoa_prf+0xd8>
    46c6:	72 ff       	sbrs	r23, 2
    46c8:	40 c0       	rjmp	.+128    	; 0x474a <dtoa_prf+0x166>
    46ca:	66 23       	and	r22, r22
    46cc:	11 f0       	breq	.+4      	; 0x46d2 <dtoa_prf+0xee>
    46ce:	84 e0       	ldi	r24, 0x04	; 4
    46d0:	01 c0       	rjmp	.+2      	; 0x46d4 <dtoa_prf+0xf0>
    46d2:	83 e0       	ldi	r24, 0x03	; 3
    46d4:	8b 15       	cp	r24, r11
    46d6:	10 f4       	brcc	.+4      	; 0x46dc <dtoa_prf+0xf8>
    46d8:	b8 1a       	sub	r11, r24
    46da:	01 c0       	rjmp	.+2      	; 0x46de <dtoa_prf+0xfa>
    46dc:	b1 2c       	mov	r11, r1
    46de:	a1 11       	cpse	r26, r1
    46e0:	0b c0       	rjmp	.+22     	; 0x46f8 <dtoa_prf+0x114>
    46e2:	f6 01       	movw	r30, r12
    46e4:	8b 2d       	mov	r24, r11
    46e6:	90 e2       	ldi	r25, 0x20	; 32
    46e8:	88 23       	and	r24, r24
    46ea:	19 f0       	breq	.+6      	; 0x46f2 <dtoa_prf+0x10e>
    46ec:	91 93       	st	Z+, r25
    46ee:	81 50       	subi	r24, 0x01	; 1
    46f0:	fb cf       	rjmp	.-10     	; 0x46e8 <dtoa_prf+0x104>
    46f2:	cb 0c       	add	r12, r11
    46f4:	d1 1c       	adc	r13, r1
    46f6:	b1 2c       	mov	r11, r1
    46f8:	66 23       	and	r22, r22
    46fa:	31 f0       	breq	.+12     	; 0x4708 <dtoa_prf+0x124>
    46fc:	f6 01       	movw	r30, r12
    46fe:	60 83       	st	Z, r22
    4700:	96 01       	movw	r18, r12
    4702:	2f 5f       	subi	r18, 0xFF	; 255
    4704:	3f 4f       	sbci	r19, 0xFF	; 255
    4706:	69 01       	movw	r12, r18
    4708:	c6 01       	movw	r24, r12
    470a:	03 96       	adiw	r24, 0x03	; 3
    470c:	e2 fe       	sbrs	r14, 2
    470e:	07 c0       	rjmp	.+14     	; 0x471e <dtoa_prf+0x13a>
    4710:	29 e4       	ldi	r18, 0x49	; 73
    4712:	f6 01       	movw	r30, r12
    4714:	20 83       	st	Z, r18
    4716:	2e e4       	ldi	r18, 0x4E	; 78
    4718:	21 83       	std	Z+1, r18	; 0x01
    471a:	26 e4       	ldi	r18, 0x46	; 70
    471c:	06 c0       	rjmp	.+12     	; 0x472a <dtoa_prf+0x146>
    471e:	29 e6       	ldi	r18, 0x69	; 105
    4720:	f6 01       	movw	r30, r12
    4722:	20 83       	st	Z, r18
    4724:	2e e6       	ldi	r18, 0x6E	; 110
    4726:	21 83       	std	Z+1, r18	; 0x01
    4728:	26 e6       	ldi	r18, 0x66	; 102
    472a:	22 83       	std	Z+2, r18	; 0x02
    472c:	fc 01       	movw	r30, r24
    472e:	2b 2d       	mov	r18, r11
    4730:	30 e2       	ldi	r19, 0x20	; 32
    4732:	22 23       	and	r18, r18
    4734:	19 f0       	breq	.+6      	; 0x473c <dtoa_prf+0x158>
    4736:	31 93       	st	Z+, r19
    4738:	21 50       	subi	r18, 0x01	; 1
    473a:	fb cf       	rjmp	.-10     	; 0x4732 <dtoa_prf+0x14e>
    473c:	fc 01       	movw	r30, r24
    473e:	eb 0d       	add	r30, r11
    4740:	f1 1d       	adc	r31, r1
    4742:	10 82       	st	Z, r1
    4744:	8e ef       	ldi	r24, 0xFE	; 254
    4746:	9f ef       	ldi	r25, 0xFF	; 255
    4748:	b7 c0       	rjmp	.+366    	; 0x48b8 <dtoa_prf+0x2d4>
    474a:	b1 e0       	ldi	r27, 0x01	; 1
    474c:	61 11       	cpse	r22, r1
    474e:	01 c0       	rjmp	.+2      	; 0x4752 <dtoa_prf+0x16e>
    4750:	b0 e0       	ldi	r27, 0x00	; 0
    4752:	4b 2f       	mov	r20, r27
    4754:	50 e0       	ldi	r21, 0x00	; 0
    4756:	18 16       	cp	r1, r24
    4758:	19 06       	cpc	r1, r25
    475a:	24 f4       	brge	.+8      	; 0x4764 <dtoa_prf+0x180>
    475c:	9c 01       	movw	r18, r24
    475e:	2f 5f       	subi	r18, 0xFF	; 255
    4760:	3f 4f       	sbci	r19, 0xFF	; 255
    4762:	02 c0       	rjmp	.+4      	; 0x4768 <dtoa_prf+0x184>
    4764:	21 e0       	ldi	r18, 0x01	; 1
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	24 0f       	add	r18, r20
    476a:	35 1f       	adc	r19, r21
    476c:	11 23       	and	r17, r17
    476e:	29 f0       	breq	.+10     	; 0x477a <dtoa_prf+0x196>
    4770:	41 2f       	mov	r20, r17
    4772:	50 e0       	ldi	r21, 0x00	; 0
    4774:	4f 5f       	subi	r20, 0xFF	; 255
    4776:	5f 4f       	sbci	r21, 0xFF	; 255
    4778:	02 c0       	rjmp	.+4      	; 0x477e <dtoa_prf+0x19a>
    477a:	40 e0       	ldi	r20, 0x00	; 0
    477c:	50 e0       	ldi	r21, 0x00	; 0
    477e:	42 0f       	add	r20, r18
    4780:	53 1f       	adc	r21, r19
    4782:	2b 2d       	mov	r18, r11
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	42 17       	cp	r20, r18
    4788:	53 07       	cpc	r21, r19
    478a:	14 f4       	brge	.+4      	; 0x4790 <dtoa_prf+0x1ac>
    478c:	b4 1a       	sub	r11, r20
    478e:	01 c0       	rjmp	.+2      	; 0x4792 <dtoa_prf+0x1ae>
    4790:	b1 2c       	mov	r11, r1
    4792:	2e 2d       	mov	r18, r14
    4794:	28 71       	andi	r18, 0x18	; 24
    4796:	59 f4       	brne	.+22     	; 0x47ae <dtoa_prf+0x1ca>
    4798:	f6 01       	movw	r30, r12
    479a:	2b 2d       	mov	r18, r11
    479c:	30 e2       	ldi	r19, 0x20	; 32
    479e:	22 23       	and	r18, r18
    47a0:	19 f0       	breq	.+6      	; 0x47a8 <dtoa_prf+0x1c4>
    47a2:	31 93       	st	Z+, r19
    47a4:	21 50       	subi	r18, 0x01	; 1
    47a6:	fb cf       	rjmp	.-10     	; 0x479e <dtoa_prf+0x1ba>
    47a8:	cb 0c       	add	r12, r11
    47aa:	d1 1c       	adc	r13, r1
    47ac:	b1 2c       	mov	r11, r1
    47ae:	bb 23       	and	r27, r27
    47b0:	31 f0       	breq	.+12     	; 0x47be <dtoa_prf+0x1da>
    47b2:	f6 01       	movw	r30, r12
    47b4:	60 83       	st	Z, r22
    47b6:	96 01       	movw	r18, r12
    47b8:	2f 5f       	subi	r18, 0xFF	; 255
    47ba:	3f 4f       	sbci	r19, 0xFF	; 255
    47bc:	69 01       	movw	r12, r18
    47be:	a1 11       	cpse	r26, r1
    47c0:	0b c0       	rjmp	.+22     	; 0x47d8 <dtoa_prf+0x1f4>
    47c2:	f6 01       	movw	r30, r12
    47c4:	2b 2d       	mov	r18, r11
    47c6:	30 e3       	ldi	r19, 0x30	; 48
    47c8:	22 23       	and	r18, r18
    47ca:	19 f0       	breq	.+6      	; 0x47d2 <dtoa_prf+0x1ee>
    47cc:	31 93       	st	Z+, r19
    47ce:	21 50       	subi	r18, 0x01	; 1
    47d0:	fb cf       	rjmp	.-10     	; 0x47c8 <dtoa_prf+0x1e4>
    47d2:	cb 0c       	add	r12, r11
    47d4:	d1 1c       	adc	r13, r1
    47d6:	b1 2c       	mov	r11, r1
    47d8:	f8 0e       	add	r15, r24
    47da:	0a 81       	ldd	r16, Y+2	; 0x02
    47dc:	37 2f       	mov	r19, r23
    47de:	30 71       	andi	r19, 0x10	; 16
    47e0:	a3 2e       	mov	r10, r19
    47e2:	74 ff       	sbrs	r23, 4
    47e4:	03 c0       	rjmp	.+6      	; 0x47ec <dtoa_prf+0x208>
    47e6:	01 33       	cpi	r16, 0x31	; 49
    47e8:	09 f4       	brne	.+2      	; 0x47ec <dtoa_prf+0x208>
    47ea:	fa 94       	dec	r15
    47ec:	1f 14       	cp	r1, r15
    47ee:	2c f4       	brge	.+10     	; 0x47fa <dtoa_prf+0x216>
    47f0:	2f 2d       	mov	r18, r15
    47f2:	29 30       	cpi	r18, 0x09	; 9
    47f4:	18 f0       	brcs	.+6      	; 0x47fc <dtoa_prf+0x218>
    47f6:	28 e0       	ldi	r18, 0x08	; 8
    47f8:	01 c0       	rjmp	.+2      	; 0x47fc <dtoa_prf+0x218>
    47fa:	21 e0       	ldi	r18, 0x01	; 1
    47fc:	68 2f       	mov	r22, r24
    47fe:	39 2f       	mov	r19, r25
    4800:	97 ff       	sbrs	r25, 7
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <dtoa_prf+0x224>
    4804:	60 e0       	ldi	r22, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	46 2f       	mov	r20, r22
    480a:	53 2f       	mov	r21, r19
    480c:	61 2c       	mov	r6, r1
    480e:	71 2c       	mov	r7, r1
    4810:	3e e2       	ldi	r19, 0x2E	; 46
    4812:	93 2e       	mov	r9, r19
    4814:	bc 01       	movw	r22, r24
    4816:	62 1b       	sub	r22, r18
    4818:	71 09       	sbc	r23, r1
    481a:	9b 01       	movw	r18, r22
    481c:	dc 01       	movw	r26, r24
    481e:	a4 1b       	sub	r26, r20
    4820:	b5 0b       	sbc	r27, r21
    4822:	e1 e0       	ldi	r30, 0x01	; 1
    4824:	f0 e0       	ldi	r31, 0x00	; 0
    4826:	ec 0f       	add	r30, r28
    4828:	fd 1f       	adc	r31, r29
    482a:	ae 0f       	add	r26, r30
    482c:	bf 1f       	adc	r27, r31
    482e:	e1 2e       	mov	r14, r17
    4830:	f1 2c       	mov	r15, r1
    4832:	f1 94       	neg	r15
    4834:	e1 94       	neg	r14
    4836:	f1 08       	sbc	r15, r1
    4838:	4f 3f       	cpi	r20, 0xFF	; 255
    483a:	ff ef       	ldi	r31, 0xFF	; 255
    483c:	5f 07       	cpc	r21, r31
    483e:	31 f4       	brne	.+12     	; 0x484c <dtoa_prf+0x268>
    4840:	f6 01       	movw	r30, r12
    4842:	90 82       	st	Z, r9
    4844:	b6 01       	movw	r22, r12
    4846:	6f 5f       	subi	r22, 0xFF	; 255
    4848:	7f 4f       	sbci	r23, 0xFF	; 255
    484a:	6b 01       	movw	r12, r22
    484c:	84 17       	cp	r24, r20
    484e:	95 07       	cpc	r25, r21
    4850:	4c f0       	brlt	.+18     	; 0x4864 <dtoa_prf+0x280>
    4852:	24 17       	cp	r18, r20
    4854:	35 07       	cpc	r19, r21
    4856:	34 f4       	brge	.+12     	; 0x4864 <dtoa_prf+0x280>
    4858:	bd 01       	movw	r22, r26
    485a:	66 0d       	add	r22, r6
    485c:	77 1d       	adc	r23, r7
    485e:	fb 01       	movw	r30, r22
    4860:	11 81       	ldd	r17, Z+1	; 0x01
    4862:	01 c0       	rjmp	.+2      	; 0x4866 <dtoa_prf+0x282>
    4864:	10 e3       	ldi	r17, 0x30	; 48
    4866:	41 50       	subi	r20, 0x01	; 1
    4868:	51 09       	sbc	r21, r1
    486a:	ff ef       	ldi	r31, 0xFF	; 255
    486c:	6f 1a       	sub	r6, r31
    486e:	7f 0a       	sbc	r7, r31
    4870:	b6 01       	movw	r22, r12
    4872:	6f 5f       	subi	r22, 0xFF	; 255
    4874:	7f 4f       	sbci	r23, 0xFF	; 255
    4876:	4e 15       	cp	r20, r14
    4878:	5f 05       	cpc	r21, r15
    487a:	24 f0       	brlt	.+8      	; 0x4884 <dtoa_prf+0x2a0>
    487c:	f6 01       	movw	r30, r12
    487e:	10 83       	st	Z, r17
    4880:	6b 01       	movw	r12, r22
    4882:	da cf       	rjmp	.-76     	; 0x4838 <dtoa_prf+0x254>
    4884:	48 17       	cp	r20, r24
    4886:	59 07       	cpc	r21, r25
    4888:	39 f4       	brne	.+14     	; 0x4898 <dtoa_prf+0x2b4>
    488a:	06 33       	cpi	r16, 0x36	; 54
    488c:	20 f4       	brcc	.+8      	; 0x4896 <dtoa_prf+0x2b2>
    488e:	05 33       	cpi	r16, 0x35	; 53
    4890:	19 f4       	brne	.+6      	; 0x4898 <dtoa_prf+0x2b4>
    4892:	a1 10       	cpse	r10, r1
    4894:	01 c0       	rjmp	.+2      	; 0x4898 <dtoa_prf+0x2b4>
    4896:	11 e3       	ldi	r17, 0x31	; 49
    4898:	f6 01       	movw	r30, r12
    489a:	10 83       	st	Z, r17
    489c:	fb 01       	movw	r30, r22
    489e:	8b 2d       	mov	r24, r11
    48a0:	90 e2       	ldi	r25, 0x20	; 32
    48a2:	88 23       	and	r24, r24
    48a4:	19 f0       	breq	.+6      	; 0x48ac <dtoa_prf+0x2c8>
    48a6:	91 93       	st	Z+, r25
    48a8:	81 50       	subi	r24, 0x01	; 1
    48aa:	fb cf       	rjmp	.-10     	; 0x48a2 <dtoa_prf+0x2be>
    48ac:	fb 01       	movw	r30, r22
    48ae:	eb 0d       	add	r30, r11
    48b0:	f1 1d       	adc	r31, r1
    48b2:	10 82       	st	Z, r1
    48b4:	80 e0       	ldi	r24, 0x00	; 0
    48b6:	90 e0       	ldi	r25, 0x00	; 0
    48b8:	29 96       	adiw	r28, 0x09	; 9
    48ba:	0f b6       	in	r0, 0x3f	; 63
    48bc:	f8 94       	cli
    48be:	de bf       	out	0x3e, r29	; 62
    48c0:	0f be       	out	0x3f, r0	; 63
    48c2:	cd bf       	out	0x3d, r28	; 61
    48c4:	df 91       	pop	r29
    48c6:	cf 91       	pop	r28
    48c8:	1f 91       	pop	r17
    48ca:	0f 91       	pop	r16
    48cc:	ff 90       	pop	r15
    48ce:	ef 90       	pop	r14
    48d0:	df 90       	pop	r13
    48d2:	cf 90       	pop	r12
    48d4:	bf 90       	pop	r11
    48d6:	af 90       	pop	r10
    48d8:	9f 90       	pop	r9
    48da:	7f 90       	pop	r7
    48dc:	6f 90       	pop	r6
    48de:	08 95       	ret

000048e0 <strtod>:
    48e0:	a0 e0       	ldi	r26, 0x00	; 0
    48e2:	b0 e0       	ldi	r27, 0x00	; 0
    48e4:	e6 e7       	ldi	r30, 0x76	; 118
    48e6:	f4 e2       	ldi	r31, 0x24	; 36
    48e8:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0xc>
    48ec:	8b 01       	movw	r16, r22
    48ee:	61 15       	cp	r22, r1
    48f0:	71 05       	cpc	r23, r1
    48f2:	21 f0       	breq	.+8      	; 0x48fc <strtod+0x1c>
    48f4:	db 01       	movw	r26, r22
    48f6:	8c 93       	st	X, r24
    48f8:	11 96       	adiw	r26, 0x01	; 1
    48fa:	9c 93       	st	X, r25
    48fc:	ec 01       	movw	r28, r24
    48fe:	5e 01       	movw	r10, r28
    4900:	bf ef       	ldi	r27, 0xFF	; 255
    4902:	ab 1a       	sub	r10, r27
    4904:	bb 0a       	sbc	r11, r27
    4906:	75 01       	movw	r14, r10
    4908:	c8 80       	ld	r12, Y
    490a:	8c 2d       	mov	r24, r12
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <isspace>
    4912:	89 2b       	or	r24, r25
    4914:	11 f0       	breq	.+4      	; 0x491a <strtod+0x3a>
    4916:	e5 01       	movw	r28, r10
    4918:	f2 cf       	rjmp	.-28     	; 0x48fe <strtod+0x1e>
    491a:	ed e2       	ldi	r30, 0x2D	; 45
    491c:	ce 12       	cpse	r12, r30
    491e:	08 c0       	rjmp	.+16     	; 0x4930 <strtod+0x50>
    4920:	7e 01       	movw	r14, r28
    4922:	f2 e0       	ldi	r31, 0x02	; 2
    4924:	ef 0e       	add	r14, r31
    4926:	f1 1c       	adc	r15, r1
    4928:	c9 80       	ldd	r12, Y+1	; 0x01
    492a:	dd 24       	eor	r13, r13
    492c:	d3 94       	inc	r13
    492e:	09 c0       	rjmp	.+18     	; 0x4942 <strtod+0x62>
    4930:	2b e2       	ldi	r18, 0x2B	; 43
    4932:	c2 12       	cpse	r12, r18
    4934:	05 c0       	rjmp	.+10     	; 0x4940 <strtod+0x60>
    4936:	7e 01       	movw	r14, r28
    4938:	42 e0       	ldi	r20, 0x02	; 2
    493a:	e4 0e       	add	r14, r20
    493c:	f1 1c       	adc	r15, r1
    493e:	c9 80       	ldd	r12, Y+1	; 0x01
    4940:	d1 2c       	mov	r13, r1
    4942:	e7 01       	movw	r28, r14
    4944:	21 97       	sbiw	r28, 0x01	; 1
    4946:	43 e0       	ldi	r20, 0x03	; 3
    4948:	50 e0       	ldi	r21, 0x00	; 0
    494a:	6a e4       	ldi	r22, 0x4A	; 74
    494c:	73 e0       	ldi	r23, 0x03	; 3
    494e:	ce 01       	movw	r24, r28
    4950:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <strncasecmp_P>
    4954:	89 2b       	or	r24, r25
    4956:	c1 f4       	brne	.+48     	; 0x4988 <strtod+0xa8>
    4958:	23 96       	adiw	r28, 0x03	; 3
    495a:	45 e0       	ldi	r20, 0x05	; 5
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	65 e4       	ldi	r22, 0x45	; 69
    4960:	73 e0       	ldi	r23, 0x03	; 3
    4962:	ce 01       	movw	r24, r28
    4964:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <strncasecmp_P>
    4968:	89 2b       	or	r24, r25
    496a:	09 f4       	brne	.+2      	; 0x496e <strtod+0x8e>
    496c:	25 96       	adiw	r28, 0x05	; 5
    496e:	01 15       	cp	r16, r1
    4970:	11 05       	cpc	r17, r1
    4972:	19 f0       	breq	.+6      	; 0x497a <strtod+0x9a>
    4974:	d8 01       	movw	r26, r16
    4976:	cd 93       	st	X+, r28
    4978:	dc 93       	st	X, r29
    497a:	d1 10       	cpse	r13, r1
    497c:	06 c1       	rjmp	.+524    	; 0x4b8a <strtod+0x2aa>
    497e:	60 e0       	ldi	r22, 0x00	; 0
    4980:	70 e0       	ldi	r23, 0x00	; 0
    4982:	80 e8       	ldi	r24, 0x80	; 128
    4984:	9f e7       	ldi	r25, 0x7F	; 127
    4986:	0a c1       	rjmp	.+532    	; 0x4b9c <strtod+0x2bc>
    4988:	43 e0       	ldi	r20, 0x03	; 3
    498a:	50 e0       	ldi	r21, 0x00	; 0
    498c:	62 e4       	ldi	r22, 0x42	; 66
    498e:	73 e0       	ldi	r23, 0x03	; 3
    4990:	ce 01       	movw	r24, r28
    4992:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <strncasecmp_P>
    4996:	89 2b       	or	r24, r25
    4998:	59 f4       	brne	.+22     	; 0x49b0 <strtod+0xd0>
    499a:	01 15       	cp	r16, r1
    499c:	11 05       	cpc	r17, r1
    499e:	09 f4       	brne	.+2      	; 0x49a2 <strtod+0xc2>
    49a0:	f9 c0       	rjmp	.+498    	; 0x4b94 <strtod+0x2b4>
    49a2:	b2 e0       	ldi	r27, 0x02	; 2
    49a4:	eb 0e       	add	r14, r27
    49a6:	f1 1c       	adc	r15, r1
    49a8:	f8 01       	movw	r30, r16
    49aa:	f1 82       	std	Z+1, r15	; 0x01
    49ac:	e0 82       	st	Z, r14
    49ae:	f2 c0       	rjmp	.+484    	; 0x4b94 <strtod+0x2b4>
    49b0:	f7 01       	movw	r30, r14
    49b2:	60 e0       	ldi	r22, 0x00	; 0
    49b4:	70 e0       	ldi	r23, 0x00	; 0
    49b6:	cb 01       	movw	r24, r22
    49b8:	c0 e0       	ldi	r28, 0x00	; 0
    49ba:	d0 e0       	ldi	r29, 0x00	; 0
    49bc:	7f 01       	movw	r14, r30
    49be:	a0 ed       	ldi	r26, 0xD0	; 208
    49c0:	aa 2e       	mov	r10, r26
    49c2:	ac 0c       	add	r10, r12
    49c4:	29 e0       	ldi	r18, 0x09	; 9
    49c6:	2a 15       	cp	r18, r10
    49c8:	30 f1       	brcs	.+76     	; 0x4a16 <strtod+0x136>
    49ca:	4d 2d       	mov	r20, r13
    49cc:	42 60       	ori	r20, 0x02	; 2
    49ce:	b4 2e       	mov	r11, r20
    49d0:	2d 2d       	mov	r18, r13
    49d2:	28 70       	andi	r18, 0x08	; 8
    49d4:	d2 fe       	sbrs	r13, 2
    49d6:	04 c0       	rjmp	.+8      	; 0x49e0 <strtod+0x100>
    49d8:	21 11       	cpse	r18, r1
    49da:	25 c0       	rjmp	.+74     	; 0x4a26 <strtod+0x146>
    49dc:	21 96       	adiw	r28, 0x01	; 1
    49de:	23 c0       	rjmp	.+70     	; 0x4a26 <strtod+0x146>
    49e0:	21 11       	cpse	r18, r1
    49e2:	21 97       	sbiw	r28, 0x01	; 1
    49e4:	a5 e0       	ldi	r26, 0x05	; 5
    49e6:	b0 e0       	ldi	r27, 0x00	; 0
    49e8:	9b 01       	movw	r18, r22
    49ea:	ac 01       	movw	r20, r24
    49ec:	0e 94 28 26 	call	0x4c50	; 0x4c50 <__muluhisi3>
    49f0:	66 0f       	add	r22, r22
    49f2:	77 1f       	adc	r23, r23
    49f4:	88 1f       	adc	r24, r24
    49f6:	99 1f       	adc	r25, r25
    49f8:	6a 0d       	add	r22, r10
    49fa:	71 1d       	adc	r23, r1
    49fc:	81 1d       	adc	r24, r1
    49fe:	91 1d       	adc	r25, r1
    4a00:	68 39       	cpi	r22, 0x98	; 152
    4a02:	a9 e9       	ldi	r26, 0x99	; 153
    4a04:	7a 07       	cpc	r23, r26
    4a06:	8a 07       	cpc	r24, r26
    4a08:	a9 e1       	ldi	r26, 0x19	; 25
    4a0a:	9a 07       	cpc	r25, r26
    4a0c:	60 f0       	brcs	.+24     	; 0x4a26 <strtod+0x146>
    4a0e:	bd 2d       	mov	r27, r13
    4a10:	b6 60       	ori	r27, 0x06	; 6
    4a12:	bb 2e       	mov	r11, r27
    4a14:	08 c0       	rjmp	.+16     	; 0x4a26 <strtod+0x146>
    4a16:	2e ef       	ldi	r18, 0xFE	; 254
    4a18:	a2 12       	cpse	r10, r18
    4a1a:	0a c0       	rjmp	.+20     	; 0x4a30 <strtod+0x150>
    4a1c:	d3 fc       	sbrc	r13, 3
    4a1e:	50 c0       	rjmp	.+160    	; 0x4ac0 <strtod+0x1e0>
    4a20:	4d 2d       	mov	r20, r13
    4a22:	48 60       	ori	r20, 0x08	; 8
    4a24:	b4 2e       	mov	r11, r20
    4a26:	31 96       	adiw	r30, 0x01	; 1
    4a28:	d7 01       	movw	r26, r14
    4a2a:	cc 90       	ld	r12, X
    4a2c:	db 2c       	mov	r13, r11
    4a2e:	c6 cf       	rjmp	.-116    	; 0x49bc <strtod+0xdc>
    4a30:	2c 2d       	mov	r18, r12
    4a32:	2f 7d       	andi	r18, 0xDF	; 223
    4a34:	25 34       	cpi	r18, 0x45	; 69
    4a36:	09 f0       	breq	.+2      	; 0x4a3a <strtod+0x15a>
    4a38:	43 c0       	rjmp	.+134    	; 0x4ac0 <strtod+0x1e0>
    4a3a:	a0 81       	ld	r26, Z
    4a3c:	ad 32       	cpi	r26, 0x2D	; 45
    4a3e:	41 f4       	brne	.+16     	; 0x4a50 <strtod+0x170>
    4a40:	bd 2d       	mov	r27, r13
    4a42:	b0 61       	ori	r27, 0x10	; 16
    4a44:	db 2e       	mov	r13, r27
    4a46:	7f 01       	movw	r14, r30
    4a48:	22 e0       	ldi	r18, 0x02	; 2
    4a4a:	e2 0e       	add	r14, r18
    4a4c:	f1 1c       	adc	r15, r1
    4a4e:	0c c0       	rjmp	.+24     	; 0x4a68 <strtod+0x188>
    4a50:	7f 01       	movw	r14, r30
    4a52:	ab 32       	cpi	r26, 0x2B	; 43
    4a54:	31 f0       	breq	.+12     	; 0x4a62 <strtod+0x182>
    4a56:	4f ef       	ldi	r20, 0xFF	; 255
    4a58:	e4 1a       	sub	r14, r20
    4a5a:	f4 0a       	sbc	r15, r20
    4a5c:	21 e0       	ldi	r18, 0x01	; 1
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	06 c0       	rjmp	.+12     	; 0x4a6e <strtod+0x18e>
    4a62:	a2 e0       	ldi	r26, 0x02	; 2
    4a64:	ea 0e       	add	r14, r26
    4a66:	f1 1c       	adc	r15, r1
    4a68:	a1 81       	ldd	r26, Z+1	; 0x01
    4a6a:	22 e0       	ldi	r18, 0x02	; 2
    4a6c:	30 e0       	ldi	r19, 0x00	; 0
    4a6e:	a0 53       	subi	r26, 0x30	; 48
    4a70:	aa 30       	cpi	r26, 0x0A	; 10
    4a72:	18 f0       	brcs	.+6      	; 0x4a7a <strtod+0x19a>
    4a74:	e2 1a       	sub	r14, r18
    4a76:	f3 0a       	sbc	r15, r19
    4a78:	23 c0       	rjmp	.+70     	; 0x4ac0 <strtod+0x1e0>
    4a7a:	f7 01       	movw	r30, r14
    4a7c:	20 e0       	ldi	r18, 0x00	; 0
    4a7e:	30 e0       	ldi	r19, 0x00	; 0
    4a80:	20 38       	cpi	r18, 0x80	; 128
    4a82:	bc e0       	ldi	r27, 0x0C	; 12
    4a84:	3b 07       	cpc	r19, r27
    4a86:	5c f4       	brge	.+22     	; 0x4a9e <strtod+0x1be>
    4a88:	a9 01       	movw	r20, r18
    4a8a:	44 0f       	add	r20, r20
    4a8c:	55 1f       	adc	r21, r21
    4a8e:	44 0f       	add	r20, r20
    4a90:	55 1f       	adc	r21, r21
    4a92:	24 0f       	add	r18, r20
    4a94:	35 1f       	adc	r19, r21
    4a96:	22 0f       	add	r18, r18
    4a98:	33 1f       	adc	r19, r19
    4a9a:	2a 0f       	add	r18, r26
    4a9c:	31 1d       	adc	r19, r1
    4a9e:	af 01       	movw	r20, r30
    4aa0:	4f 5f       	subi	r20, 0xFF	; 255
    4aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    4aa4:	7a 01       	movw	r14, r20
    4aa6:	a0 81       	ld	r26, Z
    4aa8:	a0 53       	subi	r26, 0x30	; 48
    4aaa:	aa 30       	cpi	r26, 0x0A	; 10
    4aac:	10 f4       	brcc	.+4      	; 0x4ab2 <strtod+0x1d2>
    4aae:	fa 01       	movw	r30, r20
    4ab0:	e7 cf       	rjmp	.-50     	; 0x4a80 <strtod+0x1a0>
    4ab2:	d4 fe       	sbrs	r13, 4
    4ab4:	03 c0       	rjmp	.+6      	; 0x4abc <strtod+0x1dc>
    4ab6:	31 95       	neg	r19
    4ab8:	21 95       	neg	r18
    4aba:	31 09       	sbc	r19, r1
    4abc:	c2 0f       	add	r28, r18
    4abe:	d3 1f       	adc	r29, r19
    4ac0:	d1 fe       	sbrs	r13, 1
    4ac2:	09 c0       	rjmp	.+18     	; 0x4ad6 <strtod+0x1f6>
    4ac4:	01 15       	cp	r16, r1
    4ac6:	11 05       	cpc	r17, r1
    4ac8:	31 f0       	breq	.+12     	; 0x4ad6 <strtod+0x1f6>
    4aca:	e1 e0       	ldi	r30, 0x01	; 1
    4acc:	ee 1a       	sub	r14, r30
    4ace:	f1 08       	sbc	r15, r1
    4ad0:	d8 01       	movw	r26, r16
    4ad2:	ed 92       	st	X+, r14
    4ad4:	fc 92       	st	X, r15
    4ad6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__floatunsisf>
    4ada:	2d 2d       	mov	r18, r13
    4adc:	23 70       	andi	r18, 0x03	; 3
    4ade:	23 30       	cpi	r18, 0x03	; 3
    4ae0:	19 f0       	breq	.+6      	; 0x4ae8 <strtod+0x208>
    4ae2:	4b 01       	movw	r8, r22
    4ae4:	5c 01       	movw	r10, r24
    4ae6:	06 c0       	rjmp	.+12     	; 0x4af4 <strtod+0x214>
    4ae8:	4b 01       	movw	r8, r22
    4aea:	5c 01       	movw	r10, r24
    4aec:	b7 fa       	bst	r11, 7
    4aee:	b0 94       	com	r11
    4af0:	b7 f8       	bld	r11, 7
    4af2:	b0 94       	com	r11
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	a9 01       	movw	r20, r18
    4afa:	c5 01       	movw	r24, r10
    4afc:	b4 01       	movw	r22, r8
    4afe:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    4b02:	88 23       	and	r24, r24
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <strtod+0x228>
    4b06:	3e c0       	rjmp	.+124    	; 0x4b84 <strtod+0x2a4>
    4b08:	d7 ff       	sbrs	r29, 7
    4b0a:	06 c0       	rjmp	.+12     	; 0x4b18 <strtod+0x238>
    4b0c:	d1 95       	neg	r29
    4b0e:	c1 95       	neg	r28
    4b10:	d1 09       	sbc	r29, r1
    4b12:	01 e6       	ldi	r16, 0x61	; 97
    4b14:	13 e0       	ldi	r17, 0x03	; 3
    4b16:	02 c0       	rjmp	.+4      	; 0x4b1c <strtod+0x23c>
    4b18:	09 e7       	ldi	r16, 0x79	; 121
    4b1a:	13 e0       	ldi	r17, 0x03	; 3
    4b1c:	68 01       	movw	r12, r16
    4b1e:	b8 e1       	ldi	r27, 0x18	; 24
    4b20:	cb 1a       	sub	r12, r27
    4b22:	d1 08       	sbc	r13, r1
    4b24:	90 e2       	ldi	r25, 0x20	; 32
    4b26:	e9 2e       	mov	r14, r25
    4b28:	f1 2c       	mov	r15, r1
    4b2a:	ce 15       	cp	r28, r14
    4b2c:	df 05       	cpc	r29, r15
    4b2e:	74 f0       	brlt	.+28     	; 0x4b4c <strtod+0x26c>
    4b30:	f8 01       	movw	r30, r16
    4b32:	25 91       	lpm	r18, Z+
    4b34:	35 91       	lpm	r19, Z+
    4b36:	45 91       	lpm	r20, Z+
    4b38:	54 91       	lpm	r21, Z
    4b3a:	c5 01       	movw	r24, r10
    4b3c:	b4 01       	movw	r22, r8
    4b3e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <__mulsf3>
    4b42:	4b 01       	movw	r8, r22
    4b44:	5c 01       	movw	r10, r24
    4b46:	ce 19       	sub	r28, r14
    4b48:	df 09       	sbc	r29, r15
    4b4a:	ef cf       	rjmp	.-34     	; 0x4b2a <strtod+0x24a>
    4b4c:	04 50       	subi	r16, 0x04	; 4
    4b4e:	11 09       	sbc	r17, r1
    4b50:	f5 94       	asr	r15
    4b52:	e7 94       	ror	r14
    4b54:	0c 15       	cp	r16, r12
    4b56:	1d 05       	cpc	r17, r13
    4b58:	41 f7       	brne	.-48     	; 0x4b2a <strtod+0x24a>
    4b5a:	8a 2d       	mov	r24, r10
    4b5c:	88 0f       	add	r24, r24
    4b5e:	8b 2d       	mov	r24, r11
    4b60:	88 1f       	adc	r24, r24
    4b62:	8f 3f       	cpi	r24, 0xFF	; 255
    4b64:	49 f0       	breq	.+18     	; 0x4b78 <strtod+0x298>
    4b66:	20 e0       	ldi	r18, 0x00	; 0
    4b68:	30 e0       	ldi	r19, 0x00	; 0
    4b6a:	a9 01       	movw	r20, r18
    4b6c:	c5 01       	movw	r24, r10
    4b6e:	b4 01       	movw	r22, r8
    4b70:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <__cmpsf2>
    4b74:	81 11       	cpse	r24, r1
    4b76:	06 c0       	rjmp	.+12     	; 0x4b84 <strtod+0x2a4>
    4b78:	82 e2       	ldi	r24, 0x22	; 34
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	90 93 11 08 	sts	0x0811, r25
    4b80:	80 93 10 08 	sts	0x0810, r24
    4b84:	c5 01       	movw	r24, r10
    4b86:	b4 01       	movw	r22, r8
    4b88:	09 c0       	rjmp	.+18     	; 0x4b9c <strtod+0x2bc>
    4b8a:	60 e0       	ldi	r22, 0x00	; 0
    4b8c:	70 e0       	ldi	r23, 0x00	; 0
    4b8e:	80 e8       	ldi	r24, 0x80	; 128
    4b90:	9f ef       	ldi	r25, 0xFF	; 255
    4b92:	04 c0       	rjmp	.+8      	; 0x4b9c <strtod+0x2bc>
    4b94:	60 e0       	ldi	r22, 0x00	; 0
    4b96:	70 e0       	ldi	r23, 0x00	; 0
    4b98:	80 ec       	ldi	r24, 0xC0	; 192
    4b9a:	9f e7       	ldi	r25, 0x7F	; 127
    4b9c:	cd b7       	in	r28, 0x3d	; 61
    4b9e:	de b7       	in	r29, 0x3e	; 62
    4ba0:	ec e0       	ldi	r30, 0x0C	; 12
    4ba2:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0xc>

00004ba6 <isspace>:
    4ba6:	91 11       	cpse	r25, r1
    4ba8:	50 c0       	rjmp	.+160    	; 0x4c4a <__ctype_isfalse>
    4baa:	80 32       	cpi	r24, 0x20	; 32
    4bac:	19 f0       	breq	.+6      	; 0x4bb4 <isspace+0xe>
    4bae:	89 50       	subi	r24, 0x09	; 9
    4bb0:	85 50       	subi	r24, 0x05	; 5
    4bb2:	d0 f7       	brcc	.-12     	; 0x4ba8 <isspace+0x2>
    4bb4:	08 95       	ret

00004bb6 <strncasecmp_P>:
    4bb6:	fb 01       	movw	r30, r22
    4bb8:	dc 01       	movw	r26, r24
    4bba:	41 50       	subi	r20, 0x01	; 1
    4bbc:	50 40       	sbci	r21, 0x00	; 0
    4bbe:	88 f0       	brcs	.+34     	; 0x4be2 <strncasecmp_P+0x2c>
    4bc0:	8d 91       	ld	r24, X+
    4bc2:	81 34       	cpi	r24, 0x41	; 65
    4bc4:	1c f0       	brlt	.+6      	; 0x4bcc <strncasecmp_P+0x16>
    4bc6:	8b 35       	cpi	r24, 0x5B	; 91
    4bc8:	0c f4       	brge	.+2      	; 0x4bcc <strncasecmp_P+0x16>
    4bca:	80 5e       	subi	r24, 0xE0	; 224
    4bcc:	65 91       	lpm	r22, Z+
    4bce:	61 34       	cpi	r22, 0x41	; 65
    4bd0:	1c f0       	brlt	.+6      	; 0x4bd8 <strncasecmp_P+0x22>
    4bd2:	6b 35       	cpi	r22, 0x5B	; 91
    4bd4:	0c f4       	brge	.+2      	; 0x4bd8 <strncasecmp_P+0x22>
    4bd6:	60 5e       	subi	r22, 0xE0	; 224
    4bd8:	86 1b       	sub	r24, r22
    4bda:	61 11       	cpse	r22, r1
    4bdc:	71 f3       	breq	.-36     	; 0x4bba <strncasecmp_P+0x4>
    4bde:	99 0b       	sbc	r25, r25
    4be0:	08 95       	ret
    4be2:	88 1b       	sub	r24, r24
    4be4:	fc cf       	rjmp	.-8      	; 0x4bde <strncasecmp_P+0x28>

00004be6 <strrev>:
    4be6:	dc 01       	movw	r26, r24
    4be8:	fc 01       	movw	r30, r24
    4bea:	67 2f       	mov	r22, r23
    4bec:	71 91       	ld	r23, Z+
    4bee:	77 23       	and	r23, r23
    4bf0:	e1 f7       	brne	.-8      	; 0x4bea <strrev+0x4>
    4bf2:	32 97       	sbiw	r30, 0x02	; 2
    4bf4:	04 c0       	rjmp	.+8      	; 0x4bfe <strrev+0x18>
    4bf6:	7c 91       	ld	r23, X
    4bf8:	6d 93       	st	X+, r22
    4bfa:	70 83       	st	Z, r23
    4bfc:	62 91       	ld	r22, -Z
    4bfe:	ae 17       	cp	r26, r30
    4c00:	bf 07       	cpc	r27, r31
    4c02:	c8 f3       	brcs	.-14     	; 0x4bf6 <strrev+0x10>
    4c04:	08 95       	ret

00004c06 <__eerd_block_m328p>:
    4c06:	dc 01       	movw	r26, r24
    4c08:	cb 01       	movw	r24, r22

00004c0a <__eerd_blraw_m328p>:
    4c0a:	fc 01       	movw	r30, r24
    4c0c:	f9 99       	sbic	0x1f, 1	; 31
    4c0e:	fe cf       	rjmp	.-4      	; 0x4c0c <__eerd_blraw_m328p+0x2>
    4c10:	06 c0       	rjmp	.+12     	; 0x4c1e <__eerd_blraw_m328p+0x14>
    4c12:	f2 bd       	out	0x22, r31	; 34
    4c14:	e1 bd       	out	0x21, r30	; 33
    4c16:	f8 9a       	sbi	0x1f, 0	; 31
    4c18:	31 96       	adiw	r30, 0x01	; 1
    4c1a:	00 b4       	in	r0, 0x20	; 32
    4c1c:	0d 92       	st	X+, r0
    4c1e:	41 50       	subi	r20, 0x01	; 1
    4c20:	50 40       	sbci	r21, 0x00	; 0
    4c22:	b8 f7       	brcc	.-18     	; 0x4c12 <__eerd_blraw_m328p+0x8>
    4c24:	08 95       	ret

00004c26 <__eeupd_byte_m328p>:
    4c26:	26 2f       	mov	r18, r22

00004c28 <__eeupd_r18_m328p>:
    4c28:	f9 99       	sbic	0x1f, 1	; 31
    4c2a:	fe cf       	rjmp	.-4      	; 0x4c28 <__eeupd_r18_m328p>
    4c2c:	92 bd       	out	0x22, r25	; 34
    4c2e:	81 bd       	out	0x21, r24	; 33
    4c30:	f8 9a       	sbi	0x1f, 0	; 31
    4c32:	01 97       	sbiw	r24, 0x01	; 1
    4c34:	00 b4       	in	r0, 0x20	; 32
    4c36:	02 16       	cp	r0, r18
    4c38:	39 f0       	breq	.+14     	; 0x4c48 <__eeupd_r18_m328p+0x20>
    4c3a:	1f ba       	out	0x1f, r1	; 31
    4c3c:	20 bd       	out	0x20, r18	; 32
    4c3e:	0f b6       	in	r0, 0x3f	; 63
    4c40:	f8 94       	cli
    4c42:	fa 9a       	sbi	0x1f, 2	; 31
    4c44:	f9 9a       	sbi	0x1f, 1	; 31
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	08 95       	ret

00004c4a <__ctype_isfalse>:
    4c4a:	99 27       	eor	r25, r25
    4c4c:	88 27       	eor	r24, r24

00004c4e <__ctype_istrue>:
    4c4e:	08 95       	ret

00004c50 <__muluhisi3>:
    4c50:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <__umulhisi3>
    4c54:	a5 9f       	mul	r26, r21
    4c56:	90 0d       	add	r25, r0
    4c58:	b4 9f       	mul	r27, r20
    4c5a:	90 0d       	add	r25, r0
    4c5c:	a4 9f       	mul	r26, r20
    4c5e:	80 0d       	add	r24, r0
    4c60:	91 1d       	adc	r25, r1
    4c62:	11 24       	eor	r1, r1
    4c64:	08 95       	ret

00004c66 <_exit>:
    4c66:	f8 94       	cli

00004c68 <__stop_program>:
    4c68:	ff cf       	rjmp	.-2      	; 0x4c68 <__stop_program>
