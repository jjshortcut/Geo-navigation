
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004be  00800100  00004dba  00004e6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004dba  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025c  008005be  008005be  0000532c  2**0
                  ALLOC
  3 .eeprom       0000000e  00810000  00810000  0000532c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      0000005c  00000000  00000000  0000533a  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000408  00000000  00000000  00005396  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006ef4  00000000  00000000  0000579e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000183a  00000000  00000000  0000c692  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ab0  00000000  00000000  0000decc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000d08  00000000  00000000  0000f97c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cdb  00000000  00000000  00010684  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004512  00000000  00000000  0001135f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  00015871  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/*
 * get scaled data
 */
void hmc5883l_getdata(double *mx, double *my, double *mz) {
       0:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__ctors_end>
       4:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
       8:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
       c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      10:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      14:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      18:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      1c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      20:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      24:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	int16_t mxraw = 0;
      28:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	int16_t myraw = 0;
      2c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	int16_t mzraw = 0;
      30:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	hmc5883l_getrawdata(&mxraw, &myraw, &mzraw);
      34:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      38:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <__vector_14>
      3c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      40:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      44:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
	float mzt = mzraw - HMC5883L_OFFSETZ;
	*mx = HMC5883L_GAINX1 * mxt + HMC5883L_GAINX2 * myt + HMC5883L_GAINX3 * mzt;
	*my = HMC5883L_GAINY1 * mxt + HMC5883L_GAINY2 * myt + HMC5883L_GAINY3 * mzt;
	*mz = HMC5883L_GAINZ1 * mxt + HMC5883L_GAINZ2 * myt + HMC5883L_GAINZ3 * mzt;
	#else
	*mx = mxraw * hmc5883l_scale;
      48:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__vector_18>
      4c:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__vector_19>
      50:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      54:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      58:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      5c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      60:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      64:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__bad_interrupt>
      68:	e7 0d       	add	r30, r7
      6a:	ec 0e       	add	r14, r28
      6c:	ad 0c       	add	r10, r13
      6e:	a6 0d       	add	r26, r6
      70:	c6 0d       	add	r28, r6
      72:	cb 0d       	add	r28, r11
      74:	ec 0e       	add	r14, r28
      76:	28 0e       	add	r2, r24
      78:	ec 0e       	add	r14, r28
	*my = myraw * hmc5883l_scale;
      7a:	ec 0e       	add	r14, r28
      7c:	39 0e       	add	r3, r25
      7e:	ec 0e       	add	r14, r28
      80:	de 0e       	add	r13, r30
      82:	ec 0e       	add	r14, r28
      84:	06 0f       	add	r16, r22
      86:	58 0e       	add	r5, r24
      88:	65 0c       	add	r6, r5
      8a:	74 0e       	add	r7, r20
      8c:	ec 0e       	add	r14, r28
      8e:	8c 0e       	add	r8, r28
      90:	97 0e       	add	r9, r23
      92:	9c 0e       	add	r9, r28
      94:	c0 0e       	add	r12, r16
      96:	8a 0c       	add	r8, r10
      98:	ec 0e       	add	r14, r28
      9a:	ec 0e       	add	r14, r28
      9c:	ec 0e       	add	r14, r28
      9e:	ec 0e       	add	r14, r28
	*mz = mzraw * hmc5883l_scale;
      a0:	ec 0e       	add	r14, r28
      a2:	ec 0e       	add	r14, r28
      a4:	ec 0e       	add	r14, r28
      a6:	ec 0e       	add	r14, r28
      a8:	ec 0e       	add	r14, r28
      aa:	ec 0e       	add	r14, r28
      ac:	ba 0c       	add	r11, r10
      ae:	c5 0c       	add	r12, r5
      b0:	c3 0d       	add	r28, r3
      b2:	ec 0e       	add	r14, r28
      b4:	fa 0d       	add	r31, r10
      b6:	ec 0e       	add	r14, r28
      b8:	ec 0e       	add	r14, r28
      ba:	ec 0e       	add	r14, r28
      bc:	ec 0e       	add	r14, r28
      be:	ec 0e       	add	r14, r28
      c0:	ec 0e       	add	r14, r28
      c2:	ec 0e       	add	r14, r28
      c4:	ec 0e       	add	r14, r28
	#endif
}
      c6:	ec 0e       	add	r14, r28
      c8:	ec 0e       	add	r14, r28
      ca:	ec 0e       	add	r14, r28
      cc:	ec 0e       	add	r14, r28
      ce:	81 0e       	add	r8, r17
      d0:	34 0e       	add	r3, r20
      d2:	ec 0e       	add	r14, r28
      d4:	aa 0e       	add	r10, r26
      d6:	23 10       	cpse	r2, r3
      d8:	38 10       	cpse	r3, r8
      da:	4d 10       	cpse	r4, r13
      dc:	62 10       	cpse	r6, r2
      de:	77 10       	cpse	r7, r7
      e0:	8c 10       	cpse	r8, r12
      e2:	a1 10       	cpse	r10, r1
      e4:	b6 10       	cpse	r11, r6
      e6:	f3 11       	cpse	r31, r3
      e8:	04 12       	cpse	r0, r20
      ea:	29 12       	cpse	r2, r25
      ec:	62 12       	cpse	r6, r18
      ee:	9b 12       	cpse	r9, r27
      f0:	fc 12       	cpse	r15, r28
      f2:	64 13       	cpse	r22, r20
      f4:	b7 13       	cpse	r27, r23
      f6:	08 4a       	sbci	r16, 0xA8	; 168
      f8:	d7 3b       	cpi	r29, 0xB7	; 183
      fa:	3b ce       	rjmp	.-906    	; 0xfffffd72 <__eeprom_end+0xff7efd64>
      fc:	01 6e       	ori	r16, 0xE1	; 225
      fe:	84 bc       	out	0x24, r8	; 36
     100:	bf fd       	.word	0xfdbf	; ????
     102:	c1 2f       	mov	r28, r17
     104:	3d 6c       	ori	r19, 0xCD	; 205
     106:	74 31       	cpi	r23, 0x14	; 20
     108:	9a bd       	out	0x2a, r25	; 42
     10a:	56 83       	std	Z+6, r21	; 0x06
     10c:	3d da       	rcall	.-2950   	; 0xfffff588 <__eeprom_end+0xff7ef57a>
     10e:	3d 00       	.word	0x003d	; ????
     110:	c7 7f       	andi	r28, 0xF7	; 247
     112:	11 be       	out	0x31, r1	; 49
     114:	d9 e4       	ldi	r29, 0x49	; 73
     116:	bb 4c       	sbci	r27, 0xCB	; 203
     118:	3e 91       	ld	r19, -X
     11a:	6b aa       	std	Y+51, r6	; 0x33
     11c:	aa be       	out	0x3a, r10	; 58
     11e:	00 00       	nop
     120:	00 80       	ld	r0, Z
     122:	3f 05       	cpc	r19, r15
     124:	a8 4c       	sbci	r26, 0xC8	; 200
     126:	cd b2       	in	r12, 0x1d	; 29
     128:	d4 4e       	sbci	r29, 0xE4	; 228
     12a:	b9 38       	cpi	r27, 0x89	; 137
     12c:	36 a9       	ldd	r19, Z+54	; 0x36
     12e:	02 0c       	add	r0, r2
     130:	50 b9       	out	0x00, r21	; 0
     132:	91 86       	std	Z+9, r9	; 0x09
     134:	88 08       	sbc	r8, r8
     136:	3c a6       	std	Y+44, r3	; 0x2c
     138:	aa aa       	std	Y+50, r10	; 0x32
     13a:	2a be       	out	0x3a, r2	; 58
     13c:	00 00       	nop
     13e:	00 80       	ld	r0, Z
     140:	3f 00       	.word	0x003f	; ????

00000142 <__trampolines_end>:
     142:	27 3f       	cpi	r18, 0xF7	; 247
     144:	27 20       	and	r2, r7
     146:	3d 20       	and	r3, r13
     148:	64 65       	ori	r22, 0x54	; 84
     14a:	62 75       	andi	r22, 0x52	; 82
     14c:	67 20       	and	r6, r7
     14e:	6d 65       	ori	r22, 0x5D	; 93
     150:	73 73       	andi	r23, 0x33	; 51
     152:	61 67       	ori	r22, 0x71	; 113
     154:	65 73       	andi	r22, 0x35	; 53
     156:	0a 00       	.word	0x000a	; ????

00000158 <__c.2598>:
     158:	44 65 76 69 63 65 20 72 65 73 65 74 65 64 20 74     Device reseted t
     168:	6f 20 66 61 63 74 6f 72 79 20 73 65 74 74 69 6e     o factory settin
     178:	67 73 21 0a 00                                      gs!..

0000017d <__c.2595>:
     17d:	52 65 73 65 74 74 69 6e 67 20 42 6c 75 65 74 6f     Resetting Blueto
     18d:	6f 74 68 20 73 65 74 74 69 6e 67 73 21 0a 00        oth settings!..

0000019c <__c.2592>:
     19c:	50 6f 77 65 72 69 6e 67 20 6f 66 66 2e 2e 0a 00     Powering off....

000001ac <__c.2589>:
     1ac:	53 68 6f 77 20 55 49 20 4e 6f 72 74 68 20 3d 20     Show UI North = 
	...

000001bd <__c.2586>:
     1bd:	42 72 69 67 68 74 6e 65 73 73 20 73 65 74 20 74     Brightness set t
     1cd:	6f 3a 00                                            o:.

000001d0 <__c.2583>:
     1d0:	54 4f 44 4f 2c 20 69 6d 70 6c 65 6d 65 6e 74 20     TODO, implement 
     1e0:	73 65 74 20 6e 61 76 69 67 61 74 69 6f 6e 20 63     set navigation c
     1f0:	6f 6c 6f 72 0a 00                                   olor..

000001f6 <__c.2579>:
     1f6:	43 6f 6d 70 61 73 73 20 76 61 6c 75 65 20 73 65     Compass value se
     206:	74 20 74 6f 00                                      t to.

0000020b <__c.2576>:
     20b:	44 65 62 75 67 20 6d 73 67 27 73 20 6f 6e 0a 00     Debug msg's on..

0000021b <__c.2574>:
     21b:	44 65 62 75 67 20 6d 73 67 27 73 20 6f 66 66 0a     Debug msg's off.
	...

0000022c <__c.2571>:
     22c:	53 68 6f 77 20 55 49 20 64 69 73 74 61 6e 63 65     Show UI distance
     23c:	20 3d 20 00                                          = .

00000240 <__c.2161>:
     240:	6e 61 6e 00                                         nan.

00000244 <__c.2159>:
     244:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     254:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     264:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     274:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     284:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     294:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2a4:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2b4:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2c4:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2d4:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2e4:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     2f4:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     304:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     314:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     324:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     334:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000342 <pstr_nan>:
     342:	4e 41 4e                                            NAN

00000345 <pstr_inity>:
     345:	49 4e 49 54 59                                      INITY

0000034a <pstr_inf>:
     34a:	49 4e 46                                            INF

0000034d <pwr_m10>:
     34d:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     35d:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000365 <pwr_p10>:
     365:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     375:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

0000037e <__ctors_end>:
     37e:	11 24       	eor	r1, r1
     380:	1f be       	out	0x3f, r1	; 63
     382:	cf ef       	ldi	r28, 0xFF	; 255
     384:	d8 e0       	ldi	r29, 0x08	; 8
     386:	de bf       	out	0x3e, r29	; 62
     388:	cd bf       	out	0x3d, r28	; 61

0000038a <__do_copy_data>:
     38a:	15 e0       	ldi	r17, 0x05	; 5
     38c:	a0 e0       	ldi	r26, 0x00	; 0
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	ea eb       	ldi	r30, 0xBA	; 186
     392:	fd e4       	ldi	r31, 0x4D	; 77
     394:	02 c0       	rjmp	.+4      	; 0x39a <__do_copy_data+0x10>
     396:	05 90       	lpm	r0, Z+
     398:	0d 92       	st	X+, r0
     39a:	ae 3b       	cpi	r26, 0xBE	; 190
     39c:	b1 07       	cpc	r27, r17
     39e:	d9 f7       	brne	.-10     	; 0x396 <__do_copy_data+0xc>

000003a0 <__do_clear_bss>:
     3a0:	28 e0       	ldi	r18, 0x08	; 8
     3a2:	ae eb       	ldi	r26, 0xBE	; 190
     3a4:	b5 e0       	ldi	r27, 0x05	; 5
     3a6:	01 c0       	rjmp	.+2      	; 0x3aa <.do_clear_bss_start>

000003a8 <.do_clear_bss_loop>:
     3a8:	1d 92       	st	X+, r1

000003aa <.do_clear_bss_start>:
     3aa:	aa 31       	cpi	r26, 0x1A	; 26
     3ac:	b2 07       	cpc	r27, r18
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <.do_clear_bss_loop>
     3b0:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <main>
     3b4:	0c 94 db 26 	jmp	0x4db6	; 0x4db6 <_exit>

000003b8 <__bad_interrupt>:
     3b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003bc <calculate_bearing>:
#include <avr/io.h>
#include "defines.h"
#include "Geocalc.h"

uint16_t calculate_bearing(double lat1, double lon1, double lat2, double lon2)
{
     3bc:	4f 92       	push	r4
     3be:	5f 92       	push	r5
     3c0:	6f 92       	push	r6
     3c2:	7f 92       	push	r7
     3c4:	8f 92       	push	r8
     3c6:	9f 92       	push	r9
     3c8:	af 92       	push	r10
     3ca:	bf 92       	push	r11
     3cc:	cf 92       	push	r12
     3ce:	df 92       	push	r13
     3d0:	ef 92       	push	r14
     3d2:	ff 92       	push	r15
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	64 97       	sbiw	r28, 0x14	; 20
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	2d 83       	std	Y+5, r18	; 0x05
     3ee:	3e 83       	std	Y+6, r19	; 0x06
     3f0:	4f 83       	std	Y+7, r20	; 0x07
     3f2:	58 87       	std	Y+8, r21	; 0x08
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     3f4:	2b ed       	ldi	r18, 0xDB	; 219
     3f6:	3f e0       	ldi	r19, 0x0F	; 15
     3f8:	49 e4       	ldi	r20, 0x49	; 73
     3fa:	50 e4       	ldi	r21, 0x40	; 64
     3fc:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	44 e3       	ldi	r20, 0x34	; 52
     406:	53 e4       	ldi	r21, 0x43	; 67
     408:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     40c:	69 83       	std	Y+1, r22	; 0x01
     40e:	7a 83       	std	Y+2, r23	; 0x02
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	9c 83       	std	Y+4, r25	; 0x04
     414:	2b ed       	ldi	r18, 0xDB	; 219
     416:	3f e0       	ldi	r19, 0x0F	; 15
     418:	49 e4       	ldi	r20, 0x49	; 73
     41a:	50 e4       	ldi	r21, 0x40	; 64
     41c:	c8 01       	movw	r24, r16
     41e:	b7 01       	movw	r22, r14
     420:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	44 e3       	ldi	r20, 0x34	; 52
     42a:	53 e4       	ldi	r21, 0x43	; 67
     42c:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     430:	2b 01       	movw	r4, r22
     432:	3c 01       	movw	r6, r24
	lon1 = dtor(lon1);
	lat2 = dtor(lat2);
	lon2 = dtor(lon2);

	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
     434:	69 81       	ldd	r22, Y+1	; 0x01
     436:	7a 81       	ldd	r23, Y+2	; 0x02
     438:	8b 81       	ldd	r24, Y+3	; 0x03
     43a:	9c 81       	ldd	r25, Y+4	; 0x04
     43c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <cos>
     440:	69 87       	std	Y+9, r22	; 0x09
     442:	7a 87       	std	Y+10, r23	; 0x0a
     444:	8b 87       	std	Y+11, r24	; 0x0b
     446:	9c 87       	std	Y+12, r25	; 0x0c
     448:	c3 01       	movw	r24, r6
     44a:	b2 01       	movw	r22, r4
     44c:	0e 94 b0 20 	call	0x4160	; 0x4160 <sin>
     450:	6d 87       	std	Y+13, r22	; 0x0d
     452:	7e 87       	std	Y+14, r23	; 0x0e
     454:	8f 87       	std	Y+15, r24	; 0x0f
     456:	98 8b       	std	Y+16, r25	; 0x10
     458:	69 81       	ldd	r22, Y+1	; 0x01
     45a:	7a 81       	ldd	r23, Y+2	; 0x02
     45c:	8b 81       	ldd	r24, Y+3	; 0x03
     45e:	9c 81       	ldd	r25, Y+4	; 0x04
     460:	0e 94 b0 20 	call	0x4160	; 0x4160 <sin>
     464:	69 83       	std	Y+1, r22	; 0x01
     466:	7a 83       	std	Y+2, r23	; 0x02
     468:	8b 83       	std	Y+3, r24	; 0x03
     46a:	9c 83       	std	Y+4, r25	; 0x04
     46c:	c3 01       	movw	r24, r6
     46e:	b2 01       	movw	r22, r4
     470:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <cos>
     474:	2b 01       	movw	r4, r22
     476:	3c 01       	movw	r6, r24
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     478:	2b ed       	ldi	r18, 0xDB	; 219
     47a:	3f e0       	ldi	r19, 0x0F	; 15
     47c:	49 e4       	ldi	r20, 0x49	; 73
     47e:	50 e4       	ldi	r21, 0x40	; 64
     480:	c6 01       	movw	r24, r12
     482:	b5 01       	movw	r22, r10
     484:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     488:	20 e0       	ldi	r18, 0x00	; 0
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	44 e3       	ldi	r20, 0x34	; 52
     48e:	53 e4       	ldi	r21, 0x43	; 67
     490:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     494:	4b 01       	movw	r8, r22
     496:	5c 01       	movw	r10, r24
     498:	2b ed       	ldi	r18, 0xDB	; 219
     49a:	3f e0       	ldi	r19, 0x0F	; 15
     49c:	49 e4       	ldi	r20, 0x49	; 73
     49e:	50 e4       	ldi	r21, 0x40	; 64
     4a0:	6d 81       	ldd	r22, Y+5	; 0x05
     4a2:	7e 81       	ldd	r23, Y+6	; 0x06
     4a4:	8f 81       	ldd	r24, Y+7	; 0x07
     4a6:	98 85       	ldd	r25, Y+8	; 0x08
     4a8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	44 e3       	ldi	r20, 0x34	; 52
     4b2:	53 e4       	ldi	r21, 0x43	; 67
     4b4:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     4b8:	9b 01       	movw	r18, r22
     4ba:	ac 01       	movw	r20, r24
	lon1 = dtor(lon1);
	lat2 = dtor(lat2);
	lon2 = dtor(lon2);

	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
     4bc:	c5 01       	movw	r24, r10
     4be:	b4 01       	movw	r22, r8
     4c0:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     4c4:	4b 01       	movw	r8, r22
     4c6:	5c 01       	movw	r10, r24
     4c8:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <cos>
     4cc:	6d 83       	std	Y+5, r22	; 0x05
     4ce:	7e 83       	std	Y+6, r23	; 0x06
     4d0:	8f 83       	std	Y+7, r24	; 0x07
     4d2:	98 87       	std	Y+8, r25	; 0x08
     4d4:	c5 01       	movw	r24, r10
     4d6:	b4 01       	movw	r22, r8
     4d8:	0e 94 b0 20 	call	0x4160	; 0x4160 <sin>
     4dc:	69 8b       	std	Y+17, r22	; 0x11
     4de:	7a 8b       	std	Y+18, r23	; 0x12
     4e0:	8b 8b       	std	Y+19, r24	; 0x13
     4e2:	9c 8b       	std	Y+20, r25	; 0x14
     4e4:	2d 85       	ldd	r18, Y+13	; 0x0d
     4e6:	3e 85       	ldd	r19, Y+14	; 0x0e
     4e8:	4f 85       	ldd	r20, Y+15	; 0x0f
     4ea:	58 89       	ldd	r21, Y+16	; 0x10
     4ec:	69 85       	ldd	r22, Y+9	; 0x09
     4ee:	7a 85       	ldd	r23, Y+10	; 0x0a
     4f0:	8b 85       	ldd	r24, Y+11	; 0x0b
     4f2:	9c 85       	ldd	r25, Y+12	; 0x0c
     4f4:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     4f8:	4b 01       	movw	r8, r22
     4fa:	5c 01       	movw	r10, r24
     4fc:	a3 01       	movw	r20, r6
     4fe:	92 01       	movw	r18, r4
     500:	69 81       	ldd	r22, Y+1	; 0x01
     502:	7a 81       	ldd	r23, Y+2	; 0x02
     504:	8b 81       	ldd	r24, Y+3	; 0x03
     506:	9c 81       	ldd	r25, Y+4	; 0x04
     508:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     50c:	2d 81       	ldd	r18, Y+5	; 0x05
     50e:	3e 81       	ldd	r19, Y+6	; 0x06
     510:	4f 81       	ldd	r20, Y+7	; 0x07
     512:	58 85       	ldd	r21, Y+8	; 0x08
     514:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     518:	9b 01       	movw	r18, r22
     51a:	ac 01       	movw	r20, r24
     51c:	c5 01       	movw	r24, r10
     51e:	b4 01       	movw	r22, r8
     520:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     524:	4b 01       	movw	r8, r22
     526:	5c 01       	movw	r10, r24
     528:	29 89       	ldd	r18, Y+17	; 0x11
     52a:	3a 89       	ldd	r19, Y+18	; 0x12
     52c:	4b 89       	ldd	r20, Y+19	; 0x13
     52e:	5c 89       	ldd	r21, Y+20	; 0x14
     530:	c3 01       	movw	r24, r6
     532:	b2 01       	movw	r22, r4
     534:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     538:	a5 01       	movw	r20, r10
     53a:	94 01       	movw	r18, r8
     53c:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <atan2>
}

//Convert radians to degrees
double rtod(double fradians)
{
	return (fradians * 180.0 / PI);
     540:	20 e0       	ldi	r18, 0x00	; 0
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	44 e3       	ldi	r20, 0x34	; 52
     546:	53 e4       	ldi	r21, 0x43	; 67
     548:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     54c:	2b ed       	ldi	r18, 0xDB	; 219
     54e:	3f e0       	ldi	r19, 0x0F	; 15
     550:	49 e4       	ldi	r20, 0x49	; 73
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
	//determine angle
	double bearing = atan2(sin(lon2 - lon1) * cos(lat2), (cos(lat1) * sin(lat2)) - (sin(lat1) * cos(lat2) * cos(lon2 - lon1)));
	//convert to degrees
	bearing = rtod(bearing);
	//use mod to turn -90 = 270
	bearing = fmod((bearing + 360.0), 360);
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	44 eb       	ldi	r20, 0xB4	; 180
     55e:	53 e4       	ldi	r21, 0x43	; 67
     560:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	44 eb       	ldi	r20, 0xB4	; 180
     56a:	53 e4       	ldi	r21, 0x43	; 67
     56c:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <fmod>
	return (int) bearing + 0.5;
     570:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
     574:	88 27       	eor	r24, r24
     576:	77 fd       	sbrc	r23, 7
     578:	80 95       	com	r24
     57a:	98 2f       	mov	r25, r24
     57c:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     580:	20 e0       	ldi	r18, 0x00	; 0
     582:	30 e0       	ldi	r19, 0x00	; 0
     584:	40 e0       	ldi	r20, 0x00	; 0
     586:	5f e3       	ldi	r21, 0x3F	; 63
     588:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     58c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__fixunssfsi>
}
     590:	cb 01       	movw	r24, r22
     592:	64 96       	adiw	r28, 0x14	; 20
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	df 90       	pop	r13
     5ac:	cf 90       	pop	r12
     5ae:	bf 90       	pop	r11
     5b0:	af 90       	pop	r10
     5b2:	9f 90       	pop	r9
     5b4:	8f 90       	pop	r8
     5b6:	7f 90       	pop	r7
     5b8:	6f 90       	pop	r6
     5ba:	5f 90       	pop	r5
     5bc:	4f 90       	pop	r4
     5be:	08 95       	ret

000005c0 <calculate_distance>:

long calculate_distance(double lat1, double lon1, double lat2, double lon2)
{
     5c0:	4f 92       	push	r4
     5c2:	5f 92       	push	r5
     5c4:	6f 92       	push	r6
     5c6:	7f 92       	push	r7
     5c8:	8f 92       	push	r8
     5ca:	9f 92       	push	r9
     5cc:	af 92       	push	r10
     5ce:	bf 92       	push	r11
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	cd b7       	in	r28, 0x3d	; 61
     5e2:	de b7       	in	r29, 0x3e	; 62
     5e4:	2c 97       	sbiw	r28, 0x0c	; 12
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	de bf       	out	0x3e, r29	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	cd bf       	out	0x3d, r28	; 61
     5f0:	2b 01       	movw	r4, r22
     5f2:	3c 01       	movw	r6, r24
     5f4:	29 87       	std	Y+9, r18	; 0x09
     5f6:	3a 87       	std	Y+10, r19	; 0x0a
     5f8:	4b 87       	std	Y+11, r20	; 0x0b
     5fa:	5c 87       	std	Y+12, r21	; 0x0c
     5fc:	e9 82       	std	Y+1, r14	; 0x01
     5fe:	fa 82       	std	Y+2, r15	; 0x02
     600:	0b 83       	std	Y+3, r16	; 0x03
     602:	1c 83       	std	Y+4, r17	; 0x04
	//Note lat1/lon1/lat2/lon2 must be in radians
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
     604:	9b 01       	movw	r18, r22
     606:	ac 01       	movw	r20, r24
     608:	c8 01       	movw	r24, r16
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     610:	2b ed       	ldi	r18, 0xDB	; 219
     612:	3f e0       	ldi	r19, 0x0F	; 15
     614:	49 e4       	ldi	r20, 0x49	; 73
     616:	50 e4       	ldi	r21, 0x40	; 64
     618:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	44 e3       	ldi	r20, 0x34	; 52
     622:	53 e4       	ldi	r21, 0x43	; 67
     624:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     628:	20 e0       	ldi	r18, 0x00	; 0
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	5f e3       	ldi	r21, 0x3F	; 63
     630:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     634:	0e 94 b0 20 	call	0x4160	; 0x4160 <sin>
     638:	6d 83       	std	Y+5, r22	; 0x05
     63a:	7e 83       	std	Y+6, r23	; 0x06
     63c:	8f 83       	std	Y+7, r24	; 0x07
     63e:	98 87       	std	Y+8, r25	; 0x08
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     640:	2b ed       	ldi	r18, 0xDB	; 219
     642:	3f e0       	ldi	r19, 0x0F	; 15
     644:	49 e4       	ldi	r20, 0x49	; 73
     646:	50 e4       	ldi	r21, 0x40	; 64
     648:	c3 01       	movw	r24, r6
     64a:	b2 01       	movw	r22, r4
     64c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	44 e3       	ldi	r20, 0x34	; 52
     656:	53 e4       	ldi	r21, 0x43	; 67
     658:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     65c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <cos>
     660:	2b 01       	movw	r4, r22
     662:	3c 01       	movw	r6, r24
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     664:	2b ed       	ldi	r18, 0xDB	; 219
     666:	3f e0       	ldi	r19, 0x0F	; 15
     668:	49 e4       	ldi	r20, 0x49	; 73
     66a:	50 e4       	ldi	r21, 0x40	; 64
     66c:	c8 01       	movw	r24, r16
     66e:	b7 01       	movw	r22, r14
     670:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	44 e3       	ldi	r20, 0x34	; 52
     67a:	53 e4       	ldi	r21, 0x43	; 67
     67c:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     680:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <cos>
     684:	69 83       	std	Y+1, r22	; 0x01
     686:	7a 83       	std	Y+2, r23	; 0x02
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	9c 83       	std	Y+4, r25	; 0x04
	//Calculate distance form lat1/lon1 to lat2/lon2 using haversine formula
	//Note lat1/lon1/lat2/lon2 must be in radians
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
     68c:	29 85       	ldd	r18, Y+9	; 0x09
     68e:	3a 85       	ldd	r19, Y+10	; 0x0a
     690:	4b 85       	ldd	r20, Y+11	; 0x0b
     692:	5c 85       	ldd	r21, Y+12	; 0x0c
     694:	c6 01       	movw	r24, r12
     696:	b5 01       	movw	r22, r10
     698:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
}

//convert degrees to radians
double dtor(double fdegrees)
{
	return (fdegrees * PI / 180);
     69c:	2b ed       	ldi	r18, 0xDB	; 219
     69e:	3f e0       	ldi	r19, 0x0F	; 15
     6a0:	49 e4       	ldi	r20, 0x49	; 73
     6a2:	50 e4       	ldi	r21, 0x40	; 64
     6a4:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	44 e3       	ldi	r20, 0x34	; 52
     6ae:	53 e4       	ldi	r21, 0x43	; 67
     6b0:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
	//Returns distance in KM's
	double dlon, dlat, a, c;
	double dist = 0.0;
	dlon = dtor(lon2 - lon1);
	dlat = dtor(lat2 - lat1);
	a = pow(sin(dlat / 2), 2) + cos(dtor(lat1)) * cos(dtor(lat2)) * pow(sin(dlon / 2), 2);
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	40 e0       	ldi	r20, 0x00	; 0
     6ba:	5f e3       	ldi	r21, 0x3F	; 63
     6bc:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     6c0:	0e 94 b0 20 	call	0x4160	; 0x4160 <sin>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     6cc:	4b 01       	movw	r8, r22
     6ce:	5c 01       	movw	r10, r24
     6d0:	29 81       	ldd	r18, Y+1	; 0x01
     6d2:	3a 81       	ldd	r19, Y+2	; 0x02
     6d4:	4b 81       	ldd	r20, Y+3	; 0x03
     6d6:	5c 81       	ldd	r21, Y+4	; 0x04
     6d8:	c3 01       	movw	r24, r6
     6da:	b2 01       	movw	r22, r4
     6dc:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     6ec:	4b 01       	movw	r8, r22
     6ee:	5c 01       	movw	r10, r24
     6f0:	2d 81       	ldd	r18, Y+5	; 0x05
     6f2:	3e 81       	ldd	r19, Y+6	; 0x06
     6f4:	4f 81       	ldd	r20, Y+7	; 0x07
     6f6:	58 85       	ldd	r21, Y+8	; 0x08
     6f8:	ca 01       	movw	r24, r20
     6fa:	b9 01       	movw	r22, r18
     6fc:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	c5 01       	movw	r24, r10
     706:	b4 01       	movw	r22, r8
     708:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     70c:	6b 01       	movw	r12, r22
     70e:	7c 01       	movw	r14, r24
	c = 2 * atan2(sqrt(a), sqrt(1 - a));
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 e8       	ldi	r24, 0x80	; 128
     71a:	9f e3       	ldi	r25, 0x3F	; 63
     71c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     720:	0e 94 ba 20 	call	0x4174	; 0x4174 <sqrt>
     724:	4b 01       	movw	r8, r22
     726:	5c 01       	movw	r10, r24
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 ba 20 	call	0x4174	; 0x4174 <sqrt>
     730:	a5 01       	movw	r20, r10
     732:	94 01       	movw	r18, r8
     734:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <atan2>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>

	dist = 20925656.2 * c;  //radius of the earth (6378140 meters) in feet 20925656.2
     740:	2c e6       	ldi	r18, 0x6C	; 108
     742:	36 ea       	ldi	r19, 0xA6	; 166
     744:	4f e9       	ldi	r20, 0x9F	; 159
     746:	5b e4       	ldi	r21, 0x4B	; 75
     748:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
	return (( (long) dist + 0.5) * 0.0003048);
     74c:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
     750:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	5f e3       	ldi	r21, 0x3F	; 63
     75c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     760:	20 e9       	ldi	r18, 0x90	; 144
     762:	3d ec       	ldi	r19, 0xCD	; 205
     764:	4f e9       	ldi	r20, 0x9F	; 159
     766:	59 e3       	ldi	r21, 0x39	; 57
     768:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     76c:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
}
     770:	2c 96       	adiw	r28, 0x0c	; 12
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	08 95       	ret

0000079e <control_power>:
#include "defines.h"
#include "uart_handler.h"

void control_power(uint8_t value)
{
	if (value)
     79e:	88 23       	and	r24, r24
     7a0:	19 f0       	breq	.+6      	; 0x7a8 <control_power+0xa>
	{
		PWR_ON;		// Device will keep power after switch is released
     7a2:	80 e4       	ldi	r24, 0x40	; 64
     7a4:	8b b9       	out	0x0b, r24	; 11
     7a6:	08 95       	ret
	}
	else
	{
		PWR_OFF;	// Device turn off
     7a8:	5e 98       	cbi	0x0b, 6	; 11
     7aa:	08 95       	ret

000007ac <read_button>:
	}
}

uint8_t read_button(void)
{
	if(debug_on)
     7ac:	80 91 da 05 	lds	r24, 0x05DA
     7b0:	81 11       	cpse	r24, r1
	{
		//uart_puts("Button state = ");
		//print_int(SW_STATUS, 1);
		
		if (!SW_STATUS)	// If pressed, pulled low
     7b2:	89 b1       	in	r24, 0x09	; 9
		{
			//uart_puts("Pressed\n");
		}
	}
	
	return (!SW_STATUS);
     7b4:	89 b1       	in	r24, 0x09	; 9
     7b6:	80 95       	com	r24
}
     7b8:	88 1f       	adc	r24, r24
     7ba:	88 27       	eor	r24, r24
     7bc:	88 1f       	adc	r24, r24
     7be:	08 95       	ret

000007c0 <check_device_status>:
	}
}

void check_device_status(void)
{
	device.buttonstate = read_button();				// 1=pressed
     7c0:	0e 94 d6 03 	call	0x7ac	; 0x7ac <read_button>
     7c4:	80 93 a6 06 	sts	0x06A6, r24
	//device.chargingstate = read_charge_status();
	//device.battery = read_battery();
	
	if ((device.buttonstate==BUTTON_PRESSED))	// set state
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	89 f4       	brne	.+34     	; 0x7ee <check_device_status+0x2e>
	{
		if ((read_device_status()!=BUTTON_PRESSED))
     7cc:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <read_device_status>
     7d0:	81 30       	cpi	r24, 0x01	; 1
     7d2:	09 f4       	brne	.+2      	; 0x7d6 <check_device_status+0x16>
     7d4:	54 c0       	rjmp	.+168    	; 0x87e <check_device_status+0xbe>
		{
			if (debug_on){uart_puts("Button pressed\n");}
     7d6:	80 91 da 05 	lds	r24, 0x05DA
     7da:	88 23       	and	r24, r24
     7dc:	21 f0       	breq	.+8      	; 0x7e6 <check_device_status+0x26>
     7de:	84 e2       	ldi	r24, 0x24	; 36
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			set_device_status(BUTTON_PRESSED);
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <set_device_status>
     7ec:	08 95       	ret
		}
	}
	else
	{
		if ((device.buttonstate==BUTTON_NOT_PRESSED)&&(read_device_status()==BUTTON_PRESSED)) // reset state
     7ee:	81 11       	cpse	r24, r1
     7f0:	0f c0       	rjmp	.+30     	; 0x810 <check_device_status+0x50>
     7f2:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <read_device_status>
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	59 f4       	brne	.+22     	; 0x810 <check_device_status+0x50>
		{
			if (debug_on){uart_puts("Button released\n");}
     7fa:	80 91 da 05 	lds	r24, 0x05DA
     7fe:	88 23       	and	r24, r24
     800:	21 f0       	breq	.+8      	; 0x80a <check_device_status+0x4a>
     802:	84 e3       	ldi	r24, 0x34	; 52
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			device.status = BUTTON_NOT_PRESSED;	// Fix this.. stays in a loop due to loss of previous state before button..
     80a:	10 92 aa 06 	sts	0x06AA, r1
     80e:	08 95       	ret
		}
		else if (read_device_status()==BUTTON_NOT_PRESSED)
     810:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <read_device_status>
     814:	81 11       	cpse	r24, r1
     816:	03 c0       	rjmp	.+6      	; 0x81e <check_device_status+0x5e>
		{
			set_previous_device_status();
     818:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <set_previous_device_status>
     81c:	08 95       	ret
		}
		else
		{
			if (timeout_timer<TIMEOUT_TIME) // still ok
     81e:	80 91 dd 05 	lds	r24, 0x05DD
     822:	90 91 de 05 	lds	r25, 0x05DE
     826:	88 38       	cpi	r24, 0x88	; 136
     828:	23 e1       	ldi	r18, 0x13	; 19
     82a:	92 07       	cpc	r25, r18
     82c:	30 f4       	brcc	.+12     	; 0x83a <check_device_status+0x7a>
			{
				timeout_timer++;
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	90 93 de 05 	sts	0x05DE, r25
     834:	80 93 dd 05 	sts	0x05DD, r24
     838:	15 c0       	rjmp	.+42     	; 0x864 <check_device_status+0xa4>
			}
			else //time-out
			{
				timeout_timer = 40;
     83a:	88 e2       	ldi	r24, 0x28	; 40
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	90 93 de 05 	sts	0x05DE, r25
     842:	80 93 dd 05 	sts	0x05DD, r24
				if (read_device_status()!=NO_CONNECTION)
     846:	0e 94 c7 17 	call	0x2f8e	; 0x2f8e <read_device_status>
     84a:	83 30       	cpi	r24, 0x03	; 3
     84c:	59 f0       	breq	.+22     	; 0x864 <check_device_status+0xa4>
				{
					set_device_status(NO_CONNECTION);
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <set_device_status>
					if (debug_on){uart_puts("We have NO Connection (time-out)..\n");}
     854:	80 91 da 05 	lds	r24, 0x05DA
     858:	88 23       	and	r24, r24
     85a:	21 f0       	breq	.+8      	; 0x864 <check_device_status+0xa4>
     85c:	85 e4       	ldi	r24, 0x45	; 69
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				}
			}
			
			if (device.newdata)
     864:	80 91 a8 06 	lds	r24, 0x06A8
     868:	88 23       	and	r24, r24
     86a:	49 f0       	breq	.+18     	; 0x87e <check_device_status+0xbe>
			{
				set_device_status(NAVIGATING);
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <set_device_status>
				device.newdata = FALSE;
     872:	10 92 a8 06 	sts	0x06A8, r1
				timeout_timer = 0;	// reset timer
     876:	10 92 de 05 	sts	0x05DE, r1
     87a:	10 92 dd 05 	sts	0x05DD, r1
     87e:	08 95       	ret

00000880 <read_charge_status>:
	return (!SW_STATUS);
}

uint8_t read_charge_status(void)
{
	if (!CHARGE_PIN_STATUS) // If 0
     880:	32 99       	sbic	0x06, 2	; 6
     882:	0a c0       	rjmp	.+20     	; 0x898 <read_charge_status+0x18>
	{
		if(debug_on) uart_puts("Charge status: CHARGING\n");
     884:	80 91 da 05 	lds	r24, 0x05DA
     888:	88 23       	and	r24, r24
     88a:	81 f0       	breq	.+32     	; 0x8ac <read_charge_status+0x2c>
     88c:	89 e6       	ldi	r24, 0x69	; 105
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		return CHARGING;
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	08 95       	ret
	}
	else
	{
		if(debug_on) uart_puts("Charge status: FULL\n");
     898:	80 91 da 05 	lds	r24, 0x05DA
     89c:	88 23       	and	r24, r24
     89e:	41 f0       	breq	.+16     	; 0x8b0 <read_charge_status+0x30>
     8a0:	82 e8       	ldi	r24, 0x82	; 130
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		return FULL;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	08 95       	ret
uint8_t read_charge_status(void)
{
	if (!CHARGE_PIN_STATUS) // If 0
	{
		if(debug_on) uart_puts("Charge status: CHARGING\n");
		return CHARGING;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	08 95       	ret
	}
	else
	{
		if(debug_on) uart_puts("Charge status: FULL\n");
		return FULL;
     8b0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     8b2:	08 95       	ret

000008b4 <read_battery>:

uint16_t read_battery(void)
{
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
	*   Min val = 3.14*0.5 = 1.57V*1024/3V3 = 487
	*	Min val = 4.2*0.5 = 2.1V*1024/3V3 = 651
	*/
	static uint16_t MIN_BAT_ADC = 487, MAX_BAT_ADC = 660;	
	
	BATT_PWR_ON;
     8b8:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ba:	8f e0       	ldi	r24, 0x0F	; 15
     8bc:	97 e2       	ldi	r25, 0x27	; 39
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <read_battery+0xa>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <read_battery+0x10>
     8c4:	00 00       	nop
	_delay_ms(5);	// Stabilize power supply
	battery_val = read_adc(BATT_PIN);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <read_adc>
	battery_percentage = (battery_val - MIN_BAT_ADC) * (100-0) / (MAX_BAT_ADC - MIN_BAT_ADC) + 0;
     8cc:	87 5e       	subi	r24, 0xE7	; 231
     8ce:	91 40       	sbci	r25, 0x01	; 1
     8d0:	24 e6       	ldi	r18, 0x64	; 100
     8d2:	28 9f       	mul	r18, r24
     8d4:	a0 01       	movw	r20, r0
     8d6:	29 9f       	mul	r18, r25
     8d8:	50 0d       	add	r21, r0
     8da:	11 24       	eor	r1, r1
     8dc:	9a 01       	movw	r18, r20
     8de:	a3 ed       	ldi	r26, 0xD3	; 211
     8e0:	ba e7       	ldi	r27, 0x7A	; 122
     8e2:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__umulhisi3>
     8e6:	48 1b       	sub	r20, r24
     8e8:	59 0b       	sbc	r21, r25
     8ea:	ea 01       	movw	r28, r20
     8ec:	d6 95       	lsr	r29
     8ee:	c7 95       	ror	r28
     8f0:	8c 0f       	add	r24, r28
     8f2:	9d 1f       	adc	r25, r29
	BATT_PWR_OFF;
     8f4:	22 e0       	ldi	r18, 0x02	; 2
     8f6:	28 b9       	out	0x08, r18	; 8
     8f8:	ec 01       	movw	r28, r24
     8fa:	cc 0f       	add	r28, r28
     8fc:	cd 2f       	mov	r28, r29
     8fe:	cc 1f       	adc	r28, r28
     900:	dd 0b       	sbc	r29, r29
     902:	d1 95       	neg	r29
     904:	c5 36       	cpi	r28, 0x65	; 101
     906:	d1 05       	cpc	r29, r1
     908:	10 f0       	brcs	.+4      	; 0x90e <__stack+0xf>
     90a:	c4 e6       	ldi	r28, 0x64	; 100
     90c:	d0 e0       	ldi	r29, 0x00	; 0
	
	if (battery_percentage>100) {battery_percentage=100;}
	
	if (debug_on)
     90e:	80 91 da 05 	lds	r24, 0x05DA
     912:	88 23       	and	r24, r24
     914:	61 f0       	breq	.+24     	; 0x92e <__stack+0x2f>
	{
		uart_puts("Battery = ");
     916:	87 e9       	ldi	r24, 0x97	; 151
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(battery_percentage, 0);
     91e:	60 e0       	ldi	r22, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		uart_puts("%\n");
     926:	82 ea       	ldi	r24, 0xA2	; 162
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>

	
	//battery_percentage = (battery_percentage>=100) ? 100: battery_percentage;	/* limit */
	//uart_puts("TODO:battery percentage should still be mapped!!\n");
	return (battery_percentage);
}
     92e:	ce 01       	movw	r24, r28
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	08 95       	ret

00000936 <init_bluetooth>:

void init_bluetooth(void)
{	/*TODO, AT pin not at correct layout for this module*/
	uart_init( UART_BAUD_SELECT(9600,F_CPU) );	/* Init Uart */
     936:	83 e3       	ldi	r24, 0x33	; 51
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 22 18 	call	0x3044	; 0x3044 <uart_init>
	/* Maybe set KEY-pin first? */
	BT_RST_LOW;
     93e:	5a 98       	cbi	0x0b, 2	; 11
     940:	8f e1       	ldi	r24, 0x1F	; 31
     942:	9e e4       	ldi	r25, 0x4E	; 78
     944:	01 97       	sbiw	r24, 0x01	; 1
     946:	f1 f7       	brne	.-4      	; 0x944 <init_bluetooth+0xe>
     948:	00 c0       	rjmp	.+0      	; 0x94a <init_bluetooth+0x14>
     94a:	00 00       	nop
	_delay_ms(10);
	BT_RST_HIGH;
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	8b b9       	out	0x0b, r24	; 11
     950:	8f e1       	ldi	r24, 0x1F	; 31
     952:	9e e4       	ldi	r25, 0x4E	; 78
     954:	01 97       	sbiw	r24, 0x01	; 1
     956:	f1 f7       	brne	.-4      	; 0x954 <init_bluetooth+0x1e>
     958:	00 c0       	rjmp	.+0      	; 0x95a <init_bluetooth+0x24>
     95a:	00 00       	nop
	_delay_ms(10);
	AT_ON;	// Set module into AT mode
     95c:	88 e0       	ldi	r24, 0x08	; 8
     95e:	8b b9       	out	0x0b, r24	; 11
	
	//uart_puts("AT+ORGL\n");	/* Original settings */
	uart_puts("AT+NAMEBIKENAV\n"); /* Set name */
     960:	85 ea       	ldi	r24, 0xA5	; 165
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	uart_puts("AT+ROLE=0\n");		/* Set role */
     968:	85 eb       	ldi	r24, 0xB5	; 181
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	uart_puts("AT+BAUD4\n");	/* set baudrate */
     970:	80 ec       	ldi	r24, 0xC0	; 192
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	
	/* Clear KEY-pin before reset */
	AT_OFF;	// Reset AT mode
     978:	5b 98       	cbi	0x0b, 3	; 11
	uart_puts("AT+RESET\n");	/* Reset module */
     97a:	8a ec       	ldi	r24, 0xCA	; 202
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Reset baudrate */
     982:	83 e3       	ldi	r24, 0x33	; 51
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	0e 94 22 18 	call	0x3044	; 0x3044 <uart_init>
     98a:	08 95       	ret

0000098c <read_data_raw>:
	i2c_stop();*/
}

// Returns a set of acceleration and raw magnetic readings from the cmp01a.
void read_data_raw(vector *a, vector *m)
{
     98c:	4f 92       	push	r4
     98e:	5f 92       	push	r5
     990:	6f 92       	push	r6
     992:	7f 92       	push	r7
     994:	8f 92       	push	r8
     996:	9f 92       	push	r9
     998:	af 92       	push	r10
     99a:	bf 92       	push	r11
     99c:	cf 92       	push	r12
     99e:	df 92       	push	r13
     9a0:	ef 92       	push	r14
     9a2:	ff 92       	push	r15
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	7c 01       	movw	r14, r24
     9ae:	eb 01       	movw	r28, r22
	//i2c_start(0x32);
	//i2c_write(0x28 | 1<<7);
	//i2c_start(0x33);
	
	// read accelerometer values
	i2c_start(0x32);
     9b0:	82 e3       	ldi	r24, 0x32	; 50
     9b2:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	i2c_write(0xA8);
     9b6:	88 ea       	ldi	r24, 0xA8	; 168
     9b8:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_start(0x33);
     9bc:	83 e3       	ldi	r24, 0x33	; 51
     9be:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	
	uint8_t axl = i2c_readAck();
     9c2:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     9c6:	48 2e       	mov	r4, r24
	uint8_t axh = i2c_readAck();
     9c8:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     9cc:	58 2e       	mov	r5, r24
	uint8_t ayl = i2c_readAck();
     9ce:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     9d2:	68 2e       	mov	r6, r24
	uint8_t ayh = i2c_readAck();
     9d4:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     9d8:	78 2e       	mov	r7, r24
	uint8_t azl = i2c_readAck();
     9da:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     9de:	88 2e       	mov	r8, r24
	uint8_t azh = i2c_readNak();
     9e0:	0e 94 c9 09 	call	0x1392	; 0x1392 <i2c_readNak>
     9e4:	98 2e       	mov	r9, r24
	i2c_stop();
     9e6:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_stop>
	//i2c_write(0x03); // OUTXH_M
	//i2c_start(0x3D);		  // repeated start
	//i2c_write(0x3D); // read mag
	
	// read magnetometer values
	i2c_start(0x3C);
     9ea:	8c e3       	ldi	r24, 0x3C	; 60
     9ec:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	i2c_write(0x03);
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_start(0x3D);
     9f6:	8d e3       	ldi	r24, 0x3D	; 61
     9f8:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	
	uint8_t mxh = i2c_readAck();	/* LSM303DLHC A data = XYZ */
     9fc:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     a00:	b8 2e       	mov	r11, r24
	uint8_t mxl = i2c_readAck();
     a02:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     a06:	a8 2e       	mov	r10, r24
	uint8_t mzh = i2c_readAck();	
     a08:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     a0c:	18 2f       	mov	r17, r24
	uint8_t mzl = i2c_readAck();	/* LSM303DLHC M data = XZY */
     a0e:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     a12:	08 2f       	mov	r16, r24
	uint8_t myh = i2c_readAck();
     a14:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
     a18:	d8 2e       	mov	r13, r24
	uint8_t myl = i2c_readNak();
     a1a:	0e 94 c9 09 	call	0x1392	; 0x1392 <i2c_readNak>
     a1e:	c8 2e       	mov	r12, r24
	i2c_stop();
     a20:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_stop>

	//a->x = (int16_t)((axh << 8) | axl);
	//a->y = (int16_t)((ayh << 8) | ayl);
	//a->z = (int16_t)((azh << 8) | azl);
	a->x = axh << 8 | axl;
     a24:	64 2d       	mov	r22, r4
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	75 29       	or	r23, r5
     a2a:	88 27       	eor	r24, r24
     a2c:	77 fd       	sbrc	r23, 7
     a2e:	80 95       	com	r24
     a30:	98 2f       	mov	r25, r24
     a32:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     a36:	f7 01       	movw	r30, r14
     a38:	60 83       	st	Z, r22
     a3a:	71 83       	std	Z+1, r23	; 0x01
     a3c:	82 83       	std	Z+2, r24	; 0x02
     a3e:	93 83       	std	Z+3, r25	; 0x03
	a->y = ayh << 8 | ayl;
     a40:	66 2d       	mov	r22, r6
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	77 29       	or	r23, r7
     a46:	88 27       	eor	r24, r24
     a48:	77 fd       	sbrc	r23, 7
     a4a:	80 95       	com	r24
     a4c:	98 2f       	mov	r25, r24
     a4e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     a52:	f7 01       	movw	r30, r14
     a54:	64 83       	std	Z+4, r22	; 0x04
     a56:	75 83       	std	Z+5, r23	; 0x05
     a58:	86 83       	std	Z+6, r24	; 0x06
     a5a:	97 83       	std	Z+7, r25	; 0x07
	a->z = azh << 8 | azl;
     a5c:	68 2d       	mov	r22, r8
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	79 29       	or	r23, r9
     a62:	88 27       	eor	r24, r24
     a64:	77 fd       	sbrc	r23, 7
     a66:	80 95       	com	r24
     a68:	98 2f       	mov	r25, r24
     a6a:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     a6e:	f7 01       	movw	r30, r14
     a70:	60 87       	std	Z+8, r22	; 0x08
     a72:	71 87       	std	Z+9, r23	; 0x09
     a74:	82 87       	std	Z+10, r24	; 0x0a
     a76:	93 87       	std	Z+11, r25	; 0x0b
	m->x = mxh << 8 | mxl;
     a78:	6a 2d       	mov	r22, r10
     a7a:	70 e0       	ldi	r23, 0x00	; 0
     a7c:	7b 29       	or	r23, r11
     a7e:	88 27       	eor	r24, r24
     a80:	77 fd       	sbrc	r23, 7
     a82:	80 95       	com	r24
     a84:	98 2f       	mov	r25, r24
     a86:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     a8a:	68 83       	st	Y, r22
     a8c:	79 83       	std	Y+1, r23	; 0x01
     a8e:	8a 83       	std	Y+2, r24	; 0x02
     a90:	9b 83       	std	Y+3, r25	; 0x03
	m->y = myh << 8 | myl;
     a92:	6c 2d       	mov	r22, r12
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	7d 29       	or	r23, r13
     a98:	88 27       	eor	r24, r24
     a9a:	77 fd       	sbrc	r23, 7
     a9c:	80 95       	com	r24
     a9e:	98 2f       	mov	r25, r24
     aa0:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     aa4:	6c 83       	std	Y+4, r22	; 0x04
     aa6:	7d 83       	std	Y+5, r23	; 0x05
     aa8:	8e 83       	std	Y+6, r24	; 0x06
     aaa:	9f 83       	std	Y+7, r25	; 0x07
	m->z = mzh << 8 | mzl;
     aac:	60 2f       	mov	r22, r16
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	71 2b       	or	r23, r17
     ab2:	88 27       	eor	r24, r24
     ab4:	77 fd       	sbrc	r23, 7
     ab6:	80 95       	com	r24
     ab8:	98 2f       	mov	r25, r24
     aba:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     abe:	68 87       	std	Y+8, r22	; 0x08
     ac0:	79 87       	std	Y+9, r23	; 0x09
     ac2:	8a 87       	std	Y+10, r24	; 0x0a
     ac4:	9b 87       	std	Y+11, r25	; 0x0b
	//m->x = (mxl | (mxh << 8));
	//m->y = (myl | (myh << 8));
	//m->z = (mzl | (mzh << 8));
}
     ac6:	df 91       	pop	r29
     ac8:	cf 91       	pop	r28
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	ff 90       	pop	r15
     ad0:	ef 90       	pop	r14
     ad2:	df 90       	pop	r13
     ad4:	cf 90       	pop	r12
     ad6:	bf 90       	pop	r11
     ad8:	af 90       	pop	r10
     ada:	9f 90       	pop	r9
     adc:	8f 90       	pop	r8
     ade:	7f 90       	pop	r7
     ae0:	6f 90       	pop	r6
     ae2:	5f 90       	pop	r5
     ae4:	4f 90       	pop	r4
     ae6:	08 95       	ret

00000ae8 <read_data>:

// Returns a set of acceleration and adjusted magnetic readings from the cmp01a.
void read_data(vector *a, vector *m)
{
     ae8:	8f 92       	push	r8
     aea:	9f 92       	push	r9
     aec:	af 92       	push	r10
     aee:	bf 92       	push	r11
     af0:	cf 92       	push	r12
     af2:	df 92       	push	r13
     af4:	ef 92       	push	r14
     af6:	ff 92       	push	r15
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	eb 01       	movw	r28, r22
	read_data_raw(a, m);
     afe:	0e 94 c6 04 	call	0x98c	; 0x98c <read_data_raw>

	// shift and scale
	m->x = (m->x - m_min.x) / (m_max.x - m_min.x) * 2 - 1.0;
     b02:	c0 90 0c 01 	lds	r12, 0x010C
     b06:	d0 90 0d 01 	lds	r13, 0x010D
     b0a:	e0 90 0e 01 	lds	r14, 0x010E
     b0e:	f0 90 0f 01 	lds	r15, 0x010F
     b12:	a7 01       	movw	r20, r14
     b14:	96 01       	movw	r18, r12
     b16:	68 81       	ld	r22, Y
     b18:	79 81       	ldd	r23, Y+1	; 0x01
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	9b 81       	ldd	r25, Y+3	; 0x03
     b1e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     b22:	4b 01       	movw	r8, r22
     b24:	5c 01       	movw	r10, r24
     b26:	a7 01       	movw	r20, r14
     b28:	96 01       	movw	r18, r12
     b2a:	60 91 00 01 	lds	r22, 0x0100
     b2e:	70 91 01 01 	lds	r23, 0x0101
     b32:	80 91 02 01 	lds	r24, 0x0102
     b36:	90 91 03 01 	lds	r25, 0x0103
     b3a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c5 01       	movw	r24, r10
     b44:	b4 01       	movw	r22, r8
     b46:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
     b4e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	40 e8       	ldi	r20, 0x80	; 128
     b58:	5f e3       	ldi	r21, 0x3F	; 63
     b5a:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     b5e:	68 83       	st	Y, r22
     b60:	79 83       	std	Y+1, r23	; 0x01
     b62:	8a 83       	std	Y+2, r24	; 0x02
     b64:	9b 83       	std	Y+3, r25	; 0x03
	m->y = (m->y - m_min.y) / (m_max.y - m_min.y) * 2 - 1.0;
     b66:	c0 90 10 01 	lds	r12, 0x0110
     b6a:	d0 90 11 01 	lds	r13, 0x0111
     b6e:	e0 90 12 01 	lds	r14, 0x0112
     b72:	f0 90 13 01 	lds	r15, 0x0113
     b76:	a7 01       	movw	r20, r14
     b78:	96 01       	movw	r18, r12
     b7a:	6c 81       	ldd	r22, Y+4	; 0x04
     b7c:	7d 81       	ldd	r23, Y+5	; 0x05
     b7e:	8e 81       	ldd	r24, Y+6	; 0x06
     b80:	9f 81       	ldd	r25, Y+7	; 0x07
     b82:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     b86:	4b 01       	movw	r8, r22
     b88:	5c 01       	movw	r10, r24
     b8a:	a7 01       	movw	r20, r14
     b8c:	96 01       	movw	r18, r12
     b8e:	60 91 04 01 	lds	r22, 0x0104
     b92:	70 91 05 01 	lds	r23, 0x0105
     b96:	80 91 06 01 	lds	r24, 0x0106
     b9a:	90 91 07 01 	lds	r25, 0x0107
     b9e:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     ba2:	9b 01       	movw	r18, r22
     ba4:	ac 01       	movw	r20, r24
     ba6:	c5 01       	movw	r24, r10
     ba8:	b4 01       	movw	r22, r8
     baa:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	40 e8       	ldi	r20, 0x80	; 128
     bbc:	5f e3       	ldi	r21, 0x3F	; 63
     bbe:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     bc2:	6c 83       	std	Y+4, r22	; 0x04
     bc4:	7d 83       	std	Y+5, r23	; 0x05
     bc6:	8e 83       	std	Y+6, r24	; 0x06
     bc8:	9f 83       	std	Y+7, r25	; 0x07
	m->z = (m->z - m_min.z) / (m_max.z - m_min.z) * 2 - 1.0;
     bca:	c0 90 14 01 	lds	r12, 0x0114
     bce:	d0 90 15 01 	lds	r13, 0x0115
     bd2:	e0 90 16 01 	lds	r14, 0x0116
     bd6:	f0 90 17 01 	lds	r15, 0x0117
     bda:	a7 01       	movw	r20, r14
     bdc:	96 01       	movw	r18, r12
     bde:	68 85       	ldd	r22, Y+8	; 0x08
     be0:	79 85       	ldd	r23, Y+9	; 0x09
     be2:	8a 85       	ldd	r24, Y+10	; 0x0a
     be4:	9b 85       	ldd	r25, Y+11	; 0x0b
     be6:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     bea:	4b 01       	movw	r8, r22
     bec:	5c 01       	movw	r10, r24
     bee:	a7 01       	movw	r20, r14
     bf0:	96 01       	movw	r18, r12
     bf2:	60 91 08 01 	lds	r22, 0x0108
     bf6:	70 91 09 01 	lds	r23, 0x0109
     bfa:	80 91 0a 01 	lds	r24, 0x010A
     bfe:	90 91 0b 01 	lds	r25, 0x010B
     c02:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     c12:	9b 01       	movw	r18, r22
     c14:	ac 01       	movw	r20, r24
     c16:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e8       	ldi	r20, 0x80	; 128
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     c26:	68 87       	std	Y+8, r22	; 0x08
     c28:	79 87       	std	Y+9, r23	; 0x09
     c2a:	8a 87       	std	Y+10, r24	; 0x0a
     c2c:	9b 87       	std	Y+11, r25	; 0x0b
}
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	ff 90       	pop	r15
     c34:	ef 90       	pop	r14
     c36:	df 90       	pop	r13
     c38:	cf 90       	pop	r12
     c3a:	bf 90       	pop	r11
     c3c:	af 90       	pop	r10
     c3e:	9f 90       	pop	r9
     c40:	8f 90       	pop	r8
     c42:	08 95       	ret

00000c44 <get_heading>:

// Returns a heading (in degrees) given an acceleration vector a due to gravity, a magnetic vector m, and a facing vector p.
int get_heading(const vector *a, const vector *m, const vector *p)
{
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	68 97       	sbiw	r28, 0x18	; 24
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	7c 01       	movw	r14, r24
     c66:	cb 01       	movw	r24, r22
     c68:	8a 01       	movw	r16, r20
	vector E;
	vector N;

	// cross magnetic vector (magnetic north + inclination) with "down" (acceleration vector) to produce "east"
	vector_cross(m, a, &E);
     c6a:	ae 01       	movw	r20, r28
     c6c:	4f 5f       	subi	r20, 0xFF	; 255
     c6e:	5f 4f       	sbci	r21, 0xFF	; 255
     c70:	b7 01       	movw	r22, r14
     c72:	0e 94 8a 18 	call	0x3114	; 0x3114 <vector_cross>
	vector_normalize(&E);
     c76:	ce 01       	movw	r24, r28
     c78:	01 96       	adiw	r24, 0x01	; 1
     c7a:	0e 94 4f 19 	call	0x329e	; 0x329e <vector_normalize>

	// cross "down" with "east" to produce "north" (parallel to the ground)
	vector_cross(a, &E, &N);
     c7e:	ae 01       	movw	r20, r28
     c80:	43 5f       	subi	r20, 0xF3	; 243
     c82:	5f 4f       	sbci	r21, 0xFF	; 255
     c84:	be 01       	movw	r22, r28
     c86:	6f 5f       	subi	r22, 0xFF	; 255
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	c7 01       	movw	r24, r14
     c8c:	0e 94 8a 18 	call	0x3114	; 0x3114 <vector_cross>
	vector_normalize(&N);
     c90:	ce 01       	movw	r24, r28
     c92:	0d 96       	adiw	r24, 0x0d	; 13
     c94:	0e 94 4f 19 	call	0x329e	; 0x329e <vector_normalize>

	// compute heading
	int heading = (round(atan2(vector_dot(&E, p), vector_dot(&N, p)) * 180 / M_PI))-PCB_COMPASS_CORR;
     c98:	b8 01       	movw	r22, r16
     c9a:	ce 01       	movw	r24, r28
     c9c:	0d 96       	adiw	r24, 0x0d	; 13
     c9e:	0e 94 0b 19 	call	0x3216	; 0x3216 <vector_dot>
     ca2:	6b 01       	movw	r12, r22
     ca4:	7c 01       	movw	r14, r24
     ca6:	b8 01       	movw	r22, r16
     ca8:	ce 01       	movw	r24, r28
     caa:	01 96       	adiw	r24, 0x01	; 1
     cac:	0e 94 0b 19 	call	0x3216	; 0x3216 <vector_dot>
     cb0:	a7 01       	movw	r20, r14
     cb2:	96 01       	movw	r18, r12
     cb4:	0e 94 c3 1d 	call	0x3b86	; 0x3b86 <atan2>
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	44 e3       	ldi	r20, 0x34	; 52
     cbe:	53 e4       	ldi	r21, 0x43	; 67
     cc0:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
     cc4:	2b ed       	ldi	r18, 0xDB	; 219
     cc6:	3f e0       	ldi	r19, 0x0F	; 15
     cc8:	49 e4       	ldi	r20, 0x49	; 73
     cca:	50 e4       	ldi	r21, 0x40	; 64
     ccc:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     cd0:	0e 94 90 20 	call	0x4120	; 0x4120 <round>
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	44 eb       	ldi	r20, 0xB4	; 180
     cda:	52 e4       	ldi	r21, 0x42	; 66
     cdc:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
     ce0:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
     ce4:	9b 01       	movw	r18, r22
	if (heading < 0) heading += 360;
     ce6:	77 23       	and	r23, r23
     ce8:	14 f4       	brge	.+4      	; 0xcee <get_heading+0xaa>
     cea:	28 59       	subi	r18, 0x98	; 152
     cec:	3e 4f       	sbci	r19, 0xFE	; 254
	return heading;
}
     cee:	c9 01       	movw	r24, r18
     cf0:	68 96       	adiw	r28, 0x18	; 24
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	f8 94       	cli
     cf6:	de bf       	out	0x3e, r29	; 62
     cf8:	0f be       	out	0x3f, r0	; 63
     cfa:	cd bf       	out	0x3d, r28	; 61
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	df 90       	pop	r13
     d0a:	cf 90       	pop	r12
     d0c:	08 95       	ret

00000d0e <get_heading_avg>:

/**/
int get_heading_avg(uint8_t number_of_avg)
{
     d0e:	6f 92       	push	r6
     d10:	7f 92       	push	r7
     d12:	8f 92       	push	r8
     d14:	9f 92       	push	r9
     d16:	af 92       	push	r10
     d18:	bf 92       	push	r11
     d1a:	cf 92       	push	r12
     d1c:	df 92       	push	r13
     d1e:	ef 92       	push	r14
     d20:	ff 92       	push	r15
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	68 97       	sbiw	r28, 0x18	; 24
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	f8 94       	cli
     d34:	de bf       	out	0x3e, r29	; 62
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	cd bf       	out	0x3d, r28	; 61
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
     d42:	1d 82       	std	Y+5, r1	; 0x05
     d44:	1e 82       	std	Y+6, r1	; 0x06
     d46:	1f 82       	std	Y+7, r1	; 0x07
     d48:	18 86       	std	Y+8, r1	; 0x08
     d4a:	19 86       	std	Y+9, r1	; 0x09
     d4c:	1a 86       	std	Y+10, r1	; 0x0a
     d4e:	1b 86       	std	Y+11, r1	; 0x0b
     d50:	1c 86       	std	Y+12, r1	; 0x0c
     d52:	1d 86       	std	Y+13, r1	; 0x0d
     d54:	1e 86       	std	Y+14, r1	; 0x0e
     d56:	1f 86       	std	Y+15, r1	; 0x0f
     d58:	18 8a       	std	Y+16, r1	; 0x10
     d5a:	19 8a       	std	Y+17, r1	; 0x11
     d5c:	1a 8a       	std	Y+18, r1	; 0x12
     d5e:	1b 8a       	std	Y+19, r1	; 0x13
     d60:	1c 8a       	std	Y+20, r1	; 0x14
     d62:	1d 8a       	std	Y+21, r1	; 0x15
     d64:	1e 8a       	std	Y+22, r1	; 0x16
     d66:	1f 8a       	std	Y+23, r1	; 0x17
     d68:	18 8e       	std	Y+24, r1	; 0x18
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
     d6a:	e8 2e       	mov	r14, r24
     d6c:	f1 2c       	mov	r15, r1
     d6e:	1e 14       	cp	r1, r14
     d70:	1f 04       	cpc	r1, r15
     d72:	0c f0       	brlt	.+2      	; 0xd76 <get_heading_avg+0x68>
     d74:	86 c0       	rjmp	.+268    	; 0xe82 <get_heading_avg+0x174>
     d76:	00 e0       	ldi	r16, 0x00	; 0
     d78:	10 e0       	ldi	r17, 0x00	; 0
	{
		read_data(&a, &m);
		
		a_avg.x += a.x;
		a_avg.y += a.y;
     d7a:	0f 2e       	mov	r0, r31
     d7c:	fd ed       	ldi	r31, 0xDD	; 221
     d7e:	8f 2e       	mov	r8, r31
     d80:	f7 e0       	ldi	r31, 0x07	; 7
     d82:	9f 2e       	mov	r9, r31
     d84:	f0 2d       	mov	r31, r0
		a_avg.z += a.z;
     d86:	0f 2e       	mov	r0, r31
     d88:	f1 ee       	ldi	r31, 0xE1	; 225
     d8a:	af 2e       	mov	r10, r31
     d8c:	f7 e0       	ldi	r31, 0x07	; 7
     d8e:	bf 2e       	mov	r11, r31
     d90:	f0 2d       	mov	r31, r0
		m_avg.x += m.x;
		m_avg.y += m.y;
     d92:	0f 2e       	mov	r0, r31
     d94:	f9 ee       	ldi	r31, 0xE9	; 233
     d96:	cf 2e       	mov	r12, r31
     d98:	f7 e0       	ldi	r31, 0x07	; 7
     d9a:	df 2e       	mov	r13, r31
     d9c:	f0 2d       	mov	r31, r0
		m_avg.z += m.z;
     d9e:	0f 2e       	mov	r0, r31
     da0:	fd ee       	ldi	r31, 0xED	; 237
     da2:	6f 2e       	mov	r6, r31
     da4:	f7 e0       	ldi	r31, 0x07	; 7
     da6:	7f 2e       	mov	r7, r31
     da8:	f0 2d       	mov	r31, r0
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
	{
		read_data(&a, &m);
     daa:	65 ee       	ldi	r22, 0xE5	; 229
     dac:	77 e0       	ldi	r23, 0x07	; 7
     dae:	89 ed       	ldi	r24, 0xD9	; 217
     db0:	97 e0       	ldi	r25, 0x07	; 7
     db2:	0e 94 74 05 	call	0xae8	; 0xae8 <read_data>
		
		a_avg.x += a.x;
     db6:	20 91 d9 07 	lds	r18, 0x07D9
     dba:	30 91 da 07 	lds	r19, 0x07DA
     dbe:	40 91 db 07 	lds	r20, 0x07DB
     dc2:	50 91 dc 07 	lds	r21, 0x07DC
     dc6:	69 81       	ldd	r22, Y+1	; 0x01
     dc8:	7a 81       	ldd	r23, Y+2	; 0x02
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	9c 81       	ldd	r25, Y+4	; 0x04
     dce:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     dd2:	69 83       	std	Y+1, r22	; 0x01
     dd4:	7a 83       	std	Y+2, r23	; 0x02
     dd6:	8b 83       	std	Y+3, r24	; 0x03
     dd8:	9c 83       	std	Y+4, r25	; 0x04
		a_avg.y += a.y;
     dda:	f4 01       	movw	r30, r8
     ddc:	20 81       	ld	r18, Z
     dde:	31 81       	ldd	r19, Z+1	; 0x01
     de0:	42 81       	ldd	r20, Z+2	; 0x02
     de2:	53 81       	ldd	r21, Z+3	; 0x03
     de4:	6d 81       	ldd	r22, Y+5	; 0x05
     de6:	7e 81       	ldd	r23, Y+6	; 0x06
     de8:	8f 81       	ldd	r24, Y+7	; 0x07
     dea:	98 85       	ldd	r25, Y+8	; 0x08
     dec:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     df0:	6d 83       	std	Y+5, r22	; 0x05
     df2:	7e 83       	std	Y+6, r23	; 0x06
     df4:	8f 83       	std	Y+7, r24	; 0x07
     df6:	98 87       	std	Y+8, r25	; 0x08
		a_avg.z += a.z;
     df8:	f5 01       	movw	r30, r10
     dfa:	20 81       	ld	r18, Z
     dfc:	31 81       	ldd	r19, Z+1	; 0x01
     dfe:	42 81       	ldd	r20, Z+2	; 0x02
     e00:	53 81       	ldd	r21, Z+3	; 0x03
     e02:	69 85       	ldd	r22, Y+9	; 0x09
     e04:	7a 85       	ldd	r23, Y+10	; 0x0a
     e06:	8b 85       	ldd	r24, Y+11	; 0x0b
     e08:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0a:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     e0e:	69 87       	std	Y+9, r22	; 0x09
     e10:	7a 87       	std	Y+10, r23	; 0x0a
     e12:	8b 87       	std	Y+11, r24	; 0x0b
     e14:	9c 87       	std	Y+12, r25	; 0x0c
		m_avg.x += m.x;
     e16:	20 91 e5 07 	lds	r18, 0x07E5
     e1a:	30 91 e6 07 	lds	r19, 0x07E6
     e1e:	40 91 e7 07 	lds	r20, 0x07E7
     e22:	50 91 e8 07 	lds	r21, 0x07E8
     e26:	6d 85       	ldd	r22, Y+13	; 0x0d
     e28:	7e 85       	ldd	r23, Y+14	; 0x0e
     e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2c:	98 89       	ldd	r25, Y+16	; 0x10
     e2e:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     e32:	6d 87       	std	Y+13, r22	; 0x0d
     e34:	7e 87       	std	Y+14, r23	; 0x0e
     e36:	8f 87       	std	Y+15, r24	; 0x0f
     e38:	98 8b       	std	Y+16, r25	; 0x10
		m_avg.y += m.y;
     e3a:	f6 01       	movw	r30, r12
     e3c:	20 81       	ld	r18, Z
     e3e:	31 81       	ldd	r19, Z+1	; 0x01
     e40:	42 81       	ldd	r20, Z+2	; 0x02
     e42:	53 81       	ldd	r21, Z+3	; 0x03
     e44:	69 89       	ldd	r22, Y+17	; 0x11
     e46:	7a 89       	ldd	r23, Y+18	; 0x12
     e48:	8b 89       	ldd	r24, Y+19	; 0x13
     e4a:	9c 89       	ldd	r25, Y+20	; 0x14
     e4c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     e50:	69 8b       	std	Y+17, r22	; 0x11
     e52:	7a 8b       	std	Y+18, r23	; 0x12
     e54:	8b 8b       	std	Y+19, r24	; 0x13
     e56:	9c 8b       	std	Y+20, r25	; 0x14
		m_avg.z += m.z;
     e58:	f3 01       	movw	r30, r6
     e5a:	20 81       	ld	r18, Z
     e5c:	31 81       	ldd	r19, Z+1	; 0x01
     e5e:	42 81       	ldd	r20, Z+2	; 0x02
     e60:	53 81       	ldd	r21, Z+3	; 0x03
     e62:	6d 89       	ldd	r22, Y+21	; 0x15
     e64:	7e 89       	ldd	r23, Y+22	; 0x16
     e66:	8f 89       	ldd	r24, Y+23	; 0x17
     e68:	98 8d       	ldd	r25, Y+24	; 0x18
     e6a:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
     e6e:	6d 8b       	std	Y+21, r22	; 0x15
     e70:	7e 8b       	std	Y+22, r23	; 0x16
     e72:	8f 8b       	std	Y+23, r24	; 0x17
     e74:	98 8f       	std	Y+24, r25	; 0x18
int get_heading_avg(uint8_t number_of_avg)
{
	int heading;
	vector a_avg = {0,0,0}, m_avg = {0,0,0};
	// take 5 acceleration and magnetic readings and average them
	for(int i = 0; i < number_of_avg; i++)
     e76:	0f 5f       	subi	r16, 0xFF	; 255
     e78:	1f 4f       	sbci	r17, 0xFF	; 255
     e7a:	0e 15       	cp	r16, r14
     e7c:	1f 05       	cpc	r17, r15
     e7e:	0c f4       	brge	.+2      	; 0xe82 <get_heading_avg+0x174>
     e80:	94 cf       	rjmp	.-216    	; 0xdaa <get_heading_avg+0x9c>
		a_avg.z += a.z;
		m_avg.x += m.x;
		m_avg.y += m.y;
		m_avg.z += m.z;
	}
	a_avg.x /= number_of_avg;
     e82:	b7 01       	movw	r22, r14
     e84:	88 27       	eor	r24, r24
     e86:	77 fd       	sbrc	r23, 7
     e88:	80 95       	com	r24
     e8a:	98 2f       	mov	r25, r24
     e8c:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
     e90:	6b 01       	movw	r12, r22
     e92:	7c 01       	movw	r14, r24
     e94:	9b 01       	movw	r18, r22
     e96:	ac 01       	movw	r20, r24
     e98:	69 81       	ldd	r22, Y+1	; 0x01
     e9a:	7a 81       	ldd	r23, Y+2	; 0x02
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     ea4:	69 83       	std	Y+1, r22	; 0x01
     ea6:	7a 83       	std	Y+2, r23	; 0x02
     ea8:	8b 83       	std	Y+3, r24	; 0x03
     eaa:	9c 83       	std	Y+4, r25	; 0x04
	a_avg.y /= number_of_avg;
     eac:	a7 01       	movw	r20, r14
     eae:	96 01       	movw	r18, r12
     eb0:	6d 81       	ldd	r22, Y+5	; 0x05
     eb2:	7e 81       	ldd	r23, Y+6	; 0x06
     eb4:	8f 81       	ldd	r24, Y+7	; 0x07
     eb6:	98 85       	ldd	r25, Y+8	; 0x08
     eb8:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     ebc:	6d 83       	std	Y+5, r22	; 0x05
     ebe:	7e 83       	std	Y+6, r23	; 0x06
     ec0:	8f 83       	std	Y+7, r24	; 0x07
     ec2:	98 87       	std	Y+8, r25	; 0x08
	a_avg.z /= number_of_avg;
     ec4:	a7 01       	movw	r20, r14
     ec6:	96 01       	movw	r18, r12
     ec8:	69 85       	ldd	r22, Y+9	; 0x09
     eca:	7a 85       	ldd	r23, Y+10	; 0x0a
     ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
     ece:	9c 85       	ldd	r25, Y+12	; 0x0c
     ed0:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     ed4:	69 87       	std	Y+9, r22	; 0x09
     ed6:	7a 87       	std	Y+10, r23	; 0x0a
     ed8:	8b 87       	std	Y+11, r24	; 0x0b
     eda:	9c 87       	std	Y+12, r25	; 0x0c
	m_avg.x /= number_of_avg;
     edc:	a7 01       	movw	r20, r14
     ede:	96 01       	movw	r18, r12
     ee0:	6d 85       	ldd	r22, Y+13	; 0x0d
     ee2:	7e 85       	ldd	r23, Y+14	; 0x0e
     ee4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ee6:	98 89       	ldd	r25, Y+16	; 0x10
     ee8:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     eec:	6d 87       	std	Y+13, r22	; 0x0d
     eee:	7e 87       	std	Y+14, r23	; 0x0e
     ef0:	8f 87       	std	Y+15, r24	; 0x0f
     ef2:	98 8b       	std	Y+16, r25	; 0x10
	m_avg.y /= number_of_avg;
     ef4:	a7 01       	movw	r20, r14
     ef6:	96 01       	movw	r18, r12
     ef8:	69 89       	ldd	r22, Y+17	; 0x11
     efa:	7a 89       	ldd	r23, Y+18	; 0x12
     efc:	8b 89       	ldd	r24, Y+19	; 0x13
     efe:	9c 89       	ldd	r25, Y+20	; 0x14
     f00:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     f04:	69 8b       	std	Y+17, r22	; 0x11
     f06:	7a 8b       	std	Y+18, r23	; 0x12
     f08:	8b 8b       	std	Y+19, r24	; 0x13
     f0a:	9c 8b       	std	Y+20, r25	; 0x14
	m_avg.z /= number_of_avg;
     f0c:	a7 01       	movw	r20, r14
     f0e:	96 01       	movw	r18, r12
     f10:	6d 89       	ldd	r22, Y+21	; 0x15
     f12:	7e 89       	ldd	r23, Y+22	; 0x16
     f14:	8f 89       	ldd	r24, Y+23	; 0x17
     f16:	98 8d       	ldd	r25, Y+24	; 0x18
     f18:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
     f1c:	6d 8b       	std	Y+21, r22	; 0x15
     f1e:	7e 8b       	std	Y+22, r23	; 0x16
     f20:	8f 8b       	std	Y+23, r24	; 0x17
     f22:	98 8f       	std	Y+24, r25	; 0x18
	
	heading = get_heading(&a_avg, &m_avg, &p); 
     f24:	48 e1       	ldi	r20, 0x18	; 24
     f26:	51 e0       	ldi	r21, 0x01	; 1
     f28:	be 01       	movw	r22, r28
     f2a:	63 5f       	subi	r22, 0xF3	; 243
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	ce 01       	movw	r24, r28
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	0e 94 22 06 	call	0xc44	; 0xc44 <get_heading>
	return heading; 
}
     f36:	68 96       	adiw	r28, 0x18	; 24
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	df 90       	pop	r13
     f50:	cf 90       	pop	r12
     f52:	bf 90       	pop	r11
     f54:	af 90       	pop	r10
     f56:	9f 90       	pop	r9
     f58:	8f 90       	pop	r8
     f5a:	7f 90       	pop	r7
     f5c:	6f 90       	pop	r6
     f5e:	08 95       	ret

00000f60 <calibrate_lsm303>:

int calibrate_lsm303(uint8_t axis, uint8_t minmax)
{
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	c8 2f       	mov	r28, r24
     f6e:	d6 2f       	mov	r29, r22
	read_data_raw(&a, &m);
     f70:	65 ee       	ldi	r22, 0xE5	; 229
     f72:	77 e0       	ldi	r23, 0x07	; 7
     f74:	89 ed       	ldi	r24, 0xD9	; 217
     f76:	97 e0       	ldi	r25, 0x07	; 7
     f78:	0e 94 c6 04 	call	0x98c	; 0x98c <read_data_raw>
	
	switch (axis)
     f7c:	c2 30       	cpi	r28, 0x02	; 2
     f7e:	09 f4       	brne	.+2      	; 0xf82 <calibrate_lsm303+0x22>
     f80:	57 c0       	rjmp	.+174    	; 0x1030 <calibrate_lsm303+0xd0>
     f82:	c3 30       	cpi	r28, 0x03	; 3
     f84:	09 f4       	brne	.+2      	; 0xf88 <calibrate_lsm303+0x28>
     f86:	a5 c0       	rjmp	.+330    	; 0x10d2 <calibrate_lsm303+0x172>
     f88:	c1 30       	cpi	r28, 0x01	; 1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <calibrate_lsm303+0x2e>
     f8c:	f2 c0       	rjmp	.+484    	; 0x1172 <calibrate_lsm303+0x212>
	{
		case X_AXIS:	// Calibrate X Axis
			if (m.x < cal_m_min.x) cal_m_min.x = m.x;
     f8e:	c0 90 e5 07 	lds	r12, 0x07E5
     f92:	d0 90 e6 07 	lds	r13, 0x07E6
     f96:	e0 90 e7 07 	lds	r14, 0x07E7
     f9a:	f0 90 e8 07 	lds	r15, 0x07E8
     f9e:	20 91 c0 05 	lds	r18, 0x05C0
     fa2:	30 91 c1 05 	lds	r19, 0x05C1
     fa6:	40 91 c2 05 	lds	r20, 0x05C2
     faa:	50 91 c3 05 	lds	r21, 0x05C3
     fae:	c7 01       	movw	r24, r14
     fb0:	b6 01       	movw	r22, r12
     fb2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	44 f4       	brge	.+16     	; 0xfca <calibrate_lsm303+0x6a>
     fba:	c0 92 c0 05 	sts	0x05C0, r12
     fbe:	d0 92 c1 05 	sts	0x05C1, r13
     fc2:	e0 92 c2 05 	sts	0x05C2, r14
     fc6:	f0 92 c3 05 	sts	0x05C3, r15
			if (m.x > cal_m_max.x) cal_m_max.x = m.x;
     fca:	20 91 cc 05 	lds	r18, 0x05CC
     fce:	30 91 cd 05 	lds	r19, 0x05CD
     fd2:	40 91 ce 05 	lds	r20, 0x05CE
     fd6:	50 91 cf 05 	lds	r21, 0x05CF
     fda:	c7 01       	movw	r24, r14
     fdc:	b6 01       	movw	r22, r12
     fde:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	44 f4       	brge	.+16     	; 0xff6 <calibrate_lsm303+0x96>
     fe6:	c0 92 cc 05 	sts	0x05CC, r12
     fea:	d0 92 cd 05 	sts	0x05CD, r13
     fee:	e0 92 ce 05 	sts	0x05CE, r14
     ff2:	f0 92 cf 05 	sts	0x05CF, r15
			if (minmax==MIN)
     ff6:	d2 30       	cpi	r29, 0x02	; 2
     ff8:	61 f4       	brne	.+24     	; 0x1012 <calibrate_lsm303+0xb2>
			{
				return cal_m_min.x;
     ffa:	60 91 c0 05 	lds	r22, 0x05C0
     ffe:	70 91 c1 05 	lds	r23, 0x05C1
    1002:	80 91 c2 05 	lds	r24, 0x05C2
    1006:	90 91 c3 05 	lds	r25, 0x05C3
    100a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    100e:	cb 01       	movw	r24, r22
    1010:	bb c0       	rjmp	.+374    	; 0x1188 <calibrate_lsm303+0x228>
			}
			if (minmax==MAX)
    1012:	d1 30       	cpi	r29, 0x01	; 1
    1014:	09 f0       	breq	.+2      	; 0x1018 <calibrate_lsm303+0xb8>
    1016:	b0 c0       	rjmp	.+352    	; 0x1178 <calibrate_lsm303+0x218>
			{
				return cal_m_max.x;
    1018:	60 91 cc 05 	lds	r22, 0x05CC
    101c:	70 91 cd 05 	lds	r23, 0x05CD
    1020:	80 91 ce 05 	lds	r24, 0x05CE
    1024:	90 91 cf 05 	lds	r25, 0x05CF
    1028:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    102c:	cb 01       	movw	r24, r22
    102e:	ac c0       	rjmp	.+344    	; 0x1188 <calibrate_lsm303+0x228>
			}
		break;
		
		case Y_AXIS:
			if (m.y < cal_m_min.y) cal_m_min.y = m.y;
    1030:	c0 90 e9 07 	lds	r12, 0x07E9
    1034:	d0 90 ea 07 	lds	r13, 0x07EA
    1038:	e0 90 eb 07 	lds	r14, 0x07EB
    103c:	f0 90 ec 07 	lds	r15, 0x07EC
    1040:	20 91 c4 05 	lds	r18, 0x05C4
    1044:	30 91 c5 05 	lds	r19, 0x05C5
    1048:	40 91 c6 05 	lds	r20, 0x05C6
    104c:	50 91 c7 05 	lds	r21, 0x05C7
    1050:	c7 01       	movw	r24, r14
    1052:	b6 01       	movw	r22, r12
    1054:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    1058:	88 23       	and	r24, r24
    105a:	44 f4       	brge	.+16     	; 0x106c <calibrate_lsm303+0x10c>
    105c:	c0 92 c4 05 	sts	0x05C4, r12
    1060:	d0 92 c5 05 	sts	0x05C5, r13
    1064:	e0 92 c6 05 	sts	0x05C6, r14
    1068:	f0 92 c7 05 	sts	0x05C7, r15
			if (m.y > cal_m_max.y) cal_m_max.y = m.y;
    106c:	20 91 d0 05 	lds	r18, 0x05D0
    1070:	30 91 d1 05 	lds	r19, 0x05D1
    1074:	40 91 d2 05 	lds	r20, 0x05D2
    1078:	50 91 d3 05 	lds	r21, 0x05D3
    107c:	c7 01       	movw	r24, r14
    107e:	b6 01       	movw	r22, r12
    1080:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
    1084:	18 16       	cp	r1, r24
    1086:	44 f4       	brge	.+16     	; 0x1098 <calibrate_lsm303+0x138>
    1088:	c0 92 d0 05 	sts	0x05D0, r12
    108c:	d0 92 d1 05 	sts	0x05D1, r13
    1090:	e0 92 d2 05 	sts	0x05D2, r14
    1094:	f0 92 d3 05 	sts	0x05D3, r15
			if (minmax==MIN)
    1098:	d2 30       	cpi	r29, 0x02	; 2
    109a:	61 f4       	brne	.+24     	; 0x10b4 <calibrate_lsm303+0x154>
			{
				return cal_m_min.y;
    109c:	60 91 c4 05 	lds	r22, 0x05C4
    10a0:	70 91 c5 05 	lds	r23, 0x05C5
    10a4:	80 91 c6 05 	lds	r24, 0x05C6
    10a8:	90 91 c7 05 	lds	r25, 0x05C7
    10ac:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    10b0:	cb 01       	movw	r24, r22
    10b2:	6a c0       	rjmp	.+212    	; 0x1188 <calibrate_lsm303+0x228>
			}
			if (minmax==MAX)
    10b4:	d1 30       	cpi	r29, 0x01	; 1
    10b6:	09 f0       	breq	.+2      	; 0x10ba <calibrate_lsm303+0x15a>
    10b8:	62 c0       	rjmp	.+196    	; 0x117e <calibrate_lsm303+0x21e>
			{
				return cal_m_max.y;
    10ba:	60 91 d0 05 	lds	r22, 0x05D0
    10be:	70 91 d1 05 	lds	r23, 0x05D1
    10c2:	80 91 d2 05 	lds	r24, 0x05D2
    10c6:	90 91 d3 05 	lds	r25, 0x05D3
    10ca:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    10ce:	cb 01       	movw	r24, r22
    10d0:	5b c0       	rjmp	.+182    	; 0x1188 <calibrate_lsm303+0x228>
			}
		break;
		
		case Z_AXIS:
			if (m.z < cal_m_min.z) cal_m_min.z = m.z;
    10d2:	c0 90 ed 07 	lds	r12, 0x07ED
    10d6:	d0 90 ee 07 	lds	r13, 0x07EE
    10da:	e0 90 ef 07 	lds	r14, 0x07EF
    10de:	f0 90 f0 07 	lds	r15, 0x07F0
    10e2:	20 91 c8 05 	lds	r18, 0x05C8
    10e6:	30 91 c9 05 	lds	r19, 0x05C9
    10ea:	40 91 ca 05 	lds	r20, 0x05CA
    10ee:	50 91 cb 05 	lds	r21, 0x05CB
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    10fa:	88 23       	and	r24, r24
    10fc:	44 f4       	brge	.+16     	; 0x110e <calibrate_lsm303+0x1ae>
    10fe:	c0 92 c8 05 	sts	0x05C8, r12
    1102:	d0 92 c9 05 	sts	0x05C9, r13
    1106:	e0 92 ca 05 	sts	0x05CA, r14
    110a:	f0 92 cb 05 	sts	0x05CB, r15
			if (m.z > cal_m_max.z) cal_m_max.z = m.z;
    110e:	20 91 d4 05 	lds	r18, 0x05D4
    1112:	30 91 d5 05 	lds	r19, 0x05D5
    1116:	40 91 d6 05 	lds	r20, 0x05D6
    111a:	50 91 d7 05 	lds	r21, 0x05D7
    111e:	c7 01       	movw	r24, r14
    1120:	b6 01       	movw	r22, r12
    1122:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
    1126:	18 16       	cp	r1, r24
    1128:	44 f4       	brge	.+16     	; 0x113a <calibrate_lsm303+0x1da>
    112a:	c0 92 d4 05 	sts	0x05D4, r12
    112e:	d0 92 d5 05 	sts	0x05D5, r13
    1132:	e0 92 d6 05 	sts	0x05D6, r14
    1136:	f0 92 d7 05 	sts	0x05D7, r15
			if (minmax==MIN)
    113a:	d2 30       	cpi	r29, 0x02	; 2
    113c:	61 f4       	brne	.+24     	; 0x1156 <calibrate_lsm303+0x1f6>
			{
				return cal_m_min.z;
    113e:	60 91 c8 05 	lds	r22, 0x05C8
    1142:	70 91 c9 05 	lds	r23, 0x05C9
    1146:	80 91 ca 05 	lds	r24, 0x05CA
    114a:	90 91 cb 05 	lds	r25, 0x05CB
    114e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    1152:	cb 01       	movw	r24, r22
    1154:	19 c0       	rjmp	.+50     	; 0x1188 <calibrate_lsm303+0x228>
			}
			if (minmax==MAX)
    1156:	d1 30       	cpi	r29, 0x01	; 1
    1158:	a9 f4       	brne	.+42     	; 0x1184 <calibrate_lsm303+0x224>
			{
				return cal_m_max.z;
    115a:	60 91 d4 05 	lds	r22, 0x05D4
    115e:	70 91 d5 05 	lds	r23, 0x05D5
    1162:	80 91 d6 05 	lds	r24, 0x05D6
    1166:	90 91 d7 05 	lds	r25, 0x05D7
    116a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    116e:	cb 01       	movw	r24, r22
    1170:	0b c0       	rjmp	.+22     	; 0x1188 <calibrate_lsm303+0x228>
			}
		break;
		
		default:
			return 0;
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <calibrate_lsm303+0x228>
		break;
	}
	return 0;
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	05 c0       	rjmp	.+10     	; 0x1188 <calibrate_lsm303+0x228>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <calibrate_lsm303+0x228>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
}
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	08 95       	ret

00001196 <print_calibration_lsm303>:
	z_max = calibrate_lsm303(Z_AXIS,MAX);
	
	while (x_min>calibrate_lsm303(X_AXIS,MIN))
	{
	}*/
	uart_puts("Xmin:");
    1196:	84 ed       	ldi	r24, 0xD4	; 212
    1198:	91 e0       	ldi	r25, 0x01	; 1
    119a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(calibrate_lsm303(X_AXIS,MIN),FALSE);
    119e:	62 e0       	ldi	r22, 0x02	; 2
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	0e 94 b0 07 	call	0xf60	; 0xf60 <calibrate_lsm303>
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" Xmax:");
    11ac:	8a ed       	ldi	r24, 0xDA	; 218
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(calibrate_lsm303(X_AXIS,MAX),FALSE);
    11b4:	61 e0       	ldi	r22, 0x01	; 1
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	0e 94 b0 07 	call	0xf60	; 0xf60 <calibrate_lsm303>
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" Ymin:");
    11c2:	81 ee       	ldi	r24, 0xE1	; 225
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(calibrate_lsm303(Y_AXIS,MIN),FALSE);
    11ca:	62 e0       	ldi	r22, 0x02	; 2
    11cc:	82 e0       	ldi	r24, 0x02	; 2
    11ce:	0e 94 b0 07 	call	0xf60	; 0xf60 <calibrate_lsm303>
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" Ymax:");
    11d8:	88 ee       	ldi	r24, 0xE8	; 232
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(calibrate_lsm303(Y_AXIS,MAX),FALSE);
    11e0:	61 e0       	ldi	r22, 0x01	; 1
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	0e 94 b0 07 	call	0xf60	; 0xf60 <calibrate_lsm303>
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" Zmin:");
    11ee:	8f ee       	ldi	r24, 0xEF	; 239
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(calibrate_lsm303(Z_AXIS,MIN),FALSE);
    11f6:	62 e0       	ldi	r22, 0x02	; 2
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	0e 94 b0 07 	call	0xf60	; 0xf60 <calibrate_lsm303>
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" Zmax:");
    1204:	86 ef       	ldi	r24, 0xF6	; 246
    1206:	91 e0       	ldi	r25, 0x01	; 1
    1208:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(calibrate_lsm303(Z_AXIS,MAX),FALSE);
    120c:	61 e0       	ldi	r22, 0x01	; 1
    120e:	83 e0       	ldi	r24, 0x03	; 3
    1210:	0e 94 b0 07 	call	0xf60	; 0xf60 <calibrate_lsm303>
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" (Rotate device until all axis are at their min/max)\n");
    121a:	8d ef       	ldi	r24, 0xFD	; 253
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    1222:	08 95       	ret

00001224 <writeAccReg>:
}

void writeAccReg(uint8_t reg, uint8_t value)
{
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	d8 2f       	mov	r29, r24
    122a:	c6 2f       	mov	r28, r22
	i2c_start(0x32);	// ACC address
    122c:	82 e3       	ldi	r24, 0x32	; 50
    122e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	i2c_write(reg);	
    1232:	8d 2f       	mov	r24, r29
    1234:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_write(value);
    1238:	8c 2f       	mov	r24, r28
    123a:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_stop();
    123e:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_stop>
}
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	08 95       	ret

00001248 <writeMagReg>:

void writeMagReg(uint8_t reg, uint8_t value)
{
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	d8 2f       	mov	r29, r24
    124e:	c6 2f       	mov	r28, r22
	i2c_start(0x3C);	// Mag address
    1250:	8c e3       	ldi	r24, 0x3C	; 60
    1252:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	i2c_write(reg);	
    1256:	8d 2f       	mov	r24, r29
    1258:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_write(value);
    125c:	8c 2f       	mov	r24, r28
    125e:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_stop();
    1262:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_stop>
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	08 95       	ret

0000126c <init_lsm303>:
vector m_max = {650, 529, 591};		// calibration
vector a, m;

void init_lsm303(void)
{
	i2c_init();
    126c:	0e 94 76 09 	call	0x12ec	; 0x12ec <i2c_init>
	
	/* TEST */
	
	// 0x08 = 0b00001000
	// FS = 00 (+/- 2 g full scale); HR = 1 (high resolution enable)
	writeAccReg(CTRL_REG4_A, 0x08);
    1270:	68 e0       	ldi	r22, 0x08	; 8
    1272:	83 e2       	ldi	r24, 0x23	; 35
    1274:	0e 94 12 09 	call	0x1224	; 0x1224 <writeAccReg>
	
	// lsm303dlhc sensor
	//enable accelerometer
	// 0x47 = 0b01000111
	// ODR = 0100 (50 Hz ODR); LPen = 0 (normal mode); Zen = Yen = Xen = 1 (all axes enabled)
	writeAccReg(CTRL_REG1_A, 0x47);
    1278:	67 e4       	ldi	r22, 0x47	; 71
    127a:	80 e2       	ldi	r24, 0x20	; 32
    127c:	0e 94 12 09 	call	0x1224	; 0x1224 <writeAccReg>
	//enable magnetometer

	// 0x0C = 0b00001100
	// DO = 011 (7.5 Hz ODR)
	/* Enable temp sensor in LSM303 */
	writeMagReg(CRA_REG_M, 0x8C);	// Enable temp sensor, 7.5Hz
    1280:	6c e8       	ldi	r22, 0x8C	; 140
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	0e 94 24 09 	call	0x1248	; 0x1248 <writeMagReg>
	i2c_write(0x0C); // hertz output 7.5
	i2c_stop();*/

	// 0x20 = 0b00100000
	// GN = 001 (+/- 1.3 gauss full scale)
	writeMagReg(CRB_REG_M, 0x20);
    1288:	60 e2       	ldi	r22, 0x20	; 32
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	0e 94 24 09 	call	0x1248	; 0x1248 <writeMagReg>
	i2c_write(0x20); // continuous conversion mode
	i2c_stop();*/

	// 0x00 = 0b00000000
	// MD = 00 (continuous-conversion mode)
	writeMagReg(MR_REG_M, 0x00);
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	0e 94 24 09 	call	0x1248	; 0x1248 <writeMagReg>
    1298:	08 95       	ret

0000129a <get_temp>:
	i2c_write(value);
	i2c_stop();
}

int get_temp(void)
{
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
	// Enable sensor first (in init)!
	//Temperature data (8LSB/deg - 12-bit resolution).
	i2c_start(0x3C);			// Its in the Mag address
    129e:	8c e3       	ldi	r24, 0x3C	; 60
    12a0:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>
	i2c_write(TEMP_OUT_H_M);	// Set pointer
    12a4:	81 e3       	ldi	r24, 0x31	; 49
    12a6:	0e 94 ac 09 	call	0x1358	; 0x1358 <i2c_write>
	i2c_start(0x3D);			// Start reading
    12aa:	8d e3       	ldi	r24, 0x3D	; 61
    12ac:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <i2c_start>

	uint8_t mth = i2c_readAck();
    12b0:	0e 94 be 09 	call	0x137c	; 0x137c <i2c_readAck>
    12b4:	c8 2f       	mov	r28, r24
	uint8_t mtl = i2c_readNak();
    12b6:	0e 94 c9 09 	call	0x1392	; 0x1392 <i2c_readNak>
    12ba:	d8 2f       	mov	r29, r24
	
	i2c_stop();
    12bc:	0e 94 a3 09 	call	0x1346	; 0x1346 <i2c_stop>
	return (((mth << 8 | mtl)>>4)/4);
    12c0:	2d 2f       	mov	r18, r29
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	c9 01       	movw	r24, r18
    12c6:	9c 2b       	or	r25, r28
    12c8:	95 95       	asr	r25
    12ca:	87 95       	ror	r24
    12cc:	95 95       	asr	r25
    12ce:	87 95       	ror	r24
    12d0:	95 95       	asr	r25
    12d2:	87 95       	ror	r24
    12d4:	95 95       	asr	r25
    12d6:	87 95       	ror	r24
    12d8:	99 23       	and	r25, r25
    12da:	0c f4       	brge	.+2      	; 0x12de <get_temp+0x44>
    12dc:	03 96       	adiw	r24, 0x03	; 3
}
    12de:	95 95       	asr	r25
    12e0:	87 95       	ror	r24
    12e2:	95 95       	asr	r25
    12e4:	87 95       	ror	r24
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	08 95       	ret

000012ec <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
    12ec:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    12f0:	82 e0       	ldi	r24, 0x02	; 2
    12f2:	80 93 b8 00 	sts	0x00B8, r24
    12f6:	08 95       	ret

000012f8 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    12f8:	94 ea       	ldi	r25, 0xA4	; 164
    12fa:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    12fe:	ec eb       	ldi	r30, 0xBC	; 188
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	90 81       	ld	r25, Z
    1304:	99 23       	and	r25, r25
    1306:	ec f7       	brge	.-6      	; 0x1302 <i2c_start+0xa>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    1308:	90 91 b9 00 	lds	r25, 0x00B9
    130c:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    130e:	98 30       	cpi	r25, 0x08	; 8
    1310:	11 f0       	breq	.+4      	; 0x1316 <i2c_start+0x1e>
    1312:	90 31       	cpi	r25, 0x10	; 16
    1314:	a1 f4       	brne	.+40     	; 0x133e <i2c_start+0x46>

	// send device address
	TWDR = address;
    1316:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    131a:	84 e8       	ldi	r24, 0x84	; 132
    131c:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    1320:	ec eb       	ldi	r30, 0xBC	; 188
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	88 23       	and	r24, r24
    1328:	ec f7       	brge	.-6      	; 0x1324 <i2c_start+0x2c>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    132a:	90 91 b9 00 	lds	r25, 0x00B9
    132e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;
    1330:	98 31       	cpi	r25, 0x18	; 24
    1332:	39 f0       	breq	.+14     	; 0x1342 <i2c_start+0x4a>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 34       	cpi	r25, 0x40	; 64
    1338:	29 f4       	brne	.+10     	; 0x1344 <i2c_start+0x4c>
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	08 95       	ret

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) return 1;

	return 0;
    1342:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    1344:	08 95       	ret

00001346 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1346:	84 e9       	ldi	r24, 0x94	; 148
    1348:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    134c:	ec eb       	ldi	r30, 0xBC	; 188
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	84 fd       	sbrc	r24, 4
    1354:	fd cf       	rjmp	.-6      	; 0x1350 <i2c_stop+0xa>

}/* i2c_stop */
    1356:	08 95       	ret

00001358 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    1358:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    135c:	84 e8       	ldi	r24, 0x84	; 132
    135e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    1362:	ec eb       	ldi	r30, 0xBC	; 188
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	88 23       	and	r24, r24
    136a:	ec f7       	brge	.-6      	; 0x1366 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    136c:	90 91 b9 00 	lds	r25, 0x00B9
    1370:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	98 32       	cpi	r25, 0x28	; 40
    1376:	09 f4       	brne	.+2      	; 0x137a <i2c_write+0x22>
    1378:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    137a:	08 95       	ret

0000137c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    137c:	84 ec       	ldi	r24, 0xC4	; 196
    137e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    1382:	ec eb       	ldi	r30, 0xBC	; 188
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	88 23       	and	r24, r24
    138a:	ec f7       	brge	.-6      	; 0x1386 <i2c_readAck+0xa>

    return TWDR;
    138c:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    1390:	08 95       	ret

00001392 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    1392:	84 e8       	ldi	r24, 0x84	; 132
    1394:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    1398:	ec eb       	ldi	r30, 0xBC	; 188
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	ec f7       	brge	.-6      	; 0x139c <i2c_readNak+0xa>
	
    return TWDR;
    13a2:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    13a6:	08 95       	ret

000013a8 <readCommand>:
	return 0;
}
*/

uint16_t readCommand(void)
{
    13a8:	1f 93       	push	r17
    13aa:	cf 93       	push	r28
    13ac:	df 93       	push	r29
    13ae:	cd b7       	in	r28, 0x3d	; 61
    13b0:	de b7       	in	r29, 0x3e	; 62
    13b2:	6a 97       	sbiw	r28, 0x1a	; 26
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
	char cmdValue[16];
	char data[10];
	uint8_t counter = 0;
	unsigned int c;
	
	c = uart_getc();	// get new byte
    13be:	0e 94 3b 18 	call	0x3076	; 0x3076 <uart_getc>
    13c2:	9c 01       	movw	r18, r24
    13c4:	22 27       	eor	r18, r18
    13c6:	31 71       	andi	r19, 0x11	; 17
	
	//unsigned int c = uart_getc();
	while (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
    13c8:	23 2b       	or	r18, r19
    13ca:	e1 f4       	brne	.+56     	; 0x1404 <readCommand+0x5c>
    13cc:	9c 01       	movw	r18, r24
    13ce:	22 27       	eor	r18, r18
    13d0:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
    13d2:	23 2b       	or	r18, r19
    13d4:	b9 f4       	brne	.+46     	; 0x1404 <readCommand+0x5c>
uint16_t readCommand(void)
{
	char *pch;
	char cmdValue[16];
	char data[10];
	uint8_t counter = 0;
    13d6:	10 e0       	ldi	r17, 0x00	; 0
	&&	!(c & UART_FRAME_ERROR)
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
	)
	{
		data[counter] = c;
    13d8:	e1 e1       	ldi	r30, 0x11	; 17
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	ec 0f       	add	r30, r28
    13de:	fd 1f       	adc	r31, r29
    13e0:	e1 0f       	add	r30, r17
    13e2:	f1 1d       	adc	r31, r1
    13e4:	80 83       	st	Z, r24
		if (data[counter] == '\n') {
    13e6:	8a 30       	cpi	r24, 0x0A	; 10
    13e8:	09 f0       	breq	.+2      	; 0x13ec <readCommand+0x44>
			} else {
			counter++;
    13ea:	1f 5f       	subi	r17, 0xFF	; 255
		}
		
		c = uart_getc();	// get new byte
    13ec:	0e 94 3b 18 	call	0x3076	; 0x3076 <uart_getc>
    13f0:	9c 01       	movw	r18, r24
    13f2:	22 27       	eor	r18, r18
    13f4:	31 71       	andi	r19, 0x11	; 17
	
	c = uart_getc();	// get new byte
	
	//unsigned int c = uart_getc();
	while (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
    13f6:	23 2b       	or	r18, r19
    13f8:	29 f4       	brne	.+10     	; 0x1404 <readCommand+0x5c>
    13fa:	9c 01       	movw	r18, r24
    13fc:	22 27       	eor	r18, r18
    13fe:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
    1400:	23 2b       	or	r18, r19
    1402:	51 f3       	breq	.-44     	; 0x13d8 <readCommand+0x30>
	for(uint8_t i=0; i<sizeof(data); i++) {
		uart_putc(data[i]);
	}
	uart_puts("-\n");*/
	
	if (data[0] == '=') {
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	8d 33       	cpi	r24, 0x3D	; 61
    1408:	91 f4       	brne	.+36     	; 0x142e <readCommand+0x86>
			// Find the position the equals sign is
			// in the string, keep a pointer to it
			pch = strchr(data, '=');
    140a:	6d e3       	ldi	r22, 0x3D	; 61
    140c:	70 e0       	ldi	r23, 0x00	; 0
    140e:	ce 01       	movw	r24, r28
    1410:	41 96       	adiw	r24, 0x11	; 17
    1412:	0e 94 59 22 	call	0x44b2	; 0x44b2 <strchr>
			// Copy everything after that point into
			// the buffer variable
			strcpy(cmdValue, pch+1);
    1416:	bc 01       	movw	r22, r24
    1418:	6f 5f       	subi	r22, 0xFF	; 255
    141a:	7f 4f       	sbci	r23, 0xFF	; 255
    141c:	ce 01       	movw	r24, r28
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	0e 94 64 22 	call	0x44c8	; 0x44c8 <strcpy>
			// Now turn this value into an integer and
			// return it to the caller.
			
			return atoi(cmdValue);
    1424:	ce 01       	movw	r24, r28
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	0e 94 53 21 	call	0x42a6	; 0x42a6 <atoi>
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <readCommand+0x8a>
	}
	else
	{
		return 0;
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    1432:	6a 96       	adiw	r28, 0x1a	; 26
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	de bf       	out	0x3e, r29	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	cd bf       	out	0x3d, r28	; 61
    143e:	df 91       	pop	r29
    1440:	cf 91       	pop	r28
    1442:	1f 91       	pop	r17
    1444:	08 95       	ret

00001446 <print_int>:

void print_int(int c, uint8_t ln)
{
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	28 97       	sbiw	r28, 0x08	; 8
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	16 2f       	mov	r17, r22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    145e:	4a e0       	ldi	r20, 0x0A	; 10
    1460:	be 01       	movw	r22, r28
    1462:	6f 5f       	subi	r22, 0xFF	; 255
    1464:	7f 4f       	sbci	r23, 0xFF	; 255
    1466:	0e 94 9d 22 	call	0x453a	; 0x453a <__itoa_ncheck>
	char buffer[8];
	itoa( c, buffer, 10);
	uart_puts(buffer);
    146a:	ce 01       	movw	r24, r28
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	
	if (ln)	// if add line end
    1472:	11 23       	and	r17, r17
    1474:	21 f0       	breq	.+8      	; 0x147e <print_int+0x38>
	{
		uart_puts("\n");
    1476:	84 ee       	ldi	r24, 0xE4	; 228
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	}
}
    147e:	28 96       	adiw	r28, 0x08	; 8
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	08 95       	ret

00001492 <print_float>:

void print_float(double c, uint8_t ln)
{
    1492:	ff 92       	push	r15
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	64 97       	sbiw	r28, 0x14	; 20
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	f4 2e       	mov	r15, r20
	char buffer[20];
	dtostrf(c, 10, 7, buffer);
    14ae:	8e 01       	movw	r16, r28
    14b0:	0f 5f       	subi	r16, 0xFF	; 255
    14b2:	1f 4f       	sbci	r17, 0xFF	; 255
    14b4:	27 e0       	ldi	r18, 0x07	; 7
    14b6:	4a e0       	ldi	r20, 0x0A	; 10
    14b8:	0e 94 2e 21 	call	0x425c	; 0x425c <dtostrf>
	uart_puts(buffer);
    14bc:	c8 01       	movw	r24, r16
    14be:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	
	if (ln)	// if add line end
    14c2:	ff 20       	and	r15, r15
    14c4:	21 f0       	breq	.+8      	; 0x14ce <print_float+0x3c>
	{
		uart_puts("\n");
    14c6:	84 ee       	ldi	r24, 0xE4	; 228
    14c8:	93 e0       	ldi	r25, 0x03	; 3
    14ca:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	}
}
    14ce:	64 96       	adiw	r28, 0x14	; 20
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	de bf       	out	0x3e, r29	; 62
    14d6:	0f be       	out	0x3f, r0	; 63
    14d8:	cd bf       	out	0x3d, r28	; 61
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	08 95       	ret

000014e6 <print_value>:
	uart_puts(buffer);
	uart_puts("\n");
}*/

void print_value (char id, int value)
{
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	28 97       	sbiw	r28, 0x08	; 8
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	18 2f       	mov	r17, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	4a e0       	ldi	r20, 0x0A	; 10
    1502:	be 01       	movw	r22, r28
    1504:	6f 5f       	subi	r22, 0xFF	; 255
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	0e 94 9d 22 	call	0x453a	; 0x453a <__itoa_ncheck>
	char buffer[8];
	itoa(value, buffer, 10);
	uart_putc(id);
    150c:	81 2f       	mov	r24, r17
    150e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
	uart_putc('=');
    1512:	8d e3       	ldi	r24, 0x3D	; 61
    1514:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
	uart_puts(buffer);
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	uart_putc('\n');
    1520:	8a e0       	ldi	r24, 0x0A	; 10
    1522:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
}
    1526:	28 96       	adiw	r28, 0x08	; 8
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	08 95       	ret

0000153a <read_int_value>:
		}
	}	
}

unsigned long read_int_value ()
{
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	cd b7       	in	r28, 0x3d	; 61
    1540:	de b7       	in	r29, 0x3e	; 62
    1542:	60 97       	sbiw	r28, 0x10	; 16
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '=');
    154e:	6d e3       	ldi	r22, 0x3D	; 61
    1550:	70 e0       	ldi	r23, 0x00	; 0
    1552:	8c ea       	ldi	r24, 0xAC	; 172
    1554:	96 e0       	ldi	r25, 0x06	; 6
    1556:	0e 94 59 22 	call	0x44b2	; 0x44b2 <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
    155a:	bc 01       	movw	r22, r24
    155c:	6f 5f       	subi	r22, 0xFF	; 255
    155e:	7f 4f       	sbci	r23, 0xFF	; 255
    1560:	ce 01       	movw	r24, r28
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	0e 94 64 22 	call	0x44c8	; 0x44c8 <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
    1568:	ce 01       	movw	r24, r28
    156a:	01 96       	adiw	r24, 0x01	; 1
    156c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <atoi>
    1570:	bc 01       	movw	r22, r24
    1572:	88 27       	eor	r24, r24
    1574:	77 fd       	sbrc	r23, 7
    1576:	80 95       	com	r24
    1578:	98 2f       	mov	r25, r24
}
    157a:	60 96       	adiw	r28, 0x10	; 16
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	08 95       	ret

0000158c <receive_gps>:
	}
	command_ready = FALSE;
}

uint8_t receive_gps(void)
{
    158c:	2f 92       	push	r2
    158e:	3f 92       	push	r3
    1590:	4f 92       	push	r4
    1592:	5f 92       	push	r5
    1594:	6f 92       	push	r6
    1596:	7f 92       	push	r7
    1598:	8f 92       	push	r8
    159a:	9f 92       	push	r9
    159c:	af 92       	push	r10
    159e:	bf 92       	push	r11
    15a0:	cf 92       	push	r12
    15a2:	df 92       	push	r13
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	c6 56       	subi	r28, 0x66	; 102
    15b6:	d1 09       	sbc	r29, r1
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
	char value[50];
	char buffer[50];
	uint8_t i = 1;
	char *pch;
	
	memset(value, 0, sizeof(value));	// set command to 0
    15c2:	fe 01       	movw	r30, r28
    15c4:	31 96       	adiw	r30, 0x01	; 1
    15c6:	82 e3       	ldi	r24, 0x32	; 50
    15c8:	df 01       	movw	r26, r30
    15ca:	1d 92       	st	X+, r1
    15cc:	8a 95       	dec	r24
    15ce:	e9 f7       	brne	.-6      	; 0x15ca <receive_gps+0x3e>
	
	for(uint8_t j=0; j<data_count-3; j++) {
    15d0:	80 91 ab 06 	lds	r24, 0x06AB
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	03 97       	sbiw	r24, 0x03	; 3
    15d8:	18 16       	cp	r1, r24
    15da:	19 06       	cpc	r1, r25
    15dc:	d4 f4       	brge	.+52     	; 0x1612 <receive_gps+0x86>
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
		value[j] = command_in[j+1];
    15e4:	e1 e0       	ldi	r30, 0x01	; 1
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	ec 0f       	add	r30, r28
    15ea:	fd 1f       	adc	r31, r29
    15ec:	e8 0f       	add	r30, r24
    15ee:	f9 1f       	adc	r31, r25
    15f0:	dc 01       	movw	r26, r24
    15f2:	a4 55       	subi	r26, 0x54	; 84
    15f4:	b9 4f       	sbci	r27, 0xF9	; 249
    15f6:	11 96       	adiw	r26, 0x01	; 1
    15f8:	8c 91       	ld	r24, X
    15fa:	80 83       	st	Z, r24
	uint8_t i = 1;
	char *pch;
	
	memset(value, 0, sizeof(value));	// set command to 0
	
	for(uint8_t j=0; j<data_count-3; j++) {
    15fc:	4f 5f       	subi	r20, 0xFF	; 255
    15fe:	84 2f       	mov	r24, r20
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	20 91 ab 06 	lds	r18, 0x06AB
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	23 50       	subi	r18, 0x03	; 3
    160a:	31 09       	sbc	r19, r1
    160c:	82 17       	cp	r24, r18
    160e:	93 07       	cpc	r25, r19
    1610:	4c f3       	brlt	.-46     	; 0x15e4 <receive_gps+0x58>
		value[j] = command_in[j+1];
	}

	uart_puts("in b =<");
    1612:	81 e4       	ldi	r24, 0x41	; 65
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    161a:	8e 01       	movw	r16, r28
    161c:	0f 5f       	subi	r16, 0xFF	; 255
    161e:	1f 4f       	sbci	r17, 0xFF	; 255
    1620:	7e 01       	movw	r14, r28
    1622:	b3 e3       	ldi	r27, 0x33	; 51
    1624:	eb 0e       	add	r14, r27
    1626:	f1 1c       	adc	r15, r1
	for( i=0; i<50; i++) {
		//value[i] = command_in[i+1];	// copy
		uart_putc(value[i]);
    1628:	f8 01       	movw	r30, r16
    162a:	81 91       	ld	r24, Z+
    162c:	8f 01       	movw	r16, r30
    162e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
	for(uint8_t j=0; j<data_count-3; j++) {
		value[j] = command_in[j+1];
	}

	uart_puts("in b =<");
	for( i=0; i<50; i++) {
    1632:	0e 15       	cp	r16, r14
    1634:	1f 05       	cpc	r17, r15
    1636:	c1 f7       	brne	.-16     	; 0x1628 <receive_gps+0x9c>
		//value[i] = command_in[i+1];	// copy
		uart_putc(value[i]);
	}
	uart_puts(">\n");
    1638:	89 e4       	ldi	r24, 0x49	; 73
    163a:	93 e0       	ldi	r25, 0x03	; 3
    163c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	
	if ((command_in[strlen(command_in)-3]) != 'e')	// Check end of string 'e'
    1640:	ec ea       	ldi	r30, 0xAC	; 172
    1642:	f6 e0       	ldi	r31, 0x06	; 6
    1644:	01 90       	ld	r0, Z+
    1646:	00 20       	and	r0, r0
    1648:	e9 f7       	brne	.-6      	; 0x1644 <receive_gps+0xb8>
    164a:	34 97       	sbiw	r30, 0x04	; 4
    164c:	80 81       	ld	r24, Z
    164e:	85 36       	cpi	r24, 0x65	; 101
    1650:	31 f0       	breq	.+12     	; 0x165e <receive_gps+0xd2>
	{
		uart_puts("Error in format\n");
    1652:	8c e4       	ldi	r24, 0x4C	; 76
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		return FALSE;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	05 c1       	rjmp	.+522    	; 0x1868 <receive_gps+0x2dc>
	}
	
	pch = strtok (value,",");	// return pointer to next token
    165e:	6c e7       	ldi	r22, 0x7C	; 124
    1660:	72 e0       	ldi	r23, 0x02	; 2
    1662:	ce 01       	movw	r24, r28
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	0e 94 54 22 	call	0x44a8	; 0x44a8 <strtok>
	lat_current_temp = atof(pch);
    166a:	0e 94 4f 21 	call	0x429e	; 0x429e <atof>
    166e:	c6 2e       	mov	r12, r22
    1670:	d7 2e       	mov	r13, r23
    1672:	e8 2e       	mov	r14, r24
    1674:	f9 2e       	mov	r15, r25
	
	pch = strtok (NULL,";");	// return pointer to next token
    1676:	6d e5       	ldi	r22, 0x5D	; 93
    1678:	73 e0       	ldi	r23, 0x03	; 3
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 54 22 	call	0x44a8	; 0x44a8 <strtok>
	lon_current_temp = atof(pch);
    1682:	0e 94 4f 21 	call	0x429e	; 0x429e <atof>
    1686:	86 2e       	mov	r8, r22
    1688:	97 2e       	mov	r9, r23
    168a:	a8 2e       	mov	r10, r24
    168c:	b9 2e       	mov	r11, r25
	
	pch = strtok (NULL,",");	// return pointer to next token
    168e:	6c e7       	ldi	r22, 0x7C	; 124
    1690:	72 e0       	ldi	r23, 0x02	; 2
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	0e 94 54 22 	call	0x44a8	; 0x44a8 <strtok>
	lat_dest_temp = atof(pch);
    169a:	0e 94 4f 21 	call	0x429e	; 0x429e <atof>
    169e:	46 2e       	mov	r4, r22
    16a0:	57 2e       	mov	r5, r23
    16a2:	68 2e       	mov	r6, r24
    16a4:	79 2e       	mov	r7, r25
	
	pch = strtok (NULL,",");	// return pointer to next token
    16a6:	6c e7       	ldi	r22, 0x7C	; 124
    16a8:	72 e0       	ldi	r23, 0x02	; 2
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 54 22 	call	0x44a8	; 0x44a8 <strtok>
	lon_dest_temp = atof(pch);
    16b2:	0e 94 4f 21 	call	0x429e	; 0x429e <atof>
    16b6:	26 2e       	mov	r2, r22
    16b8:	37 2e       	mov	r3, r23
    16ba:	a6 96       	adiw	r28, 0x26	; 38
    16bc:	8f af       	std	Y+63, r24	; 0x3f
    16be:	a6 97       	sbiw	r28, 0x26	; 38
    16c0:	a7 96       	adiw	r28, 0x27	; 39
    16c2:	9f af       	std	Y+63, r25	; 0x3f
    16c4:	a7 97       	sbiw	r28, 0x27	; 39
	
	//sprintf(lat_current_temp, "value = %f");
	if (debug_on)
    16c6:	80 91 da 05 	lds	r24, 0x05DA
    16ca:	88 23       	and	r24, r24
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <receive_gps+0x144>
    16ce:	5a c0       	rjmp	.+180    	; 0x1784 <receive_gps+0x1f8>
	{
		sprintf(buffer, "Lat curr = %0.5f", lat_current_temp);
    16d0:	ff 92       	push	r15
    16d2:	ef 92       	push	r14
    16d4:	df 92       	push	r13
    16d6:	cf 92       	push	r12
    16d8:	8f e5       	ldi	r24, 0x5F	; 95
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	9f 93       	push	r25
    16de:	8f 93       	push	r24
    16e0:	8e 01       	movw	r16, r28
    16e2:	0d 5c       	subi	r16, 0xCD	; 205
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	1f 93       	push	r17
    16e8:	0f 93       	push	r16
    16ea:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <sprintf>
		uart_puts(buffer);
    16ee:	c8 01       	movw	r24, r16
    16f0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_puts("\n");
    16f4:	84 ee       	ldi	r24, 0xE4	; 228
    16f6:	93 e0       	ldi	r25, 0x03	; 3
    16f8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		sprintf(buffer, "Lon curr = %0.5f", lon_current_temp);
    16fc:	bf 92       	push	r11
    16fe:	af 92       	push	r10
    1700:	9f 92       	push	r9
    1702:	8f 92       	push	r8
    1704:	80 e7       	ldi	r24, 0x70	; 112
    1706:	93 e0       	ldi	r25, 0x03	; 3
    1708:	9f 93       	push	r25
    170a:	8f 93       	push	r24
    170c:	1f 93       	push	r17
    170e:	0f 93       	push	r16
    1710:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <sprintf>
		uart_puts(buffer);
    1714:	c8 01       	movw	r24, r16
    1716:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_puts("\n");
    171a:	84 ee       	ldi	r24, 0xE4	; 228
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		sprintf(buffer, "Lat dest = %0.5f", lat_dest_temp);
    1722:	7f 92       	push	r7
    1724:	6f 92       	push	r6
    1726:	5f 92       	push	r5
    1728:	4f 92       	push	r4
    172a:	81 e8       	ldi	r24, 0x81	; 129
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	9f 93       	push	r25
    1730:	8f 93       	push	r24
    1732:	1f 93       	push	r17
    1734:	0f 93       	push	r16
    1736:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <sprintf>
		uart_puts(buffer);
    173a:	c8 01       	movw	r24, r16
    173c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_puts("\n");
    1740:	84 ee       	ldi	r24, 0xE4	; 228
    1742:	93 e0       	ldi	r25, 0x03	; 3
    1744:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		sprintf(buffer, "Lon dest =  %0.5f", lon_dest_temp);
    1748:	a7 96       	adiw	r28, 0x27	; 39
    174a:	ff ad       	ldd	r31, Y+63	; 0x3f
    174c:	a7 97       	sbiw	r28, 0x27	; 39
    174e:	ff 93       	push	r31
    1750:	a6 96       	adiw	r28, 0x26	; 38
    1752:	8f ad       	ldd	r24, Y+63	; 0x3f
    1754:	a6 97       	sbiw	r28, 0x26	; 38
    1756:	8f 93       	push	r24
    1758:	3f 92       	push	r3
    175a:	2f 92       	push	r2
    175c:	82 e9       	ldi	r24, 0x92	; 146
    175e:	93 e0       	ldi	r25, 0x03	; 3
    1760:	9f 93       	push	r25
    1762:	8f 93       	push	r24
    1764:	1f 93       	push	r17
    1766:	0f 93       	push	r16
    1768:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <sprintf>
		uart_puts(buffer);
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	c8 01       	movw	r24, r16
    1778:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_puts("\n");
    177c:	84 ee       	ldi	r24, 0xE4	; 228
    177e:	93 e0       	ldi	r25, 0x03	; 3
    1780:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	}
	
	/* coordinates are feasible */
	if ((lat_current_temp!=0)&&
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	6c 2d       	mov	r22, r12
    178c:	7d 2d       	mov	r23, r13
    178e:	8e 2d       	mov	r24, r14
    1790:	9f 2d       	mov	r25, r15
    1792:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    1796:	88 23       	and	r24, r24
    1798:	09 f4       	brne	.+2      	; 0x179c <receive_gps+0x210>
    179a:	61 c0       	rjmp	.+194    	; 0x185e <receive_gps+0x2d2>
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a9 01       	movw	r20, r18
    17a2:	68 2d       	mov	r22, r8
    17a4:	79 2d       	mov	r23, r9
    17a6:	8a 2d       	mov	r24, r10
    17a8:	9b 2d       	mov	r25, r11
    17aa:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <receive_gps+0x228>
    17b2:	55 c0       	rjmp	.+170    	; 0x185e <receive_gps+0x2d2>
		(lon_current_temp!=0)&&
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	a9 01       	movw	r20, r18
    17ba:	64 2d       	mov	r22, r4
    17bc:	75 2d       	mov	r23, r5
    17be:	86 2d       	mov	r24, r6
    17c0:	97 2d       	mov	r25, r7
    17c2:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	09 f4       	brne	.+2      	; 0x17cc <receive_gps+0x240>
    17ca:	49 c0       	rjmp	.+146    	; 0x185e <receive_gps+0x2d2>
		(lat_dest_temp!=0)&&
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	a9 01       	movw	r20, r18
    17d2:	a6 96       	adiw	r28, 0x26	; 38
    17d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    17d6:	a6 97       	sbiw	r28, 0x26	; 38
    17d8:	a7 96       	adiw	r28, 0x27	; 39
    17da:	ef ad       	ldd	r30, Y+63	; 0x3f
    17dc:	a7 97       	sbiw	r28, 0x27	; 39
    17de:	62 2d       	mov	r22, r2
    17e0:	73 2d       	mov	r23, r3
    17e2:	8f 2f       	mov	r24, r31
    17e4:	9e 2f       	mov	r25, r30
    17e6:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    17ea:	88 23       	and	r24, r24
    17ec:	c1 f1       	breq	.+112    	; 0x185e <receive_gps+0x2d2>
		(lon_dest_temp!=0))
	{
		lat_current = lat_current_temp;
    17ee:	8c 2d       	mov	r24, r12
    17f0:	9d 2d       	mov	r25, r13
    17f2:	ae 2d       	mov	r26, r14
    17f4:	bf 2d       	mov	r27, r15
    17f6:	80 93 8f 06 	sts	0x068F, r24
    17fa:	90 93 90 06 	sts	0x0690, r25
    17fe:	a0 93 91 06 	sts	0x0691, r26
    1802:	b0 93 92 06 	sts	0x0692, r27
		lon_current = lon_current_temp;
    1806:	88 2d       	mov	r24, r8
    1808:	99 2d       	mov	r25, r9
    180a:	aa 2d       	mov	r26, r10
    180c:	bb 2d       	mov	r27, r11
    180e:	80 93 93 06 	sts	0x0693, r24
    1812:	90 93 94 06 	sts	0x0694, r25
    1816:	a0 93 95 06 	sts	0x0695, r26
    181a:	b0 93 96 06 	sts	0x0696, r27
		lat_dest = lat_dest_temp;
    181e:	84 2d       	mov	r24, r4
    1820:	95 2d       	mov	r25, r5
    1822:	a6 2d       	mov	r26, r6
    1824:	b7 2d       	mov	r27, r7
    1826:	80 93 8b 06 	sts	0x068B, r24
    182a:	90 93 8c 06 	sts	0x068C, r25
    182e:	a0 93 8d 06 	sts	0x068D, r26
    1832:	b0 93 8e 06 	sts	0x068E, r27
		lon_dest = lon_dest_temp;
    1836:	a6 96       	adiw	r28, 0x26	; 38
    1838:	3f ad       	ldd	r19, Y+63	; 0x3f
    183a:	a6 97       	sbiw	r28, 0x26	; 38
    183c:	a7 96       	adiw	r28, 0x27	; 39
    183e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1840:	a7 97       	sbiw	r28, 0x27	; 39
    1842:	82 2d       	mov	r24, r2
    1844:	93 2d       	mov	r25, r3
    1846:	a3 2f       	mov	r26, r19
    1848:	b2 2f       	mov	r27, r18
    184a:	80 93 87 06 	sts	0x0687, r24
    184e:	90 93 88 06 	sts	0x0688, r25
    1852:	a0 93 89 06 	sts	0x0689, r26
    1856:	b0 93 8a 06 	sts	0x068A, r27
		return TRUE;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <receive_gps+0x2dc>
	}
	else
	{
		uart_puts("No correct coordinates\n");
    185e:	84 ea       	ldi	r24, 0xA4	; 164
    1860:	93 e0       	ldi	r25, 0x03	; 3
    1862:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		return FALSE;
    1866:	80 e0       	ldi	r24, 0x00	; 0
	}
    1868:	ca 59       	subi	r28, 0x9A	; 154
    186a:	df 4f       	sbci	r29, 0xFF	; 255
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	df 91       	pop	r29
    1878:	cf 91       	pop	r28
    187a:	1f 91       	pop	r17
    187c:	0f 91       	pop	r16
    187e:	ff 90       	pop	r15
    1880:	ef 90       	pop	r14
    1882:	df 90       	pop	r13
    1884:	cf 90       	pop	r12
    1886:	bf 90       	pop	r11
    1888:	af 90       	pop	r10
    188a:	9f 90       	pop	r9
    188c:	8f 90       	pop	r8
    188e:	7f 90       	pop	r7
    1890:	6f 90       	pop	r6
    1892:	5f 90       	pop	r5
    1894:	4f 90       	pop	r4
    1896:	3f 90       	pop	r3
    1898:	2f 90       	pop	r2
    189a:	08 95       	ret

0000189c <process_command>:
	// return it to the caller.
	return atoi(cmdValue);
}

void process_command()
{
    189c:	af 92       	push	r10
    189e:	bf 92       	push	r11
    18a0:	cf 92       	push	r12
    18a2:	df 92       	push	r13
    18a4:	ef 92       	push	r14
    18a6:	ff 92       	push	r15
    18a8:	0f 93       	push	r16
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
	uint16_t val = 0;
	static unsigned int test;
	switch (command_in[0]) {
    18b0:	80 91 ac 06 	lds	r24, 0x06AC
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	fc 01       	movw	r30, r24
    18b8:	ff 97       	sbiw	r30, 0x3f	; 63
    18ba:	e7 33       	cpi	r30, 0x37	; 55
    18bc:	f1 05       	cpc	r31, r1
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <process_command+0x26>
    18c0:	8b c2       	rjmp	.+1302   	; 0x1dd8 <process_command+0x53c>
    18c2:	ec 5c       	subi	r30, 0xCC	; 204
    18c4:	ff 4f       	sbci	r31, 0xFF	; 255
    18c6:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__tablejump2__>
		case 'O':
		if (command_in[1] == '?') {
    18ca:	80 91 ad 06 	lds	r24, 0x06AD
    18ce:	8f 33       	cpi	r24, 0x3F	; 63
    18d0:	61 f4       	brne	.+24     	; 0x18ea <process_command+0x4e>
			// Do the query action for S
			uart_puts("Asked S value\n");
    18d2:	8c eb       	ldi	r24, 0xBC	; 188
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			print_value('S',test);
    18da:	60 91 d8 05 	lds	r22, 0x05D8
    18de:	70 91 d9 05 	lds	r23, 0x05D9
    18e2:	83 e5       	ldi	r24, 0x53	; 83
    18e4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <print_value>
    18e8:	91 c2       	rjmp	.+1314   	; 0x1e0c <process_command+0x570>
			} else if (command_in[1] == '=') {
    18ea:	8d 33       	cpi	r24, 0x3D	; 61
    18ec:	09 f0       	breq	.+2      	; 0x18f0 <process_command+0x54>
    18ee:	8e c2       	rjmp	.+1308   	; 0x1e0c <process_command+0x570>
			test = read_int_value();
    18f0:	0e 94 9d 0a 	call	0x153a	; 0x153a <read_int_value>
    18f4:	70 93 d9 05 	sts	0x05D9, r23
    18f8:	60 93 d8 05 	sts	0x05D8, r22
			uart_puts("Received S value\n");
    18fc:	8b ec       	ldi	r24, 0xCB	; 203
    18fe:	93 e0       	ldi	r25, 0x03	; 3
    1900:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			print_value('S',test);
    1904:	60 91 d8 05 	lds	r22, 0x05D8
    1908:	70 91 d9 05 	lds	r23, 0x05D9
    190c:	83 e5       	ldi	r24, 0x53	; 83
    190e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <print_value>
    1912:	7c c2       	rjmp	.+1272   	; 0x1e0c <process_command+0x570>
			// Do the set action for M
		}
		break;
		
		case 'V':	// BUZZER
		if (command_in[1] == '1') 
    1914:	80 91 ad 06 	lds	r24, 0x06AD
    1918:	81 33       	cpi	r24, 0x31	; 49
    191a:	11 f4       	brne	.+4      	; 0x1920 <process_command+0x84>
		{
			PWR_ON;
    191c:	80 e4       	ldi	r24, 0x40	; 64
    191e:	8b b9       	out	0x0b, r24	; 11
		}
		
		if (command_in[1] == '0')
    1920:	80 91 ad 06 	lds	r24, 0x06AD
    1924:	80 33       	cpi	r24, 0x30	; 48
    1926:	09 f4       	brne	.+2      	; 0x192a <process_command+0x8e>
		{
			PWR_OFF;
    1928:	5e 98       	cbi	0x0b, 6	; 11
		}
		
		if (command_in[1] == 'S')
    192a:	80 91 ad 06 	lds	r24, 0x06AD
    192e:	83 35       	cpi	r24, 0x53	; 83
    1930:	39 f4       	brne	.+14     	; 0x1940 <process_command+0xa4>
		{
			uart_puts("BUZZER!\n");
    1932:	8d ed       	ldi	r24, 0xDD	; 221
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			buzzer(BUZZER_SHORT);	
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <buzzer>
		}
		
		if (command_in[1] == 'L')
    1940:	80 91 ad 06 	lds	r24, 0x06AD
    1944:	8c 34       	cpi	r24, 0x4C	; 76
    1946:	09 f0       	breq	.+2      	; 0x194a <process_command+0xae>
    1948:	61 c2       	rjmp	.+1218   	; 0x1e0c <process_command+0x570>
		{
			uart_puts("BUZZER!\n");
    194a:	8d ed       	ldi	r24, 0xDD	; 221
    194c:	93 e0       	ldi	r25, 0x03	; 3
    194e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			buzzer(BUZZER_LONG);
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <buzzer>
    1958:	59 c2       	rjmp	.+1202   	; 0x1e0c <process_command+0x570>
		}
		
		break;
		
		case 'A':	// Arrived at location
		set_device_status(AT_LOCATION);
    195a:	84 e0       	ldi	r24, 0x04	; 4
    195c:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <set_device_status>
		if (debug_on)	uart_puts("Arrived at location\n");
    1960:	80 91 da 05 	lds	r24, 0x05DA
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <process_command+0xce>
    1968:	51 c2       	rjmp	.+1186   	; 0x1e0c <process_command+0x570>
    196a:	83 e3       	ldi	r24, 0x33	; 51
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    1972:	4c c2       	rjmp	.+1176   	; 0x1e0c <process_command+0x570>
		break;
			
		case 'a':	// reset led
		TEST_OFF;
    1974:	43 98       	cbi	0x08, 3	; 8
		if (debug_on)	uart_puts("Reset led\n");
    1976:	80 91 da 05 	lds	r24, 0x05DA
    197a:	88 23       	and	r24, r24
    197c:	09 f4       	brne	.+2      	; 0x1980 <process_command+0xe4>
    197e:	46 c2       	rjmp	.+1164   	; 0x1e0c <process_command+0x570>
    1980:	88 e4       	ldi	r24, 0x48	; 72
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    1988:	41 c2       	rjmp	.+1154   	; 0x1e0c <process_command+0x570>
		break;
		
			
		case 'b':	/* Begin of message from phone */
		if (receive_gps())
    198a:	0e 94 c6 0a 	call	0x158c	; 0x158c <receive_gps>
    198e:	88 23       	and	r24, r24
    1990:	09 f4       	brne	.+2      	; 0x1994 <process_command+0xf8>
    1992:	d2 c0       	rjmp	.+420    	; 0x1b38 <process_command+0x29c>
		{
			if (debug_on)
    1994:	80 91 da 05 	lds	r24, 0x05DA
    1998:	88 23       	and	r24, r24
    199a:	09 f4       	brne	.+2      	; 0x199e <process_command+0x102>
    199c:	40 c0       	rjmp	.+128    	; 0x1a1e <process_command+0x182>
			{
				uart_puts("Received correct coordinates:\n");
    199e:	83 e5       	ldi	r24, 0x53	; 83
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				uart_puts("Location:");
    19a6:	82 e7       	ldi	r24, 0x72	; 114
    19a8:	92 e0       	ldi	r25, 0x02	; 2
    19aa:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				print_float(lat_current,0);
    19ae:	60 91 8f 06 	lds	r22, 0x068F
    19b2:	70 91 90 06 	lds	r23, 0x0690
    19b6:	80 91 91 06 	lds	r24, 0x0691
    19ba:	90 91 92 06 	lds	r25, 0x0692
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>
				uart_puts(",");
    19c4:	8c e7       	ldi	r24, 0x7C	; 124
    19c6:	92 e0       	ldi	r25, 0x02	; 2
    19c8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				print_float(lon_current,0);
    19cc:	60 91 93 06 	lds	r22, 0x0693
    19d0:	70 91 94 06 	lds	r23, 0x0694
    19d4:	80 91 95 06 	lds	r24, 0x0695
    19d8:	90 91 96 06 	lds	r25, 0x0696
    19dc:	40 e0       	ldi	r20, 0x00	; 0
    19de:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>
				uart_puts(" Destination: ");
    19e2:	8e e7       	ldi	r24, 0x7E	; 126
    19e4:	92 e0       	ldi	r25, 0x02	; 2
    19e6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				print_float(lat_dest,0);
    19ea:	60 91 8b 06 	lds	r22, 0x068B
    19ee:	70 91 8c 06 	lds	r23, 0x068C
    19f2:	80 91 8d 06 	lds	r24, 0x068D
    19f6:	90 91 8e 06 	lds	r25, 0x068E
    19fa:	40 e0       	ldi	r20, 0x00	; 0
    19fc:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>
				uart_puts(",");
    1a00:	8c e7       	ldi	r24, 0x7C	; 124
    1a02:	92 e0       	ldi	r25, 0x02	; 2
    1a04:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				print_float(lon_dest,1);
    1a08:	60 91 87 06 	lds	r22, 0x0687
    1a0c:	70 91 88 06 	lds	r23, 0x0688
    1a10:	80 91 89 06 	lds	r24, 0x0689
    1a14:	90 91 8a 06 	lds	r25, 0x068A
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>
			}
				
			device.distance = calculate_distance(lat_current,lon_current,lat_dest,lon_dest);
    1a1e:	a0 90 87 06 	lds	r10, 0x0687
    1a22:	b0 90 88 06 	lds	r11, 0x0688
    1a26:	c0 90 89 06 	lds	r12, 0x0689
    1a2a:	d0 90 8a 06 	lds	r13, 0x068A
    1a2e:	e0 90 8b 06 	lds	r14, 0x068B
    1a32:	f0 90 8c 06 	lds	r15, 0x068C
    1a36:	00 91 8d 06 	lds	r16, 0x068D
    1a3a:	10 91 8e 06 	lds	r17, 0x068E
    1a3e:	20 91 93 06 	lds	r18, 0x0693
    1a42:	30 91 94 06 	lds	r19, 0x0694
    1a46:	40 91 95 06 	lds	r20, 0x0695
    1a4a:	50 91 96 06 	lds	r21, 0x0696
    1a4e:	60 91 8f 06 	lds	r22, 0x068F
    1a52:	70 91 90 06 	lds	r23, 0x0690
    1a56:	80 91 91 06 	lds	r24, 0x0691
    1a5a:	90 91 92 06 	lds	r25, 0x0692
    1a5e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <calculate_distance>
    1a62:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
    1a66:	60 93 9f 06 	sts	0x069F, r22
    1a6a:	70 93 a0 06 	sts	0x06A0, r23
    1a6e:	80 93 a1 06 	sts	0x06A1, r24
    1a72:	90 93 a2 06 	sts	0x06A2, r25
			device.heading = calculate_bearing(lat_current,lon_current,lat_dest,lon_dest);
    1a76:	a0 90 87 06 	lds	r10, 0x0687
    1a7a:	b0 90 88 06 	lds	r11, 0x0688
    1a7e:	c0 90 89 06 	lds	r12, 0x0689
    1a82:	d0 90 8a 06 	lds	r13, 0x068A
    1a86:	e0 90 8b 06 	lds	r14, 0x068B
    1a8a:	f0 90 8c 06 	lds	r15, 0x068C
    1a8e:	00 91 8d 06 	lds	r16, 0x068D
    1a92:	10 91 8e 06 	lds	r17, 0x068E
    1a96:	20 91 93 06 	lds	r18, 0x0693
    1a9a:	30 91 94 06 	lds	r19, 0x0694
    1a9e:	40 91 95 06 	lds	r20, 0x0695
    1aa2:	50 91 96 06 	lds	r21, 0x0696
    1aa6:	60 91 8f 06 	lds	r22, 0x068F
    1aaa:	70 91 90 06 	lds	r23, 0x0690
    1aae:	80 91 91 06 	lds	r24, 0x0691
    1ab2:	90 91 92 06 	lds	r25, 0x0692
    1ab6:	0e 94 de 01 	call	0x3bc	; 0x3bc <calculate_bearing>
    1aba:	bc 01       	movw	r22, r24
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__floatunsisf>
    1ac4:	60 93 9b 06 	sts	0x069B, r22
    1ac8:	70 93 9c 06 	sts	0x069C, r23
    1acc:	80 93 9d 06 	sts	0x069D, r24
    1ad0:	90 93 9e 06 	sts	0x069E, r25
			if (debug_on)
    1ad4:	80 91 da 05 	lds	r24, 0x05DA
    1ad8:	88 23       	and	r24, r24
    1ada:	31 f1       	breq	.+76     	; 0x1b28 <process_command+0x28c>
			{
				uart_puts("Distance = ");
    1adc:	8d e8       	ldi	r24, 0x8D	; 141
    1ade:	92 e0       	ldi	r25, 0x02	; 2
    1ae0:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				print_float(device.distance,0);
    1ae4:	60 91 9f 06 	lds	r22, 0x069F
    1ae8:	70 91 a0 06 	lds	r23, 0x06A0
    1aec:	80 91 a1 06 	lds	r24, 0x06A1
    1af0:	90 91 a2 06 	lds	r25, 0x06A2
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>
				uart_puts("KM\n");
    1afa:	89 e9       	ldi	r24, 0x99	; 153
    1afc:	92 e0       	ldi	r25, 0x02	; 2
    1afe:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				uart_puts("Bearing = ");
    1b02:	8d e9       	ldi	r24, 0x9D	; 157
    1b04:	92 e0       	ldi	r25, 0x02	; 2
    1b06:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
				print_float(device.heading,0);
    1b0a:	60 91 9b 06 	lds	r22, 0x069B
    1b0e:	70 91 9c 06 	lds	r23, 0x069C
    1b12:	80 91 9d 06 	lds	r24, 0x069D
    1b16:	90 91 9e 06 	lds	r25, 0x069E
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>
				uart_puts("deg\n");
    1b20:	88 ea       	ldi	r24, 0xA8	; 168
    1b22:	92 e0       	ldi	r25, 0x02	; 2
    1b24:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			}
			uart_puts("OK\n");
    1b28:	8f e7       	ldi	r24, 0x7F	; 127
    1b2a:	95 e0       	ldi	r25, 0x05	; 5
    1b2c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			device.newdata=TRUE;
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	80 93 a8 06 	sts	0x06A8, r24
    1b36:	6a c1       	rjmp	.+724    	; 0x1e0c <process_command+0x570>
		}
		else
		{
			if (debug_on)
    1b38:	80 91 da 05 	lds	r24, 0x05DA
    1b3c:	88 23       	and	r24, r24
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <process_command+0x2a6>
    1b40:	65 c1       	rjmp	.+714    	; 0x1e0c <process_command+0x570>
			{
				uart_puts("Received wrong coordinate format\n");
    1b42:	8d ea       	ldi	r24, 0xAD	; 173
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    1b4a:	60 c1       	rjmp	.+704    	; 0x1e0c <process_command+0x570>
			}
		}
		break;
			
		case 'B':	// Check battery adc value
		device.battery = read_battery();
    1b4c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <read_battery>
    1b50:	c3 ea       	ldi	r28, 0xA3	; 163
    1b52:	d6 e0       	ldi	r29, 0x06	; 6
    1b54:	88 83       	st	Y, r24
		setLedPercentage(device.battery,MULTIPLE,GREEN,125);	/* Show battery percentage on display */
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	6f ef       	ldi	r22, 0xFF	; 255
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	0e 94 01 10 	call	0x2002	; 0x2002 <Color>
    1b60:	9b 01       	movw	r18, r22
    1b62:	ac 01       	movw	r20, r24
    1b64:	0d e7       	ldi	r16, 0x7D	; 125
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	88 81       	ld	r24, Y
    1b6a:	0e 94 09 11 	call	0x2212	; 0x2212 <setLedPercentage>
    1b6e:	2f e7       	ldi	r18, 0x7F	; 127
    1b70:	8f e4       	ldi	r24, 0x4F	; 79
    1b72:	92 e1       	ldi	r25, 0x12	; 18
    1b74:	21 50       	subi	r18, 0x01	; 1
    1b76:	80 40       	sbci	r24, 0x00	; 0
    1b78:	90 40       	sbci	r25, 0x00	; 0
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <process_command+0x2d8>
    1b7c:	00 c0       	rjmp	.+0      	; 0x1b7e <process_command+0x2e2>
    1b7e:	00 00       	nop
		_delay_ms(750);		/* Wait for the user to be able to see the battery percentage */
		clearLeds();
    1b80:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <clearLeds>
		//read_battery();
		break;
    1b84:	43 c1       	rjmp	.+646    	; 0x1e0c <process_command+0x570>
			
		case 'c':	// Give calibration values
		print_calibration_lsm303();	/* Print calibration values of this LSM303 sensor (min/max data) */
    1b86:	0e 94 cb 08 	call	0x1196	; 0x1196 <print_calibration_lsm303>
		break;
    1b8a:	40 c1       	rjmp	.+640    	; 0x1e0c <process_command+0x570>
			
		case 'C':	// Check charge status
		device.chargingstate = read_charge_status();
    1b8c:	0e 94 40 04 	call	0x880	; 0x880 <read_charge_status>
    1b90:	80 93 a5 06 	sts	0x06A5, r24
		break;
    1b94:	3b c1       	rjmp	.+630    	; 0x1e0c <process_command+0x570>
			
		case 'D':	/* Turn on/off distance on display */
		UI.showdistance = (UI.showdistance) ? FALSE : TRUE;
    1b96:	61 e0       	ldi	r22, 0x01	; 1
    1b98:	80 91 86 06 	lds	r24, 0x0686
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	60 93 86 06 	sts	0x0686, r22
		eeprom_update_word(&eeprom_showdistance, UI.showdistance);	/* Save in EEPROM */
    1ba4:	70 e0       	ldi	r23, 0x00	; 0
    1ba6:	86 e0       	ldi	r24, 0x06	; 6
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
		if (debug_on)
    1bae:	80 91 da 05 	lds	r24, 0x05DA
    1bb2:	88 23       	and	r24, r24
    1bb4:	09 f4       	brne	.+2      	; 0x1bb8 <process_command+0x31c>
    1bb6:	2a c1       	rjmp	.+596    	; 0x1e0c <process_command+0x570>
		{
			uart_puts_p(PSTR("Show UI distance = "));
    1bb8:	8c e2       	ldi	r24, 0x2C	; 44
    1bba:	92 e0       	ldi	r25, 0x02	; 2
    1bbc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
			print_int(UI.showdistance,1);
    1bc0:	80 91 86 06 	lds	r24, 0x0686
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
    1bcc:	1f c1       	rjmp	.+574    	; 0x1e0c <process_command+0x570>
		}
		break;
			
		case '?':	// Debug msg on
		if (debug_on)
    1bce:	80 91 da 05 	lds	r24, 0x05DA
    1bd2:	88 23       	and	r24, r24
    1bd4:	39 f0       	breq	.+14     	; 0x1be4 <process_command+0x348>
		{
			debug_on = 0;
    1bd6:	10 92 da 05 	sts	0x05DA, r1
			uart_puts_p(PSTR("Debug msg's off\n"));
    1bda:	8b e1       	ldi	r24, 0x1B	; 27
    1bdc:	92 e0       	ldi	r25, 0x02	; 2
    1bde:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
    1be2:	14 c1       	rjmp	.+552    	; 0x1e0c <process_command+0x570>
		}
		else
		{
			debug_on = 1;
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	80 93 da 05 	sts	0x05DA, r24
			uart_puts_p(PSTR("Debug msg's on\n"));
    1bea:	8b e0       	ldi	r24, 0x0B	; 11
    1bec:	92 e0       	ldi	r25, 0x02	; 2
    1bee:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
    1bf2:	0c c1       	rjmp	.+536    	; 0x1e0c <process_command+0x570>
		}
		break;
			
		case 'e':	/* direction test */
		val = readCommand();
    1bf4:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <readCommand>
		if (val>=0 && val<=100)
    1bf8:	85 36       	cpi	r24, 0x65	; 101
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	80 f4       	brcc	.+32     	; 0x1c1e <process_command+0x382>
		{
			device.distance = val;
    1bfe:	bc 01       	movw	r22, r24
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__floatunsisf>
    1c08:	60 93 9f 06 	sts	0x069F, r22
    1c0c:	70 93 a0 06 	sts	0x06A0, r23
    1c10:	80 93 a1 06 	sts	0x06A1, r24
    1c14:	90 93 a2 06 	sts	0x06A2, r25
			device.newdata=TRUE;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	80 93 a8 06 	sts	0x06A8, r24
		}
			
		if (debug_on)
    1c1e:	80 91 da 05 	lds	r24, 0x05DA
    1c22:	88 23       	and	r24, r24
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <process_command+0x38c>
    1c26:	f2 c0       	rjmp	.+484    	; 0x1e0c <process_command+0x570>
		{
			uart_puts_p(PSTR("Compass value set to"));
    1c28:	86 ef       	ldi	r24, 0xF6	; 246
    1c2a:	91 e0       	ldi	r25, 0x01	; 1
    1c2c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
			print_int(device.compass,1);
    1c30:	60 91 97 06 	lds	r22, 0x0697
    1c34:	70 91 98 06 	lds	r23, 0x0698
    1c38:	80 91 99 06 	lds	r24, 0x0699
    1c3c:	90 91 9a 06 	lds	r25, 0x069A
    1c40:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <__fixsfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	61 e0       	ldi	r22, 0x01	; 1
    1c4a:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
    1c4e:	de c0       	rjmp	.+444    	; 0x1e0c <process_command+0x570>
		}
		break;
			
		case 'F':	/* Flashlight mode */
		if (debug_on)
    1c50:	80 91 da 05 	lds	r24, 0x05DA
    1c54:	88 23       	and	r24, r24
    1c56:	21 f0       	breq	.+8      	; 0x1c60 <process_command+0x3c4>
		{
			uart_puts("Flashlight mode = TODO! ");
    1c58:	8f ec       	ldi	r24, 0xCF	; 207
    1c5a:	92 e0       	ldi	r25, 0x02	; 2
    1c5c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		}
		device.newdata=TRUE;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	80 93 a8 06 	sts	0x06A8, r24
		break;
    1c66:	d2 c0       	rjmp	.+420    	; 0x1e0c <process_command+0x570>
			
		case 's':	/* Set navigation color */
		uart_puts_p(PSTR("TODO, implement set navigation color\n"));
    1c68:	80 ed       	ldi	r24, 0xD0	; 208
    1c6a:	91 e0       	ldi	r25, 0x01	; 1
    1c6c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
		break;
    1c70:	cd c0       	rjmp	.+410    	; 0x1e0c <process_command+0x570>
			
		case 'I':	/* Intensity of display */
		setBrightness(readCommand());
    1c72:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <readCommand>
    1c76:	0e 94 10 10 	call	0x2020	; 0x2020 <setBrightness>
		eeprom_update_word(&eeprom_brightness, getBrightness());	/* Save in EEPROM */
    1c7a:	0e 94 14 10 	call	0x2028	; 0x2028 <getBrightness>
    1c7e:	68 2f       	mov	r22, r24
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	8a e0       	ldi	r24, 0x0A	; 10
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
		device.newdata=TRUE;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	80 93 a8 06 	sts	0x06A8, r24
		if (debug_on)
    1c90:	80 91 da 05 	lds	r24, 0x05DA
    1c94:	88 23       	and	r24, r24
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <process_command+0x3fe>
    1c98:	b9 c0       	rjmp	.+370    	; 0x1e0c <process_command+0x570>
		{
			uart_puts_p(PSTR("Brightness set to:"));
    1c9a:	8d eb       	ldi	r24, 0xBD	; 189
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
			print_int(getBrightness(),1);
    1ca2:	0e 94 14 10 	call	0x2028	; 0x2028 <getBrightness>
    1ca6:	61 e0       	ldi	r22, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
    1cae:	ae c0       	rjmp	.+348    	; 0x1e0c <process_command+0x570>
		}
		break;
			
		case 'N':	/* Show north point on display */
		UI.shownorth = (UI.shownorth) ? FALSE : TRUE;
    1cb0:	61 e0       	ldi	r22, 0x01	; 1
    1cb2:	80 91 85 06 	lds	r24, 0x0685
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	60 93 85 06 	sts	0x0685, r22
		eeprom_update_word(&eeprom_shownorth, UI.shownorth);	/* Save in EEPROM */
    1cbe:	70 e0       	ldi	r23, 0x00	; 0
    1cc0:	84 e0       	ldi	r24, 0x04	; 4
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
		if (debug_on)
    1cc8:	80 91 da 05 	lds	r24, 0x05DA
    1ccc:	88 23       	and	r24, r24
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <process_command+0x436>
    1cd0:	9d c0       	rjmp	.+314    	; 0x1e0c <process_command+0x570>
		{
			uart_puts_p(PSTR("Show UI North = "));
    1cd2:	8c ea       	ldi	r24, 0xAC	; 172
    1cd4:	91 e0       	ldi	r25, 0x01	; 1
    1cd6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
			print_int(UI.shownorth,1);
    1cda:	80 91 85 06 	lds	r24, 0x0685
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
    1ce6:	92 c0       	rjmp	.+292    	; 0x1e0c <process_command+0x570>
		}
		break;
			
		case 'P':	// Power off
		if (debug_on)
    1ce8:	80 91 da 05 	lds	r24, 0x05DA
    1cec:	88 23       	and	r24, r24
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <process_command+0x456>
    1cf0:	8d c0       	rjmp	.+282    	; 0x1e0c <process_command+0x570>
		{
			uart_puts_p(PSTR("Powering off..\n"));
    1cf2:	8c e9       	ldi	r24, 0x9C	; 156
    1cf4:	91 e0       	ldi	r25, 0x01	; 1
    1cf6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
			control_power(OFF);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	0e 94 cf 03 	call	0x79e	; 0x79e <control_power>
    1d00:	85 c0       	rjmp	.+266    	; 0x1e0c <process_command+0x570>
		}
		break;
			
		case 'r':	// Reset device to factory settings
		if (debug_on)
    1d02:	80 91 da 05 	lds	r24, 0x05DA
    1d06:	88 23       	and	r24, r24
    1d08:	21 f0       	breq	.+8      	; 0x1d12 <process_command+0x476>
		{
			uart_puts_p(PSTR("Resetting Bluetooth settings!\n"));
    1d0a:	8d e7       	ldi	r24, 0x7D	; 125
    1d0c:	91 e0       	ldi	r25, 0x01	; 1
    1d0e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
		}
		init_bluetooth();
    1d12:	0e 94 9b 04 	call	0x936	; 0x936 <init_bluetooth>
		break;
    1d16:	7a c0       	rjmp	.+244    	; 0x1e0c <process_command+0x570>
			
		case 'R':	// Reset device to factory settings
		if (debug_on)
    1d18:	80 91 da 05 	lds	r24, 0x05DA
    1d1c:	88 23       	and	r24, r24
    1d1e:	21 f0       	breq	.+8      	; 0x1d28 <process_command+0x48c>
		{
			uart_puts_p(PSTR("Device reseted to factory settings!\n"));
    1d20:	88 e5       	ldi	r24, 0x58	; 88
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
		}
		reset_factory_settings();
    1d28:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <reset_factory_settings>
		break;
    1d2c:	6f c0       	rjmp	.+222    	; 0x1e0c <process_command+0x570>
			
		case 'S':	// Check switch
		device.buttonstate = read_button();
    1d2e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <read_button>
    1d32:	80 93 a6 06 	sts	0x06A6, r24
		break;
    1d36:	6a c0       	rjmp	.+212    	; 0x1e0c <process_command+0x570>
			
		case 'T':	// get temp of LSM303 sensor
		uart_puts("Temperature = ");
    1d38:	88 ee       	ldi	r24, 0xE8	; 232
    1d3a:	92 e0       	ldi	r25, 0x02	; 2
    1d3c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(get_temp(),FALSE);
    1d40:	0e 94 4d 09 	call	0x129a	; 0x129a <get_temp>
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		uart_puts(" deg. C.\n");
    1d4a:	87 ef       	ldi	r24, 0xF7	; 247
    1d4c:	92 e0       	ldi	r25, 0x02	; 2
    1d4e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
    1d52:	5c c0       	rjmp	.+184    	; 0x1e0c <process_command+0x570>
			
		case 'u':	/* Change UI mode */
		if (debug_on)
    1d54:	80 91 da 05 	lds	r24, 0x05DA
    1d58:	88 23       	and	r24, r24
    1d5a:	21 f0       	breq	.+8      	; 0x1d64 <process_command+0x4c8>
		{
			uart_puts("UI mode++");
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	93 e0       	ldi	r25, 0x03	; 3
    1d60:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		}
		setUIModeNext();
    1d64:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <setUIModeNext>
		eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
    1d68:	0e 94 06 11 	call	0x220c	; 0x220c <getUIMode>
    1d6c:	68 2f       	mov	r22, r24
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	88 e0       	ldi	r24, 0x08	; 8
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
		device.newdata=TRUE;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	80 93 a8 06 	sts	0x06A8, r24
		break;
    1d7e:	46 c0       	rjmp	.+140    	; 0x1e0c <process_command+0x570>
			
		case 'U':	/* Change UI mode */
		//setUIMode();
		setUIMode(readCommand());
    1d80:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <readCommand>
    1d84:	0e 94 e7 10 	call	0x21ce	; 0x21ce <setUIMode>
		if (debug_on)
    1d88:	80 91 da 05 	lds	r24, 0x05DA
    1d8c:	88 23       	and	r24, r24
    1d8e:	51 f0       	breq	.+20     	; 0x1da4 <process_command+0x508>
		{
			uart_puts("UI mode = ");
    1d90:	8b e0       	ldi	r24, 0x0B	; 11
    1d92:	93 e0       	ldi	r25, 0x03	; 3
    1d94:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			print_int(getUIMode(),1);
    1d98:	0e 94 06 11 	call	0x220c	; 0x220c <getUIMode>
    1d9c:	61 e0       	ldi	r22, 0x01	; 1
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		}
		eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
    1da4:	0e 94 06 11 	call	0x220c	; 0x220c <getUIMode>
    1da8:	68 2f       	mov	r22, r24
    1daa:	70 e0       	ldi	r23, 0x00	; 0
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
		device.newdata=TRUE;
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	80 93 a8 06 	sts	0x06A8, r24
		break;
    1dba:	28 c0       	rjmp	.+80     	; 0x1e0c <process_command+0x570>
			
		case 'K':	/* Change navigation color */
		if (debug_on)
    1dbc:	80 91 da 05 	lds	r24, 0x05DA
    1dc0:	88 23       	and	r24, r24
    1dc2:	21 f0       	breq	.+8      	; 0x1dcc <process_command+0x530>
		{
			uart_puts("Navigation color set\n");
    1dc4:	86 e1       	ldi	r24, 0x16	; 22
    1dc6:	93 e0       	ldi	r25, 0x03	; 3
    1dc8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			//print_int(getUIMode(),1);
		}
		setNavigationColorNext();
    1dcc:	0e 94 17 10 	call	0x202e	; 0x202e <setNavigationColorNext>
			
		//eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
		device.newdata=TRUE;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	80 93 a8 06 	sts	0x06A8, r24
		break;
    1dd6:	1a c0       	rjmp	.+52     	; 0x1e0c <process_command+0x570>
			
		default:
		uart_puts("No valid command:");
    1dd8:	8c e2       	ldi	r24, 0x2C	; 44
    1dda:	93 e0       	ldi	r25, 0x03	; 3
    1ddc:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_putc(command_in[0]);
    1de0:	cc ea       	ldi	r28, 0xAC	; 172
    1de2:	d6 e0       	ldi	r29, 0x06	; 6
    1de4:	88 81       	ld	r24, Y
    1de6:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
		uart_puts(" (");
    1dea:	8e e3       	ldi	r24, 0x3E	; 62
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(command_in[0], 0);
    1df2:	88 81       	ld	r24, Y
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		uart_puts(")\n");
    1dfc:	8a ec       	ldi	r24, 0xCA	; 202
    1dfe:	94 e0       	ldi	r25, 0x04	; 4
    1e00:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_puts_p(PSTR("'?' = debug messages\n"));
    1e04:	82 e4       	ldi	r24, 0x42	; 66
    1e06:	91 e0       	ldi	r25, 0x01	; 1
    1e08:	0e 94 78 18 	call	0x30f0	; 0x30f0 <uart_puts_p>
		break;
		
	}
	command_ready = FALSE;
    1e0c:	10 92 74 07 	sts	0x0774, r1
}
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	08 95       	ret

00001e26 <get_serial>:
	uart_puts(buffer);
	uart_putc('\n');
}

void get_serial(void)
{
    1e26:	cf 93       	push	r28
	unsigned int c = uart_getc();
    1e28:	0e 94 3b 18 	call	0x3076	; 0x3076 <uart_getc>
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	22 27       	eor	r18, r18
    1e30:	31 71       	andi	r19, 0x11	; 17
	if (!(c & UART_NO_DATA)	// If data is correct
	&&	!(c & UART_FRAME_ERROR)
    1e32:	23 2b       	or	r18, r19
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <get_serial+0x12>
    1e36:	40 c0       	rjmp	.+128    	; 0x1eb8 <get_serial+0x92>
    1e38:	9c 01       	movw	r18, r24
    1e3a:	22 27       	eor	r18, r18
    1e3c:	3a 70       	andi	r19, 0x0A	; 10
	&&	!(c & UART_OVERRUN_ERROR)
	&&	!(c & UART_BUFFER_OVERFLOW)
    1e3e:	23 2b       	or	r18, r19
    1e40:	d9 f5       	brne	.+118    	; 0x1eb8 <get_serial+0x92>
	)
	{
		command_in[data_count] = c;
    1e42:	e0 91 ab 06 	lds	r30, 0x06AB
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	e4 55       	subi	r30, 0x54	; 84
    1e4a:	f9 4f       	sbci	r31, 0xF9	; 249
    1e4c:	80 83       	st	Z, r24
		if (command_in[data_count] == '\n')
    1e4e:	e0 91 ab 06 	lds	r30, 0x06AB
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	e4 55       	subi	r30, 0x54	; 84
    1e56:	f9 4f       	sbci	r31, 0xF9	; 249
    1e58:	80 81       	ld	r24, Z
    1e5a:	8a 30       	cpi	r24, 0x0A	; 10
    1e5c:	41 f5       	brne	.+80     	; 0x1eae <get_serial+0x88>
		{
			uart_puts("Received =<");
    1e5e:	86 ee       	ldi	r24, 0xE6	; 230
    1e60:	93 e0       	ldi	r25, 0x03	; 3
    1e62:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			for(uint8_t i=0; i<data_count; i++) {
    1e66:	80 91 ab 06 	lds	r24, 0x06AB
    1e6a:	88 23       	and	r24, r24
    1e6c:	69 f0       	breq	.+26     	; 0x1e88 <get_serial+0x62>
    1e6e:	c0 e0       	ldi	r28, 0x00	; 0
				uart_putc(command_in[i]);
    1e70:	ec 2f       	mov	r30, r28
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	e4 55       	subi	r30, 0x54	; 84
    1e76:	f9 4f       	sbci	r31, 0xF9	; 249
    1e78:	80 81       	ld	r24, Z
    1e7a:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
	{
		command_in[data_count] = c;
		if (command_in[data_count] == '\n')
		{
			uart_puts("Received =<");
			for(uint8_t i=0; i<data_count; i++) {
    1e7e:	cf 5f       	subi	r28, 0xFF	; 255
    1e80:	80 91 ab 06 	lds	r24, 0x06AB
    1e84:	c8 17       	cp	r28, r24
    1e86:	a0 f3       	brcs	.-24     	; 0x1e70 <get_serial+0x4a>
				uart_putc(command_in[i]);
			}
			uart_puts(">\n");
    1e88:	89 e4       	ldi	r24, 0x49	; 73
    1e8a:	93 e0       	ldi	r25, 0x03	; 3
    1e8c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			
			command_ready = TRUE;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	80 93 74 07 	sts	0x0774, r24
			process_command();
    1e96:	0e 94 4e 0c 	call	0x189c	; 0x189c <process_command>
			data_count = 0;	// reset
    1e9a:	10 92 ab 06 	sts	0x06AB, r1
			memset(command_in, 0, sizeof(command_in));	// set command to 0
    1e9e:	84 e6       	ldi	r24, 0x64	; 100
    1ea0:	ec ea       	ldi	r30, 0xAC	; 172
    1ea2:	f6 e0       	ldi	r31, 0x06	; 6
    1ea4:	df 01       	movw	r26, r30
    1ea6:	1d 92       	st	X+, r1
    1ea8:	8a 95       	dec	r24
    1eaa:	e9 f7       	brne	.-6      	; 0x1ea6 <get_serial+0x80>
    1eac:	05 c0       	rjmp	.+10     	; 0x1eb8 <get_serial+0x92>
		}
		else
		{
			data_count++;
    1eae:	80 91 ab 06 	lds	r24, 0x06AB
    1eb2:	8f 5f       	subi	r24, 0xFF	; 255
    1eb4:	80 93 ab 06 	sts	0x06AB, r24
		}
	}	
}
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <clearBuffer>:
	//}
}

void clearBuffer(void)
{
	memset(uiBuffer, 0, sizeof uiBuffer);	
    1ebc:	84 e3       	ldi	r24, 0x34	; 52
    1ebe:	ea e4       	ldi	r30, 0x4A	; 74
    1ec0:	f6 e0       	ldi	r31, 0x06	; 6
    1ec2:	df 01       	movw	r26, r30
    1ec4:	1d 92       	st	X+, r1
    1ec6:	8a 95       	dec	r24
    1ec8:	e9 f7       	brne	.-6      	; 0x1ec4 <clearBuffer+0x8>
    1eca:	08 95       	ret

00001ecc <delay>:
	writeFrame(0, wait);
}

void delay(uint16_t wait_ms)
{
	for (uint16_t i = 0; i < wait_ms; i++) {
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f0       	breq	.+26     	; 0x1eea <delay+0x1e>
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	ef ec       	ldi	r30, 0xCF	; 207
    1ed6:	f7 e0       	ldi	r31, 0x07	; 7
    1ed8:	31 97       	sbiw	r30, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <delay+0xc>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <delay+0x12>
    1ede:	00 00       	nop
    1ee0:	2f 5f       	subi	r18, 0xFF	; 255
    1ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ee4:	28 17       	cp	r18, r24
    1ee6:	39 07       	cpc	r19, r25
    1ee8:	a9 f7       	brne	.-22     	; 0x1ed4 <delay+0x8>
    1eea:	08 95       	ret

00001eec <setPixelColor>:

// Set pixel color from 'packed' 32-bit RGB color:
void setPixelColor(uint16_t n, uint32_t c) 
{
	uint16_t r,g,b;
	if(n < PIXELS+1) 
    1eec:	8d 30       	cpi	r24, 0x0D	; 13
    1eee:	91 05       	cpc	r25, r1
    1ef0:	28 f5       	brcc	.+74     	; 0x1f3c <setPixelColor+0x50>
	{
		r = (uint8_t)(c >> 16),
		g = (uint8_t)(c >>  8),
		b = (uint8_t)c;
		
		if(UI.brightness) 
    1ef2:	20 91 80 06 	lds	r18, 0x0680
    1ef6:	22 23       	and	r18, r18
    1ef8:	09 f1       	breq	.+66     	; 0x1f3c <setPixelColor+0x50>
		{
			led[n-1].r = (r * UI.brightness) >> 8;
    1efa:	fc 01       	movw	r30, r24
    1efc:	31 97       	sbiw	r30, 0x01	; 1
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	df 01       	movw	r26, r30
    1f02:	aa 0f       	add	r26, r26
    1f04:	bb 1f       	adc	r27, r27
    1f06:	ea 0f       	add	r30, r26
    1f08:	fb 1f       	adc	r31, r27
    1f0a:	ef 50       	subi	r30, 0x0F	; 15
    1f0c:	f8 4f       	sbci	r31, 0xF8	; 248
    1f0e:	62 9f       	mul	r22, r18
    1f10:	d0 01       	movw	r26, r0
    1f12:	63 9f       	mul	r22, r19
    1f14:	b0 0d       	add	r27, r0
    1f16:	11 24       	eor	r1, r1
    1f18:	b1 83       	std	Z+1, r27	; 0x01
			led[n-1].g = (g * UI.brightness) >> 8;
    1f1a:	52 9f       	mul	r21, r18
    1f1c:	b0 01       	movw	r22, r0
    1f1e:	53 9f       	mul	r21, r19
    1f20:	70 0d       	add	r23, r0
    1f22:	11 24       	eor	r1, r1
    1f24:	70 83       	st	Z, r23
			led[n-1].b = (b * UI.brightness) >> 8;	
    1f26:	42 9f       	mul	r20, r18
    1f28:	b0 01       	movw	r22, r0
    1f2a:	43 9f       	mul	r20, r19
    1f2c:	70 0d       	add	r23, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	72 83       	std	Z+2, r23	; 0x02
			ws2812_setleds(led,n);
    1f32:	bc 01       	movw	r22, r24
    1f34:	81 ef       	ldi	r24, 0xF1	; 241
    1f36:	97 e0       	ldi	r25, 0x07	; 7
    1f38:	0e 94 21 15 	call	0x2a42	; 0x2a42 <ws2812_setleds>
    1f3c:	08 95       	ret

00001f3e <writeFrame>:
uint8_t button_counter = 0;
uint8_t ui_counter = 0;
uint16_t timeout_timer = 0;		// timeout timer for ui

void writeFrame(uint16_t degrees, uint16_t wait_ms)	/* Write buffer to display */
{
    1f3e:	ef 92       	push	r14
    1f40:	ff 92       	push	r15
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
    1f4a:	8b 01       	movw	r16, r22
    1f4c:	89 36       	cpi	r24, 0x69	; 105
    1f4e:	21 e0       	ldi	r18, 0x01	; 1
    1f50:	92 07       	cpc	r25, r18
    1f52:	10 f0       	brcs	.+4      	; 0x1f58 <writeFrame+0x1a>
    1f54:	88 e6       	ldi	r24, 0x68	; 104
    1f56:	91 e0       	ldi	r25, 0x01	; 1
	uint8_t buffer_nr = 1;
	uint8_t pixel_offset = 0;
	
	if (degrees>360)	{degrees=360;}					// if degrees=360
	
	if (degrees)	// if not 0
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	49 f4       	brne	.+18     	; 0x1f6e <writeFrame+0x30>
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1f5c:	cc e0       	ldi	r28, 0x0C	; 12
    1f5e:	d0 e0       	ldi	r29, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	ff 24       	eor	r15, r15
    1f66:	f3 94       	inc	r15
    1f68:	ee 24       	eor	r14, r14
    1f6a:	e3 94       	inc	r14
    1f6c:	16 c0       	rjmp	.+44     	; 0x1f9a <writeFrame+0x5c>
	
	if (degrees>360)	{degrees=360;}					// if degrees=360
	
	if (degrees)	// if not 0
	{
		pixel_offset = (degrees/DEGREE_PER_PIXEL);	// rotation of display
    1f6e:	9c 01       	movw	r18, r24
    1f70:	a9 e8       	ldi	r26, 0x89	; 137
    1f72:	b8 e8       	ldi	r27, 0x88	; 136
    1f74:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__umulhisi3>
    1f78:	ec 01       	movw	r28, r24
    1f7a:	d2 95       	swap	r29
    1f7c:	c2 95       	swap	r28
    1f7e:	cf 70       	andi	r28, 0x0F	; 15
    1f80:	cd 27       	eor	r28, r29
    1f82:	df 70       	andi	r29, 0x0F	; 15
    1f84:	cd 27       	eor	r28, r29
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1f86:	fc 2e       	mov	r15, r28
    1f88:	f3 94       	inc	r15
    1f8a:	8f 2d       	mov	r24, r15
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	dd 27       	eor	r29, r29
    1f90:	2c 96       	adiw	r28, 0x0c	; 12
    1f92:	c8 17       	cp	r28, r24
    1f94:	d9 07       	cpc	r29, r25
    1f96:	44 f7       	brge	.-48     	; 0x1f68 <writeFrame+0x2a>
    1f98:	2d c0       	rjmp	.+90     	; 0x1ff4 <writeFrame+0xb6>
			
		if (i>PIXELS)
    1f9a:	2c e0       	ldi	r18, 0x0C	; 12
    1f9c:	2f 15       	cp	r18, r15
    1f9e:	80 f4       	brcc	.+32     	; 0x1fc0 <writeFrame+0x82>
		{
			//uart_puts("to big, rescale\n");
			setPixelColor(i-PIXELS,uiBuffer[buffer_nr]);
    1fa0:	ee 2d       	mov	r30, r14
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	ee 0f       	add	r30, r30
    1fa6:	ff 1f       	adc	r31, r31
    1fa8:	ee 0f       	add	r30, r30
    1faa:	ff 1f       	adc	r31, r31
    1fac:	e6 5b       	subi	r30, 0xB6	; 182
    1fae:	f9 4f       	sbci	r31, 0xF9	; 249
    1fb0:	40 81       	ld	r20, Z
    1fb2:	51 81       	ldd	r21, Z+1	; 0x01
    1fb4:	62 81       	ldd	r22, Z+2	; 0x02
    1fb6:	73 81       	ldd	r23, Z+3	; 0x03
    1fb8:	0c 97       	sbiw	r24, 0x0c	; 12
    1fba:	0e 94 76 0f 	call	0x1eec	; 0x1eec <setPixelColor>
    1fbe:	10 c0       	rjmp	.+32     	; 0x1fe0 <writeFrame+0xa2>
		}
		else
		{
			//uart_puts("printpixel\n");
			setPixelColor(i,uiBuffer[buffer_nr]);
    1fc0:	ee 2d       	mov	r30, r14
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ee 0f       	add	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	e6 5b       	subi	r30, 0xB6	; 182
    1fce:	f9 4f       	sbci	r31, 0xF9	; 249
    1fd0:	40 81       	ld	r20, Z
    1fd2:	51 81       	ldd	r21, Z+1	; 0x01
    1fd4:	62 81       	ldd	r22, Z+2	; 0x02
    1fd6:	73 81       	ldd	r23, Z+3	; 0x03
    1fd8:	8f 2d       	mov	r24, r15
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	0e 94 76 0f 	call	0x1eec	; 0x1eec <setPixelColor>
		}
		buffer_nr++;
    1fe0:	e3 94       	inc	r14
		delay(wait_ms);
    1fe2:	c8 01       	movw	r24, r16
    1fe4:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <delay>
	}

	//uart_puts("pixel offset = ");
	//print_int(pixel_offset,1);
	
	for (uint8_t i = pixel_offset+1; i <= PIXELS+pixel_offset; i++) {	// do this for all pixels
    1fe8:	f3 94       	inc	r15
    1fea:	8f 2d       	mov	r24, r15
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	c8 17       	cp	r28, r24
    1ff0:	d9 07       	cpc	r29, r25
    1ff2:	9c f6       	brge	.-90     	; 0x1f9a <writeFrame+0x5c>
		//print_int(i,1);
	}

	//if (buffer_ready_flag)
	//clearBuffer();	// empty the buffer
}
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	ff 90       	pop	r15
    1ffe:	ef 90       	pop	r14
    2000:	08 95       	ret

00002002 <Color>:
	}
}

// Convert separate R,G,B into packed 32-bit RGB color.
// Packed format is always RGB, regardless of LED strand color order.
uint32_t Color(uint8_t r, uint8_t g, uint8_t b) {
    2002:	0f 93       	push	r16
    2004:	1f 93       	push	r17
    2006:	96 2f       	mov	r25, r22
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	60 e0       	ldi	r22, 0x00	; 0
    200c:	70 e0       	ldi	r23, 0x00	; 0
    200e:	59 2b       	or	r21, r25
    2010:	8a 01       	movw	r16, r20
    2012:	9b 01       	movw	r18, r22
    2014:	28 2b       	or	r18, r24
    2016:	c9 01       	movw	r24, r18
    2018:	b8 01       	movw	r22, r16
}
    201a:	1f 91       	pop	r17
    201c:	0f 91       	pop	r16
    201e:	08 95       	ret

00002020 <setBrightness>:
		}
		brightness = newBrightness;
	}*/
	if(b>=0 && b<=255)
	{
		UI.brightness = b;
    2020:	80 93 80 06 	sts	0x0680, r24
	}
	else
	{
		return FALSE;
	}
}
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	08 95       	ret

00002028 <getBrightness>:

uint8_t getBrightness(void)
{
	return UI.brightness;
}
    2028:	80 91 80 06 	lds	r24, 0x0680
    202c:	08 95       	ret

0000202e <setNavigationColorNext>:

void setNavigationColorNext(void)
{
	static uint8_t color_counter = 0;

	switch (color_counter)
    202e:	80 91 dc 05 	lds	r24, 0x05DC
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	88 30       	cpi	r24, 0x08	; 8
    2036:	91 05       	cpc	r25, r1
    2038:	08 f0       	brcs	.+2      	; 0x203c <setNavigationColorNext+0xe>
    203a:	ac c0       	rjmp	.+344    	; 0x2194 <setNavigationColorNext+0x166>
    203c:	fc 01       	movw	r30, r24
    203e:	e5 59       	subi	r30, 0x95	; 149
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__tablejump2__>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	af ef       	ldi	r26, 0xFF	; 255
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	80 93 81 06 	sts	0x0681, r24
    2052:	90 93 82 06 	sts	0x0682, r25
    2056:	a0 93 83 06 	sts	0x0683, r26
    205a:	b0 93 84 06 	sts	0x0684, r27

	switch (color_counter)
	{
		case 0:
		setNavigationColor(RED);
		eeprom_update_dword(&eeprom_navigationcolor, RED);
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	6f ef       	ldi	r22, 0xFF	; 255
    2064:	70 e0       	ldi	r23, 0x00	; 0
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    206e:	92 c0       	rjmp	.+292    	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	9f ef       	ldi	r25, 0xFF	; 255
    2074:	a0 e0       	ldi	r26, 0x00	; 0
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	80 93 81 06 	sts	0x0681, r24
    207c:	90 93 82 06 	sts	0x0682, r25
    2080:	a0 93 83 06 	sts	0x0683, r26
    2084:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(RED);
		eeprom_update_dword(&eeprom_navigationcolor, RED);
		break;
		case 1:
		setNavigationColor(GREEN);
		eeprom_update_dword(&eeprom_navigationcolor, GREEN);
    2088:	40 e0       	ldi	r20, 0x00	; 0
    208a:	5f ef       	ldi	r21, 0xFF	; 255
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    2098:	7d c0       	rjmp	.+250    	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    209a:	8f ef       	ldi	r24, 0xFF	; 255
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	80 93 81 06 	sts	0x0681, r24
    20a6:	90 93 82 06 	sts	0x0682, r25
    20aa:	a0 93 83 06 	sts	0x0683, r26
    20ae:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(GREEN);
		eeprom_update_dword(&eeprom_navigationcolor, GREEN);
		break;
		case 2:
		setNavigationColor(BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, BLUE);
    20b2:	4f ef       	ldi	r20, 0xFF	; 255
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	70 e0       	ldi	r23, 0x00	; 0
    20ba:	80 e0       	ldi	r24, 0x00	; 0
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    20c2:	68 c0       	rjmp	.+208    	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	9f ef       	ldi	r25, 0xFF	; 255
    20c8:	af ef       	ldi	r26, 0xFF	; 255
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	80 93 81 06 	sts	0x0681, r24
    20d0:	90 93 82 06 	sts	0x0682, r25
    20d4:	a0 93 83 06 	sts	0x0683, r26
    20d8:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, BLUE);
		break;
		case 3:
		setNavigationColor(WHITE);
		eeprom_update_dword(&eeprom_navigationcolor, WHITE);
    20dc:	4f ef       	ldi	r20, 0xFF	; 255
    20de:	5f ef       	ldi	r21, 0xFF	; 255
    20e0:	6f ef       	ldi	r22, 0xFF	; 255
    20e2:	70 e0       	ldi	r23, 0x00	; 0
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	90 e0       	ldi	r25, 0x00	; 0
    20e8:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    20ec:	53 c0       	rjmp	.+166    	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	94 e6       	ldi	r25, 0x64	; 100
    20f2:	af ef       	ldi	r26, 0xFF	; 255
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	80 93 81 06 	sts	0x0681, r24
    20fa:	90 93 82 06 	sts	0x0682, r25
    20fe:	a0 93 83 06 	sts	0x0683, r26
    2102:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(WHITE);
		eeprom_update_dword(&eeprom_navigationcolor, WHITE);
		break;
		case 4:
		setNavigationColor(ORANGE);
		eeprom_update_dword(&eeprom_navigationcolor, ORANGE);
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	54 e6       	ldi	r21, 0x64	; 100
    210a:	6f ef       	ldi	r22, 0xFF	; 255
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    2116:	3e c0       	rjmp	.+124    	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	9f ef       	ldi	r25, 0xFF	; 255
    211c:	a8 ec       	ldi	r26, 0xC8	; 200
    211e:	b0 e0       	ldi	r27, 0x00	; 0
    2120:	80 93 81 06 	sts	0x0681, r24
    2124:	90 93 82 06 	sts	0x0682, r25
    2128:	a0 93 83 06 	sts	0x0683, r26
    212c:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(ORANGE);
		eeprom_update_dword(&eeprom_navigationcolor, ORANGE);
		break;
		case 5:
		setNavigationColor(YELLOW);
		eeprom_update_dword(&eeprom_navigationcolor, YELLOW);
    2130:	40 e0       	ldi	r20, 0x00	; 0
    2132:	5f ef       	ldi	r21, 0xFF	; 255
    2134:	68 ec       	ldi	r22, 0xC8	; 200
    2136:	70 e0       	ldi	r23, 0x00	; 0
    2138:	80 e0       	ldi	r24, 0x00	; 0
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    2140:	29 c0       	rjmp	.+82     	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    2142:	8f ef       	ldi	r24, 0xFF	; 255
    2144:	94 e6       	ldi	r25, 0x64	; 100
    2146:	a0 e0       	ldi	r26, 0x00	; 0
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	80 93 81 06 	sts	0x0681, r24
    214e:	90 93 82 06 	sts	0x0682, r25
    2152:	a0 93 83 06 	sts	0x0683, r26
    2156:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(YELLOW);
		eeprom_update_dword(&eeprom_navigationcolor, YELLOW);
		break;
		case 6:
		setNavigationColor(LIGHT_BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, LIGHT_BLUE);
    215a:	4f ef       	ldi	r20, 0xFF	; 255
    215c:	54 e6       	ldi	r21, 0x64	; 100
    215e:	60 e0       	ldi	r22, 0x00	; 0
    2160:	70 e0       	ldi	r23, 0x00	; 0
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <setNavigationColorNext+0x166>
	return UI.brightness;
}

void setNavigationColor(uint32_t color)
{
	UI.navigationcolor = color;
    216c:	8f ef       	ldi	r24, 0xFF	; 255
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a4 e6       	ldi	r26, 0x64	; 100
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	80 93 81 06 	sts	0x0681, r24
    2178:	90 93 82 06 	sts	0x0682, r25
    217c:	a0 93 83 06 	sts	0x0683, r26
    2180:	b0 93 84 06 	sts	0x0684, r27
		setNavigationColor(LIGHT_BLUE);
		eeprom_update_dword(&eeprom_navigationcolor, LIGHT_BLUE);
		break;
		case 7:
		setNavigationColor(VIOLET);
		eeprom_update_dword(&eeprom_navigationcolor, VIOLET);
    2184:	4f ef       	ldi	r20, 0xFF	; 255
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	64 e6       	ldi	r22, 0x64	; 100
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
		break;
		default:
		break;
	}
	color_counter = (color_counter>=7) ? 0 : color_counter+1;
    2194:	80 91 dc 05 	lds	r24, 0x05DC
    2198:	87 30       	cpi	r24, 0x07	; 7
    219a:	10 f4       	brcc	.+4      	; 0x21a0 <setNavigationColorNext+0x172>
    219c:	8f 5f       	subi	r24, 0xFF	; 255
    219e:	01 c0       	rjmp	.+2      	; 0x21a2 <setNavigationColorNext+0x174>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	80 93 dc 05 	sts	0x05DC, r24
    21a6:	08 95       	ret

000021a8 <clearLeds>:
}

void clearLeds() {
    21a8:	cf 93       	push	r28
    21aa:	df 93       	push	r29
	clearBuffer();	// clearBuffer and writeFrame is more neat but slower..
    21ac:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <clearBuffer>
    21b0:	c0 e0       	ldi	r28, 0x00	; 0
    21b2:	d0 e0       	ldi	r29, 0x00	; 0
	//writeFrame(0,0);
	//TODO:memset(pixels, 0, numBytes);
	for (uint8_t i = 0; i < PIXELS+1; i++) {
		setPixelColor(i, Color(0,0,0));
    21b4:	40 e0       	ldi	r20, 0x00	; 0
    21b6:	50 e0       	ldi	r21, 0x00	; 0
    21b8:	ba 01       	movw	r22, r20
    21ba:	ce 01       	movw	r24, r28
    21bc:	0e 94 76 0f 	call	0x1eec	; 0x1eec <setPixelColor>
    21c0:	21 96       	adiw	r28, 0x01	; 1

void clearLeds() {
	clearBuffer();	// clearBuffer and writeFrame is more neat but slower..
	//writeFrame(0,0);
	//TODO:memset(pixels, 0, numBytes);
	for (uint8_t i = 0; i < PIXELS+1; i++) {
    21c2:	cd 30       	cpi	r28, 0x0D	; 13
    21c4:	d1 05       	cpc	r29, r1
    21c6:	b1 f7       	brne	.-20     	; 0x21b4 <clearLeds+0xc>
		setPixelColor(i, Color(0,0,0));
	}
}
    21c8:	df 91       	pop	r29
    21ca:	cf 91       	pop	r28
    21cc:	08 95       	ret

000021ce <setUIMode>:

uint8_t setUIMode(uint8_t mode)
{
	if(mode>=0 && mode<=MAX_UI_MODES)
    21ce:	88 30       	cpi	r24, 0x08	; 8
    21d0:	30 f4       	brcc	.+12     	; 0x21de <setUIMode+0x10>
	{
		UI.displaymode = mode;
    21d2:	80 93 7f 06 	sts	0x067F, r24
		ui_counter = 0;			/* Clear counter for visuals */
    21d6:	10 92 df 05 	sts	0x05DF, r1
		return TRUE;
    21da:	81 e0       	ldi	r24, 0x01	; 1
    21dc:	08 95       	ret
	}
	else
	{
		return FALSE;
    21de:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    21e0:	08 95       	ret

000021e2 <setUIModeNext>:

void setUIModeNext(void)
{
	static uint8_t mode = 0;
	setUIMode(mode);
    21e2:	80 91 db 05 	lds	r24, 0x05DB
    21e6:	0e 94 e7 10 	call	0x21ce	; 0x21ce <setUIMode>
	eeprom_update_word(&eeprom_displaymode, getUIMode());	/* Save in EEPROM */
    21ea:	60 91 7f 06 	lds	r22, 0x067F
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	88 e0       	ldi	r24, 0x08	; 8
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
	mode = (mode>=MAX_UI_MODES) ? 0 : mode+1;
    21f8:	80 91 db 05 	lds	r24, 0x05DB
    21fc:	87 30       	cpi	r24, 0x07	; 7
    21fe:	10 f4       	brcc	.+4      	; 0x2204 <setUIModeNext+0x22>
    2200:	8f 5f       	subi	r24, 0xFF	; 255
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <setUIModeNext+0x24>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	80 93 db 05 	sts	0x05DB, r24
    220a:	08 95       	ret

0000220c <getUIMode>:
}

uint8_t getUIMode(void)
{
	return UI.displaymode;
}
    220c:	80 91 7f 06 	lds	r24, 0x067F
    2210:	08 95       	ret

00002212 <setLedPercentage>:
{
	UI.shownorth = var;
}

void setLedPercentage(uint8_t percent,  uint8_t mode, uint32_t color, uint8_t wait)
{
    2212:	0f 93       	push	r16
    2214:	85 36       	cpi	r24, 0x65	; 101
    2216:	08 f0       	brcs	.+2      	; 0x221a <setLedPercentage+0x8>
    2218:	84 e6       	ldi	r24, 0x64	; 100
	uint8_t nr_of_leds = 0;
	if (percent>100)	{percent=100;}
		
	nr_of_leds = percent/PERCENT_PER_PIXEL;
    221a:	e8 2f       	mov	r30, r24
    221c:	e6 95       	lsr	r30
    221e:	e6 95       	lsr	r30
    2220:	e6 95       	lsr	r30
		
	if (mode==SINGLE)	// set just 1 led
    2222:	61 11       	cpse	r22, r1
    2224:	1e c0       	rjmp	.+60     	; 0x2262 <setLedPercentage+0x50>
	{
		if (percent==100)
    2226:	84 36       	cpi	r24, 0x64	; 100
    2228:	49 f4       	brne	.+18     	; 0x223c <setLedPercentage+0x2a>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    222a:	20 93 4e 06 	sts	0x064E, r18
    222e:	30 93 4f 06 	sts	0x064F, r19
    2232:	40 93 50 06 	sts	0x0650, r20
    2236:	50 93 51 06 	sts	0x0651, r21
    223a:	0c c0       	rjmp	.+24     	; 0x2254 <setLedPercentage+0x42>
		{
			writeBuffer(1, color);	
		}
		else
		{
			writeBuffer(nr_of_leds+1, color);
    223c:	ef 5f       	subi	r30, 0xFF	; 255
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	ee 0f       	add	r30, r30
    2242:	ff 1f       	adc	r31, r31
    2244:	ee 0f       	add	r30, r30
    2246:	ff 1f       	adc	r31, r31
    2248:	e6 5b       	subi	r30, 0xB6	; 182
    224a:	f9 4f       	sbci	r31, 0xF9	; 249
    224c:	20 83       	st	Z, r18
    224e:	31 83       	std	Z+1, r19	; 0x01
    2250:	42 83       	std	Z+2, r20	; 0x02
    2252:	53 83       	std	Z+3, r21	; 0x03
		}
		else
		{
			writeBuffer(nr_of_leds+1, color);
		}
		writeFrame(0, wait);
    2254:	60 2f       	mov	r22, r16
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <writeFrame>
    2260:	25 c0       	rjmp	.+74     	; 0x22ac <setLedPercentage+0x9a>
	}
	
	if (mode==MULTIPLE)	// do a color wipe until the last led reached
    2262:	61 30       	cpi	r22, 0x01	; 1
    2264:	19 f5       	brne	.+70     	; 0x22ac <setLedPercentage+0x9a>
	{
		if (percent==100)
    2266:	84 36       	cpi	r24, 0x64	; 100
    2268:	09 f4       	brne	.+2      	; 0x226c <setLedPercentage+0x5a>
		{
			nr_of_leds--;
    226a:	e1 50       	subi	r30, 0x01	; 1
		}
		for (uint8_t i = 1; i < (nr_of_leds)+2; i++) {
    226c:	ae 2f       	mov	r26, r30
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	12 96       	adiw	r26, 0x02	; 2
    2272:	a2 30       	cpi	r26, 0x02	; 2
    2274:	b1 05       	cpc	r27, r1
    2276:	a4 f0       	brlt	.+40     	; 0x22a0 <setLedPercentage+0x8e>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	71 e0       	ldi	r23, 0x01	; 1
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    227e:	fc 01       	movw	r30, r24
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	e6 5b       	subi	r30, 0xB6	; 182
    228a:	f9 4f       	sbci	r31, 0xF9	; 249
    228c:	20 83       	st	Z, r18
    228e:	31 83       	std	Z+1, r19	; 0x01
    2290:	42 83       	std	Z+2, r20	; 0x02
    2292:	53 83       	std	Z+3, r21	; 0x03
	{
		if (percent==100)
		{
			nr_of_leds--;
		}
		for (uint8_t i = 1; i < (nr_of_leds)+2; i++) {
    2294:	7f 5f       	subi	r23, 0xFF	; 255
    2296:	87 2f       	mov	r24, r23
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	8a 17       	cp	r24, r26
    229c:	9b 07       	cpc	r25, r27
    229e:	7c f3       	brlt	.-34     	; 0x227e <setLedPercentage+0x6c>
			writeBuffer(i, color);
		}
		writeFrame(0, wait);
    22a0:	60 2f       	mov	r22, r16
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <writeFrame>
	}
}
    22ac:	0f 91       	pop	r16
    22ae:	08 95       	ret

000022b0 <refreshDisplay>:
		writeFrame(0, wait);	// Write to display
	}
}

void refreshDisplay(uint16_t north_deg, uint16_t destination_deg, uint8_t status)
{
    22b0:	8f 92       	push	r8
    22b2:	9f 92       	push	r9
    22b4:	af 92       	push	r10
    22b6:	bf 92       	push	r11
    22b8:	cf 92       	push	r12
    22ba:	df 92       	push	r13
    22bc:	ef 92       	push	r14
    22be:	ff 92       	push	r15
    22c0:	0f 93       	push	r16
    22c2:	1f 93       	push	r17
    22c4:	cf 93       	push	r28
    22c6:	df 93       	push	r29
    22c8:	8b 01       	movw	r16, r22
    22ca:	f4 2e       	mov	r15, r20
	uint16_t rotation_deg = 0;
	uint8_t x = 0;
	/* Calculate rotation */
	//rotation_deg = (north_deg + destination_deg);	/* 45 = 45 + 45*/
	//rotation_deg = (north_deg - destination_deg);	/* 330 = 10 - 20*/
	if (destination_deg>= north_deg)	// 25 - 20
    22cc:	68 17       	cp	r22, r24
    22ce:	79 07       	cpc	r23, r25
    22d0:	20 f0       	brcs	.+8      	; 0x22da <refreshDisplay+0x2a>
	{
		rotation_deg = destination_deg-north_deg;
    22d2:	eb 01       	movw	r28, r22
    22d4:	c8 1b       	sub	r28, r24
    22d6:	d9 0b       	sbc	r29, r25
    22d8:	05 c0       	rjmp	.+10     	; 0x22e4 <refreshDisplay+0x34>
	}	// 10 - 20
	else
	{
		rotation_deg = (destination_deg+360)-north_deg;
    22da:	eb 01       	movw	r28, r22
    22dc:	c8 1b       	sub	r28, r24
    22de:	d9 0b       	sbc	r29, r25
    22e0:	c8 59       	subi	r28, 0x98	; 152
    22e2:	de 4f       	sbci	r29, 0xFE	; 254
	}
	
	clearBuffer();	/* Clear buffer with colors */
    22e4:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <clearBuffer>
	
	/* Fill frame buffer with data */	
	switch (status)
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	f8 16       	cp	r15, r24
    22ec:	09 f4       	brne	.+2      	; 0x22f0 <refreshDisplay+0x40>
    22ee:	6f c0       	rjmp	.+222    	; 0x23ce <refreshDisplay+0x11e>
    22f0:	8f 15       	cp	r24, r15
    22f2:	38 f0       	brcs	.+14     	; 0x2302 <refreshDisplay+0x52>
    22f4:	ff 20       	and	r15, r15
    22f6:	09 f4       	brne	.+2      	; 0x22fa <refreshDisplay+0x4a>
    22f8:	5f c0       	rjmp	.+190    	; 0x23b8 <refreshDisplay+0x108>
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	f8 16       	cp	r15, r24
    22fe:	01 f1       	breq	.+64     	; 0x2340 <refreshDisplay+0x90>
    2300:	50 c3       	rjmp	.+1696   	; 0x29a2 <refreshDisplay+0x6f2>
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	f8 16       	cp	r15, r24
    2306:	29 f0       	breq	.+10     	; 0x2312 <refreshDisplay+0x62>
    2308:	84 e0       	ldi	r24, 0x04	; 4
    230a:	f8 16       	cp	r15, r24
    230c:	09 f4       	brne	.+2      	; 0x2310 <refreshDisplay+0x60>
    230e:	c0 c2       	rjmp	.+1408   	; 0x2890 <refreshDisplay+0x5e0>
    2310:	48 c3       	rjmp	.+1680   	; 0x29a2 <refreshDisplay+0x6f2>
	{
		case NO_CONNECTION:
			togglebit = (togglebit) ? FALSE : TRUE;
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 91 e1 05 	lds	r25, 0x05E1
    2318:	91 11       	cpse	r25, r1
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	80 93 e1 05 	sts	0x05E1, r24
			if (togglebit)
    2320:	88 23       	and	r24, r24
    2322:	09 f4       	brne	.+2      	; 0x2326 <refreshDisplay+0x76>
    2324:	42 c3       	rjmp	.+1668   	; 0x29aa <refreshDisplay+0x6fa>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	af ef       	ldi	r26, 0xFF	; 255
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	80 93 4e 06 	sts	0x064E, r24
    2332:	90 93 4f 06 	sts	0x064F, r25
    2336:	a0 93 50 06 	sts	0x0650, r26
    233a:	b0 93 51 06 	sts	0x0651, r27
    233e:	35 c3       	rjmp	.+1642   	; 0x29aa <refreshDisplay+0x6fa>
			{writeBuffer(1,RED);		/* NO connection */}
		break;
		
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
    2340:	80 91 a6 06 	lds	r24, 0x06A6
    2344:	81 30       	cpi	r24, 0x01	; 1
    2346:	a9 f5       	brne	.+106    	; 0x23b2 <refreshDisplay+0x102>
			{
				for(uint8_t i=0; i<=button_counter; i++) {
    2348:	10 91 e0 05 	lds	r17, 0x05E0
    234c:	31 e0       	ldi	r19, 0x01	; 1
    234e:	20 e0       	ldi	r18, 0x00	; 0
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2350:	40 e0       	ldi	r20, 0x00	; 0
    2352:	54 e6       	ldi	r21, 0x64	; 100
    2354:	6f ef       	ldi	r22, 0xFF	; 255
    2356:	70 e0       	ldi	r23, 0x00	; 0
    2358:	8f ef       	ldi	r24, 0xFF	; 255
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a0 e0       	ldi	r26, 0x00	; 0
    235e:	b0 e0       	ldi	r27, 0x00	; 0
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
			{
				for(uint8_t i=0; i<=button_counter; i++) {
					if (i<=5)
    2360:	26 30       	cpi	r18, 0x06	; 6
    2362:	68 f4       	brcc	.+26     	; 0x237e <refreshDisplay+0xce>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2364:	e3 2f       	mov	r30, r19
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	ee 0f       	add	r30, r30
    236a:	ff 1f       	adc	r31, r31
    236c:	ee 0f       	add	r30, r30
    236e:	ff 1f       	adc	r31, r31
    2370:	e6 5b       	subi	r30, 0xB6	; 182
    2372:	f9 4f       	sbci	r31, 0xF9	; 249
    2374:	80 83       	st	Z, r24
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	a2 83       	std	Z+2, r26	; 0x02
    237a:	b3 83       	std	Z+3, r27	; 0x03
    237c:	0c c0       	rjmp	.+24     	; 0x2396 <refreshDisplay+0xe6>
    237e:	e3 2f       	mov	r30, r19
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	ee 0f       	add	r30, r30
    2384:	ff 1f       	adc	r31, r31
    2386:	ee 0f       	add	r30, r30
    2388:	ff 1f       	adc	r31, r31
    238a:	e6 5b       	subi	r30, 0xB6	; 182
    238c:	f9 4f       	sbci	r31, 0xF9	; 249
    238e:	40 83       	st	Z, r20
    2390:	51 83       	std	Z+1, r21	; 0x01
    2392:	62 83       	std	Z+2, r22	; 0x02
    2394:	73 83       	std	Z+3, r23	; 0x03
		
		case BUTTON_PRESSED:
		ui_counter++;
			if (device.buttonstate==BUTTON_PRESSED)
			{
				for(uint8_t i=0; i<=button_counter; i++) {
    2396:	2f 5f       	subi	r18, 0xFF	; 255
    2398:	3f 5f       	subi	r19, 0xFF	; 255
    239a:	12 17       	cp	r17, r18
    239c:	08 f7       	brcc	.-62     	; 0x2360 <refreshDisplay+0xb0>
					else
					{
						writeBuffer(i+1,ORANGE);		/*  */
					}
				}
				button_counter++;
    239e:	1f 5f       	subi	r17, 0xFF	; 255
    23a0:	10 93 e0 05 	sts	0x05E0, r17
					
				if (button_counter>12)	/* Counter full, reset */
    23a4:	1d 30       	cpi	r17, 0x0D	; 13
    23a6:	28 f0       	brcs	.+10     	; 0x23b2 <refreshDisplay+0x102>
				{
					device.buttonaction = LONG_PRESS;
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	80 93 a7 06 	sts	0x06A7, r24
					button_counter=0;
    23ae:	10 92 e0 05 	sts	0x05E0, r1
				}
			}	
			ui_counter = 0;
    23b2:	10 92 df 05 	sts	0x05DF, r1
		break;
    23b6:	f9 c2       	rjmp	.+1522   	; 0x29aa <refreshDisplay+0x6fa>
		
		case BUTTON_NOT_PRESSED:	/* Button released */
			{
				if (button_counter<=6)
    23b8:	80 91 e0 05 	lds	r24, 0x05E0
    23bc:	87 30       	cpi	r24, 0x07	; 7
    23be:	08 f0       	brcs	.+2      	; 0x23c2 <refreshDisplay+0x112>
    23c0:	fc c2       	rjmp	.+1528   	; 0x29ba <refreshDisplay+0x70a>
				{
					device.buttonaction = SHORT_PRESS;	/* short press action */
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	80 93 a7 06 	sts	0x06A7, r24
				}
				if (button_counter>6)
				{
					device.buttonaction = MIDDLE_PRESS;	/* Middle press action */
				}
				button_counter = 0;							/* Released button */
    23c8:	10 92 e0 05 	sts	0x05E0, r1
			}
		break;
    23cc:	ee c2       	rjmp	.+1500   	; 0x29aa <refreshDisplay+0x6fa>
		
		case NAVIGATING:
			switch (UI.displaymode)
    23ce:	40 91 7f 06 	lds	r20, 0x067F
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	48 30       	cpi	r20, 0x08	; 8
    23d6:	51 05       	cpc	r21, r1
    23d8:	08 f0       	brcs	.+2      	; 0x23dc <refreshDisplay+0x12c>
    23da:	4c c2       	rjmp	.+1176   	; 0x2874 <refreshDisplay+0x5c4>
    23dc:	fa 01       	movw	r30, r20
    23de:	ed 58       	subi	r30, 0x8D	; 141
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	0c 94 03 1d 	jmp	0x3a06	; 0x3a06 <__tablejump2__>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    23e6:	80 91 81 06 	lds	r24, 0x0681
    23ea:	90 91 82 06 	lds	r25, 0x0682
    23ee:	a0 91 83 06 	lds	r26, 0x0683
    23f2:	b0 91 84 06 	lds	r27, 0x0684
    23f6:	80 93 4e 06 	sts	0x064E, r24
    23fa:	90 93 4f 06 	sts	0x064F, r25
    23fe:	a0 93 50 06 	sts	0x0650, r26
    2402:	b0 93 51 06 	sts	0x0651, r27
    2406:	3a c2       	rjmp	.+1140   	; 0x287c <refreshDisplay+0x5cc>
    2408:	80 91 81 06 	lds	r24, 0x0681
    240c:	90 91 82 06 	lds	r25, 0x0682
    2410:	a0 91 83 06 	lds	r26, 0x0683
    2414:	b0 91 84 06 	lds	r27, 0x0684
    2418:	80 93 4e 06 	sts	0x064E, r24
    241c:	90 93 4f 06 	sts	0x064F, r25
    2420:	a0 93 50 06 	sts	0x0650, r26
    2424:	b0 93 51 06 	sts	0x0651, r27
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	94 e6       	ldi	r25, 0x64	; 100
    242c:	af ef       	ldi	r26, 0xFF	; 255
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	80 93 52 06 	sts	0x0652, r24
    2434:	90 93 53 06 	sts	0x0653, r25
    2438:	a0 93 54 06 	sts	0x0654, r26
    243c:	b0 93 55 06 	sts	0x0655, r27
    2440:	80 93 7a 06 	sts	0x067A, r24
    2444:	90 93 7b 06 	sts	0x067B, r25
    2448:	a0 93 7c 06 	sts	0x067C, r26
    244c:	b0 93 7d 06 	sts	0x067D, r27
    2450:	15 c2       	rjmp	.+1066   	; 0x287c <refreshDisplay+0x5cc>
    2452:	80 91 81 06 	lds	r24, 0x0681
    2456:	90 91 82 06 	lds	r25, 0x0682
    245a:	a0 91 83 06 	lds	r26, 0x0683
    245e:	b0 91 84 06 	lds	r27, 0x0684
    2462:	80 93 4e 06 	sts	0x064E, r24
    2466:	90 93 4f 06 	sts	0x064F, r25
    246a:	a0 93 50 06 	sts	0x0650, r26
    246e:	b0 93 51 06 	sts	0x0651, r27
					writeBuffer(12,ORANGE);		/*  */
				break;
				
				case EXTEND_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					x = ((destination_deg+(DEGREE_PER_PIXEL/2))/DEGREE_PER_PIXEL);	// Make use of rounding numbers
    2472:	98 01       	movw	r18, r16
    2474:	21 5f       	subi	r18, 0xF1	; 241
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	a9 e8       	ldi	r26, 0x89	; 137
    247a:	b8 e8       	ldi	r27, 0x88	; 136
    247c:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__umulhisi3>
    2480:	92 95       	swap	r25
    2482:	82 95       	swap	r24
    2484:	8f 70       	andi	r24, 0x0F	; 15
    2486:	89 27       	eor	r24, r25
    2488:	9f 70       	andi	r25, 0x0F	; 15
    248a:	89 27       	eor	r24, r25
					if (x%2)	// Higher led (even)
    248c:	80 ff       	sbrs	r24, 0
    248e:	0d c0       	rjmp	.+26     	; 0x24aa <refreshDisplay+0x1fa>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2490:	80 e0       	ldi	r24, 0x00	; 0
    2492:	94 e6       	ldi	r25, 0x64	; 100
    2494:	af ef       	ldi	r26, 0xFF	; 255
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	80 93 7a 06 	sts	0x067A, r24
    249c:	90 93 7b 06 	sts	0x067B, r25
    24a0:	a0 93 7c 06 	sts	0x067C, r26
    24a4:	b0 93 7d 06 	sts	0x067D, r27
    24a8:	e9 c1       	rjmp	.+978    	; 0x287c <refreshDisplay+0x5cc>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	94 e6       	ldi	r25, 0x64	; 100
    24ae:	af ef       	ldi	r26, 0xFF	; 255
    24b0:	b0 e0       	ldi	r27, 0x00	; 0
    24b2:	80 93 52 06 	sts	0x0652, r24
    24b6:	90 93 53 06 	sts	0x0653, r25
    24ba:	a0 93 54 06 	sts	0x0654, r26
    24be:	b0 93 55 06 	sts	0x0655, r27
    24c2:	dc c1       	rjmp	.+952    	; 0x287c <refreshDisplay+0x5cc>
						writeBuffer(2,ORANGE);		/*  */
					}
				break;
				
				case ARROW:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    24c4:	80 91 81 06 	lds	r24, 0x0681
    24c8:	90 91 82 06 	lds	r25, 0x0682
    24cc:	a0 91 83 06 	lds	r26, 0x0683
    24d0:	b0 91 84 06 	lds	r27, 0x0684
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    24d4:	80 93 4e 06 	sts	0x064E, r24
    24d8:	90 93 4f 06 	sts	0x064F, r25
    24dc:	a0 93 50 06 	sts	0x0650, r26
    24e0:	b0 93 51 06 	sts	0x0651, r27
    24e4:	80 93 5e 06 	sts	0x065E, r24
    24e8:	90 93 5f 06 	sts	0x065F, r25
    24ec:	a0 93 60 06 	sts	0x0660, r26
    24f0:	b0 93 61 06 	sts	0x0661, r27
    24f4:	80 93 62 06 	sts	0x0662, r24
    24f8:	90 93 63 06 	sts	0x0663, r25
    24fc:	a0 93 64 06 	sts	0x0664, r26
    2500:	b0 93 65 06 	sts	0x0665, r27
    2504:	80 93 66 06 	sts	0x0666, r24
    2508:	90 93 67 06 	sts	0x0667, r25
    250c:	a0 93 68 06 	sts	0x0668, r26
    2510:	b0 93 69 06 	sts	0x0669, r27
    2514:	80 93 6a 06 	sts	0x066A, r24
    2518:	90 93 6b 06 	sts	0x066B, r25
    251c:	a0 93 6c 06 	sts	0x066C, r26
    2520:	b0 93 6d 06 	sts	0x066D, r27
    2524:	80 93 6e 06 	sts	0x066E, r24
    2528:	90 93 6f 06 	sts	0x066F, r25
    252c:	a0 93 70 06 	sts	0x0670, r26
    2530:	b0 93 71 06 	sts	0x0671, r27
    2534:	a3 c1       	rjmp	.+838    	; 0x287c <refreshDisplay+0x5cc>
					writeBuffer(8,UI.navigationcolor);		/*  */
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case ARROW_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    2536:	c0 90 81 06 	lds	r12, 0x0681
    253a:	d0 90 82 06 	lds	r13, 0x0682
    253e:	e0 90 83 06 	lds	r14, 0x0683
    2542:	f0 90 84 06 	lds	r15, 0x0684
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2546:	c0 92 4e 06 	sts	0x064E, r12
    254a:	d0 92 4f 06 	sts	0x064F, r13
    254e:	e0 92 50 06 	sts	0x0650, r14
    2552:	f0 92 51 06 	sts	0x0651, r15
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case ARROW_P:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					x = ((destination_deg+(DEGREE_PER_PIXEL/2))/DEGREE_PER_PIXEL);	// Make use of rounding numbers
    2556:	98 01       	movw	r18, r16
    2558:	21 5f       	subi	r18, 0xF1	; 241
    255a:	3f 4f       	sbci	r19, 0xFF	; 255
    255c:	a9 e8       	ldi	r26, 0x89	; 137
    255e:	b8 e8       	ldi	r27, 0x88	; 136
    2560:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__umulhisi3>
    2564:	92 95       	swap	r25
    2566:	82 95       	swap	r24
    2568:	8f 70       	andi	r24, 0x0F	; 15
    256a:	89 27       	eor	r24, r25
    256c:	9f 70       	andi	r25, 0x0F	; 15
    256e:	89 27       	eor	r24, r25
					if (x%2)	// Higher led (even)
    2570:	80 ff       	sbrs	r24, 0
    2572:	0d c0       	rjmp	.+26     	; 0x258e <refreshDisplay+0x2de>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2574:	80 e0       	ldi	r24, 0x00	; 0
    2576:	94 e6       	ldi	r25, 0x64	; 100
    2578:	af ef       	ldi	r26, 0xFF	; 255
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	80 93 7a 06 	sts	0x067A, r24
    2580:	90 93 7b 06 	sts	0x067B, r25
    2584:	a0 93 7c 06 	sts	0x067C, r26
    2588:	b0 93 7d 06 	sts	0x067D, r27
    258c:	0c c0       	rjmp	.+24     	; 0x25a6 <refreshDisplay+0x2f6>
    258e:	80 e0       	ldi	r24, 0x00	; 0
    2590:	94 e6       	ldi	r25, 0x64	; 100
    2592:	af ef       	ldi	r26, 0xFF	; 255
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	80 93 52 06 	sts	0x0652, r24
    259a:	90 93 53 06 	sts	0x0653, r25
    259e:	a0 93 54 06 	sts	0x0654, r26
    25a2:	b0 93 55 06 	sts	0x0655, r27
    25a6:	c0 92 5e 06 	sts	0x065E, r12
    25aa:	d0 92 5f 06 	sts	0x065F, r13
    25ae:	e0 92 60 06 	sts	0x0660, r14
    25b2:	f0 92 61 06 	sts	0x0661, r15
    25b6:	c0 92 62 06 	sts	0x0662, r12
    25ba:	d0 92 63 06 	sts	0x0663, r13
    25be:	e0 92 64 06 	sts	0x0664, r14
    25c2:	f0 92 65 06 	sts	0x0665, r15
    25c6:	c0 92 66 06 	sts	0x0666, r12
    25ca:	d0 92 67 06 	sts	0x0667, r13
    25ce:	e0 92 68 06 	sts	0x0668, r14
    25d2:	f0 92 69 06 	sts	0x0669, r15
    25d6:	c0 92 6a 06 	sts	0x066A, r12
    25da:	d0 92 6b 06 	sts	0x066B, r13
    25de:	e0 92 6c 06 	sts	0x066C, r14
    25e2:	f0 92 6d 06 	sts	0x066D, r15
    25e6:	c0 92 6e 06 	sts	0x066E, r12
    25ea:	d0 92 6f 06 	sts	0x066F, r13
    25ee:	e0 92 70 06 	sts	0x0670, r14
    25f2:	f0 92 71 06 	sts	0x0671, r15
    25f6:	42 c1       	rjmp	.+644    	; 0x287c <refreshDisplay+0x5cc>
					writeBuffer(8,UI.navigationcolor);		/*  */
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case BARR:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    25f8:	c0 90 81 06 	lds	r12, 0x0681
    25fc:	d0 90 82 06 	lds	r13, 0x0682
    2600:	e0 90 83 06 	lds	r14, 0x0683
    2604:	f0 90 84 06 	lds	r15, 0x0684
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2608:	c0 92 4e 06 	sts	0x064E, r12
    260c:	d0 92 4f 06 	sts	0x064F, r13
    2610:	e0 92 50 06 	sts	0x0650, r14
    2614:	f0 92 51 06 	sts	0x0651, r15
					writeBuffer(9,UI.navigationcolor);		/*  */
				break;
				
				case BARR:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					if (device.distance>=1)
    2618:	80 90 9f 06 	lds	r8, 0x069F
    261c:	90 90 a0 06 	lds	r9, 0x06A0
    2620:	a0 90 a1 06 	lds	r10, 0x06A1
    2624:	b0 90 a2 06 	lds	r11, 0x06A2
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e8       	ldi	r20, 0x80	; 128
    262e:	5f e3       	ldi	r21, 0x3F	; 63
    2630:	c5 01       	movw	r24, r10
    2632:	b4 01       	movw	r22, r8
    2634:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
    2638:	88 23       	and	r24, r24
    263a:	84 f0       	brlt	.+32     	; 0x265c <refreshDisplay+0x3ac>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    263c:	c0 92 52 06 	sts	0x0652, r12
    2640:	d0 92 53 06 	sts	0x0653, r13
    2644:	e0 92 54 06 	sts	0x0654, r14
    2648:	f0 92 55 06 	sts	0x0655, r15
    264c:	c0 92 7a 06 	sts	0x067A, r12
    2650:	d0 92 7b 06 	sts	0x067B, r13
    2654:	e0 92 7c 06 	sts	0x067C, r14
    2658:	f0 92 7d 06 	sts	0x067D, r15
					if (device.distance>=1)
					{
						writeBuffer(2,UI.navigationcolor);		/*  */
						writeBuffer(12,UI.navigationcolor);		/*  */
					}
					if(device.distance>=2.5)
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	50 e4       	ldi	r21, 0x40	; 64
    2664:	c5 01       	movw	r24, r10
    2666:	b4 01       	movw	r22, r8
    2668:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
    266c:	88 23       	and	r24, r24
    266e:	84 f0       	brlt	.+32     	; 0x2690 <refreshDisplay+0x3e0>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2670:	c0 92 56 06 	sts	0x0656, r12
    2674:	d0 92 57 06 	sts	0x0657, r13
    2678:	e0 92 58 06 	sts	0x0658, r14
    267c:	f0 92 59 06 	sts	0x0659, r15
    2680:	c0 92 76 06 	sts	0x0676, r12
    2684:	d0 92 77 06 	sts	0x0677, r13
    2688:	e0 92 78 06 	sts	0x0678, r14
    268c:	f0 92 79 06 	sts	0x0679, r15
					if(device.distance>=2.5)
					{
						writeBuffer(3,UI.navigationcolor);		/*  */
						writeBuffer(11,UI.navigationcolor);		/*  */
					}
					if(device.distance>=5)
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 ea       	ldi	r20, 0xA0	; 160
    2696:	50 e4       	ldi	r21, 0x40	; 64
    2698:	c5 01       	movw	r24, r10
    269a:	b4 01       	movw	r22, r8
    269c:	0e 94 22 20 	call	0x4044	; 0x4044 <__gesf2>
    26a0:	88 23       	and	r24, r24
    26a2:	0c f4       	brge	.+2      	; 0x26a6 <refreshDisplay+0x3f6>
    26a4:	eb c0       	rjmp	.+470    	; 0x287c <refreshDisplay+0x5cc>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    26a6:	c0 92 5a 06 	sts	0x065A, r12
    26aa:	d0 92 5b 06 	sts	0x065B, r13
    26ae:	e0 92 5c 06 	sts	0x065C, r14
    26b2:	f0 92 5d 06 	sts	0x065D, r15
    26b6:	c0 92 72 06 	sts	0x0672, r12
    26ba:	d0 92 73 06 	sts	0x0673, r13
    26be:	e0 92 74 06 	sts	0x0674, r14
    26c2:	f0 92 75 06 	sts	0x0675, r15
    26c6:	da c0       	rjmp	.+436    	; 0x287c <refreshDisplay+0x5cc>
					}
				break;
				
				/* UI modes which depends on animations/cycles */
				case ANIMATION_1:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    26c8:	80 91 81 06 	lds	r24, 0x0681
    26cc:	90 91 82 06 	lds	r25, 0x0682
    26d0:	a0 91 83 06 	lds	r26, 0x0683
    26d4:	b0 91 84 06 	lds	r27, 0x0684
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    26d8:	80 93 4e 06 	sts	0x064E, r24
    26dc:	90 93 4f 06 	sts	0x064F, r25
    26e0:	a0 93 50 06 	sts	0x0650, r26
    26e4:	b0 93 51 06 	sts	0x0651, r27
				break;
				
				/* UI modes which depends on animations/cycles */
				case ANIMATION_1:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					switch(ui_counter)
    26e8:	20 91 df 05 	lds	r18, 0x05DF
    26ec:	21 30       	cpi	r18, 0x01	; 1
    26ee:	a9 f0       	breq	.+42     	; 0x271a <refreshDisplay+0x46a>
    26f0:	18 f0       	brcs	.+6      	; 0x26f8 <refreshDisplay+0x448>
    26f2:	22 30       	cpi	r18, 0x02	; 2
    26f4:	19 f1       	breq	.+70     	; 0x273c <refreshDisplay+0x48c>
    26f6:	34 c0       	rjmp	.+104    	; 0x2760 <refreshDisplay+0x4b0>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    26f8:	80 93 5a 06 	sts	0x065A, r24
    26fc:	90 93 5b 06 	sts	0x065B, r25
    2700:	a0 93 5c 06 	sts	0x065C, r26
    2704:	b0 93 5d 06 	sts	0x065D, r27
    2708:	80 93 72 06 	sts	0x0672, r24
    270c:	90 93 73 06 	sts	0x0673, r25
    2710:	a0 93 74 06 	sts	0x0674, r26
    2714:	b0 93 75 06 	sts	0x0675, r27
    2718:	54 c1       	rjmp	.+680    	; 0x29c2 <refreshDisplay+0x712>
    271a:	80 93 56 06 	sts	0x0656, r24
    271e:	90 93 57 06 	sts	0x0657, r25
    2722:	a0 93 58 06 	sts	0x0658, r26
    2726:	b0 93 59 06 	sts	0x0659, r27
    272a:	80 93 76 06 	sts	0x0676, r24
    272e:	90 93 77 06 	sts	0x0677, r25
    2732:	a0 93 78 06 	sts	0x0678, r26
    2736:	b0 93 79 06 	sts	0x0679, r27
    273a:	43 c1       	rjmp	.+646    	; 0x29c2 <refreshDisplay+0x712>
    273c:	80 93 52 06 	sts	0x0652, r24
    2740:	90 93 53 06 	sts	0x0653, r25
    2744:	a0 93 54 06 	sts	0x0654, r26
    2748:	b0 93 55 06 	sts	0x0655, r27
    274c:	80 93 7a 06 	sts	0x067A, r24
    2750:	90 93 7b 06 	sts	0x067B, r25
    2754:	a0 93 7c 06 	sts	0x067C, r26
    2758:	b0 93 7d 06 	sts	0x067D, r27
						
						default:
						break;
					}
					ui_counter++;
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <refreshDisplay+0x4b8>
						break;
						
						default:
						break;
					}
					ui_counter++;
    2760:	2f 5f       	subi	r18, 0xFF	; 255
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
    2762:	23 30       	cpi	r18, 0x03	; 3
    2764:	08 f0       	brcs	.+2      	; 0x2768 <refreshDisplay+0x4b8>
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	20 93 df 05 	sts	0x05DF, r18
				break;
    276c:	87 c0       	rjmp	.+270    	; 0x287c <refreshDisplay+0x5cc>
				
				case ANIMATION_2:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
    276e:	80 91 81 06 	lds	r24, 0x0681
    2772:	90 91 82 06 	lds	r25, 0x0682
    2776:	a0 91 83 06 	lds	r26, 0x0683
    277a:	b0 91 84 06 	lds	r27, 0x0684
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    277e:	80 93 4e 06 	sts	0x064E, r24
    2782:	90 93 4f 06 	sts	0x064F, r25
    2786:	a0 93 50 06 	sts	0x0650, r26
    278a:	b0 93 51 06 	sts	0x0651, r27
					ui_counter = (ui_counter>=3) ? 0: ui_counter;
				break;
				
				case ANIMATION_2:
					writeBuffer(1,UI.navigationcolor);			/* Pointer to destination */
					switch(ui_counter)
    278e:	20 91 df 05 	lds	r18, 0x05DF
    2792:	21 30       	cpi	r18, 0x01	; 1
    2794:	b1 f1       	breq	.+108    	; 0x2802 <refreshDisplay+0x552>
    2796:	20 f0       	brcs	.+8      	; 0x27a0 <refreshDisplay+0x4f0>
    2798:	22 30       	cpi	r18, 0x02	; 2
    279a:	09 f4       	brne	.+2      	; 0x279e <refreshDisplay+0x4ee>
    279c:	53 c0       	rjmp	.+166    	; 0x2844 <refreshDisplay+0x594>
    279e:	63 c0       	rjmp	.+198    	; 0x2866 <refreshDisplay+0x5b6>
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    27a0:	80 93 52 06 	sts	0x0652, r24
    27a4:	90 93 53 06 	sts	0x0653, r25
    27a8:	a0 93 54 06 	sts	0x0654, r26
    27ac:	b0 93 55 06 	sts	0x0655, r27
    27b0:	80 93 56 06 	sts	0x0656, r24
    27b4:	90 93 57 06 	sts	0x0657, r25
    27b8:	a0 93 58 06 	sts	0x0658, r26
    27bc:	b0 93 59 06 	sts	0x0659, r27
    27c0:	80 93 5a 06 	sts	0x065A, r24
    27c4:	90 93 5b 06 	sts	0x065B, r25
    27c8:	a0 93 5c 06 	sts	0x065C, r26
    27cc:	b0 93 5d 06 	sts	0x065D, r27
    27d0:	80 93 72 06 	sts	0x0672, r24
    27d4:	90 93 73 06 	sts	0x0673, r25
    27d8:	a0 93 74 06 	sts	0x0674, r26
    27dc:	b0 93 75 06 	sts	0x0675, r27
    27e0:	80 93 76 06 	sts	0x0676, r24
    27e4:	90 93 77 06 	sts	0x0677, r25
    27e8:	a0 93 78 06 	sts	0x0678, r26
    27ec:	b0 93 79 06 	sts	0x0679, r27
    27f0:	80 93 7a 06 	sts	0x067A, r24
    27f4:	90 93 7b 06 	sts	0x067B, r25
    27f8:	a0 93 7c 06 	sts	0x067C, r26
    27fc:	b0 93 7d 06 	sts	0x067D, r27
    2800:	e2 c0       	rjmp	.+452    	; 0x29c6 <refreshDisplay+0x716>
    2802:	80 93 52 06 	sts	0x0652, r24
    2806:	90 93 53 06 	sts	0x0653, r25
    280a:	a0 93 54 06 	sts	0x0654, r26
    280e:	b0 93 55 06 	sts	0x0655, r27
    2812:	80 93 56 06 	sts	0x0656, r24
    2816:	90 93 57 06 	sts	0x0657, r25
    281a:	a0 93 58 06 	sts	0x0658, r26
    281e:	b0 93 59 06 	sts	0x0659, r27
    2822:	80 93 76 06 	sts	0x0676, r24
    2826:	90 93 77 06 	sts	0x0677, r25
    282a:	a0 93 78 06 	sts	0x0678, r26
    282e:	b0 93 79 06 	sts	0x0679, r27
    2832:	80 93 7a 06 	sts	0x067A, r24
    2836:	90 93 7b 06 	sts	0x067B, r25
    283a:	a0 93 7c 06 	sts	0x067C, r26
    283e:	b0 93 7d 06 	sts	0x067D, r27
    2842:	c1 c0       	rjmp	.+386    	; 0x29c6 <refreshDisplay+0x716>
    2844:	80 93 52 06 	sts	0x0652, r24
    2848:	90 93 53 06 	sts	0x0653, r25
    284c:	a0 93 54 06 	sts	0x0654, r26
    2850:	b0 93 55 06 	sts	0x0655, r27
    2854:	80 93 7a 06 	sts	0x067A, r24
    2858:	90 93 7b 06 	sts	0x067B, r25
    285c:	a0 93 7c 06 	sts	0x067C, r26
    2860:	b0 93 7d 06 	sts	0x067D, r27
    2864:	b0 c0       	rjmp	.+352    	; 0x29c6 <refreshDisplay+0x716>
						break;
						
						default:
						break;
					}
					ui_counter++;
    2866:	2f 5f       	subi	r18, 0xFF	; 255
					ui_counter = (ui_counter>=4) ? 0 : ui_counter;
    2868:	24 30       	cpi	r18, 0x04	; 4
    286a:	08 f0       	brcs	.+2      	; 0x286e <refreshDisplay+0x5be>
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	20 93 df 05 	sts	0x05DF, r18
				break;
    2872:	04 c0       	rjmp	.+8      	; 0x287c <refreshDisplay+0x5cc>
				
				default:
					uart_puts("default error in UI case!\n");
    2874:	8e e0       	ldi	r24, 0x0E	; 14
    2876:	94 e0       	ldi	r25, 0x04	; 4
    2878:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			if (UI.shownorth)		/* Add north to display */
			{
				//????writeBuffer(1-(rotation_deg/DEGREE_PER_PIXEL), BLUE, TRUE);
			}
			
			if (UI.showdistance)	/* Add distance (KM's) to display */
    287c:	80 91 86 06 	lds	r24, 0x0686
    2880:	88 23       	and	r24, r24
    2882:	09 f4       	brne	.+2      	; 0x2886 <refreshDisplay+0x5d6>
    2884:	92 c0       	rjmp	.+292    	; 0x29aa <refreshDisplay+0x6fa>
			{
				/*for (uint8_t i = 2; i < (device.distance/PERCENT_PER_PIXEL)+1; i++) {
					writeBuffer(i, VIOLET, TRUE);
				}*/
				uart_puts("TODO SHOW UI DISTANCE\n");	
    2886:	89 e2       	ldi	r24, 0x29	; 41
    2888:	94 e0       	ldi	r25, 0x04	; 4
    288a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    288e:	8d c0       	rjmp	.+282    	; 0x29aa <refreshDisplay+0x6fa>
			}
		break;
		
		case AT_LOCATION:	/* Arrived at location */
			// Do some animation and wait for the button to be pressed..
			ui_counter++;
    2890:	30 91 df 05 	lds	r19, 0x05DF
    2894:	21 e0       	ldi	r18, 0x01	; 1
    2896:	23 0f       	add	r18, r19
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2898:	e2 2f       	mov	r30, r18
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	ee 0f       	add	r30, r30
    289e:	ff 1f       	adc	r31, r31
    28a0:	ee 0f       	add	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	e6 5b       	subi	r30, 0xB6	; 182
    28a6:	f9 4f       	sbci	r31, 0xF9	; 249
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	af ef       	ldi	r26, 0xFF	; 255
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	80 83       	st	Z, r24
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	a2 83       	std	Z+2, r26	; 0x02
    28b6:	b3 83       	std	Z+3, r27	; 0x03
			// Do some animation and wait for the button to be pressed..
			ui_counter++;
			
			writeBuffer(ui_counter,RED);
			
			if (ui_counter<4)	{writeBuffer(ui_counter+9,ORANGE);}
    28b8:	24 30       	cpi	r18, 0x04	; 4
    28ba:	90 f4       	brcc	.+36     	; 0x28e0 <refreshDisplay+0x630>
    28bc:	ea e0       	ldi	r30, 0x0A	; 10
    28be:	e3 0f       	add	r30, r19
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	ee 0f       	add	r30, r30
    28c4:	ff 1f       	adc	r31, r31
    28c6:	ee 0f       	add	r30, r30
    28c8:	ff 1f       	adc	r31, r31
    28ca:	e6 5b       	subi	r30, 0xB6	; 182
    28cc:	f9 4f       	sbci	r31, 0xF9	; 249
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	94 e6       	ldi	r25, 0x64	; 100
    28d2:	af ef       	ldi	r26, 0xFF	; 255
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
    28de:	11 c0       	rjmp	.+34     	; 0x2902 <refreshDisplay+0x652>
			ui_counter++;
			
			writeBuffer(ui_counter,RED);
			
			if (ui_counter<4)	{writeBuffer(ui_counter+9,ORANGE);}
			else {writeBuffer(ui_counter-3,ORANGE);}
    28e0:	ee ef       	ldi	r30, 0xFE	; 254
    28e2:	e3 0f       	add	r30, r19
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    28e4:	f0 e0       	ldi	r31, 0x00	; 0
    28e6:	ee 0f       	add	r30, r30
    28e8:	ff 1f       	adc	r31, r31
    28ea:	ee 0f       	add	r30, r30
    28ec:	ff 1f       	adc	r31, r31
    28ee:	e6 5b       	subi	r30, 0xB6	; 182
    28f0:	f9 4f       	sbci	r31, 0xF9	; 249
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	94 e6       	ldi	r25, 0x64	; 100
    28f6:	af ef       	ldi	r26, 0xFF	; 255
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	80 83       	st	Z, r24
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	a2 83       	std	Z+2, r26	; 0x02
    2900:	b3 83       	std	Z+3, r27	; 0x03
			writeBuffer(ui_counter,RED);
			
			if (ui_counter<4)	{writeBuffer(ui_counter+9,ORANGE);}
			else {writeBuffer(ui_counter-3,ORANGE);}
				
			if (ui_counter<7)	{writeBuffer(ui_counter+6,GREEN);}
    2902:	27 30       	cpi	r18, 0x07	; 7
    2904:	90 f4       	brcc	.+36     	; 0x292a <refreshDisplay+0x67a>
    2906:	e7 e0       	ldi	r30, 0x07	; 7
    2908:	e3 0f       	add	r30, r19
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	ee 0f       	add	r30, r30
    290e:	ff 1f       	adc	r31, r31
    2910:	ee 0f       	add	r30, r30
    2912:	ff 1f       	adc	r31, r31
    2914:	e6 5b       	subi	r30, 0xB6	; 182
    2916:	f9 4f       	sbci	r31, 0xF9	; 249
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	9f ef       	ldi	r25, 0xFF	; 255
    291c:	a0 e0       	ldi	r26, 0x00	; 0
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	80 83       	st	Z, r24
    2922:	91 83       	std	Z+1, r25	; 0x01
    2924:	a2 83       	std	Z+2, r26	; 0x02
    2926:	b3 83       	std	Z+3, r27	; 0x03
    2928:	11 c0       	rjmp	.+34     	; 0x294c <refreshDisplay+0x69c>
			
			if (ui_counter<4)	{writeBuffer(ui_counter+9,ORANGE);}
			else {writeBuffer(ui_counter-3,ORANGE);}
				
			if (ui_counter<7)	{writeBuffer(ui_counter+6,GREEN);}
			else {writeBuffer(ui_counter-6,GREEN);}
    292a:	eb ef       	ldi	r30, 0xFB	; 251
    292c:	e3 0f       	add	r30, r19
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    292e:	f0 e0       	ldi	r31, 0x00	; 0
    2930:	ee 0f       	add	r30, r30
    2932:	ff 1f       	adc	r31, r31
    2934:	ee 0f       	add	r30, r30
    2936:	ff 1f       	adc	r31, r31
    2938:	e6 5b       	subi	r30, 0xB6	; 182
    293a:	f9 4f       	sbci	r31, 0xF9	; 249
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	9f ef       	ldi	r25, 0xFF	; 255
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	80 83       	st	Z, r24
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	a2 83       	std	Z+2, r26	; 0x02
    294a:	b3 83       	std	Z+3, r27	; 0x03
			else {writeBuffer(ui_counter-3,ORANGE);}
				
			if (ui_counter<7)	{writeBuffer(ui_counter+6,GREEN);}
			else {writeBuffer(ui_counter-6,GREEN);}
				
			if (ui_counter<10)	{writeBuffer(ui_counter+3,LIGHT_BLUE);}
    294c:	2a 30       	cpi	r18, 0x0A	; 10
    294e:	90 f4       	brcc	.+36     	; 0x2974 <refreshDisplay+0x6c4>
    2950:	3c 5f       	subi	r19, 0xFC	; 252
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2952:	e3 2f       	mov	r30, r19
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	ee 0f       	add	r30, r30
    2958:	ff 1f       	adc	r31, r31
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	e6 5b       	subi	r30, 0xB6	; 182
    2960:	f9 4f       	sbci	r31, 0xF9	; 249
    2962:	8f ef       	ldi	r24, 0xFF	; 255
    2964:	94 e6       	ldi	r25, 0x64	; 100
    2966:	a0 e0       	ldi	r26, 0x00	; 0
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	80 83       	st	Z, r24
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	a2 83       	std	Z+2, r26	; 0x02
    2970:	b3 83       	std	Z+3, r27	; 0x03
    2972:	11 c0       	rjmp	.+34     	; 0x2996 <refreshDisplay+0x6e6>
				
			if (ui_counter<7)	{writeBuffer(ui_counter+6,GREEN);}
			else {writeBuffer(ui_counter-6,GREEN);}
				
			if (ui_counter<10)	{writeBuffer(ui_counter+3,LIGHT_BLUE);}
			else {writeBuffer(ui_counter-9,LIGHT_BLUE);}	
    2974:	38 50       	subi	r19, 0x08	; 8
			
			uiBuffer[n] = ((uint32_t)red_res << 16) | ((uint32_t)green_res <<  8) | blue_res;
		}
		else*/
		//{
			uiBuffer[n] = color;	
    2976:	e3 2f       	mov	r30, r19
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	ee 0f       	add	r30, r30
    297c:	ff 1f       	adc	r31, r31
    297e:	ee 0f       	add	r30, r30
    2980:	ff 1f       	adc	r31, r31
    2982:	e6 5b       	subi	r30, 0xB6	; 182
    2984:	f9 4f       	sbci	r31, 0xF9	; 249
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	94 e6       	ldi	r25, 0x64	; 100
    298a:	a0 e0       	ldi	r26, 0x00	; 0
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	80 83       	st	Z, r24
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	a2 83       	std	Z+2, r26	; 0x02
    2994:	b3 83       	std	Z+3, r27	; 0x03
			else {writeBuffer(ui_counter-6,GREEN);}
				
			if (ui_counter<10)	{writeBuffer(ui_counter+3,LIGHT_BLUE);}
			else {writeBuffer(ui_counter-9,LIGHT_BLUE);}	
			
			ui_counter = (ui_counter>=12) ? 0 : ui_counter;
    2996:	2c 30       	cpi	r18, 0x0C	; 12
    2998:	08 f0       	brcs	.+2      	; 0x299c <refreshDisplay+0x6ec>
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	20 93 df 05 	sts	0x05DF, r18
		break;
    29a0:	04 c0       	rjmp	.+8      	; 0x29aa <refreshDisplay+0x6fa>
		
		default:
		uart_puts("UNKNOWN status!\n");
    29a2:	80 e4       	ldi	r24, 0x40	; 64
    29a4:	94 e0       	ldi	r25, 0x04	; 4
    29a6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		uart_puts(" calc rotation = ");
		print_int(rotation_deg,1);*/
		// 45 = 0 + 45
		// 165 = 120 + 45
		// 400 (wanted = ) = 355 + 45
		writeFrame(rotation_deg, 0);	/* Write buffer to display */
    29aa:	60 e0       	ldi	r22, 0x00	; 0
    29ac:	70 e0       	ldi	r23, 0x00	; 0
    29ae:	ce 01       	movw	r24, r28
    29b0:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <writeFrame>
		UI.refresh = FALSE;
    29b4:	10 92 7e 06 	sts	0x067E, r1
    29b8:	08 c0       	rjmp	.+16     	; 0x29ca <refreshDisplay+0x71a>
				{
					device.buttonaction = SHORT_PRESS;	/* short press action */
				}
				if (button_counter>6)
				{
					device.buttonaction = MIDDLE_PRESS;	/* Middle press action */
    29ba:	82 e0       	ldi	r24, 0x02	; 2
    29bc:	80 93 a7 06 	sts	0x06A7, r24
    29c0:	03 cd       	rjmp	.-1530   	; 0x23c8 <refreshDisplay+0x118>
						break;
						
						default:
						break;
					}
					ui_counter++;
    29c2:	2f 5f       	subi	r18, 0xFF	; 255
    29c4:	d1 ce       	rjmp	.-606    	; 0x2768 <refreshDisplay+0x4b8>
						break;
						
						default:
						break;
					}
					ui_counter++;
    29c6:	2f 5f       	subi	r18, 0xFF	; 255
    29c8:	52 cf       	rjmp	.-348    	; 0x286e <refreshDisplay+0x5be>
		// 45 = 0 + 45
		// 165 = 120 + 45
		// 400 (wanted = ) = 355 + 45
		writeFrame(rotation_deg, 0);	/* Write buffer to display */
		UI.refresh = FALSE;
}
    29ca:	df 91       	pop	r29
    29cc:	cf 91       	pop	r28
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	ff 90       	pop	r15
    29d4:	ef 90       	pop	r14
    29d6:	df 90       	pop	r13
    29d8:	cf 90       	pop	r12
    29da:	bf 90       	pop	r11
    29dc:	af 90       	pop	r10
    29de:	9f 90       	pop	r9
    29e0:	8f 90       	pop	r8
    29e2:	08 95       	ret

000029e4 <buzzer>:

void buzzer(uint8_t status)
{
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
	uint8_t i;
	
	switch (status)
    29e8:	81 30       	cpi	r24, 0x01	; 1
    29ea:	31 f0       	breq	.+12     	; 0x29f8 <buzzer+0x14>
    29ec:	38 f0       	brcs	.+14     	; 0x29fc <buzzer+0x18>
    29ee:	82 30       	cpi	r24, 0x02	; 2
    29f0:	41 f0       	breq	.+16     	; 0x2a02 <buzzer+0x1e>
    29f2:	83 30       	cpi	r24, 0x03	; 3
    29f4:	a9 f0       	breq	.+42     	; 0x2a20 <buzzer+0x3c>
    29f6:	22 c0       	rjmp	.+68     	; 0x2a3c <buzzer+0x58>
	{
		case BUZZER_ON:
			PWR_OFF;
    29f8:	5e 98       	cbi	0x0b, 6	; 11
		break;
    29fa:	20 c0       	rjmp	.+64     	; 0x2a3c <buzzer+0x58>
		
		case BUZZER_OFF:
			PWR_ON;
    29fc:	80 e4       	ldi	r24, 0x40	; 64
    29fe:	8b b9       	out	0x0b, r24	; 11
		break;
    2a00:	1d c0       	rjmp	.+58     	; 0x2a3c <buzzer+0x58>

void buzzer(uint8_t status)
{
	uint8_t i;
	
	switch (status)
    2a02:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		
		case BUZZER_SHORT:
			for(i=0; i<3; i++)
			{
				PWR_ON;
    2a04:	d0 e4       	ldi	r29, 0x40	; 64
    2a06:	db b9       	out	0x0b, r29	; 11
				delay(250);
    2a08:	8a ef       	ldi	r24, 0xFA	; 250
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <delay>
				PWR_OFF;
    2a10:	5e 98       	cbi	0x0b, 6	; 11
				delay(250);
    2a12:	8a ef       	ldi	r24, 0xFA	; 250
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <delay>
    2a1a:	c1 50       	subi	r28, 0x01	; 1
		case BUZZER_OFF:
			PWR_ON;
		break;
		
		case BUZZER_SHORT:
			for(i=0; i<3; i++)
    2a1c:	a1 f7       	brne	.-24     	; 0x2a06 <buzzer+0x22>
    2a1e:	0e c0       	rjmp	.+28     	; 0x2a3c <buzzer+0x58>

void buzzer(uint8_t status)
{
	uint8_t i;
	
	switch (status)
    2a20:	c3 e0       	ldi	r28, 0x03	; 3
		break;
		
		case BUZZER_LONG:
		for(i=0; i<3; i++)
			{
				PWR_ON;
    2a22:	d0 e4       	ldi	r29, 0x40	; 64
    2a24:	db b9       	out	0x0b, r29	; 11
				delay(750);
    2a26:	8e ee       	ldi	r24, 0xEE	; 238
    2a28:	92 e0       	ldi	r25, 0x02	; 2
    2a2a:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <delay>
				PWR_OFF;
    2a2e:	5e 98       	cbi	0x0b, 6	; 11
				delay(500);
    2a30:	84 ef       	ldi	r24, 0xF4	; 244
    2a32:	91 e0       	ldi	r25, 0x01	; 1
    2a34:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <delay>
    2a38:	c1 50       	subi	r28, 0x01	; 1
				delay(250);
			}
		break;
		
		case BUZZER_LONG:
		for(i=0; i<3; i++)
    2a3a:	a1 f7       	brne	.-24     	; 0x2a24 <buzzer+0x40>
		break;
		
		default:
		break;
	}
}
    2a3c:	df 91       	pop	r29
    2a3e:	cf 91       	pop	r28
    2a40:	08 95       	ret

00002a42 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
    2a42:	9b 01       	movw	r18, r22
    2a44:	22 0f       	add	r18, r18
    2a46:	33 1f       	adc	r19, r19
    2a48:	62 0f       	add	r22, r18
    2a4a:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
    2a4c:	20 9a       	sbi	0x04, 0	; 4
  
  masklo	=~maskhi&ws2812_PORTREG;
    2a4e:	35 b1       	in	r19, 0x05	; 5
    2a50:	3e 7f       	andi	r19, 0xFE	; 254
  maskhi |=        ws2812_PORTREG;
    2a52:	45 b1       	in	r20, 0x05	; 5
    2a54:	41 60       	ori	r20, 0x01	; 1
  
  sreg_prev=SREG;
    2a56:	af b7       	in	r26, 0x3f	; 63
  cli();  
    2a58:	f8 94       	cli

  while (datlen--) {
    2a5a:	61 15       	cp	r22, r1
    2a5c:	71 05       	cpc	r23, r1
    2a5e:	89 f0       	breq	.+34     	; 0x2a82 <loop56+0x18>
    2a60:	fc 01       	movw	r30, r24
    2a62:	86 0f       	add	r24, r22
    2a64:	97 1f       	adc	r25, r23
    curbyte=*data++;
    2a66:	21 91       	ld	r18, Z+
    
    asm volatile(
    2a68:	58 e0       	ldi	r21, 0x08	; 8

00002a6a <loop56>:
    2a6a:	45 b9       	out	0x05, r20	; 5
    2a6c:	27 ff       	sbrs	r18, 7
    2a6e:	35 b9       	out	0x05, r19	; 5
    2a70:	22 0f       	add	r18, r18
    2a72:	00 00       	nop
    2a74:	00 c0       	rjmp	.+0      	; 0x2a76 <loop56+0xc>
    2a76:	35 b9       	out	0x05, r19	; 5
    2a78:	5a 95       	dec	r21
    2a7a:	b9 f7       	brne	.-18     	; 0x2a6a <loop56>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
    2a7c:	e8 17       	cp	r30, r24
    2a7e:	f9 07       	cpc	r31, r25
    2a80:	91 f7       	brne	.-28     	; 0x2a66 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
    2a82:	af bf       	out	0x3f, r26	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a84:	85 e8       	ldi	r24, 0x85	; 133
    2a86:	8a 95       	dec	r24
    2a88:	f1 f7       	brne	.-4      	; 0x2a86 <loop56+0x1c>
    2a8a:	00 00       	nop
    2a8c:	08 95       	ret

00002a8e <__vector_14>:
double mx = 0;
double my = 0;
double mz = 0;*/

ISR (TIMER0_COMPA_vect)  // timer0 overflow interrupt
{
    2a8e:	1f 92       	push	r1
    2a90:	0f 92       	push	r0
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	0f 92       	push	r0
    2a96:	11 24       	eor	r1, r1
    2a98:	8f 93       	push	r24
	volatile static uint8_t refresh_counter;
	refresh_counter++;
    2a9a:	80 91 e4 05 	lds	r24, 0x05E4
    2a9e:	8f 5f       	subi	r24, 0xFF	; 255
    2aa0:	80 93 e4 05 	sts	0x05E4, r24
	if (refresh_counter>=(DISPLAY_REFRESH_MS/INTERRUPT_DISPLAY_MS))
    2aa4:	80 91 e4 05 	lds	r24, 0x05E4
    2aa8:	83 30       	cpi	r24, 0x03	; 3
    2aaa:	28 f0       	brcs	.+10     	; 0x2ab6 <__vector_14+0x28>
	{
		UI.refresh = TRUE;
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	80 93 7e 06 	sts	0x067E, r24
		refresh_counter = 0;
    2ab2:	10 92 e4 05 	sts	0x05E4, r1
		//TEST_TOGGLE;
	}
}
    2ab6:	8f 91       	pop	r24
    2ab8:	0f 90       	pop	r0
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	0f 90       	pop	r0
    2abe:	1f 90       	pop	r1
    2ac0:	18 95       	reti

00002ac2 <init_io>:
	//DDRC &= ~(1 << PORTC4) | (1 << PORTC5);
	//PORTC = (1 << PORTC4) | (1 << PORTC5); // enable pull-ups on SDA and SCL, respectively
	
	//PWR_ON_INIT;				// Init power on pin
	
	SW_PIN_DDR &= ~(1<<SW_PIN);	// Buttons/switches as input
    2ac2:	57 98       	cbi	0x0a, 7	; 10
	SW_PIN_PORT |= (1<<SW_PIN);	// With pullups on
    2ac4:	5f 9a       	sbi	0x0b, 7	; 11
	
	CHARGE_ST_DDR &= ~(1<<CHARGE_ST_PIN);	// Charge status pin as input
    2ac6:	3a 98       	cbi	0x07, 2	; 7
	
	DDRC |= (1<<TEST_PIN);	// Init test pin as output
    2ac8:	3b 9a       	sbi	0x07, 3	; 7
	DDRB |= (1<<0);	// PB0 AS OUTPUT
    2aca:	20 9a       	sbi	0x04, 0	; 4
	BATT_PWR_INIT;	// Leds as output
    2acc:	39 9a       	sbi	0x07, 1	; 7
	BATT_PWR_OFF;	// Leds off
    2ace:	82 e0       	ldi	r24, 0x02	; 2
    2ad0:	88 b9       	out	0x08, r24	; 8
    2ad2:	08 95       	ret

00002ad4 <init_int>:
void init_int(void)
{
	//OCRn =  [ (clock_speed / Prescaler_value) * Desired_time_in_Seconds ] - 1
	
	//print_int((((F_CPU/1024)*(DISPLAY_REFRESH_MS/1000))-1),TRUE);
	TCCR0A |= (1 << WGM01);		// Set the Timer Mode to CTC
    2ad4:	84 b5       	in	r24, 0x24	; 36
    2ad6:	82 60       	ori	r24, 0x02	; 2
    2ad8:	84 bd       	out	0x24, r24	; 36
	//OCR0A = 125;				// Set the value that you want to count to 16ms
	OCR0A = (((((F_CPU/1024)*INTERRUPT_DISPLAY_MS)/1000))-1);
    2ada:	88 ef       	ldi	r24, 0xF8	; 248
    2adc:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 |= (1 << OCIE0A);			//Set the ISR COMPA vect
    2ade:	ee e6       	ldi	r30, 0x6E	; 110
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	82 60       	ori	r24, 0x02	; 2
    2ae6:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS00)|(1<<CS02);	// set prescaler to 1024 and start the timer
    2ae8:	85 b5       	in	r24, 0x25	; 37
    2aea:	85 60       	ori	r24, 0x05	; 5
    2aec:	85 bd       	out	0x25, r24	; 37
	sei();								//enable global interrupts
    2aee:	78 94       	sei
    2af0:	08 95       	ret

00002af2 <init_adc>:
}

void init_adc(void)
{
	ADMUX |= (1<<REFS0);						/* Select Vref=AVcc */
    2af2:	ec e7       	ldi	r30, 0x7C	; 124
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	80 81       	ld	r24, Z
    2af8:	80 64       	ori	r24, 0x40	; 64
    2afa:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	/* set prescaller to 128  */
    2afc:	ea e7       	ldi	r30, 0x7A	; 122
    2afe:	f0 e0       	ldi	r31, 0x00	; 0
    2b00:	80 81       	ld	r24, Z
    2b02:	87 60       	ori	r24, 0x07	; 7
    2b04:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN);						/* Enable ADC */
    2b06:	80 81       	ld	r24, Z
    2b08:	80 68       	ori	r24, 0x80	; 128
    2b0a:	80 83       	st	Z, r24
    2b0c:	08 95       	ret

00002b0e <read_adc>:
	* the binary representations of the numbers of the pins so we can
	* just 'OR' the pin's number with ADMUX to select that pin.
	* We first zero the four bits by setting ADMUX equal to its higher
	* four bits. */
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (adcx & 0x0F);
    2b0e:	ec e7       	ldi	r30, 0x7C	; 124
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	90 81       	ld	r25, Z
    2b14:	8f 70       	andi	r24, 0x0F	; 15
    2b16:	90 7f       	andi	r25, 0xF0	; 240
    2b18:	98 2b       	or	r25, r24
    2b1a:	90 83       	st	Z, r25
	
	/* This starts the conversion. */
	//single conversion mode
	ADCSRA |= (1<<ADSC);
    2b1c:	ea e7       	ldi	r30, 0x7A	; 122
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	80 64       	ori	r24, 0x40	; 64
    2b24:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	* is finished. It constantly checks ADCSRA's ADSC bit, which we just
	* set above, to see if it is still set. This bit is automatically
	* reset (zeroed) when the conversion is ready so if we do this in
	* a loop the loop will just go until the conversion is ready. */
	while( ADCSRA & (1<<ADSC) );
    2b26:	80 81       	ld	r24, Z
    2b28:	86 fd       	sbrc	r24, 6
    2b2a:	fd cf       	rjmp	.-6      	; 0x2b26 <read_adc+0x18>
	
	/* Finally, we return the converted value to the calling function. */
	return ADC;
    2b2c:	80 91 78 00 	lds	r24, 0x0078
    2b30:	90 91 79 00 	lds	r25, 0x0079
}
    2b34:	08 95       	ret

00002b36 <do_button_action>:
	uart_puts(" Z = "); print_float(mz, 1);
}*/

void do_button_action(void)
{
	switch (device.buttonaction)
    2b36:	80 91 a7 06 	lds	r24, 0x06A7
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	a1 f0       	breq	.+40     	; 0x2b66 <do_button_action+0x30>
    2b3e:	83 30       	cpi	r24, 0x03	; 3
    2b40:	11 f1       	breq	.+68     	; 0x2b86 <do_button_action+0x50>
    2b42:	81 30       	cpi	r24, 0x01	; 1
    2b44:	69 f5       	brne	.+90     	; 0x2ba0 <do_button_action+0x6a>
	{
		case SHORT_PRESS:	// Minus
			if (UI.displaymode>0)
    2b46:	80 91 7f 06 	lds	r24, 0x067F
    2b4a:	88 23       	and	r24, r24
    2b4c:	19 f0       	breq	.+6      	; 0x2b54 <do_button_action+0x1e>
			{
				UI.displaymode--;
    2b4e:	81 50       	subi	r24, 0x01	; 1
    2b50:	80 93 7f 06 	sts	0x067F, r24
			}
			
			if (debug_on)
    2b54:	80 91 da 05 	lds	r24, 0x05DA
    2b58:	88 23       	and	r24, r24
    2b5a:	31 f1       	breq	.+76     	; 0x2ba8 <do_button_action+0x72>
			{uart_puts("Short press action executed\n");}
    2b5c:	81 e5       	ldi	r24, 0x51	; 81
    2b5e:	94 e0       	ldi	r25, 0x04	; 4
    2b60:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    2b64:	21 c0       	rjmp	.+66     	; 0x2ba8 <do_button_action+0x72>
		break;
		
		case MIDDLE_PRESS:	// Plus
			if (UI.displaymode<7)
    2b66:	80 91 7f 06 	lds	r24, 0x067F
    2b6a:	87 30       	cpi	r24, 0x07	; 7
    2b6c:	18 f4       	brcc	.+6      	; 0x2b74 <do_button_action+0x3e>
			{
				UI.displaymode++;
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	80 93 7f 06 	sts	0x067F, r24
			}
			
			if (debug_on)
    2b74:	80 91 da 05 	lds	r24, 0x05DA
    2b78:	88 23       	and	r24, r24
    2b7a:	b1 f0       	breq	.+44     	; 0x2ba8 <do_button_action+0x72>
			{uart_puts("Middle press action executed\n");}
    2b7c:	8e e6       	ldi	r24, 0x6E	; 110
    2b7e:	94 e0       	ldi	r25, 0x04	; 4
    2b80:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    2b84:	11 c0       	rjmp	.+34     	; 0x2ba8 <do_button_action+0x72>
		break;
		
		case LONG_PRESS:
			uart_puts("next\n");			// Found coordinate, go to new one in App			
    2b86:	8c e8       	ldi	r24, 0x8C	; 140
    2b88:	94 e0       	ldi	r25, 0x04	; 4
    2b8a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
			if (debug_on)
    2b8e:	80 91 da 05 	lds	r24, 0x05DA
    2b92:	88 23       	and	r24, r24
    2b94:	49 f0       	breq	.+18     	; 0x2ba8 <do_button_action+0x72>
			{uart_puts("Long press action executed\n");}	
    2b96:	82 e9       	ldi	r24, 0x92	; 146
    2b98:	94 e0       	ldi	r25, 0x04	; 4
    2b9a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    2b9e:	04 c0       	rjmp	.+8      	; 0x2ba8 <do_button_action+0x72>
		break;
		
		default:
			uart_puts("Error in button press! (fix!)\n");
    2ba0:	8e ea       	ldi	r24, 0xAE	; 174
    2ba2:	94 e0       	ldi	r25, 0x04	; 4
    2ba4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
	}
	device.buttonaction = FALSE;
    2ba8:	10 92 a7 06 	sts	0x06A7, r1
    2bac:	08 95       	ret

00002bae <print_status>:
}

void print_status(void)
{
	uart_puts("Device status = ");
    2bae:	8d ec       	ldi	r24, 0xCD	; 205
    2bb0:	94 e0       	ldi	r25, 0x04	; 4
    2bb2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	switch (read_device_status())
    2bb6:	80 91 aa 06 	lds	r24, 0x06AA
    2bba:	82 30       	cpi	r24, 0x02	; 2
    2bbc:	81 f0       	breq	.+32     	; 0x2bde <print_status+0x30>
    2bbe:	28 f4       	brcc	.+10     	; 0x2bca <print_status+0x1c>
    2bc0:	88 23       	and	r24, r24
    2bc2:	b9 f0       	breq	.+46     	; 0x2bf2 <print_status+0x44>
    2bc4:	81 30       	cpi	r24, 0x01	; 1
    2bc6:	81 f0       	breq	.+32     	; 0x2be8 <print_status+0x3a>
    2bc8:	1e c0       	rjmp	.+60     	; 0x2c06 <print_status+0x58>
    2bca:	83 30       	cpi	r24, 0x03	; 3
    2bcc:	19 f0       	breq	.+6      	; 0x2bd4 <print_status+0x26>
    2bce:	84 30       	cpi	r24, 0x04	; 4
    2bd0:	a9 f0       	breq	.+42     	; 0x2bfc <print_status+0x4e>
    2bd2:	19 c0       	rjmp	.+50     	; 0x2c06 <print_status+0x58>
	{
		case NO_CONNECTION:
			uart_puts("NO CONNECTION\n");
    2bd4:	8e ed       	ldi	r24, 0xDE	; 222
    2bd6:	94 e0       	ldi	r25, 0x04	; 4
    2bd8:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
    2bdc:	08 95       	ret
		
		case NAVIGATING:
			uart_puts("NAVIGATING\n");
    2bde:	8d ee       	ldi	r24, 0xED	; 237
    2be0:	94 e0       	ldi	r25, 0x04	; 4
    2be2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
    2be6:	08 95       	ret
		
		case BUTTON_PRESSED:
			uart_puts("BUTTON PRESSED\n");
    2be8:	89 ef       	ldi	r24, 0xF9	; 249
    2bea:	94 e0       	ldi	r25, 0x04	; 4
    2bec:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
    2bf0:	08 95       	ret
		
		case BUTTON_NOT_PRESSED:
			uart_puts("BUTTON NOT PRESSED\n");
    2bf2:	89 e0       	ldi	r24, 0x09	; 9
    2bf4:	95 e0       	ldi	r25, 0x05	; 5
    2bf6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
    2bfa:	08 95       	ret
		
		case AT_LOCATION:
		uart_puts("AT_LOCATION\n");
    2bfc:	8d e1       	ldi	r24, 0x1D	; 29
    2bfe:	95 e0       	ldi	r25, 0x05	; 5
    2c00:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		break;
    2c04:	08 95       	ret
		
		default:
			uart_puts("ERROR!\n");
    2c06:	8a e2       	ldi	r24, 0x2A	; 42
    2c08:	95 e0       	ldi	r25, 0x05	; 5
    2c0a:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
    2c0e:	08 95       	ret

00002c10 <filtered_compass_reading>:
		break;
	}
}

uint16_t filtered_compass_reading(uint16_t heading_current)
{
    2c10:	cf 92       	push	r12
    2c12:	df 92       	push	r13
    2c14:	ef 92       	push	r14
    2c16:	ff 92       	push	r15
    2c18:	0f 93       	push	r16
    2c1a:	1f 93       	push	r17
    2c1c:	cf 93       	push	r28
    2c1e:	df 93       	push	r29
    2c20:	7c 01       	movw	r14, r24
	int16_t heading_new = get_heading_avg(100);
    2c22:	84 e6       	ldi	r24, 0x64	; 100
    2c24:	0e 94 87 06 	call	0xd0e	; 0xd0e <get_heading_avg>
    2c28:	ec 01       	movw	r28, r24
	uint16_t difference = 0;
	static uint16_t error_counter = 0;
	int error = 0;
	
	if (heading_current>heading_new)
    2c2a:	8e 15       	cp	r24, r14
    2c2c:	9f 05       	cpc	r25, r15
    2c2e:	20 f4       	brcc	.+8      	; 0x2c38 <filtered_compass_reading+0x28>
	{
		difference = heading_current - heading_new;
    2c30:	87 01       	movw	r16, r14
    2c32:	08 1b       	sub	r16, r24
    2c34:	19 0b       	sbc	r17, r25
    2c36:	03 c0       	rjmp	.+6      	; 0x2c3e <filtered_compass_reading+0x2e>
	}
	else
	{
		difference = heading_new - heading_current;
    2c38:	8c 01       	movw	r16, r24
    2c3a:	0e 19       	sub	r16, r14
    2c3c:	1f 09       	sbc	r17, r15
	}
	if (difference>180)
    2c3e:	05 3b       	cpi	r16, 0xB5	; 181
    2c40:	11 05       	cpc	r17, r1
    2c42:	10 f0       	brcs	.+4      	; 0x2c48 <filtered_compass_reading+0x38>
	{
		difference -= 360;	// for angles > 180 correct in the opposite direction
    2c44:	08 56       	subi	r16, 0x68	; 104
    2c46:	11 40       	sbci	r17, 0x01	; 1
	}
	
	error = difference;
    2c48:	68 01       	movw	r12, r16
		{
			difference = (heading_current+360)-heading_new;
		}
	}*/
	
	if (debug_on)
    2c4a:	80 91 da 05 	lds	r24, 0x05DA
    2c4e:	88 23       	and	r24, r24
    2c50:	01 f1       	breq	.+64     	; 0x2c92 <filtered_compass_reading+0x82>
	{
		uart_puts("Current: ");
    2c52:	82 e3       	ldi	r24, 0x32	; 50
    2c54:	95 e0       	ldi	r25, 0x05	; 5
    2c56:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(heading_current,FALSE);
    2c5a:	60 e0       	ldi	r22, 0x00	; 0
    2c5c:	c7 01       	movw	r24, r14
    2c5e:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		uart_puts(" New: ");
    2c62:	8c e3       	ldi	r24, 0x3C	; 60
    2c64:	95 e0       	ldi	r25, 0x05	; 5
    2c66:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(heading_new,FALSE);
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	ce 01       	movw	r24, r28
    2c6e:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		uart_puts(" Difference: ");
    2c72:	83 e4       	ldi	r24, 0x43	; 67
    2c74:	95 e0       	ldi	r25, 0x05	; 5
    2c76:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(difference,FALSE);
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	c8 01       	movw	r24, r16
    2c7e:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
		uart_puts(" Error: ");
    2c82:	81 e5       	ldi	r24, 0x51	; 81
    2c84:	95 e0       	ldi	r25, 0x05	; 5
    2c86:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		print_int(error,FALSE);
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	c8 01       	movw	r24, r16
    2c8e:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	}
	
	//print_int(heading_current,TRUE);
	
	if ((error>SENSOR_THRESHOLD)&&(error_counter<ERROR_THRESHOLD_NR))
    2c92:	8b e5       	ldi	r24, 0x5B	; 91
    2c94:	c8 16       	cp	r12, r24
    2c96:	d1 04       	cpc	r13, r1
    2c98:	d4 f0       	brlt	.+52     	; 0x2cce <filtered_compass_reading+0xbe>
    2c9a:	80 91 e2 05 	lds	r24, 0x05E2
    2c9e:	90 91 e3 05 	lds	r25, 0x05E3
    2ca2:	49 97       	sbiw	r24, 0x19	; 25
    2ca4:	a0 f4       	brcc	.+40     	; 0x2cce <filtered_compass_reading+0xbe>
	{
		if (debug_on)
    2ca6:	80 91 da 05 	lds	r24, 0x05DA
    2caa:	88 23       	and	r24, r24
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <filtered_compass_reading+0xa6>
		{uart_puts(" Outlier!\n");}
    2cae:	8a e5       	ldi	r24, 0x5A	; 90
    2cb0:	95 e0       	ldi	r25, 0x05	; 5
    2cb2:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		error_counter++;
    2cb6:	80 91 e2 05 	lds	r24, 0x05E2
    2cba:	90 91 e3 05 	lds	r25, 0x05E3
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	90 93 e3 05 	sts	0x05E3, r25
    2cc4:	80 93 e2 05 	sts	0x05E2, r24
		return (heading_current);	// data was an outlier	
    2cc8:	8e 2d       	mov	r24, r14
    2cca:	9f 2d       	mov	r25, r15
    2ccc:	0e c0       	rjmp	.+28     	; 0x2cea <filtered_compass_reading+0xda>
	}
	else
	{
		if (debug_on)
    2cce:	80 91 da 05 	lds	r24, 0x05DA
    2cd2:	88 23       	and	r24, r24
    2cd4:	21 f0       	breq	.+8      	; 0x2cde <filtered_compass_reading+0xce>
		{uart_puts(" OK\n");}
    2cd6:	8e e7       	ldi	r24, 0x7E	; 126
    2cd8:	95 e0       	ldi	r25, 0x05	; 5
    2cda:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		error_counter=0;
    2cde:	10 92 e3 05 	sts	0x05E3, r1
    2ce2:	10 92 e2 05 	sts	0x05E2, r1
		return (heading_new);
    2ce6:	8c 2f       	mov	r24, r28
    2ce8:	9d 2f       	mov	r25, r29
	}
}
    2cea:	df 91       	pop	r29
    2cec:	cf 91       	pop	r28
    2cee:	1f 91       	pop	r17
    2cf0:	0f 91       	pop	r16
    2cf2:	ff 90       	pop	r15
    2cf4:	ef 90       	pop	r14
    2cf6:	df 90       	pop	r13
    2cf8:	cf 90       	pop	r12
    2cfa:	08 95       	ret

00002cfc <load_eeprom_settings>:
	return heading_total;
}*/

void load_eeprom_settings(void)
{
	UI.brightness = eeprom_read_word(&eeprom_brightness);
    2cfc:	8a e0       	ldi	r24, 0x0A	; 10
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	0e 94 82 23 	call	0x4704	; 0x4704 <__eerd_word_m328p>
    2d04:	80 93 80 06 	sts	0x0680, r24
	UI.displaymode = eeprom_read_word(&eeprom_displaymode);
    2d08:	88 e0       	ldi	r24, 0x08	; 8
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0e 94 82 23 	call	0x4704	; 0x4704 <__eerd_word_m328p>
    2d10:	80 93 7f 06 	sts	0x067F, r24
	UI.navigationcolor = eeprom_read_dword(&eeprom_navigationcolor);
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <__eerd_dword_m328p>
    2d1c:	60 93 81 06 	sts	0x0681, r22
    2d20:	70 93 82 06 	sts	0x0682, r23
    2d24:	80 93 83 06 	sts	0x0683, r24
    2d28:	90 93 84 06 	sts	0x0684, r25
	UI.showdistance = eeprom_read_word(&eeprom_showdistance);
    2d2c:	86 e0       	ldi	r24, 0x06	; 6
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	0e 94 82 23 	call	0x4704	; 0x4704 <__eerd_word_m328p>
    2d34:	80 93 86 06 	sts	0x0686, r24
	UI.shownorth = eeprom_read_word(&eeprom_shownorth);
    2d38:	84 e0       	ldi	r24, 0x04	; 4
    2d3a:	90 e0       	ldi	r25, 0x00	; 0
    2d3c:	0e 94 82 23 	call	0x4704	; 0x4704 <__eerd_word_m328p>
    2d40:	80 93 85 06 	sts	0x0685, r24
    2d44:	08 95       	ret

00002d46 <reset_factory_settings>:
}

void reset_factory_settings(void)
{
	setBrightness(45);				/* Set brightness of leds */
    2d46:	8d e2       	ldi	r24, 0x2D	; 45
    2d48:	0e 94 10 10 	call	0x2020	; 0x2020 <setBrightness>
	setUIMode(NORMAL);				/* Set display modus */
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	0e 94 e7 10 	call	0x21ce	; 0x21ce <setUIMode>
	UI.navigationcolor = YELLOW;	/* Set color of navigation */
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	6f ef       	ldi	r22, 0xFF	; 255
    2d56:	88 ec       	ldi	r24, 0xC8	; 200
    2d58:	0e 94 01 10 	call	0x2002	; 0x2002 <Color>
    2d5c:	60 93 81 06 	sts	0x0681, r22
    2d60:	70 93 82 06 	sts	0x0682, r23
    2d64:	80 93 83 06 	sts	0x0683, r24
    2d68:	90 93 84 06 	sts	0x0684, r25
	UI.showdistance = FALSE;
    2d6c:	10 92 86 06 	sts	0x0686, r1
	UI.shownorth = FALSE;
    2d70:	10 92 85 06 	sts	0x0685, r1
	
	/* Save values in EEPROM */
	eeprom_update_word(&eeprom_brightness, getBrightness());
    2d74:	0e 94 14 10 	call	0x2028	; 0x2028 <getBrightness>
    2d78:	68 2f       	mov	r22, r24
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	8a e0       	ldi	r24, 0x0A	; 10
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
	eeprom_update_word(&eeprom_displaymode, getUIMode());
    2d84:	0e 94 06 11 	call	0x220c	; 0x220c <getUIMode>
    2d88:	68 2f       	mov	r22, r24
    2d8a:	70 e0       	ldi	r23, 0x00	; 0
    2d8c:	88 e0       	ldi	r24, 0x08	; 8
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
	eeprom_update_dword(&eeprom_navigationcolor, YELLOW);	/* 32 bits! */
    2d94:	40 e0       	ldi	r20, 0x00	; 0
    2d96:	6f ef       	ldi	r22, 0xFF	; 255
    2d98:	88 ec       	ldi	r24, 0xC8	; 200
    2d9a:	0e 94 01 10 	call	0x2002	; 0x2002 <Color>
    2d9e:	ab 01       	movw	r20, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	0e 94 88 23 	call	0x4710	; 0x4710 <__eeupd_dword_m328p>
	eeprom_update_word(&eeprom_showdistance, FALSE);
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	86 e0       	ldi	r24, 0x06	; 6
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
	eeprom_update_word(&eeprom_shownorth, FALSE);
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	84 e0       	ldi	r24, 0x04	; 4
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
    2dc2:	08 95       	ret

00002dc4 <set_initial_device_status>:
	return eeprom_read_word(&param);
}

void set_initial_device_status(void)
{
	device.status = NO_CONNECTION;
    2dc4:	83 e0       	ldi	r24, 0x03	; 3
    2dc6:	80 93 aa 06 	sts	0x06AA, r24
	device.previousstatus = NO_CONNECTION;
    2dca:	80 93 a9 06 	sts	0x06A9, r24
    2dce:	08 95       	ret

00002dd0 <main>:
}

int main(void)
{
	//OSCCAL = OSCILLATOR_CAL_VAL;		/* Calibrate the internal oscillator*/
	init_io();			/* Init IO*/
    2dd0:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <init_io>
	init_int();			/* Init int for resfresh display every x ms	*/
    2dd4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <init_int>
	init_adc();			/* Init ADC */
    2dd8:	0e 94 79 15 	call	0x2af2	; 0x2af2 <init_adc>
	
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );	/* Init Uart */
    2ddc:	83 e3       	ldi	r24, 0x33	; 51
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 22 18 	call	0x3044	; 0x3044 <uart_init>
	sei();						/* Enable global interrupts for uart*/
    2de4:	78 94       	sei
	uart_puts("Init Uart OK\n");
    2de6:	85 e6       	ldi	r24, 0x65	; 101
    2de8:	95 e0       	ldi	r25, 0x05	; 5
    2dea:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	
	//init_bluetooth();			/* Setup the bluetooth device (1 time only)	*/
	init_lsm303();				/* Init the acc/mag sensor				*/
    2dee:	0e 94 36 09 	call	0x126c	; 0x126c <init_lsm303>
	uart_puts("Init LSM303 OK\n");
    2df2:	83 e7       	ldi	r24, 0x73	; 115
    2df4:	95 e0       	ldi	r25, 0x05	; 5
    2df6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	//buzzer(BUZZER_SHORT);
	
	/* Set initial values of device */
	set_initial_device_status();			/* Start condition */
    2dfa:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <set_initial_device_status>
	device.compass = get_heading_avg(25);	/* Get initial value */
    2dfe:	89 e1       	ldi	r24, 0x19	; 25
    2e00:	0e 94 87 06 	call	0xd0e	; 0xd0e <get_heading_avg>
    2e04:	bc 01       	movw	r22, r24
    2e06:	88 27       	eor	r24, r24
    2e08:	77 fd       	sbrc	r23, 7
    2e0a:	80 95       	com	r24
    2e0c:	98 2f       	mov	r25, r24
    2e0e:	0e 94 b8 1e 	call	0x3d70	; 0x3d70 <__floatsisf>
    2e12:	60 93 97 06 	sts	0x0697, r22
    2e16:	70 93 98 06 	sts	0x0698, r23
    2e1a:	80 93 99 06 	sts	0x0699, r24
    2e1e:	90 93 9a 06 	sts	0x069A, r25
	
	if(eeprom_read_word(&eeprom_first_startup))
    2e22:	8c e0       	ldi	r24, 0x0C	; 12
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 82 23 	call	0x4704	; 0x4704 <__eerd_word_m328p>
    2e2a:	89 2b       	or	r24, r25
    2e2c:	61 f0       	breq	.+24     	; 0x2e46 <main+0x76>
	{
		eeprom_update_word(&eeprom_first_startup, FALSE);
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	70 e0       	ldi	r23, 0x00	; 0
    2e32:	8c e0       	ldi	r24, 0x0C	; 12
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 94 23 	call	0x4728	; 0x4728 <__eeupd_word_m328p>
		reset_factory_settings();	/* Set device to initial values*/
    2e3a:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <reset_factory_settings>
		uart_puts("First time startup, doing factory presets\n");
    2e3e:	83 e8       	ldi	r24, 0x83	; 131
    2e40:	95 e0       	ldi	r25, 0x05	; 5
    2e42:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	}
	
	/* Load initial values of device */	
	load_eeprom_settings();		/* Load program settings from EEPROM	*/
    2e46:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <load_eeprom_settings>
	
	/* Now the device is ready! */
	uart_puts("BikeNav 2017 V");		/* Print version number					*/
    2e4a:	8e ea       	ldi	r24, 0xAE	; 174
    2e4c:	95 e0       	ldi	r25, 0x05	; 5
    2e4e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_float(VERSION,1);
    2e52:	41 e0       	ldi	r20, 0x01	; 1
    2e54:	60 e0       	ldi	r22, 0x00	; 0
    2e56:	70 e0       	ldi	r23, 0x00	; 0
    2e58:	80 e8       	ldi	r24, 0x80	; 128
    2e5a:	9f e3       	ldi	r25, 0x3F	; 63
    2e5c:	0e 94 49 0a 	call	0x1492	; 0x1492 <print_float>

	UI.navigationcolor = YELLOW;	/* Set color of navigation */
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	6f ef       	ldi	r22, 0xFF	; 255
    2e64:	88 ec       	ldi	r24, 0xC8	; 200
    2e66:	0e 94 01 10 	call	0x2002	; 0x2002 <Color>
    2e6a:	60 93 81 06 	sts	0x0681, r22
    2e6e:	70 93 82 06 	sts	0x0682, r23
    2e72:	80 93 83 06 	sts	0x0683, r24
    2e76:	90 93 84 06 	sts	0x0684, r25
	clearLeds();					/* Clear leds */
    2e7a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <clearLeds>
	
	device.battery = read_battery();
    2e7e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <read_battery>
    2e82:	c3 ea       	ldi	r28, 0xA3	; 163
    2e84:	d6 e0       	ldi	r29, 0x06	; 6
    2e86:	88 83       	st	Y, r24
	uart_puts("Battery = ");
    2e88:	87 e9       	ldi	r24, 0x97	; 151
    2e8a:	91 e0       	ldi	r25, 0x01	; 1
    2e8c:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(device.battery,0);
    2e90:	88 81       	ld	r24, Y
    2e92:	60 e0       	ldi	r22, 0x00	; 0
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts("%\n");
    2e9a:	82 ea       	ldi	r24, 0xA2	; 162
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	//setLedPercentage(device.battery,MULTIPLE,GREEN,100);	/* Show battery percentage on display */
	//_delay_ms(750);	
	clearLeds();					/* Clear leds */
    2ea2:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <clearLeds>
	
	device.temperature = get_temp();
    2ea6:	0e 94 4d 09 	call	0x129a	; 0x129a <get_temp>
    2eaa:	c4 ea       	ldi	r28, 0xA4	; 164
    2eac:	d6 e0       	ldi	r29, 0x06	; 6
    2eae:	88 83       	st	Y, r24
	uart_puts("Temperature = ");
    2eb0:	88 ee       	ldi	r24, 0xE8	; 232
    2eb2:	92 e0       	ldi	r25, 0x02	; 2
    2eb4:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
	print_int(device.temperature,0);
    2eb8:	88 81       	ld	r24, Y
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	0e 94 23 0a 	call	0x1446	; 0x1446 <print_int>
	uart_puts(" deg. C.\n");
    2ec2:	87 ef       	ldi	r24, 0xF7	; 247
    2ec4:	92 e0       	ldi	r25, 0x02	; 2
    2ec6:	0e 94 69 18 	call	0x30d2	; 0x30d2 <uart_puts>
		}
		//process_serial();							/* Check for serial messages */	
		
		//device.compass = rollingAverage(get_heading_avg(10));	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);
		device.compass = filtered_compass_reading(device.compass); // Has a threshold for new compass sensor data
    2eca:	c7 e9       	ldi	r28, 0x97	; 151
    2ecc:	d6 e0       	ldi	r29, 0x06	; 6
		//device.compass = rollingAverage(device.compass);	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);		/* get compass values (north) */
		
		
		if (UI.refresh)	// Refresh display
    2ece:	0f 2e       	mov	r0, r31
    2ed0:	fe e7       	ldi	r31, 0x7E	; 126
    2ed2:	ef 2e       	mov	r14, r31
    2ed4:	f6 e0       	ldi	r31, 0x06	; 6
    2ed6:	ff 2e       	mov	r15, r31
    2ed8:	f0 2d       	mov	r31, r0
	return device.previousstatus;
}

uint8_t read_device_status(void)
{
	return device.status;
    2eda:	0f 2e       	mov	r0, r31
    2edc:	fa ea       	ldi	r31, 0xAA	; 170
    2ede:	af 2e       	mov	r10, r31
    2ee0:	f6 e0       	ldi	r31, 0x06	; 6
    2ee2:	bf 2e       	mov	r11, r31
    2ee4:	f0 2d       	mov	r31, r0
		
		if (UI.refresh)	// Refresh display
		{
			print_status();
			check_device_status();						/* Check status of device for time-out's and button etc. */
			refreshDisplay(device.compass, device.heading, read_device_status());	
    2ee6:	0f 2e       	mov	r0, r31
    2ee8:	fb e9       	ldi	r31, 0x9B	; 155
    2eea:	cf 2e       	mov	r12, r31
    2eec:	f6 e0       	ldi	r31, 0x06	; 6
    2eee:	df 2e       	mov	r13, r31
    2ef0:	f0 2d       	mov	r31, r0
		}
		
		if (device.buttonaction)	// button action active
    2ef2:	07 ea       	ldi	r16, 0xA7	; 167
    2ef4:	16 e0       	ldi	r17, 0x06	; 6
	//setLedValue(device.temperature,100);
	//_delay_ms(750);		/* Wait for the user to be able to see the battery percentage */
	//uart_puts("TODO: FIX UART receive coordinates!!\n");
	while(1)
	{	
		get_serial();
    2ef6:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <get_serial>
		if (command_ready)
    2efa:	80 91 74 07 	lds	r24, 0x0774
		}
		//process_serial();							/* Check for serial messages */	
		
		//device.compass = rollingAverage(get_heading_avg(10));	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);
		device.compass = filtered_compass_reading(device.compass); // Has a threshold for new compass sensor data
    2efe:	68 81       	ld	r22, Y
    2f00:	79 81       	ldd	r23, Y+1	; 0x01
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	9b 81       	ldd	r25, Y+3	; 0x03
    2f06:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__fixunssfsi>
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	0e 94 08 16 	call	0x2c10	; 0x2c10 <filtered_compass_reading>
    2f10:	bc 01       	movw	r22, r24
    2f12:	80 e0       	ldi	r24, 0x00	; 0
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__floatunsisf>
    2f1a:	68 83       	st	Y, r22
    2f1c:	79 83       	std	Y+1, r23	; 0x01
    2f1e:	8a 83       	std	Y+2, r24	; 0x02
    2f20:	9b 83       	std	Y+3, r25	; 0x03
		//device.compass = rollingAverage(device.compass);	// filter out noise spikes or quick changes
		//device.compass = get_heading_avg(10);		/* get compass values (north) */
		
		
		if (UI.refresh)	// Refresh display
    2f22:	f7 01       	movw	r30, r14
    2f24:	80 81       	ld	r24, Z
    2f26:	88 23       	and	r24, r24
    2f28:	d1 f0       	breq	.+52     	; 0x2f5e <main+0x18e>
		{
			print_status();
    2f2a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <print_status>
			check_device_status();						/* Check status of device for time-out's and button etc. */
    2f2e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <check_device_status>
			refreshDisplay(device.compass, device.heading, read_device_status());	
    2f32:	f6 01       	movw	r30, r12
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__fixunssfsi>
    2f40:	2b 01       	movw	r4, r22
    2f42:	3c 01       	movw	r6, r24
    2f44:	68 81       	ld	r22, Y
    2f46:	79 81       	ldd	r23, Y+1	; 0x01
    2f48:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4c:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__fixunssfsi>
    2f50:	dc 01       	movw	r26, r24
    2f52:	cb 01       	movw	r24, r22
    2f54:	f5 01       	movw	r30, r10
    2f56:	40 81       	ld	r20, Z
    2f58:	b2 01       	movw	r22, r4
    2f5a:	0e 94 58 11 	call	0x22b0	; 0x22b0 <refreshDisplay>
		}
		
		if (device.buttonaction)	// button action active
    2f5e:	f8 01       	movw	r30, r16
    2f60:	80 81       	ld	r24, Z
    2f62:	81 11       	cpse	r24, r1
		{
			do_button_action();	
    2f64:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <do_button_action>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2f68:	8f ec       	ldi	r24, 0xCF	; 207
    2f6a:	97 e0       	ldi	r25, 0x07	; 7
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <main+0x19c>
    2f70:	00 c0       	rjmp	.+0      	; 0x2f72 <main+0x1a2>
    2f72:	00 00       	nop
    2f74:	c0 cf       	rjmp	.-128    	; 0x2ef6 <main+0x126>

00002f76 <set_device_status>:
	device.previousstatus = NO_CONNECTION;
}

uint8_t set_device_status(uint8_t status)
{
	device.previousstatus = device.status;	// Save previous state
    2f76:	ea ea       	ldi	r30, 0xAA	; 170
    2f78:	f6 e0       	ldi	r31, 0x06	; 6
    2f7a:	90 81       	ld	r25, Z
    2f7c:	90 93 a9 06 	sts	0x06A9, r25
	device.status = status;					// Write new state
    2f80:	80 83       	st	Z, r24
	return device.status;
}
    2f82:	08 95       	ret

00002f84 <set_previous_device_status>:

uint8_t set_previous_device_status(void)
{
	device.status = device.previousstatus;	// Go to previous state
    2f84:	80 91 a9 06 	lds	r24, 0x06A9
    2f88:	80 93 aa 06 	sts	0x06AA, r24
	return device.previousstatus;
}
    2f8c:	08 95       	ret

00002f8e <read_device_status>:

uint8_t read_device_status(void)
{
	return device.status;
}
    2f8e:	80 91 aa 06 	lds	r24, 0x06AA
    2f92:	08 95       	ret

00002f94 <__vector_18>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    2f94:	1f 92       	push	r1
    2f96:	0f 92       	push	r0
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	0f 92       	push	r0
    2f9c:	11 24       	eor	r1, r1
    2f9e:	2f 93       	push	r18
    2fa0:	8f 93       	push	r24
    2fa2:	9f 93       	push	r25
    2fa4:	ef 93       	push	r30
    2fa6:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    2fa8:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
    2fac:	20 91 c6 00 	lds	r18, 0x00C6
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    2fb0:	88 71       	andi	r24, 0x18	; 24
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    2fb2:	e0 91 e7 05 	lds	r30, 0x05E7
    2fb6:	ef 5f       	subi	r30, 0xFF	; 255
    2fb8:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
    2fba:	90 91 e6 05 	lds	r25, 0x05E6
    2fbe:	e9 17       	cp	r30, r25
    2fc0:	39 f0       	breq	.+14     	; 0x2fd0 <__vector_18+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    2fc2:	e0 93 e7 05 	sts	0x05E7, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	e6 51       	subi	r30, 0x16	; 22
    2fca:	fa 4f       	sbci	r31, 0xFA	; 250
    2fcc:	20 83       	st	Z, r18
    2fce:	01 c0       	rjmp	.+2      	; 0x2fd2 <__vector_18+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    2fd2:	90 91 e5 05 	lds	r25, 0x05E5
    2fd6:	89 2b       	or	r24, r25
    2fd8:	80 93 e5 05 	sts	0x05E5, r24
}
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	9f 91       	pop	r25
    2fe2:	8f 91       	pop	r24
    2fe4:	2f 91       	pop	r18
    2fe6:	0f 90       	pop	r0
    2fe8:	0f be       	out	0x3f, r0	; 63
    2fea:	0f 90       	pop	r0
    2fec:	1f 90       	pop	r1
    2fee:	18 95       	reti

00002ff0 <__vector_19>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    2ff0:	1f 92       	push	r1
    2ff2:	0f 92       	push	r0
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	0f 92       	push	r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	8f 93       	push	r24
    2ffc:	9f 93       	push	r25
    2ffe:	ef 93       	push	r30
    3000:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    3002:	90 91 e9 05 	lds	r25, 0x05E9
    3006:	80 91 e8 05 	lds	r24, 0x05E8
    300a:	98 17       	cp	r25, r24
    300c:	69 f0       	breq	.+26     	; 0x3028 <__vector_19+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    300e:	e0 91 e8 05 	lds	r30, 0x05E8
    3012:	ef 5f       	subi	r30, 0xFF	; 255
    3014:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
    3016:	e0 93 e8 05 	sts	0x05E8, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	e6 5d       	subi	r30, 0xD6	; 214
    301e:	f9 4f       	sbci	r31, 0xF9	; 249
    3020:	80 81       	ld	r24, Z
    3022:	80 93 c6 00 	sts	0x00C6, r24
    3026:	05 c0       	rjmp	.+10     	; 0x3032 <__vector_19+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    3028:	e1 ec       	ldi	r30, 0xC1	; 193
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	8f 7d       	andi	r24, 0xDF	; 223
    3030:	80 83       	st	Z, r24
    }
}
    3032:	ff 91       	pop	r31
    3034:	ef 91       	pop	r30
    3036:	9f 91       	pop	r25
    3038:	8f 91       	pop	r24
    303a:	0f 90       	pop	r0
    303c:	0f be       	out	0x3f, r0	; 63
    303e:	0f 90       	pop	r0
    3040:	1f 90       	pop	r1
    3042:	18 95       	reti

00003044 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    3044:	10 92 e9 05 	sts	0x05E9, r1
    UART_TxTail = 0;
    3048:	10 92 e8 05 	sts	0x05E8, r1
    UART_RxHead = 0;
    304c:	10 92 e7 05 	sts	0x05E7, r1
    UART_RxTail = 0;
    3050:	10 92 e6 05 	sts	0x05E6, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    3054:	99 23       	and	r25, r25
    3056:	24 f4       	brge	.+8      	; 0x3060 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    3058:	22 e0       	ldi	r18, 0x02	; 2
    305a:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    305e:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    3060:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    3064:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    3068:	88 e9       	ldi	r24, 0x98	; 152
    306a:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    306e:	86 e0       	ldi	r24, 0x06	; 6
    3070:	80 93 c2 00 	sts	0x00C2, r24
    3074:	08 95       	ret

00003076 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    3076:	90 91 e7 05 	lds	r25, 0x05E7
    307a:	80 91 e6 05 	lds	r24, 0x05E6
    307e:	98 17       	cp	r25, r24
    3080:	81 f0       	breq	.+32     	; 0x30a2 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    3082:	e0 91 e6 05 	lds	r30, 0x05E6
    3086:	ef 5f       	subi	r30, 0xFF	; 255
    3088:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
    308a:	e0 93 e6 05 	sts	0x05E6, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    308e:	f0 e0       	ldi	r31, 0x00	; 0
    3090:	e6 51       	subi	r30, 0x16	; 22
    3092:	fa 4f       	sbci	r31, 0xFA	; 250
    3094:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
    3096:	90 91 e5 05 	lds	r25, 0x05E5
    UART_LastRxError = 0;
    309a:	10 92 e5 05 	sts	0x05E5, r1
    return data;
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    30a2:	80 e0       	ldi	r24, 0x00	; 0
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
    30a6:	08 95       	ret

000030a8 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    30a8:	20 91 e9 05 	lds	r18, 0x05E9
    30ac:	2f 5f       	subi	r18, 0xFF	; 255
    30ae:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
    30b0:	90 91 e8 05 	lds	r25, 0x05E8
    30b4:	29 17       	cp	r18, r25
    30b6:	e1 f3       	breq	.-8      	; 0x30b0 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    30b8:	e2 2f       	mov	r30, r18
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	e6 5d       	subi	r30, 0xD6	; 214
    30be:	f9 4f       	sbci	r31, 0xF9	; 249
    30c0:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    30c2:	20 93 e9 05 	sts	0x05E9, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    30c6:	e1 ec       	ldi	r30, 0xC1	; 193
    30c8:	f0 e0       	ldi	r31, 0x00	; 0
    30ca:	80 81       	ld	r24, Z
    30cc:	80 62       	ori	r24, 0x20	; 32
    30ce:	80 83       	st	Z, r24
    30d0:	08 95       	ret

000030d2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	ec 01       	movw	r28, r24
    while (*s) 
    30d8:	88 81       	ld	r24, Y
    30da:	88 23       	and	r24, r24
    30dc:	31 f0       	breq	.+12     	; 0x30ea <uart_puts+0x18>
    30de:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
    30e0:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    30e4:	89 91       	ld	r24, Y+
    30e6:	81 11       	cpse	r24, r1
    30e8:	fb cf       	rjmp	.-10     	; 0x30e0 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
    30ea:	df 91       	pop	r29
    30ec:	cf 91       	pop	r28
    30ee:	08 95       	ret

000030f0 <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    30f0:	cf 93       	push	r28
    30f2:	df 93       	push	r29
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    30f4:	ec 01       	movw	r28, r24
    30f6:	21 96       	adiw	r28, 0x01	; 1
    30f8:	fc 01       	movw	r30, r24
    30fa:	84 91       	lpm	r24, Z
    30fc:	88 23       	and	r24, r24
    30fe:	39 f0       	breq	.+14     	; 0x310e <uart_puts_p+0x1e>
      uart_putc(c);
    3100:	0e 94 54 18 	call	0x30a8	; 0x30a8 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    3104:	fe 01       	movw	r30, r28
    3106:	84 91       	lpm	r24, Z
    3108:	21 96       	adiw	r28, 0x01	; 1
    310a:	81 11       	cpse	r24, r1
    310c:	f9 cf       	rjmp	.-14     	; 0x3100 <uart_puts_p+0x10>
      uart_putc(c);

}/* uart_puts_p */
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	08 95       	ret

00003114 <vector_cross>:
#include "vector.h"
#include <math.h>

void vector_cross(const vector *a, const vector *b, vector *out)
{
    3114:	af 92       	push	r10
    3116:	bf 92       	push	r11
    3118:	cf 92       	push	r12
    311a:	df 92       	push	r13
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	1f 93       	push	r17
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	ec 01       	movw	r28, r24
    312a:	8b 01       	movw	r16, r22
    312c:	5a 01       	movw	r10, r20
	out->x = a->y * b->z - a->z * b->y;
    312e:	fb 01       	movw	r30, r22
    3130:	20 85       	ldd	r18, Z+8	; 0x08
    3132:	31 85       	ldd	r19, Z+9	; 0x09
    3134:	42 85       	ldd	r20, Z+10	; 0x0a
    3136:	53 85       	ldd	r21, Z+11	; 0x0b
    3138:	6c 81       	ldd	r22, Y+4	; 0x04
    313a:	7d 81       	ldd	r23, Y+5	; 0x05
    313c:	8e 81       	ldd	r24, Y+6	; 0x06
    313e:	9f 81       	ldd	r25, Y+7	; 0x07
    3140:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    3144:	6b 01       	movw	r12, r22
    3146:	7c 01       	movw	r14, r24
    3148:	f8 01       	movw	r30, r16
    314a:	24 81       	ldd	r18, Z+4	; 0x04
    314c:	35 81       	ldd	r19, Z+5	; 0x05
    314e:	46 81       	ldd	r20, Z+6	; 0x06
    3150:	57 81       	ldd	r21, Z+7	; 0x07
    3152:	68 85       	ldd	r22, Y+8	; 0x08
    3154:	79 85       	ldd	r23, Y+9	; 0x09
    3156:	8a 85       	ldd	r24, Y+10	; 0x0a
    3158:	9b 85       	ldd	r25, Y+11	; 0x0b
    315a:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    315e:	9b 01       	movw	r18, r22
    3160:	ac 01       	movw	r20, r24
    3162:	c7 01       	movw	r24, r14
    3164:	b6 01       	movw	r22, r12
    3166:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
    316a:	f5 01       	movw	r30, r10
    316c:	60 83       	st	Z, r22
    316e:	71 83       	std	Z+1, r23	; 0x01
    3170:	82 83       	std	Z+2, r24	; 0x02
    3172:	93 83       	std	Z+3, r25	; 0x03
	out->y = a->z * b->x - a->x * b->z;
    3174:	f8 01       	movw	r30, r16
    3176:	20 81       	ld	r18, Z
    3178:	31 81       	ldd	r19, Z+1	; 0x01
    317a:	42 81       	ldd	r20, Z+2	; 0x02
    317c:	53 81       	ldd	r21, Z+3	; 0x03
    317e:	68 85       	ldd	r22, Y+8	; 0x08
    3180:	79 85       	ldd	r23, Y+9	; 0x09
    3182:	8a 85       	ldd	r24, Y+10	; 0x0a
    3184:	9b 85       	ldd	r25, Y+11	; 0x0b
    3186:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    318a:	6b 01       	movw	r12, r22
    318c:	7c 01       	movw	r14, r24
    318e:	f8 01       	movw	r30, r16
    3190:	20 85       	ldd	r18, Z+8	; 0x08
    3192:	31 85       	ldd	r19, Z+9	; 0x09
    3194:	42 85       	ldd	r20, Z+10	; 0x0a
    3196:	53 85       	ldd	r21, Z+11	; 0x0b
    3198:	68 81       	ld	r22, Y
    319a:	79 81       	ldd	r23, Y+1	; 0x01
    319c:	8a 81       	ldd	r24, Y+2	; 0x02
    319e:	9b 81       	ldd	r25, Y+3	; 0x03
    31a0:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    31a4:	9b 01       	movw	r18, r22
    31a6:	ac 01       	movw	r20, r24
    31a8:	c7 01       	movw	r24, r14
    31aa:	b6 01       	movw	r22, r12
    31ac:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
    31b0:	f5 01       	movw	r30, r10
    31b2:	64 83       	std	Z+4, r22	; 0x04
    31b4:	75 83       	std	Z+5, r23	; 0x05
    31b6:	86 83       	std	Z+6, r24	; 0x06
    31b8:	97 83       	std	Z+7, r25	; 0x07
	out->z = a->x * b->y - a->y * b->x;
    31ba:	f8 01       	movw	r30, r16
    31bc:	24 81       	ldd	r18, Z+4	; 0x04
    31be:	35 81       	ldd	r19, Z+5	; 0x05
    31c0:	46 81       	ldd	r20, Z+6	; 0x06
    31c2:	57 81       	ldd	r21, Z+7	; 0x07
    31c4:	68 81       	ld	r22, Y
    31c6:	79 81       	ldd	r23, Y+1	; 0x01
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	9b 81       	ldd	r25, Y+3	; 0x03
    31cc:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    31d0:	6b 01       	movw	r12, r22
    31d2:	7c 01       	movw	r14, r24
    31d4:	f8 01       	movw	r30, r16
    31d6:	20 81       	ld	r18, Z
    31d8:	31 81       	ldd	r19, Z+1	; 0x01
    31da:	42 81       	ldd	r20, Z+2	; 0x02
    31dc:	53 81       	ldd	r21, Z+3	; 0x03
    31de:	6c 81       	ldd	r22, Y+4	; 0x04
    31e0:	7d 81       	ldd	r23, Y+5	; 0x05
    31e2:	8e 81       	ldd	r24, Y+6	; 0x06
    31e4:	9f 81       	ldd	r25, Y+7	; 0x07
    31e6:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    31ea:	9b 01       	movw	r18, r22
    31ec:	ac 01       	movw	r20, r24
    31ee:	c7 01       	movw	r24, r14
    31f0:	b6 01       	movw	r22, r12
    31f2:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <__subsf3>
    31f6:	f5 01       	movw	r30, r10
    31f8:	60 87       	std	Z+8, r22	; 0x08
    31fa:	71 87       	std	Z+9, r23	; 0x09
    31fc:	82 87       	std	Z+10, r24	; 0x0a
    31fe:	93 87       	std	Z+11, r25	; 0x0b
}
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	ff 90       	pop	r15
    320a:	ef 90       	pop	r14
    320c:	df 90       	pop	r13
    320e:	cf 90       	pop	r12
    3210:	bf 90       	pop	r11
    3212:	af 90       	pop	r10
    3214:	08 95       	ret

00003216 <vector_dot>:

float vector_dot(const vector *a, const vector *b)
{
    3216:	cf 92       	push	r12
    3218:	df 92       	push	r13
    321a:	ef 92       	push	r14
    321c:	ff 92       	push	r15
    321e:	0f 93       	push	r16
    3220:	1f 93       	push	r17
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	ec 01       	movw	r28, r24
    3228:	8b 01       	movw	r16, r22
  return a->x * b->x + a->y * b->y + a->z * b->z;
    322a:	fb 01       	movw	r30, r22
    322c:	20 81       	ld	r18, Z
    322e:	31 81       	ldd	r19, Z+1	; 0x01
    3230:	42 81       	ldd	r20, Z+2	; 0x02
    3232:	53 81       	ldd	r21, Z+3	; 0x03
    3234:	68 81       	ld	r22, Y
    3236:	79 81       	ldd	r23, Y+1	; 0x01
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	9b 81       	ldd	r25, Y+3	; 0x03
    323c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    3240:	6b 01       	movw	r12, r22
    3242:	7c 01       	movw	r14, r24
    3244:	f8 01       	movw	r30, r16
    3246:	24 81       	ldd	r18, Z+4	; 0x04
    3248:	35 81       	ldd	r19, Z+5	; 0x05
    324a:	46 81       	ldd	r20, Z+6	; 0x06
    324c:	57 81       	ldd	r21, Z+7	; 0x07
    324e:	6c 81       	ldd	r22, Y+4	; 0x04
    3250:	7d 81       	ldd	r23, Y+5	; 0x05
    3252:	8e 81       	ldd	r24, Y+6	; 0x06
    3254:	9f 81       	ldd	r25, Y+7	; 0x07
    3256:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    325a:	9b 01       	movw	r18, r22
    325c:	ac 01       	movw	r20, r24
    325e:	c7 01       	movw	r24, r14
    3260:	b6 01       	movw	r22, r12
    3262:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
    3266:	6b 01       	movw	r12, r22
    3268:	7c 01       	movw	r14, r24
    326a:	f8 01       	movw	r30, r16
    326c:	20 85       	ldd	r18, Z+8	; 0x08
    326e:	31 85       	ldd	r19, Z+9	; 0x09
    3270:	42 85       	ldd	r20, Z+10	; 0x0a
    3272:	53 85       	ldd	r21, Z+11	; 0x0b
    3274:	68 85       	ldd	r22, Y+8	; 0x08
    3276:	79 85       	ldd	r23, Y+9	; 0x09
    3278:	8a 85       	ldd	r24, Y+10	; 0x0a
    327a:	9b 85       	ldd	r25, Y+11	; 0x0b
    327c:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    3280:	9b 01       	movw	r18, r22
    3282:	ac 01       	movw	r20, r24
    3284:	c7 01       	movw	r24, r14
    3286:	b6 01       	movw	r22, r12
    3288:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <__addsf3>
}
    328c:	df 91       	pop	r29
    328e:	cf 91       	pop	r28
    3290:	1f 91       	pop	r17
    3292:	0f 91       	pop	r16
    3294:	ff 90       	pop	r15
    3296:	ef 90       	pop	r14
    3298:	df 90       	pop	r13
    329a:	cf 90       	pop	r12
    329c:	08 95       	ret

0000329e <vector_normalize>:

void vector_normalize(vector *a)
{
    329e:	cf 92       	push	r12
    32a0:	df 92       	push	r13
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	ec 01       	movw	r28, r24
	float mag = sqrt(vector_dot(a, a));
    32ac:	bc 01       	movw	r22, r24
    32ae:	0e 94 0b 19 	call	0x3216	; 0x3216 <vector_dot>
    32b2:	0e 94 ba 20 	call	0x4174	; 0x4174 <sqrt>
    32b6:	6b 01       	movw	r12, r22
    32b8:	7c 01       	movw	r14, r24
	a->x /= mag;
    32ba:	9b 01       	movw	r18, r22
    32bc:	ac 01       	movw	r20, r24
    32be:	68 81       	ld	r22, Y
    32c0:	79 81       	ldd	r23, Y+1	; 0x01
    32c2:	8a 81       	ldd	r24, Y+2	; 0x02
    32c4:	9b 81       	ldd	r25, Y+3	; 0x03
    32c6:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
    32ca:	68 83       	st	Y, r22
    32cc:	79 83       	std	Y+1, r23	; 0x01
    32ce:	8a 83       	std	Y+2, r24	; 0x02
    32d0:	9b 83       	std	Y+3, r25	; 0x03
	a->y /= mag;
    32d2:	a7 01       	movw	r20, r14
    32d4:	96 01       	movw	r18, r12
    32d6:	6c 81       	ldd	r22, Y+4	; 0x04
    32d8:	7d 81       	ldd	r23, Y+5	; 0x05
    32da:	8e 81       	ldd	r24, Y+6	; 0x06
    32dc:	9f 81       	ldd	r25, Y+7	; 0x07
    32de:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
    32e2:	6c 83       	std	Y+4, r22	; 0x04
    32e4:	7d 83       	std	Y+5, r23	; 0x05
    32e6:	8e 83       	std	Y+6, r24	; 0x06
    32e8:	9f 83       	std	Y+7, r25	; 0x07
	a->z /= mag;
    32ea:	a7 01       	movw	r20, r14
    32ec:	96 01       	movw	r18, r12
    32ee:	68 85       	ldd	r22, Y+8	; 0x08
    32f0:	79 85       	ldd	r23, Y+9	; 0x09
    32f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32f6:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__divsf3>
    32fa:	68 87       	std	Y+8, r22	; 0x08
    32fc:	79 87       	std	Y+9, r23	; 0x09
    32fe:	8a 87       	std	Y+10, r24	; 0x0a
    3300:	9b 87       	std	Y+11, r25	; 0x0b
}
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	ff 90       	pop	r15
    3308:	ef 90       	pop	r14
    330a:	df 90       	pop	r13
    330c:	cf 90       	pop	r12
    330e:	08 95       	ret

00003310 <vfprintf>:
    3310:	a3 e1       	ldi	r26, 0x13	; 19
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	ee e8       	ldi	r30, 0x8E	; 142
    3316:	f9 e1       	ldi	r31, 0x19	; 25
    3318:	0c 94 18 1d 	jmp	0x3a30	; 0x3a30 <__prologue_saves__>
    331c:	7c 01       	movw	r14, r24
    331e:	1b 01       	movw	r2, r22
    3320:	6a 01       	movw	r12, r20
    3322:	fc 01       	movw	r30, r24
    3324:	17 82       	std	Z+7, r1	; 0x07
    3326:	16 82       	std	Z+6, r1	; 0x06
    3328:	83 81       	ldd	r24, Z+3	; 0x03
    332a:	81 ff       	sbrs	r24, 1
    332c:	66 c3       	rjmp	.+1740   	; 0x39fa <vfprintf+0x6ea>
    332e:	be 01       	movw	r22, r28
    3330:	6f 5f       	subi	r22, 0xFF	; 255
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	4b 01       	movw	r8, r22
    3336:	f7 01       	movw	r30, r14
    3338:	93 81       	ldd	r25, Z+3	; 0x03
    333a:	f1 01       	movw	r30, r2
    333c:	93 fd       	sbrc	r25, 3
    333e:	85 91       	lpm	r24, Z+
    3340:	93 ff       	sbrs	r25, 3
    3342:	81 91       	ld	r24, Z+
    3344:	1f 01       	movw	r2, r30
    3346:	88 23       	and	r24, r24
    3348:	09 f4       	brne	.+2      	; 0x334c <vfprintf+0x3c>
    334a:	53 c3       	rjmp	.+1702   	; 0x39f2 <vfprintf+0x6e2>
    334c:	85 32       	cpi	r24, 0x25	; 37
    334e:	39 f4       	brne	.+14     	; 0x335e <vfprintf+0x4e>
    3350:	93 fd       	sbrc	r25, 3
    3352:	85 91       	lpm	r24, Z+
    3354:	93 ff       	sbrs	r25, 3
    3356:	81 91       	ld	r24, Z+
    3358:	1f 01       	movw	r2, r30
    335a:	85 32       	cpi	r24, 0x25	; 37
    335c:	39 f4       	brne	.+14     	; 0x336c <vfprintf+0x5c>
    335e:	b7 01       	movw	r22, r14
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3366:	56 01       	movw	r10, r12
    3368:	65 01       	movw	r12, r10
    336a:	e5 cf       	rjmp	.-54     	; 0x3336 <vfprintf+0x26>
    336c:	10 e0       	ldi	r17, 0x00	; 0
    336e:	51 2c       	mov	r5, r1
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	20 32       	cpi	r18, 0x20	; 32
    3374:	a0 f4       	brcc	.+40     	; 0x339e <vfprintf+0x8e>
    3376:	8b 32       	cpi	r24, 0x2B	; 43
    3378:	69 f0       	breq	.+26     	; 0x3394 <vfprintf+0x84>
    337a:	30 f4       	brcc	.+12     	; 0x3388 <vfprintf+0x78>
    337c:	80 32       	cpi	r24, 0x20	; 32
    337e:	59 f0       	breq	.+22     	; 0x3396 <vfprintf+0x86>
    3380:	83 32       	cpi	r24, 0x23	; 35
    3382:	69 f4       	brne	.+26     	; 0x339e <vfprintf+0x8e>
    3384:	20 61       	ori	r18, 0x10	; 16
    3386:	2c c0       	rjmp	.+88     	; 0x33e0 <vfprintf+0xd0>
    3388:	8d 32       	cpi	r24, 0x2D	; 45
    338a:	39 f0       	breq	.+14     	; 0x339a <vfprintf+0x8a>
    338c:	80 33       	cpi	r24, 0x30	; 48
    338e:	39 f4       	brne	.+14     	; 0x339e <vfprintf+0x8e>
    3390:	21 60       	ori	r18, 0x01	; 1
    3392:	26 c0       	rjmp	.+76     	; 0x33e0 <vfprintf+0xd0>
    3394:	22 60       	ori	r18, 0x02	; 2
    3396:	24 60       	ori	r18, 0x04	; 4
    3398:	23 c0       	rjmp	.+70     	; 0x33e0 <vfprintf+0xd0>
    339a:	28 60       	ori	r18, 0x08	; 8
    339c:	21 c0       	rjmp	.+66     	; 0x33e0 <vfprintf+0xd0>
    339e:	27 fd       	sbrc	r18, 7
    33a0:	27 c0       	rjmp	.+78     	; 0x33f0 <vfprintf+0xe0>
    33a2:	30 ed       	ldi	r19, 0xD0	; 208
    33a4:	38 0f       	add	r19, r24
    33a6:	3a 30       	cpi	r19, 0x0A	; 10
    33a8:	78 f4       	brcc	.+30     	; 0x33c8 <vfprintf+0xb8>
    33aa:	26 ff       	sbrs	r18, 6
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <vfprintf+0xaa>
    33ae:	fa e0       	ldi	r31, 0x0A	; 10
    33b0:	1f 9f       	mul	r17, r31
    33b2:	30 0d       	add	r19, r0
    33b4:	11 24       	eor	r1, r1
    33b6:	13 2f       	mov	r17, r19
    33b8:	13 c0       	rjmp	.+38     	; 0x33e0 <vfprintf+0xd0>
    33ba:	6a e0       	ldi	r22, 0x0A	; 10
    33bc:	56 9e       	mul	r5, r22
    33be:	30 0d       	add	r19, r0
    33c0:	11 24       	eor	r1, r1
    33c2:	53 2e       	mov	r5, r19
    33c4:	20 62       	ori	r18, 0x20	; 32
    33c6:	0c c0       	rjmp	.+24     	; 0x33e0 <vfprintf+0xd0>
    33c8:	8e 32       	cpi	r24, 0x2E	; 46
    33ca:	21 f4       	brne	.+8      	; 0x33d4 <vfprintf+0xc4>
    33cc:	26 fd       	sbrc	r18, 6
    33ce:	11 c3       	rjmp	.+1570   	; 0x39f2 <vfprintf+0x6e2>
    33d0:	20 64       	ori	r18, 0x40	; 64
    33d2:	06 c0       	rjmp	.+12     	; 0x33e0 <vfprintf+0xd0>
    33d4:	8c 36       	cpi	r24, 0x6C	; 108
    33d6:	11 f4       	brne	.+4      	; 0x33dc <vfprintf+0xcc>
    33d8:	20 68       	ori	r18, 0x80	; 128
    33da:	02 c0       	rjmp	.+4      	; 0x33e0 <vfprintf+0xd0>
    33dc:	88 36       	cpi	r24, 0x68	; 104
    33de:	41 f4       	brne	.+16     	; 0x33f0 <vfprintf+0xe0>
    33e0:	f1 01       	movw	r30, r2
    33e2:	93 fd       	sbrc	r25, 3
    33e4:	85 91       	lpm	r24, Z+
    33e6:	93 ff       	sbrs	r25, 3
    33e8:	81 91       	ld	r24, Z+
    33ea:	1f 01       	movw	r2, r30
    33ec:	81 11       	cpse	r24, r1
    33ee:	c1 cf       	rjmp	.-126    	; 0x3372 <vfprintf+0x62>
    33f0:	9b eb       	ldi	r25, 0xBB	; 187
    33f2:	98 0f       	add	r25, r24
    33f4:	93 30       	cpi	r25, 0x03	; 3
    33f6:	18 f4       	brcc	.+6      	; 0x33fe <vfprintf+0xee>
    33f8:	20 61       	ori	r18, 0x10	; 16
    33fa:	80 5e       	subi	r24, 0xE0	; 224
    33fc:	06 c0       	rjmp	.+12     	; 0x340a <vfprintf+0xfa>
    33fe:	9b e9       	ldi	r25, 0x9B	; 155
    3400:	98 0f       	add	r25, r24
    3402:	93 30       	cpi	r25, 0x03	; 3
    3404:	08 f0       	brcs	.+2      	; 0x3408 <vfprintf+0xf8>
    3406:	aa c1       	rjmp	.+852    	; 0x375c <vfprintf+0x44c>
    3408:	2f 7e       	andi	r18, 0xEF	; 239
    340a:	26 ff       	sbrs	r18, 6
    340c:	16 e0       	ldi	r17, 0x06	; 6
    340e:	2f 73       	andi	r18, 0x3F	; 63
    3410:	72 2e       	mov	r7, r18
    3412:	85 36       	cpi	r24, 0x65	; 101
    3414:	21 f4       	brne	.+8      	; 0x341e <vfprintf+0x10e>
    3416:	f2 2f       	mov	r31, r18
    3418:	f0 64       	ori	r31, 0x40	; 64
    341a:	7f 2e       	mov	r7, r31
    341c:	08 c0       	rjmp	.+16     	; 0x342e <vfprintf+0x11e>
    341e:	86 36       	cpi	r24, 0x66	; 102
    3420:	21 f4       	brne	.+8      	; 0x342a <vfprintf+0x11a>
    3422:	62 2f       	mov	r22, r18
    3424:	60 68       	ori	r22, 0x80	; 128
    3426:	76 2e       	mov	r7, r22
    3428:	02 c0       	rjmp	.+4      	; 0x342e <vfprintf+0x11e>
    342a:	11 11       	cpse	r17, r1
    342c:	11 50       	subi	r17, 0x01	; 1
    342e:	77 fe       	sbrs	r7, 7
    3430:	07 c0       	rjmp	.+14     	; 0x3440 <vfprintf+0x130>
    3432:	1c 33       	cpi	r17, 0x3C	; 60
    3434:	48 f4       	brcc	.+18     	; 0x3448 <vfprintf+0x138>
    3436:	44 24       	eor	r4, r4
    3438:	43 94       	inc	r4
    343a:	41 0e       	add	r4, r17
    343c:	27 e0       	ldi	r18, 0x07	; 7
    343e:	0b c0       	rjmp	.+22     	; 0x3456 <vfprintf+0x146>
    3440:	18 30       	cpi	r17, 0x08	; 8
    3442:	30 f4       	brcc	.+12     	; 0x3450 <vfprintf+0x140>
    3444:	21 2f       	mov	r18, r17
    3446:	06 c0       	rjmp	.+12     	; 0x3454 <vfprintf+0x144>
    3448:	27 e0       	ldi	r18, 0x07	; 7
    344a:	4c e3       	ldi	r20, 0x3C	; 60
    344c:	44 2e       	mov	r4, r20
    344e:	03 c0       	rjmp	.+6      	; 0x3456 <vfprintf+0x146>
    3450:	27 e0       	ldi	r18, 0x07	; 7
    3452:	17 e0       	ldi	r17, 0x07	; 7
    3454:	41 2c       	mov	r4, r1
    3456:	56 01       	movw	r10, r12
    3458:	74 e0       	ldi	r23, 0x04	; 4
    345a:	a7 0e       	add	r10, r23
    345c:	b1 1c       	adc	r11, r1
    345e:	f6 01       	movw	r30, r12
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	82 81       	ldd	r24, Z+2	; 0x02
    3466:	93 81       	ldd	r25, Z+3	; 0x03
    3468:	04 2d       	mov	r16, r4
    346a:	a4 01       	movw	r20, r8
    346c:	0e 94 71 21 	call	0x42e2	; 0x42e2 <__ftoa_engine>
    3470:	6c 01       	movw	r12, r24
    3472:	09 81       	ldd	r16, Y+1	; 0x01
    3474:	00 ff       	sbrs	r16, 0
    3476:	02 c0       	rjmp	.+4      	; 0x347c <vfprintf+0x16c>
    3478:	03 ff       	sbrs	r16, 3
    347a:	06 c0       	rjmp	.+12     	; 0x3488 <vfprintf+0x178>
    347c:	71 fc       	sbrc	r7, 1
    347e:	07 c0       	rjmp	.+14     	; 0x348e <vfprintf+0x17e>
    3480:	72 fc       	sbrc	r7, 2
    3482:	08 c0       	rjmp	.+16     	; 0x3494 <vfprintf+0x184>
    3484:	61 2c       	mov	r6, r1
    3486:	08 c0       	rjmp	.+16     	; 0x3498 <vfprintf+0x188>
    3488:	3d e2       	ldi	r19, 0x2D	; 45
    348a:	63 2e       	mov	r6, r19
    348c:	05 c0       	rjmp	.+10     	; 0x3498 <vfprintf+0x188>
    348e:	2b e2       	ldi	r18, 0x2B	; 43
    3490:	62 2e       	mov	r6, r18
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <vfprintf+0x188>
    3494:	90 e2       	ldi	r25, 0x20	; 32
    3496:	69 2e       	mov	r6, r25
    3498:	80 2f       	mov	r24, r16
    349a:	8c 70       	andi	r24, 0x0C	; 12
    349c:	99 f1       	breq	.+102    	; 0x3504 <vfprintf+0x1f4>
    349e:	66 20       	and	r6, r6
    34a0:	11 f0       	breq	.+4      	; 0x34a6 <vfprintf+0x196>
    34a2:	84 e0       	ldi	r24, 0x04	; 4
    34a4:	01 c0       	rjmp	.+2      	; 0x34a8 <vfprintf+0x198>
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	85 15       	cp	r24, r5
    34aa:	10 f0       	brcs	.+4      	; 0x34b0 <vfprintf+0x1a0>
    34ac:	51 2c       	mov	r5, r1
    34ae:	0b c0       	rjmp	.+22     	; 0x34c6 <vfprintf+0x1b6>
    34b0:	58 1a       	sub	r5, r24
    34b2:	73 fc       	sbrc	r7, 3
    34b4:	08 c0       	rjmp	.+16     	; 0x34c6 <vfprintf+0x1b6>
    34b6:	b7 01       	movw	r22, r14
    34b8:	80 e2       	ldi	r24, 0x20	; 32
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    34c0:	5a 94       	dec	r5
    34c2:	c9 f7       	brne	.-14     	; 0x34b6 <vfprintf+0x1a6>
    34c4:	f3 cf       	rjmp	.-26     	; 0x34ac <vfprintf+0x19c>
    34c6:	66 20       	and	r6, r6
    34c8:	29 f0       	breq	.+10     	; 0x34d4 <vfprintf+0x1c4>
    34ca:	b7 01       	movw	r22, r14
    34cc:	86 2d       	mov	r24, r6
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    34d4:	03 fd       	sbrc	r16, 3
    34d6:	03 c0       	rjmp	.+6      	; 0x34de <vfprintf+0x1ce>
    34d8:	04 e4       	ldi	r16, 0x44	; 68
    34da:	12 e0       	ldi	r17, 0x02	; 2
    34dc:	02 c0       	rjmp	.+4      	; 0x34e2 <vfprintf+0x1d2>
    34de:	00 e4       	ldi	r16, 0x40	; 64
    34e0:	12 e0       	ldi	r17, 0x02	; 2
    34e2:	f7 2d       	mov	r31, r7
    34e4:	f0 71       	andi	r31, 0x10	; 16
    34e6:	7f 2e       	mov	r7, r31
    34e8:	f8 01       	movw	r30, r16
    34ea:	84 91       	lpm	r24, Z
    34ec:	88 23       	and	r24, r24
    34ee:	09 f4       	brne	.+2      	; 0x34f2 <vfprintf+0x1e2>
    34f0:	76 c2       	rjmp	.+1260   	; 0x39de <vfprintf+0x6ce>
    34f2:	71 10       	cpse	r7, r1
    34f4:	80 52       	subi	r24, 0x20	; 32
    34f6:	b7 01       	movw	r22, r14
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    34fe:	0f 5f       	subi	r16, 0xFF	; 255
    3500:	1f 4f       	sbci	r17, 0xFF	; 255
    3502:	f2 cf       	rjmp	.-28     	; 0x34e8 <vfprintf+0x1d8>
    3504:	77 fe       	sbrs	r7, 7
    3506:	0f c0       	rjmp	.+30     	; 0x3526 <vfprintf+0x216>
    3508:	4c 0c       	add	r4, r12
    350a:	04 ff       	sbrs	r16, 4
    350c:	04 c0       	rjmp	.+8      	; 0x3516 <vfprintf+0x206>
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	81 33       	cpi	r24, 0x31	; 49
    3512:	09 f4       	brne	.+2      	; 0x3516 <vfprintf+0x206>
    3514:	4a 94       	dec	r4
    3516:	14 14       	cp	r1, r4
    3518:	74 f5       	brge	.+92     	; 0x3576 <vfprintf+0x266>
    351a:	f8 e0       	ldi	r31, 0x08	; 8
    351c:	f4 15       	cp	r31, r4
    351e:	78 f5       	brcc	.+94     	; 0x357e <vfprintf+0x26e>
    3520:	88 e0       	ldi	r24, 0x08	; 8
    3522:	48 2e       	mov	r4, r24
    3524:	2c c0       	rjmp	.+88     	; 0x357e <vfprintf+0x26e>
    3526:	76 fc       	sbrc	r7, 6
    3528:	2a c0       	rjmp	.+84     	; 0x357e <vfprintf+0x26e>
    352a:	81 2f       	mov	r24, r17
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	8c 15       	cp	r24, r12
    3530:	9d 05       	cpc	r25, r13
    3532:	9c f0       	brlt	.+38     	; 0x355a <vfprintf+0x24a>
    3534:	6c ef       	ldi	r22, 0xFC	; 252
    3536:	c6 16       	cp	r12, r22
    3538:	6f ef       	ldi	r22, 0xFF	; 255
    353a:	d6 06       	cpc	r13, r22
    353c:	74 f0       	brlt	.+28     	; 0x355a <vfprintf+0x24a>
    353e:	77 2d       	mov	r23, r7
    3540:	70 68       	ori	r23, 0x80	; 128
    3542:	77 2e       	mov	r7, r23
    3544:	0a c0       	rjmp	.+20     	; 0x355a <vfprintf+0x24a>
    3546:	e2 e0       	ldi	r30, 0x02	; 2
    3548:	f0 e0       	ldi	r31, 0x00	; 0
    354a:	ec 0f       	add	r30, r28
    354c:	fd 1f       	adc	r31, r29
    354e:	e1 0f       	add	r30, r17
    3550:	f1 1d       	adc	r31, r1
    3552:	80 81       	ld	r24, Z
    3554:	80 33       	cpi	r24, 0x30	; 48
    3556:	19 f4       	brne	.+6      	; 0x355e <vfprintf+0x24e>
    3558:	11 50       	subi	r17, 0x01	; 1
    355a:	11 11       	cpse	r17, r1
    355c:	f4 cf       	rjmp	.-24     	; 0x3546 <vfprintf+0x236>
    355e:	77 fe       	sbrs	r7, 7
    3560:	0e c0       	rjmp	.+28     	; 0x357e <vfprintf+0x26e>
    3562:	44 24       	eor	r4, r4
    3564:	43 94       	inc	r4
    3566:	41 0e       	add	r4, r17
    3568:	81 2f       	mov	r24, r17
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	c8 16       	cp	r12, r24
    356e:	d9 06       	cpc	r13, r25
    3570:	2c f4       	brge	.+10     	; 0x357c <vfprintf+0x26c>
    3572:	1c 19       	sub	r17, r12
    3574:	04 c0       	rjmp	.+8      	; 0x357e <vfprintf+0x26e>
    3576:	44 24       	eor	r4, r4
    3578:	43 94       	inc	r4
    357a:	01 c0       	rjmp	.+2      	; 0x357e <vfprintf+0x26e>
    357c:	10 e0       	ldi	r17, 0x00	; 0
    357e:	77 fe       	sbrs	r7, 7
    3580:	07 c0       	rjmp	.+14     	; 0x3590 <vfprintf+0x280>
    3582:	1c 14       	cp	r1, r12
    3584:	1d 04       	cpc	r1, r13
    3586:	3c f4       	brge	.+14     	; 0x3596 <vfprintf+0x286>
    3588:	96 01       	movw	r18, r12
    358a:	2f 5f       	subi	r18, 0xFF	; 255
    358c:	3f 4f       	sbci	r19, 0xFF	; 255
    358e:	05 c0       	rjmp	.+10     	; 0x359a <vfprintf+0x28a>
    3590:	25 e0       	ldi	r18, 0x05	; 5
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	02 c0       	rjmp	.+4      	; 0x359a <vfprintf+0x28a>
    3596:	21 e0       	ldi	r18, 0x01	; 1
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	66 20       	and	r6, r6
    359c:	11 f0       	breq	.+4      	; 0x35a2 <vfprintf+0x292>
    359e:	2f 5f       	subi	r18, 0xFF	; 255
    35a0:	3f 4f       	sbci	r19, 0xFF	; 255
    35a2:	11 23       	and	r17, r17
    35a4:	31 f0       	breq	.+12     	; 0x35b2 <vfprintf+0x2a2>
    35a6:	41 2f       	mov	r20, r17
    35a8:	50 e0       	ldi	r21, 0x00	; 0
    35aa:	4f 5f       	subi	r20, 0xFF	; 255
    35ac:	5f 4f       	sbci	r21, 0xFF	; 255
    35ae:	24 0f       	add	r18, r20
    35b0:	35 1f       	adc	r19, r21
    35b2:	45 2d       	mov	r20, r5
    35b4:	50 e0       	ldi	r21, 0x00	; 0
    35b6:	24 17       	cp	r18, r20
    35b8:	35 07       	cpc	r19, r21
    35ba:	14 f4       	brge	.+4      	; 0x35c0 <vfprintf+0x2b0>
    35bc:	52 1a       	sub	r5, r18
    35be:	01 c0       	rjmp	.+2      	; 0x35c2 <vfprintf+0x2b2>
    35c0:	51 2c       	mov	r5, r1
    35c2:	87 2d       	mov	r24, r7
    35c4:	89 70       	andi	r24, 0x09	; 9
    35c6:	49 f4       	brne	.+18     	; 0x35da <vfprintf+0x2ca>
    35c8:	55 20       	and	r5, r5
    35ca:	39 f0       	breq	.+14     	; 0x35da <vfprintf+0x2ca>
    35cc:	b7 01       	movw	r22, r14
    35ce:	80 e2       	ldi	r24, 0x20	; 32
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    35d6:	5a 94       	dec	r5
    35d8:	f7 cf       	rjmp	.-18     	; 0x35c8 <vfprintf+0x2b8>
    35da:	66 20       	and	r6, r6
    35dc:	29 f0       	breq	.+10     	; 0x35e8 <vfprintf+0x2d8>
    35de:	b7 01       	movw	r22, r14
    35e0:	86 2d       	mov	r24, r6
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    35e8:	73 fc       	sbrc	r7, 3
    35ea:	09 c0       	rjmp	.+18     	; 0x35fe <vfprintf+0x2ee>
    35ec:	55 20       	and	r5, r5
    35ee:	39 f0       	breq	.+14     	; 0x35fe <vfprintf+0x2ee>
    35f0:	b7 01       	movw	r22, r14
    35f2:	80 e3       	ldi	r24, 0x30	; 48
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    35fa:	5a 94       	dec	r5
    35fc:	f7 cf       	rjmp	.-18     	; 0x35ec <vfprintf+0x2dc>
    35fe:	77 fe       	sbrs	r7, 7
    3600:	5f c0       	rjmp	.+190    	; 0x36c0 <vfprintf+0x3b0>
    3602:	9c 2d       	mov	r25, r12
    3604:	8d 2d       	mov	r24, r13
    3606:	d7 fe       	sbrs	r13, 7
    3608:	02 c0       	rjmp	.+4      	; 0x360e <vfprintf+0x2fe>
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	80 e0       	ldi	r24, 0x00	; 0
    360e:	69 2e       	mov	r6, r25
    3610:	78 2e       	mov	r7, r24
    3612:	40 e0       	ldi	r20, 0x00	; 0
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	c6 01       	movw	r24, r12
    3618:	84 19       	sub	r24, r4
    361a:	91 09       	sbc	r25, r1
    361c:	9d 87       	std	Y+13, r25	; 0x0d
    361e:	8c 87       	std	Y+12, r24	; 0x0c
    3620:	96 01       	movw	r18, r12
    3622:	26 19       	sub	r18, r6
    3624:	37 09       	sbc	r19, r7
    3626:	28 0d       	add	r18, r8
    3628:	39 1d       	adc	r19, r9
    362a:	81 2f       	mov	r24, r17
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	ee 27       	eor	r30, r30
    3630:	ff 27       	eor	r31, r31
    3632:	e8 1b       	sub	r30, r24
    3634:	f9 0b       	sbc	r31, r25
    3636:	ff 87       	std	Y+15, r31	; 0x0f
    3638:	ee 87       	std	Y+14, r30	; 0x0e
    363a:	ff ef       	ldi	r31, 0xFF	; 255
    363c:	6f 16       	cp	r6, r31
    363e:	7f 06       	cpc	r7, r31
    3640:	69 f4       	brne	.+26     	; 0x365c <vfprintf+0x34c>
    3642:	b7 01       	movw	r22, r14
    3644:	8e e2       	ldi	r24, 0x2E	; 46
    3646:	90 e0       	ldi	r25, 0x00	; 0
    3648:	2b 8b       	std	Y+19, r18	; 0x13
    364a:	3a 8b       	std	Y+18, r19	; 0x12
    364c:	48 8b       	std	Y+16, r20	; 0x10
    364e:	59 8b       	std	Y+17, r21	; 0x11
    3650:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3654:	59 89       	ldd	r21, Y+17	; 0x11
    3656:	48 89       	ldd	r20, Y+16	; 0x10
    3658:	3a 89       	ldd	r19, Y+18	; 0x12
    365a:	2b 89       	ldd	r18, Y+19	; 0x13
    365c:	c6 14       	cp	r12, r6
    365e:	d7 04       	cpc	r13, r7
    3660:	54 f0       	brlt	.+20     	; 0x3676 <vfprintf+0x366>
    3662:	6c 85       	ldd	r22, Y+12	; 0x0c
    3664:	7d 85       	ldd	r23, Y+13	; 0x0d
    3666:	66 15       	cp	r22, r6
    3668:	77 05       	cpc	r23, r7
    366a:	2c f4       	brge	.+10     	; 0x3676 <vfprintf+0x366>
    366c:	f9 01       	movw	r30, r18
    366e:	e4 0f       	add	r30, r20
    3670:	f5 1f       	adc	r31, r21
    3672:	81 81       	ldd	r24, Z+1	; 0x01
    3674:	01 c0       	rjmp	.+2      	; 0x3678 <vfprintf+0x368>
    3676:	80 e3       	ldi	r24, 0x30	; 48
    3678:	71 e0       	ldi	r23, 0x01	; 1
    367a:	67 1a       	sub	r6, r23
    367c:	71 08       	sbc	r7, r1
    367e:	4f 5f       	subi	r20, 0xFF	; 255
    3680:	5f 4f       	sbci	r21, 0xFF	; 255
    3682:	ee 85       	ldd	r30, Y+14	; 0x0e
    3684:	ff 85       	ldd	r31, Y+15	; 0x0f
    3686:	6e 16       	cp	r6, r30
    3688:	7f 06       	cpc	r7, r31
    368a:	6c f0       	brlt	.+26     	; 0x36a6 <vfprintf+0x396>
    368c:	b7 01       	movw	r22, r14
    368e:	90 e0       	ldi	r25, 0x00	; 0
    3690:	2b 8b       	std	Y+19, r18	; 0x13
    3692:	3a 8b       	std	Y+18, r19	; 0x12
    3694:	48 8b       	std	Y+16, r20	; 0x10
    3696:	59 8b       	std	Y+17, r21	; 0x11
    3698:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    369c:	2b 89       	ldd	r18, Y+19	; 0x13
    369e:	3a 89       	ldd	r19, Y+18	; 0x12
    36a0:	48 89       	ldd	r20, Y+16	; 0x10
    36a2:	59 89       	ldd	r21, Y+17	; 0x11
    36a4:	ca cf       	rjmp	.-108    	; 0x363a <vfprintf+0x32a>
    36a6:	6c 14       	cp	r6, r12
    36a8:	7d 04       	cpc	r7, r13
    36aa:	39 f4       	brne	.+14     	; 0x36ba <vfprintf+0x3aa>
    36ac:	9a 81       	ldd	r25, Y+2	; 0x02
    36ae:	96 33       	cpi	r25, 0x36	; 54
    36b0:	18 f4       	brcc	.+6      	; 0x36b8 <vfprintf+0x3a8>
    36b2:	95 33       	cpi	r25, 0x35	; 53
    36b4:	11 f4       	brne	.+4      	; 0x36ba <vfprintf+0x3aa>
    36b6:	04 ff       	sbrs	r16, 4
    36b8:	81 e3       	ldi	r24, 0x31	; 49
    36ba:	b7 01       	movw	r22, r14
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	4b c0       	rjmp	.+150    	; 0x3756 <vfprintf+0x446>
    36c0:	8a 81       	ldd	r24, Y+2	; 0x02
    36c2:	81 33       	cpi	r24, 0x31	; 49
    36c4:	09 f0       	breq	.+2      	; 0x36c8 <vfprintf+0x3b8>
    36c6:	0f 7e       	andi	r16, 0xEF	; 239
    36c8:	b7 01       	movw	r22, r14
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    36d0:	11 11       	cpse	r17, r1
    36d2:	05 c0       	rjmp	.+10     	; 0x36de <vfprintf+0x3ce>
    36d4:	74 fe       	sbrs	r7, 4
    36d6:	18 c0       	rjmp	.+48     	; 0x3708 <vfprintf+0x3f8>
    36d8:	85 e4       	ldi	r24, 0x45	; 69
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	17 c0       	rjmp	.+46     	; 0x370c <vfprintf+0x3fc>
    36de:	b7 01       	movw	r22, r14
    36e0:	8e e2       	ldi	r24, 0x2E	; 46
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	66 24       	eor	r6, r6
    36ec:	63 94       	inc	r6
    36ee:	68 0e       	add	r6, r24
    36f0:	f4 01       	movw	r30, r8
    36f2:	e8 0f       	add	r30, r24
    36f4:	f1 1d       	adc	r31, r1
    36f6:	80 81       	ld	r24, Z
    36f8:	b7 01       	movw	r22, r14
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3700:	11 50       	subi	r17, 0x01	; 1
    3702:	41 f3       	breq	.-48     	; 0x36d4 <vfprintf+0x3c4>
    3704:	86 2d       	mov	r24, r6
    3706:	f1 cf       	rjmp	.-30     	; 0x36ea <vfprintf+0x3da>
    3708:	85 e6       	ldi	r24, 0x65	; 101
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	b7 01       	movw	r22, r14
    370e:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3712:	d7 fc       	sbrc	r13, 7
    3714:	05 c0       	rjmp	.+10     	; 0x3720 <vfprintf+0x410>
    3716:	c1 14       	cp	r12, r1
    3718:	d1 04       	cpc	r13, r1
    371a:	39 f4       	brne	.+14     	; 0x372a <vfprintf+0x41a>
    371c:	04 ff       	sbrs	r16, 4
    371e:	05 c0       	rjmp	.+10     	; 0x372a <vfprintf+0x41a>
    3720:	d1 94       	neg	r13
    3722:	c1 94       	neg	r12
    3724:	d1 08       	sbc	r13, r1
    3726:	8d e2       	ldi	r24, 0x2D	; 45
    3728:	01 c0       	rjmp	.+2      	; 0x372c <vfprintf+0x41c>
    372a:	8b e2       	ldi	r24, 0x2B	; 43
    372c:	b7 01       	movw	r22, r14
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3734:	80 e3       	ldi	r24, 0x30	; 48
    3736:	6a e0       	ldi	r22, 0x0A	; 10
    3738:	c6 16       	cp	r12, r22
    373a:	d1 04       	cpc	r13, r1
    373c:	2c f0       	brlt	.+10     	; 0x3748 <vfprintf+0x438>
    373e:	8f 5f       	subi	r24, 0xFF	; 255
    3740:	fa e0       	ldi	r31, 0x0A	; 10
    3742:	cf 1a       	sub	r12, r31
    3744:	d1 08       	sbc	r13, r1
    3746:	f7 cf       	rjmp	.-18     	; 0x3736 <vfprintf+0x426>
    3748:	b7 01       	movw	r22, r14
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3750:	b7 01       	movw	r22, r14
    3752:	c6 01       	movw	r24, r12
    3754:	c0 96       	adiw	r24, 0x30	; 48
    3756:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    375a:	41 c1       	rjmp	.+642    	; 0x39de <vfprintf+0x6ce>
    375c:	83 36       	cpi	r24, 0x63	; 99
    375e:	31 f0       	breq	.+12     	; 0x376c <vfprintf+0x45c>
    3760:	83 37       	cpi	r24, 0x73	; 115
    3762:	79 f0       	breq	.+30     	; 0x3782 <vfprintf+0x472>
    3764:	83 35       	cpi	r24, 0x53	; 83
    3766:	09 f0       	breq	.+2      	; 0x376a <vfprintf+0x45a>
    3768:	58 c0       	rjmp	.+176    	; 0x381a <vfprintf+0x50a>
    376a:	21 c0       	rjmp	.+66     	; 0x37ae <vfprintf+0x49e>
    376c:	56 01       	movw	r10, r12
    376e:	72 e0       	ldi	r23, 0x02	; 2
    3770:	a7 0e       	add	r10, r23
    3772:	b1 1c       	adc	r11, r1
    3774:	f6 01       	movw	r30, r12
    3776:	80 81       	ld	r24, Z
    3778:	89 83       	std	Y+1, r24	; 0x01
    377a:	01 e0       	ldi	r16, 0x01	; 1
    377c:	10 e0       	ldi	r17, 0x00	; 0
    377e:	64 01       	movw	r12, r8
    3780:	14 c0       	rjmp	.+40     	; 0x37aa <vfprintf+0x49a>
    3782:	56 01       	movw	r10, r12
    3784:	f2 e0       	ldi	r31, 0x02	; 2
    3786:	af 0e       	add	r10, r31
    3788:	b1 1c       	adc	r11, r1
    378a:	f6 01       	movw	r30, r12
    378c:	c0 80       	ld	r12, Z
    378e:	d1 80       	ldd	r13, Z+1	; 0x01
    3790:	26 ff       	sbrs	r18, 6
    3792:	03 c0       	rjmp	.+6      	; 0x379a <vfprintf+0x48a>
    3794:	61 2f       	mov	r22, r17
    3796:	70 e0       	ldi	r23, 0x00	; 0
    3798:	02 c0       	rjmp	.+4      	; 0x379e <vfprintf+0x48e>
    379a:	6f ef       	ldi	r22, 0xFF	; 255
    379c:	7f ef       	ldi	r23, 0xFF	; 255
    379e:	c6 01       	movw	r24, r12
    37a0:	2b 8b       	std	Y+19, r18	; 0x13
    37a2:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <strnlen>
    37a6:	8c 01       	movw	r16, r24
    37a8:	2b 89       	ldd	r18, Y+19	; 0x13
    37aa:	2f 77       	andi	r18, 0x7F	; 127
    37ac:	15 c0       	rjmp	.+42     	; 0x37d8 <vfprintf+0x4c8>
    37ae:	56 01       	movw	r10, r12
    37b0:	f2 e0       	ldi	r31, 0x02	; 2
    37b2:	af 0e       	add	r10, r31
    37b4:	b1 1c       	adc	r11, r1
    37b6:	f6 01       	movw	r30, r12
    37b8:	c0 80       	ld	r12, Z
    37ba:	d1 80       	ldd	r13, Z+1	; 0x01
    37bc:	26 ff       	sbrs	r18, 6
    37be:	03 c0       	rjmp	.+6      	; 0x37c6 <vfprintf+0x4b6>
    37c0:	61 2f       	mov	r22, r17
    37c2:	70 e0       	ldi	r23, 0x00	; 0
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <vfprintf+0x4ba>
    37c6:	6f ef       	ldi	r22, 0xFF	; 255
    37c8:	7f ef       	ldi	r23, 0xFF	; 255
    37ca:	c6 01       	movw	r24, r12
    37cc:	2b 8b       	std	Y+19, r18	; 0x13
    37ce:	0e 94 49 22 	call	0x4492	; 0x4492 <strnlen_P>
    37d2:	8c 01       	movw	r16, r24
    37d4:	2b 89       	ldd	r18, Y+19	; 0x13
    37d6:	20 68       	ori	r18, 0x80	; 128
    37d8:	72 2e       	mov	r7, r18
    37da:	23 fd       	sbrc	r18, 3
    37dc:	1a c0       	rjmp	.+52     	; 0x3812 <vfprintf+0x502>
    37de:	85 2d       	mov	r24, r5
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	08 17       	cp	r16, r24
    37e4:	19 07       	cpc	r17, r25
    37e6:	a8 f4       	brcc	.+42     	; 0x3812 <vfprintf+0x502>
    37e8:	b7 01       	movw	r22, r14
    37ea:	80 e2       	ldi	r24, 0x20	; 32
    37ec:	90 e0       	ldi	r25, 0x00	; 0
    37ee:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    37f2:	5a 94       	dec	r5
    37f4:	f4 cf       	rjmp	.-24     	; 0x37de <vfprintf+0x4ce>
    37f6:	f6 01       	movw	r30, r12
    37f8:	77 fc       	sbrc	r7, 7
    37fa:	85 91       	lpm	r24, Z+
    37fc:	77 fe       	sbrs	r7, 7
    37fe:	81 91       	ld	r24, Z+
    3800:	6f 01       	movw	r12, r30
    3802:	b7 01       	movw	r22, r14
    3804:	90 e0       	ldi	r25, 0x00	; 0
    3806:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    380a:	51 10       	cpse	r5, r1
    380c:	5a 94       	dec	r5
    380e:	01 50       	subi	r16, 0x01	; 1
    3810:	11 09       	sbc	r17, r1
    3812:	01 15       	cp	r16, r1
    3814:	11 05       	cpc	r17, r1
    3816:	79 f7       	brne	.-34     	; 0x37f6 <vfprintf+0x4e6>
    3818:	e2 c0       	rjmp	.+452    	; 0x39de <vfprintf+0x6ce>
    381a:	84 36       	cpi	r24, 0x64	; 100
    381c:	11 f0       	breq	.+4      	; 0x3822 <vfprintf+0x512>
    381e:	89 36       	cpi	r24, 0x69	; 105
    3820:	51 f5       	brne	.+84     	; 0x3876 <vfprintf+0x566>
    3822:	56 01       	movw	r10, r12
    3824:	27 ff       	sbrs	r18, 7
    3826:	09 c0       	rjmp	.+18     	; 0x383a <vfprintf+0x52a>
    3828:	f4 e0       	ldi	r31, 0x04	; 4
    382a:	af 0e       	add	r10, r31
    382c:	b1 1c       	adc	r11, r1
    382e:	f6 01       	movw	r30, r12
    3830:	60 81       	ld	r22, Z
    3832:	71 81       	ldd	r23, Z+1	; 0x01
    3834:	82 81       	ldd	r24, Z+2	; 0x02
    3836:	93 81       	ldd	r25, Z+3	; 0x03
    3838:	0a c0       	rjmp	.+20     	; 0x384e <vfprintf+0x53e>
    383a:	f2 e0       	ldi	r31, 0x02	; 2
    383c:	af 0e       	add	r10, r31
    383e:	b1 1c       	adc	r11, r1
    3840:	f6 01       	movw	r30, r12
    3842:	60 81       	ld	r22, Z
    3844:	71 81       	ldd	r23, Z+1	; 0x01
    3846:	88 27       	eor	r24, r24
    3848:	77 fd       	sbrc	r23, 7
    384a:	80 95       	com	r24
    384c:	98 2f       	mov	r25, r24
    384e:	02 2f       	mov	r16, r18
    3850:	0f 76       	andi	r16, 0x6F	; 111
    3852:	97 ff       	sbrs	r25, 7
    3854:	08 c0       	rjmp	.+16     	; 0x3866 <vfprintf+0x556>
    3856:	90 95       	com	r25
    3858:	80 95       	com	r24
    385a:	70 95       	com	r23
    385c:	61 95       	neg	r22
    385e:	7f 4f       	sbci	r23, 0xFF	; 255
    3860:	8f 4f       	sbci	r24, 0xFF	; 255
    3862:	9f 4f       	sbci	r25, 0xFF	; 255
    3864:	00 68       	ori	r16, 0x80	; 128
    3866:	2a e0       	ldi	r18, 0x0A	; 10
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	a4 01       	movw	r20, r8
    386c:	0e 94 1e 23 	call	0x463c	; 0x463c <__ultoa_invert>
    3870:	c8 2e       	mov	r12, r24
    3872:	c8 18       	sub	r12, r8
    3874:	3e c0       	rjmp	.+124    	; 0x38f2 <vfprintf+0x5e2>
    3876:	02 2f       	mov	r16, r18
    3878:	85 37       	cpi	r24, 0x75	; 117
    387a:	21 f4       	brne	.+8      	; 0x3884 <vfprintf+0x574>
    387c:	0f 7e       	andi	r16, 0xEF	; 239
    387e:	2a e0       	ldi	r18, 0x0A	; 10
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	1d c0       	rjmp	.+58     	; 0x38be <vfprintf+0x5ae>
    3884:	09 7f       	andi	r16, 0xF9	; 249
    3886:	8f 36       	cpi	r24, 0x6F	; 111
    3888:	91 f0       	breq	.+36     	; 0x38ae <vfprintf+0x59e>
    388a:	18 f4       	brcc	.+6      	; 0x3892 <vfprintf+0x582>
    388c:	88 35       	cpi	r24, 0x58	; 88
    388e:	59 f0       	breq	.+22     	; 0x38a6 <vfprintf+0x596>
    3890:	b0 c0       	rjmp	.+352    	; 0x39f2 <vfprintf+0x6e2>
    3892:	80 37       	cpi	r24, 0x70	; 112
    3894:	19 f0       	breq	.+6      	; 0x389c <vfprintf+0x58c>
    3896:	88 37       	cpi	r24, 0x78	; 120
    3898:	11 f0       	breq	.+4      	; 0x389e <vfprintf+0x58e>
    389a:	ab c0       	rjmp	.+342    	; 0x39f2 <vfprintf+0x6e2>
    389c:	00 61       	ori	r16, 0x10	; 16
    389e:	04 ff       	sbrs	r16, 4
    38a0:	09 c0       	rjmp	.+18     	; 0x38b4 <vfprintf+0x5a4>
    38a2:	04 60       	ori	r16, 0x04	; 4
    38a4:	07 c0       	rjmp	.+14     	; 0x38b4 <vfprintf+0x5a4>
    38a6:	24 ff       	sbrs	r18, 4
    38a8:	08 c0       	rjmp	.+16     	; 0x38ba <vfprintf+0x5aa>
    38aa:	06 60       	ori	r16, 0x06	; 6
    38ac:	06 c0       	rjmp	.+12     	; 0x38ba <vfprintf+0x5aa>
    38ae:	28 e0       	ldi	r18, 0x08	; 8
    38b0:	30 e0       	ldi	r19, 0x00	; 0
    38b2:	05 c0       	rjmp	.+10     	; 0x38be <vfprintf+0x5ae>
    38b4:	20 e1       	ldi	r18, 0x10	; 16
    38b6:	30 e0       	ldi	r19, 0x00	; 0
    38b8:	02 c0       	rjmp	.+4      	; 0x38be <vfprintf+0x5ae>
    38ba:	20 e1       	ldi	r18, 0x10	; 16
    38bc:	32 e0       	ldi	r19, 0x02	; 2
    38be:	56 01       	movw	r10, r12
    38c0:	07 ff       	sbrs	r16, 7
    38c2:	09 c0       	rjmp	.+18     	; 0x38d6 <vfprintf+0x5c6>
    38c4:	f4 e0       	ldi	r31, 0x04	; 4
    38c6:	af 0e       	add	r10, r31
    38c8:	b1 1c       	adc	r11, r1
    38ca:	f6 01       	movw	r30, r12
    38cc:	60 81       	ld	r22, Z
    38ce:	71 81       	ldd	r23, Z+1	; 0x01
    38d0:	82 81       	ldd	r24, Z+2	; 0x02
    38d2:	93 81       	ldd	r25, Z+3	; 0x03
    38d4:	08 c0       	rjmp	.+16     	; 0x38e6 <vfprintf+0x5d6>
    38d6:	f2 e0       	ldi	r31, 0x02	; 2
    38d8:	af 0e       	add	r10, r31
    38da:	b1 1c       	adc	r11, r1
    38dc:	f6 01       	movw	r30, r12
    38de:	60 81       	ld	r22, Z
    38e0:	71 81       	ldd	r23, Z+1	; 0x01
    38e2:	80 e0       	ldi	r24, 0x00	; 0
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	a4 01       	movw	r20, r8
    38e8:	0e 94 1e 23 	call	0x463c	; 0x463c <__ultoa_invert>
    38ec:	c8 2e       	mov	r12, r24
    38ee:	c8 18       	sub	r12, r8
    38f0:	0f 77       	andi	r16, 0x7F	; 127
    38f2:	06 ff       	sbrs	r16, 6
    38f4:	0b c0       	rjmp	.+22     	; 0x390c <vfprintf+0x5fc>
    38f6:	20 2f       	mov	r18, r16
    38f8:	2e 7f       	andi	r18, 0xFE	; 254
    38fa:	c1 16       	cp	r12, r17
    38fc:	50 f4       	brcc	.+20     	; 0x3912 <vfprintf+0x602>
    38fe:	04 ff       	sbrs	r16, 4
    3900:	0a c0       	rjmp	.+20     	; 0x3916 <vfprintf+0x606>
    3902:	02 fd       	sbrc	r16, 2
    3904:	08 c0       	rjmp	.+16     	; 0x3916 <vfprintf+0x606>
    3906:	20 2f       	mov	r18, r16
    3908:	2e 7e       	andi	r18, 0xEE	; 238
    390a:	05 c0       	rjmp	.+10     	; 0x3916 <vfprintf+0x606>
    390c:	dc 2c       	mov	r13, r12
    390e:	20 2f       	mov	r18, r16
    3910:	03 c0       	rjmp	.+6      	; 0x3918 <vfprintf+0x608>
    3912:	dc 2c       	mov	r13, r12
    3914:	01 c0       	rjmp	.+2      	; 0x3918 <vfprintf+0x608>
    3916:	d1 2e       	mov	r13, r17
    3918:	24 ff       	sbrs	r18, 4
    391a:	0d c0       	rjmp	.+26     	; 0x3936 <vfprintf+0x626>
    391c:	fe 01       	movw	r30, r28
    391e:	ec 0d       	add	r30, r12
    3920:	f1 1d       	adc	r31, r1
    3922:	80 81       	ld	r24, Z
    3924:	80 33       	cpi	r24, 0x30	; 48
    3926:	11 f4       	brne	.+4      	; 0x392c <vfprintf+0x61c>
    3928:	29 7e       	andi	r18, 0xE9	; 233
    392a:	09 c0       	rjmp	.+18     	; 0x393e <vfprintf+0x62e>
    392c:	22 ff       	sbrs	r18, 2
    392e:	06 c0       	rjmp	.+12     	; 0x393c <vfprintf+0x62c>
    3930:	d3 94       	inc	r13
    3932:	d3 94       	inc	r13
    3934:	04 c0       	rjmp	.+8      	; 0x393e <vfprintf+0x62e>
    3936:	82 2f       	mov	r24, r18
    3938:	86 78       	andi	r24, 0x86	; 134
    393a:	09 f0       	breq	.+2      	; 0x393e <vfprintf+0x62e>
    393c:	d3 94       	inc	r13
    393e:	23 fd       	sbrc	r18, 3
    3940:	13 c0       	rjmp	.+38     	; 0x3968 <vfprintf+0x658>
    3942:	20 ff       	sbrs	r18, 0
    3944:	06 c0       	rjmp	.+12     	; 0x3952 <vfprintf+0x642>
    3946:	1c 2d       	mov	r17, r12
    3948:	d5 14       	cp	r13, r5
    394a:	18 f4       	brcc	.+6      	; 0x3952 <vfprintf+0x642>
    394c:	15 0d       	add	r17, r5
    394e:	1d 19       	sub	r17, r13
    3950:	d5 2c       	mov	r13, r5
    3952:	d5 14       	cp	r13, r5
    3954:	68 f4       	brcc	.+26     	; 0x3970 <vfprintf+0x660>
    3956:	b7 01       	movw	r22, r14
    3958:	80 e2       	ldi	r24, 0x20	; 32
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	2b 8b       	std	Y+19, r18	; 0x13
    395e:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3962:	d3 94       	inc	r13
    3964:	2b 89       	ldd	r18, Y+19	; 0x13
    3966:	f5 cf       	rjmp	.-22     	; 0x3952 <vfprintf+0x642>
    3968:	d5 14       	cp	r13, r5
    396a:	10 f4       	brcc	.+4      	; 0x3970 <vfprintf+0x660>
    396c:	5d 18       	sub	r5, r13
    396e:	01 c0       	rjmp	.+2      	; 0x3972 <vfprintf+0x662>
    3970:	51 2c       	mov	r5, r1
    3972:	24 ff       	sbrs	r18, 4
    3974:	12 c0       	rjmp	.+36     	; 0x399a <vfprintf+0x68a>
    3976:	b7 01       	movw	r22, r14
    3978:	80 e3       	ldi	r24, 0x30	; 48
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	2b 8b       	std	Y+19, r18	; 0x13
    397e:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    3982:	2b 89       	ldd	r18, Y+19	; 0x13
    3984:	22 ff       	sbrs	r18, 2
    3986:	17 c0       	rjmp	.+46     	; 0x39b6 <vfprintf+0x6a6>
    3988:	21 ff       	sbrs	r18, 1
    398a:	03 c0       	rjmp	.+6      	; 0x3992 <vfprintf+0x682>
    398c:	88 e5       	ldi	r24, 0x58	; 88
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <vfprintf+0x686>
    3992:	88 e7       	ldi	r24, 0x78	; 120
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	b7 01       	movw	r22, r14
    3998:	0c c0       	rjmp	.+24     	; 0x39b2 <vfprintf+0x6a2>
    399a:	82 2f       	mov	r24, r18
    399c:	86 78       	andi	r24, 0x86	; 134
    399e:	59 f0       	breq	.+22     	; 0x39b6 <vfprintf+0x6a6>
    39a0:	21 fd       	sbrc	r18, 1
    39a2:	02 c0       	rjmp	.+4      	; 0x39a8 <vfprintf+0x698>
    39a4:	80 e2       	ldi	r24, 0x20	; 32
    39a6:	01 c0       	rjmp	.+2      	; 0x39aa <vfprintf+0x69a>
    39a8:	8b e2       	ldi	r24, 0x2B	; 43
    39aa:	27 fd       	sbrc	r18, 7
    39ac:	8d e2       	ldi	r24, 0x2D	; 45
    39ae:	b7 01       	movw	r22, r14
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    39b6:	c1 16       	cp	r12, r17
    39b8:	38 f4       	brcc	.+14     	; 0x39c8 <vfprintf+0x6b8>
    39ba:	b7 01       	movw	r22, r14
    39bc:	80 e3       	ldi	r24, 0x30	; 48
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    39c4:	11 50       	subi	r17, 0x01	; 1
    39c6:	f7 cf       	rjmp	.-18     	; 0x39b6 <vfprintf+0x6a6>
    39c8:	ca 94       	dec	r12
    39ca:	f4 01       	movw	r30, r8
    39cc:	ec 0d       	add	r30, r12
    39ce:	f1 1d       	adc	r31, r1
    39d0:	80 81       	ld	r24, Z
    39d2:	b7 01       	movw	r22, r14
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    39da:	c1 10       	cpse	r12, r1
    39dc:	f5 cf       	rjmp	.-22     	; 0x39c8 <vfprintf+0x6b8>
    39de:	55 20       	and	r5, r5
    39e0:	09 f4       	brne	.+2      	; 0x39e4 <vfprintf+0x6d4>
    39e2:	c2 cc       	rjmp	.-1660   	; 0x3368 <vfprintf+0x58>
    39e4:	b7 01       	movw	r22, r14
    39e6:	80 e2       	ldi	r24, 0x20	; 32
    39e8:	90 e0       	ldi	r25, 0x00	; 0
    39ea:	0e 94 ca 22 	call	0x4594	; 0x4594 <fputc>
    39ee:	5a 94       	dec	r5
    39f0:	f6 cf       	rjmp	.-20     	; 0x39de <vfprintf+0x6ce>
    39f2:	f7 01       	movw	r30, r14
    39f4:	86 81       	ldd	r24, Z+6	; 0x06
    39f6:	97 81       	ldd	r25, Z+7	; 0x07
    39f8:	02 c0       	rjmp	.+4      	; 0x39fe <vfprintf+0x6ee>
    39fa:	8f ef       	ldi	r24, 0xFF	; 255
    39fc:	9f ef       	ldi	r25, 0xFF	; 255
    39fe:	63 96       	adiw	r28, 0x13	; 19
    3a00:	e2 e1       	ldi	r30, 0x12	; 18
    3a02:	0c 94 34 1d 	jmp	0x3a68	; 0x3a68 <__epilogue_restores__>

00003a06 <__tablejump2__>:
    3a06:	ee 0f       	add	r30, r30
    3a08:	ff 1f       	adc	r31, r31

00003a0a <__tablejump__>:
    3a0a:	05 90       	lpm	r0, Z+
    3a0c:	f4 91       	lpm	r31, Z
    3a0e:	e0 2d       	mov	r30, r0
    3a10:	09 94       	ijmp

00003a12 <__umulhisi3>:
    3a12:	a2 9f       	mul	r26, r18
    3a14:	b0 01       	movw	r22, r0
    3a16:	b3 9f       	mul	r27, r19
    3a18:	c0 01       	movw	r24, r0
    3a1a:	a3 9f       	mul	r26, r19
    3a1c:	70 0d       	add	r23, r0
    3a1e:	81 1d       	adc	r24, r1
    3a20:	11 24       	eor	r1, r1
    3a22:	91 1d       	adc	r25, r1
    3a24:	b2 9f       	mul	r27, r18
    3a26:	70 0d       	add	r23, r0
    3a28:	81 1d       	adc	r24, r1
    3a2a:	11 24       	eor	r1, r1
    3a2c:	91 1d       	adc	r25, r1
    3a2e:	08 95       	ret

00003a30 <__prologue_saves__>:
    3a30:	2f 92       	push	r2
    3a32:	3f 92       	push	r3
    3a34:	4f 92       	push	r4
    3a36:	5f 92       	push	r5
    3a38:	6f 92       	push	r6
    3a3a:	7f 92       	push	r7
    3a3c:	8f 92       	push	r8
    3a3e:	9f 92       	push	r9
    3a40:	af 92       	push	r10
    3a42:	bf 92       	push	r11
    3a44:	cf 92       	push	r12
    3a46:	df 92       	push	r13
    3a48:	ef 92       	push	r14
    3a4a:	ff 92       	push	r15
    3a4c:	0f 93       	push	r16
    3a4e:	1f 93       	push	r17
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	cd b7       	in	r28, 0x3d	; 61
    3a56:	de b7       	in	r29, 0x3e	; 62
    3a58:	ca 1b       	sub	r28, r26
    3a5a:	db 0b       	sbc	r29, r27
    3a5c:	0f b6       	in	r0, 0x3f	; 63
    3a5e:	f8 94       	cli
    3a60:	de bf       	out	0x3e, r29	; 62
    3a62:	0f be       	out	0x3f, r0	; 63
    3a64:	cd bf       	out	0x3d, r28	; 61
    3a66:	09 94       	ijmp

00003a68 <__epilogue_restores__>:
    3a68:	2a 88       	ldd	r2, Y+18	; 0x12
    3a6a:	39 88       	ldd	r3, Y+17	; 0x11
    3a6c:	48 88       	ldd	r4, Y+16	; 0x10
    3a6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a70:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a72:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a74:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a76:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a78:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a7a:	b9 84       	ldd	r11, Y+9	; 0x09
    3a7c:	c8 84       	ldd	r12, Y+8	; 0x08
    3a7e:	df 80       	ldd	r13, Y+7	; 0x07
    3a80:	ee 80       	ldd	r14, Y+6	; 0x06
    3a82:	fd 80       	ldd	r15, Y+5	; 0x05
    3a84:	0c 81       	ldd	r16, Y+4	; 0x04
    3a86:	1b 81       	ldd	r17, Y+3	; 0x03
    3a88:	aa 81       	ldd	r26, Y+2	; 0x02
    3a8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a8c:	ce 0f       	add	r28, r30
    3a8e:	d1 1d       	adc	r29, r1
    3a90:	0f b6       	in	r0, 0x3f	; 63
    3a92:	f8 94       	cli
    3a94:	de bf       	out	0x3e, r29	; 62
    3a96:	0f be       	out	0x3f, r0	; 63
    3a98:	cd bf       	out	0x3d, r28	; 61
    3a9a:	ed 01       	movw	r28, r26
    3a9c:	08 95       	ret

00003a9e <__subsf3>:
    3a9e:	50 58       	subi	r21, 0x80	; 128

00003aa0 <__addsf3>:
    3aa0:	bb 27       	eor	r27, r27
    3aa2:	aa 27       	eor	r26, r26
    3aa4:	0e d0       	rcall	.+28     	; 0x3ac2 <__addsf3x>
    3aa6:	83 c2       	rjmp	.+1286   	; 0x3fae <__fp_round>
    3aa8:	4c d2       	rcall	.+1176   	; 0x3f42 <__fp_pscA>
    3aaa:	30 f0       	brcs	.+12     	; 0x3ab8 <__addsf3+0x18>
    3aac:	51 d2       	rcall	.+1186   	; 0x3f50 <__fp_pscB>
    3aae:	20 f0       	brcs	.+8      	; 0x3ab8 <__addsf3+0x18>
    3ab0:	31 f4       	brne	.+12     	; 0x3abe <__addsf3+0x1e>
    3ab2:	9f 3f       	cpi	r25, 0xFF	; 255
    3ab4:	11 f4       	brne	.+4      	; 0x3aba <__addsf3+0x1a>
    3ab6:	1e f4       	brtc	.+6      	; 0x3abe <__addsf3+0x1e>
    3ab8:	1c c2       	rjmp	.+1080   	; 0x3ef2 <__fp_nan>
    3aba:	0e f4       	brtc	.+2      	; 0x3abe <__addsf3+0x1e>
    3abc:	e0 95       	com	r30
    3abe:	e7 fb       	bst	r30, 7
    3ac0:	04 c2       	rjmp	.+1032   	; 0x3eca <__fp_inf>

00003ac2 <__addsf3x>:
    3ac2:	e9 2f       	mov	r30, r25
    3ac4:	96 d2       	rcall	.+1324   	; 0x3ff2 <__fp_split3>
    3ac6:	80 f3       	brcs	.-32     	; 0x3aa8 <__addsf3+0x8>
    3ac8:	ba 17       	cp	r27, r26
    3aca:	62 07       	cpc	r22, r18
    3acc:	73 07       	cpc	r23, r19
    3ace:	84 07       	cpc	r24, r20
    3ad0:	95 07       	cpc	r25, r21
    3ad2:	18 f0       	brcs	.+6      	; 0x3ada <__addsf3x+0x18>
    3ad4:	71 f4       	brne	.+28     	; 0x3af2 <__addsf3x+0x30>
    3ad6:	9e f5       	brtc	.+102    	; 0x3b3e <__addsf3x+0x7c>
    3ad8:	ae c2       	rjmp	.+1372   	; 0x4036 <__fp_zero>
    3ada:	0e f4       	brtc	.+2      	; 0x3ade <__addsf3x+0x1c>
    3adc:	e0 95       	com	r30
    3ade:	0b 2e       	mov	r0, r27
    3ae0:	ba 2f       	mov	r27, r26
    3ae2:	a0 2d       	mov	r26, r0
    3ae4:	0b 01       	movw	r0, r22
    3ae6:	b9 01       	movw	r22, r18
    3ae8:	90 01       	movw	r18, r0
    3aea:	0c 01       	movw	r0, r24
    3aec:	ca 01       	movw	r24, r20
    3aee:	a0 01       	movw	r20, r0
    3af0:	11 24       	eor	r1, r1
    3af2:	ff 27       	eor	r31, r31
    3af4:	59 1b       	sub	r21, r25
    3af6:	99 f0       	breq	.+38     	; 0x3b1e <__addsf3x+0x5c>
    3af8:	59 3f       	cpi	r21, 0xF9	; 249
    3afa:	50 f4       	brcc	.+20     	; 0x3b10 <__addsf3x+0x4e>
    3afc:	50 3e       	cpi	r21, 0xE0	; 224
    3afe:	68 f1       	brcs	.+90     	; 0x3b5a <__addsf3x+0x98>
    3b00:	1a 16       	cp	r1, r26
    3b02:	f0 40       	sbci	r31, 0x00	; 0
    3b04:	a2 2f       	mov	r26, r18
    3b06:	23 2f       	mov	r18, r19
    3b08:	34 2f       	mov	r19, r20
    3b0a:	44 27       	eor	r20, r20
    3b0c:	58 5f       	subi	r21, 0xF8	; 248
    3b0e:	f3 cf       	rjmp	.-26     	; 0x3af6 <__addsf3x+0x34>
    3b10:	46 95       	lsr	r20
    3b12:	37 95       	ror	r19
    3b14:	27 95       	ror	r18
    3b16:	a7 95       	ror	r26
    3b18:	f0 40       	sbci	r31, 0x00	; 0
    3b1a:	53 95       	inc	r21
    3b1c:	c9 f7       	brne	.-14     	; 0x3b10 <__addsf3x+0x4e>
    3b1e:	7e f4       	brtc	.+30     	; 0x3b3e <__addsf3x+0x7c>
    3b20:	1f 16       	cp	r1, r31
    3b22:	ba 0b       	sbc	r27, r26
    3b24:	62 0b       	sbc	r22, r18
    3b26:	73 0b       	sbc	r23, r19
    3b28:	84 0b       	sbc	r24, r20
    3b2a:	ba f0       	brmi	.+46     	; 0x3b5a <__addsf3x+0x98>
    3b2c:	91 50       	subi	r25, 0x01	; 1
    3b2e:	a1 f0       	breq	.+40     	; 0x3b58 <__addsf3x+0x96>
    3b30:	ff 0f       	add	r31, r31
    3b32:	bb 1f       	adc	r27, r27
    3b34:	66 1f       	adc	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	88 1f       	adc	r24, r24
    3b3a:	c2 f7       	brpl	.-16     	; 0x3b2c <__addsf3x+0x6a>
    3b3c:	0e c0       	rjmp	.+28     	; 0x3b5a <__addsf3x+0x98>
    3b3e:	ba 0f       	add	r27, r26
    3b40:	62 1f       	adc	r22, r18
    3b42:	73 1f       	adc	r23, r19
    3b44:	84 1f       	adc	r24, r20
    3b46:	48 f4       	brcc	.+18     	; 0x3b5a <__addsf3x+0x98>
    3b48:	87 95       	ror	r24
    3b4a:	77 95       	ror	r23
    3b4c:	67 95       	ror	r22
    3b4e:	b7 95       	ror	r27
    3b50:	f7 95       	ror	r31
    3b52:	9e 3f       	cpi	r25, 0xFE	; 254
    3b54:	08 f0       	brcs	.+2      	; 0x3b58 <__addsf3x+0x96>
    3b56:	b3 cf       	rjmp	.-154    	; 0x3abe <__addsf3+0x1e>
    3b58:	93 95       	inc	r25
    3b5a:	88 0f       	add	r24, r24
    3b5c:	08 f0       	brcs	.+2      	; 0x3b60 <__addsf3x+0x9e>
    3b5e:	99 27       	eor	r25, r25
    3b60:	ee 0f       	add	r30, r30
    3b62:	97 95       	ror	r25
    3b64:	87 95       	ror	r24
    3b66:	08 95       	ret
    3b68:	ec d1       	rcall	.+984    	; 0x3f42 <__fp_pscA>
    3b6a:	58 f0       	brcs	.+22     	; 0x3b82 <__addsf3x+0xc0>
    3b6c:	80 e8       	ldi	r24, 0x80	; 128
    3b6e:	91 e0       	ldi	r25, 0x01	; 1
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <__addsf3x+0xb2>
    3b72:	9e ef       	ldi	r25, 0xFE	; 254
    3b74:	ed d1       	rcall	.+986    	; 0x3f50 <__fp_pscB>
    3b76:	28 f0       	brcs	.+10     	; 0x3b82 <__addsf3x+0xc0>
    3b78:	40 e8       	ldi	r20, 0x80	; 128
    3b7a:	51 e0       	ldi	r21, 0x01	; 1
    3b7c:	59 f4       	brne	.+22     	; 0x3b94 <atan2+0xe>
    3b7e:	5e ef       	ldi	r21, 0xFE	; 254
    3b80:	09 c0       	rjmp	.+18     	; 0x3b94 <atan2+0xe>
    3b82:	b7 c1       	rjmp	.+878    	; 0x3ef2 <__fp_nan>
    3b84:	58 c2       	rjmp	.+1200   	; 0x4036 <__fp_zero>

00003b86 <atan2>:
    3b86:	e9 2f       	mov	r30, r25
    3b88:	e0 78       	andi	r30, 0x80	; 128
    3b8a:	33 d2       	rcall	.+1126   	; 0x3ff2 <__fp_split3>
    3b8c:	68 f3       	brcs	.-38     	; 0x3b68 <__addsf3x+0xa6>
    3b8e:	09 2e       	mov	r0, r25
    3b90:	05 2a       	or	r0, r21
    3b92:	c1 f3       	breq	.-16     	; 0x3b84 <__addsf3x+0xc2>
    3b94:	26 17       	cp	r18, r22
    3b96:	37 07       	cpc	r19, r23
    3b98:	48 07       	cpc	r20, r24
    3b9a:	59 07       	cpc	r21, r25
    3b9c:	38 f0       	brcs	.+14     	; 0x3bac <atan2+0x26>
    3b9e:	0e 2e       	mov	r0, r30
    3ba0:	07 f8       	bld	r0, 7
    3ba2:	e0 25       	eor	r30, r0
    3ba4:	69 f0       	breq	.+26     	; 0x3bc0 <atan2+0x3a>
    3ba6:	e0 25       	eor	r30, r0
    3ba8:	e0 64       	ori	r30, 0x40	; 64
    3baa:	0a c0       	rjmp	.+20     	; 0x3bc0 <atan2+0x3a>
    3bac:	ef 63       	ori	r30, 0x3F	; 63
    3bae:	07 f8       	bld	r0, 7
    3bb0:	00 94       	com	r0
    3bb2:	07 fa       	bst	r0, 7
    3bb4:	db 01       	movw	r26, r22
    3bb6:	b9 01       	movw	r22, r18
    3bb8:	9d 01       	movw	r18, r26
    3bba:	dc 01       	movw	r26, r24
    3bbc:	ca 01       	movw	r24, r20
    3bbe:	ad 01       	movw	r20, r26
    3bc0:	ef 93       	push	r30
    3bc2:	4a d0       	rcall	.+148    	; 0x3c58 <__divsf3_pse>
    3bc4:	f4 d1       	rcall	.+1000   	; 0x3fae <__fp_round>
    3bc6:	0a d0       	rcall	.+20     	; 0x3bdc <atan>
    3bc8:	5f 91       	pop	r21
    3bca:	55 23       	and	r21, r21
    3bcc:	31 f0       	breq	.+12     	; 0x3bda <atan2+0x54>
    3bce:	2b ed       	ldi	r18, 0xDB	; 219
    3bd0:	3f e0       	ldi	r19, 0x0F	; 15
    3bd2:	49 e4       	ldi	r20, 0x49	; 73
    3bd4:	50 fd       	sbrc	r21, 0
    3bd6:	49 ec       	ldi	r20, 0xC9	; 201
    3bd8:	63 cf       	rjmp	.-314    	; 0x3aa0 <__addsf3>
    3bda:	08 95       	ret

00003bdc <atan>:
    3bdc:	df 93       	push	r29
    3bde:	dd 27       	eor	r29, r29
    3be0:	b9 2f       	mov	r27, r25
    3be2:	bf 77       	andi	r27, 0x7F	; 127
    3be4:	40 e8       	ldi	r20, 0x80	; 128
    3be6:	5f e3       	ldi	r21, 0x3F	; 63
    3be8:	16 16       	cp	r1, r22
    3bea:	17 06       	cpc	r1, r23
    3bec:	48 07       	cpc	r20, r24
    3bee:	5b 07       	cpc	r21, r27
    3bf0:	10 f4       	brcc	.+4      	; 0x3bf6 <atan+0x1a>
    3bf2:	d9 2f       	mov	r29, r25
    3bf4:	2b d2       	rcall	.+1110   	; 0x404c <inverse>
    3bf6:	9f 93       	push	r25
    3bf8:	8f 93       	push	r24
    3bfa:	7f 93       	push	r23
    3bfc:	6f 93       	push	r22
    3bfe:	f8 d2       	rcall	.+1520   	; 0x41f0 <square>
    3c00:	e6 ef       	ldi	r30, 0xF6	; 246
    3c02:	f0 e0       	ldi	r31, 0x00	; 0
    3c04:	79 d1       	rcall	.+754    	; 0x3ef8 <__fp_powser>
    3c06:	d3 d1       	rcall	.+934    	; 0x3fae <__fp_round>
    3c08:	2f 91       	pop	r18
    3c0a:	3f 91       	pop	r19
    3c0c:	4f 91       	pop	r20
    3c0e:	5f 91       	pop	r21
    3c10:	30 d2       	rcall	.+1120   	; 0x4072 <__mulsf3x>
    3c12:	dd 23       	and	r29, r29
    3c14:	49 f0       	breq	.+18     	; 0x3c28 <atan+0x4c>
    3c16:	90 58       	subi	r25, 0x80	; 128
    3c18:	a2 ea       	ldi	r26, 0xA2	; 162
    3c1a:	2a ed       	ldi	r18, 0xDA	; 218
    3c1c:	3f e0       	ldi	r19, 0x0F	; 15
    3c1e:	49 ec       	ldi	r20, 0xC9	; 201
    3c20:	5f e3       	ldi	r21, 0x3F	; 63
    3c22:	d0 78       	andi	r29, 0x80	; 128
    3c24:	5d 27       	eor	r21, r29
    3c26:	4d df       	rcall	.-358    	; 0x3ac2 <__addsf3x>
    3c28:	df 91       	pop	r29
    3c2a:	c1 c1       	rjmp	.+898    	; 0x3fae <__fp_round>

00003c2c <__cmpsf2>:
    3c2c:	2a d1       	rcall	.+596    	; 0x3e82 <__fp_cmp>
    3c2e:	08 f4       	brcc	.+2      	; 0x3c32 <__cmpsf2+0x6>
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	08 95       	ret

00003c34 <cos>:
    3c34:	95 d1       	rcall	.+810    	; 0x3f60 <__fp_rempio2>
    3c36:	e3 95       	inc	r30
    3c38:	cb c1       	rjmp	.+918    	; 0x3fd0 <__fp_sinus>

00003c3a <__divsf3>:
    3c3a:	0c d0       	rcall	.+24     	; 0x3c54 <__divsf3x>
    3c3c:	b8 c1       	rjmp	.+880    	; 0x3fae <__fp_round>
    3c3e:	88 d1       	rcall	.+784    	; 0x3f50 <__fp_pscB>
    3c40:	40 f0       	brcs	.+16     	; 0x3c52 <__divsf3+0x18>
    3c42:	7f d1       	rcall	.+766    	; 0x3f42 <__fp_pscA>
    3c44:	30 f0       	brcs	.+12     	; 0x3c52 <__divsf3+0x18>
    3c46:	21 f4       	brne	.+8      	; 0x3c50 <__divsf3+0x16>
    3c48:	5f 3f       	cpi	r21, 0xFF	; 255
    3c4a:	19 f0       	breq	.+6      	; 0x3c52 <__divsf3+0x18>
    3c4c:	3e c1       	rjmp	.+636    	; 0x3eca <__fp_inf>
    3c4e:	51 11       	cpse	r21, r1
    3c50:	f3 c1       	rjmp	.+998    	; 0x4038 <__fp_szero>
    3c52:	4f c1       	rjmp	.+670    	; 0x3ef2 <__fp_nan>

00003c54 <__divsf3x>:
    3c54:	ce d1       	rcall	.+924    	; 0x3ff2 <__fp_split3>
    3c56:	98 f3       	brcs	.-26     	; 0x3c3e <__divsf3+0x4>

00003c58 <__divsf3_pse>:
    3c58:	99 23       	and	r25, r25
    3c5a:	c9 f3       	breq	.-14     	; 0x3c4e <__divsf3+0x14>
    3c5c:	55 23       	and	r21, r21
    3c5e:	b1 f3       	breq	.-20     	; 0x3c4c <__divsf3+0x12>
    3c60:	95 1b       	sub	r25, r21
    3c62:	55 0b       	sbc	r21, r21
    3c64:	bb 27       	eor	r27, r27
    3c66:	aa 27       	eor	r26, r26
    3c68:	62 17       	cp	r22, r18
    3c6a:	73 07       	cpc	r23, r19
    3c6c:	84 07       	cpc	r24, r20
    3c6e:	38 f0       	brcs	.+14     	; 0x3c7e <__divsf3_pse+0x26>
    3c70:	9f 5f       	subi	r25, 0xFF	; 255
    3c72:	5f 4f       	sbci	r21, 0xFF	; 255
    3c74:	22 0f       	add	r18, r18
    3c76:	33 1f       	adc	r19, r19
    3c78:	44 1f       	adc	r20, r20
    3c7a:	aa 1f       	adc	r26, r26
    3c7c:	a9 f3       	breq	.-22     	; 0x3c68 <__divsf3_pse+0x10>
    3c7e:	33 d0       	rcall	.+102    	; 0x3ce6 <__divsf3_pse+0x8e>
    3c80:	0e 2e       	mov	r0, r30
    3c82:	3a f0       	brmi	.+14     	; 0x3c92 <__divsf3_pse+0x3a>
    3c84:	e0 e8       	ldi	r30, 0x80	; 128
    3c86:	30 d0       	rcall	.+96     	; 0x3ce8 <__divsf3_pse+0x90>
    3c88:	91 50       	subi	r25, 0x01	; 1
    3c8a:	50 40       	sbci	r21, 0x00	; 0
    3c8c:	e6 95       	lsr	r30
    3c8e:	00 1c       	adc	r0, r0
    3c90:	ca f7       	brpl	.-14     	; 0x3c84 <__divsf3_pse+0x2c>
    3c92:	29 d0       	rcall	.+82     	; 0x3ce6 <__divsf3_pse+0x8e>
    3c94:	fe 2f       	mov	r31, r30
    3c96:	27 d0       	rcall	.+78     	; 0x3ce6 <__divsf3_pse+0x8e>
    3c98:	66 0f       	add	r22, r22
    3c9a:	77 1f       	adc	r23, r23
    3c9c:	88 1f       	adc	r24, r24
    3c9e:	bb 1f       	adc	r27, r27
    3ca0:	26 17       	cp	r18, r22
    3ca2:	37 07       	cpc	r19, r23
    3ca4:	48 07       	cpc	r20, r24
    3ca6:	ab 07       	cpc	r26, r27
    3ca8:	b0 e8       	ldi	r27, 0x80	; 128
    3caa:	09 f0       	breq	.+2      	; 0x3cae <__divsf3_pse+0x56>
    3cac:	bb 0b       	sbc	r27, r27
    3cae:	80 2d       	mov	r24, r0
    3cb0:	bf 01       	movw	r22, r30
    3cb2:	ff 27       	eor	r31, r31
    3cb4:	93 58       	subi	r25, 0x83	; 131
    3cb6:	5f 4f       	sbci	r21, 0xFF	; 255
    3cb8:	2a f0       	brmi	.+10     	; 0x3cc4 <__divsf3_pse+0x6c>
    3cba:	9e 3f       	cpi	r25, 0xFE	; 254
    3cbc:	51 05       	cpc	r21, r1
    3cbe:	68 f0       	brcs	.+26     	; 0x3cda <__divsf3_pse+0x82>
    3cc0:	04 c1       	rjmp	.+520    	; 0x3eca <__fp_inf>
    3cc2:	ba c1       	rjmp	.+884    	; 0x4038 <__fp_szero>
    3cc4:	5f 3f       	cpi	r21, 0xFF	; 255
    3cc6:	ec f3       	brlt	.-6      	; 0x3cc2 <__divsf3_pse+0x6a>
    3cc8:	98 3e       	cpi	r25, 0xE8	; 232
    3cca:	dc f3       	brlt	.-10     	; 0x3cc2 <__divsf3_pse+0x6a>
    3ccc:	86 95       	lsr	r24
    3cce:	77 95       	ror	r23
    3cd0:	67 95       	ror	r22
    3cd2:	b7 95       	ror	r27
    3cd4:	f7 95       	ror	r31
    3cd6:	9f 5f       	subi	r25, 0xFF	; 255
    3cd8:	c9 f7       	brne	.-14     	; 0x3ccc <__divsf3_pse+0x74>
    3cda:	88 0f       	add	r24, r24
    3cdc:	91 1d       	adc	r25, r1
    3cde:	96 95       	lsr	r25
    3ce0:	87 95       	ror	r24
    3ce2:	97 f9       	bld	r25, 7
    3ce4:	08 95       	ret
    3ce6:	e1 e0       	ldi	r30, 0x01	; 1
    3ce8:	66 0f       	add	r22, r22
    3cea:	77 1f       	adc	r23, r23
    3cec:	88 1f       	adc	r24, r24
    3cee:	bb 1f       	adc	r27, r27
    3cf0:	62 17       	cp	r22, r18
    3cf2:	73 07       	cpc	r23, r19
    3cf4:	84 07       	cpc	r24, r20
    3cf6:	ba 07       	cpc	r27, r26
    3cf8:	20 f0       	brcs	.+8      	; 0x3d02 <__divsf3_pse+0xaa>
    3cfa:	62 1b       	sub	r22, r18
    3cfc:	73 0b       	sbc	r23, r19
    3cfe:	84 0b       	sbc	r24, r20
    3d00:	ba 0b       	sbc	r27, r26
    3d02:	ee 1f       	adc	r30, r30
    3d04:	88 f7       	brcc	.-30     	; 0x3ce8 <__divsf3_pse+0x90>
    3d06:	e0 95       	com	r30
    3d08:	08 95       	ret

00003d0a <__fixsfsi>:
    3d0a:	04 d0       	rcall	.+8      	; 0x3d14 <__fixunssfsi>
    3d0c:	68 94       	set
    3d0e:	b1 11       	cpse	r27, r1
    3d10:	93 c1       	rjmp	.+806    	; 0x4038 <__fp_szero>
    3d12:	08 95       	ret

00003d14 <__fixunssfsi>:
    3d14:	76 d1       	rcall	.+748    	; 0x4002 <__fp_splitA>
    3d16:	88 f0       	brcs	.+34     	; 0x3d3a <__fixunssfsi+0x26>
    3d18:	9f 57       	subi	r25, 0x7F	; 127
    3d1a:	90 f0       	brcs	.+36     	; 0x3d40 <__fixunssfsi+0x2c>
    3d1c:	b9 2f       	mov	r27, r25
    3d1e:	99 27       	eor	r25, r25
    3d20:	b7 51       	subi	r27, 0x17	; 23
    3d22:	a0 f0       	brcs	.+40     	; 0x3d4c <__fixunssfsi+0x38>
    3d24:	d1 f0       	breq	.+52     	; 0x3d5a <__fixunssfsi+0x46>
    3d26:	66 0f       	add	r22, r22
    3d28:	77 1f       	adc	r23, r23
    3d2a:	88 1f       	adc	r24, r24
    3d2c:	99 1f       	adc	r25, r25
    3d2e:	1a f0       	brmi	.+6      	; 0x3d36 <__fixunssfsi+0x22>
    3d30:	ba 95       	dec	r27
    3d32:	c9 f7       	brne	.-14     	; 0x3d26 <__fixunssfsi+0x12>
    3d34:	12 c0       	rjmp	.+36     	; 0x3d5a <__fixunssfsi+0x46>
    3d36:	b1 30       	cpi	r27, 0x01	; 1
    3d38:	81 f0       	breq	.+32     	; 0x3d5a <__fixunssfsi+0x46>
    3d3a:	7d d1       	rcall	.+762    	; 0x4036 <__fp_zero>
    3d3c:	b1 e0       	ldi	r27, 0x01	; 1
    3d3e:	08 95       	ret
    3d40:	7a c1       	rjmp	.+756    	; 0x4036 <__fp_zero>
    3d42:	67 2f       	mov	r22, r23
    3d44:	78 2f       	mov	r23, r24
    3d46:	88 27       	eor	r24, r24
    3d48:	b8 5f       	subi	r27, 0xF8	; 248
    3d4a:	39 f0       	breq	.+14     	; 0x3d5a <__fixunssfsi+0x46>
    3d4c:	b9 3f       	cpi	r27, 0xF9	; 249
    3d4e:	cc f3       	brlt	.-14     	; 0x3d42 <__fixunssfsi+0x2e>
    3d50:	86 95       	lsr	r24
    3d52:	77 95       	ror	r23
    3d54:	67 95       	ror	r22
    3d56:	b3 95       	inc	r27
    3d58:	d9 f7       	brne	.-10     	; 0x3d50 <__fixunssfsi+0x3c>
    3d5a:	3e f4       	brtc	.+14     	; 0x3d6a <__fixunssfsi+0x56>
    3d5c:	90 95       	com	r25
    3d5e:	80 95       	com	r24
    3d60:	70 95       	com	r23
    3d62:	61 95       	neg	r22
    3d64:	7f 4f       	sbci	r23, 0xFF	; 255
    3d66:	8f 4f       	sbci	r24, 0xFF	; 255
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	08 95       	ret

00003d6c <__floatunsisf>:
    3d6c:	e8 94       	clt
    3d6e:	09 c0       	rjmp	.+18     	; 0x3d82 <__floatsisf+0x12>

00003d70 <__floatsisf>:
    3d70:	97 fb       	bst	r25, 7
    3d72:	3e f4       	brtc	.+14     	; 0x3d82 <__floatsisf+0x12>
    3d74:	90 95       	com	r25
    3d76:	80 95       	com	r24
    3d78:	70 95       	com	r23
    3d7a:	61 95       	neg	r22
    3d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d80:	9f 4f       	sbci	r25, 0xFF	; 255
    3d82:	99 23       	and	r25, r25
    3d84:	a9 f0       	breq	.+42     	; 0x3db0 <__floatsisf+0x40>
    3d86:	f9 2f       	mov	r31, r25
    3d88:	96 e9       	ldi	r25, 0x96	; 150
    3d8a:	bb 27       	eor	r27, r27
    3d8c:	93 95       	inc	r25
    3d8e:	f6 95       	lsr	r31
    3d90:	87 95       	ror	r24
    3d92:	77 95       	ror	r23
    3d94:	67 95       	ror	r22
    3d96:	b7 95       	ror	r27
    3d98:	f1 11       	cpse	r31, r1
    3d9a:	f8 cf       	rjmp	.-16     	; 0x3d8c <__floatsisf+0x1c>
    3d9c:	fa f4       	brpl	.+62     	; 0x3ddc <__floatsisf+0x6c>
    3d9e:	bb 0f       	add	r27, r27
    3da0:	11 f4       	brne	.+4      	; 0x3da6 <__floatsisf+0x36>
    3da2:	60 ff       	sbrs	r22, 0
    3da4:	1b c0       	rjmp	.+54     	; 0x3ddc <__floatsisf+0x6c>
    3da6:	6f 5f       	subi	r22, 0xFF	; 255
    3da8:	7f 4f       	sbci	r23, 0xFF	; 255
    3daa:	8f 4f       	sbci	r24, 0xFF	; 255
    3dac:	9f 4f       	sbci	r25, 0xFF	; 255
    3dae:	16 c0       	rjmp	.+44     	; 0x3ddc <__floatsisf+0x6c>
    3db0:	88 23       	and	r24, r24
    3db2:	11 f0       	breq	.+4      	; 0x3db8 <__floatsisf+0x48>
    3db4:	96 e9       	ldi	r25, 0x96	; 150
    3db6:	11 c0       	rjmp	.+34     	; 0x3dda <__floatsisf+0x6a>
    3db8:	77 23       	and	r23, r23
    3dba:	21 f0       	breq	.+8      	; 0x3dc4 <__floatsisf+0x54>
    3dbc:	9e e8       	ldi	r25, 0x8E	; 142
    3dbe:	87 2f       	mov	r24, r23
    3dc0:	76 2f       	mov	r23, r22
    3dc2:	05 c0       	rjmp	.+10     	; 0x3dce <__floatsisf+0x5e>
    3dc4:	66 23       	and	r22, r22
    3dc6:	71 f0       	breq	.+28     	; 0x3de4 <__floatsisf+0x74>
    3dc8:	96 e8       	ldi	r25, 0x86	; 134
    3dca:	86 2f       	mov	r24, r22
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	60 e0       	ldi	r22, 0x00	; 0
    3dd0:	2a f0       	brmi	.+10     	; 0x3ddc <__floatsisf+0x6c>
    3dd2:	9a 95       	dec	r25
    3dd4:	66 0f       	add	r22, r22
    3dd6:	77 1f       	adc	r23, r23
    3dd8:	88 1f       	adc	r24, r24
    3dda:	da f7       	brpl	.-10     	; 0x3dd2 <__floatsisf+0x62>
    3ddc:	88 0f       	add	r24, r24
    3dde:	96 95       	lsr	r25
    3de0:	87 95       	ror	r24
    3de2:	97 f9       	bld	r25, 7
    3de4:	08 95       	ret
    3de6:	ad d0       	rcall	.+346    	; 0x3f42 <__fp_pscA>
    3de8:	18 f0       	brcs	.+6      	; 0x3df0 <__floatsisf+0x80>
    3dea:	11 f0       	breq	.+4      	; 0x3df0 <__floatsisf+0x80>
    3dec:	b1 d0       	rcall	.+354    	; 0x3f50 <__fp_pscB>
    3dee:	38 f4       	brcc	.+14     	; 0x3dfe <fmod+0xa>
    3df0:	80 c0       	rjmp	.+256    	; 0x3ef2 <__fp_nan>
    3df2:	22 c1       	rjmp	.+580    	; 0x4038 <__fp_szero>

00003df4 <fmod>:
    3df4:	e9 2f       	mov	r30, r25
    3df6:	fd d0       	rcall	.+506    	; 0x3ff2 <__fp_split3>
    3df8:	b0 f3       	brcs	.-20     	; 0x3de6 <__floatsisf+0x76>
    3dfa:	55 23       	and	r21, r21
    3dfc:	c9 f3       	breq	.-14     	; 0x3df0 <__floatsisf+0x80>
    3dfe:	e7 fb       	bst	r30, 7
    3e00:	62 17       	cp	r22, r18
    3e02:	73 07       	cpc	r23, r19
    3e04:	84 07       	cpc	r24, r20
    3e06:	95 07       	cpc	r25, r21
    3e08:	a8 f1       	brcs	.+106    	; 0x3e74 <fmod+0x80>
    3e0a:	99 f3       	breq	.-26     	; 0x3df2 <__floatsisf+0x82>
    3e0c:	e9 2f       	mov	r30, r25
    3e0e:	ff 27       	eor	r31, r31
    3e10:	88 23       	and	r24, r24
    3e12:	2a f0       	brmi	.+10     	; 0x3e1e <fmod+0x2a>
    3e14:	31 97       	sbiw	r30, 0x01	; 1
    3e16:	66 0f       	add	r22, r22
    3e18:	77 1f       	adc	r23, r23
    3e1a:	88 1f       	adc	r24, r24
    3e1c:	da f7       	brpl	.-10     	; 0x3e14 <fmod+0x20>
    3e1e:	95 2f       	mov	r25, r21
    3e20:	55 27       	eor	r21, r21
    3e22:	44 23       	and	r20, r20
    3e24:	32 f0       	brmi	.+12     	; 0x3e32 <fmod+0x3e>
    3e26:	91 50       	subi	r25, 0x01	; 1
    3e28:	50 40       	sbci	r21, 0x00	; 0
    3e2a:	22 0f       	add	r18, r18
    3e2c:	33 1f       	adc	r19, r19
    3e2e:	44 1f       	adc	r20, r20
    3e30:	d2 f7       	brpl	.-12     	; 0x3e26 <fmod+0x32>
    3e32:	bb 27       	eor	r27, r27
    3e34:	e9 1b       	sub	r30, r25
    3e36:	f5 0b       	sbc	r31, r21
    3e38:	62 1b       	sub	r22, r18
    3e3a:	73 0b       	sbc	r23, r19
    3e3c:	84 0b       	sbc	r24, r20
    3e3e:	b1 09       	sbc	r27, r1
    3e40:	c1 f2       	breq	.-80     	; 0x3df2 <__floatsisf+0x82>
    3e42:	22 f4       	brpl	.+8      	; 0x3e4c <fmod+0x58>
    3e44:	62 0f       	add	r22, r18
    3e46:	73 1f       	adc	r23, r19
    3e48:	84 1f       	adc	r24, r20
    3e4a:	b1 1d       	adc	r27, r1
    3e4c:	31 97       	sbiw	r30, 0x01	; 1
    3e4e:	2a f0       	brmi	.+10     	; 0x3e5a <fmod+0x66>
    3e50:	66 0f       	add	r22, r22
    3e52:	77 1f       	adc	r23, r23
    3e54:	88 1f       	adc	r24, r24
    3e56:	bb 1f       	adc	r27, r27
    3e58:	ef cf       	rjmp	.-34     	; 0x3e38 <fmod+0x44>
    3e5a:	91 50       	subi	r25, 0x01	; 1
    3e5c:	50 40       	sbci	r21, 0x00	; 0
    3e5e:	5a f0       	brmi	.+22     	; 0x3e76 <fmod+0x82>
    3e60:	41 f0       	breq	.+16     	; 0x3e72 <fmod+0x7e>
    3e62:	88 23       	and	r24, r24
    3e64:	32 f0       	brmi	.+12     	; 0x3e72 <fmod+0x7e>
    3e66:	66 0f       	add	r22, r22
    3e68:	77 1f       	adc	r23, r23
    3e6a:	88 1f       	adc	r24, r24
    3e6c:	91 50       	subi	r25, 0x01	; 1
    3e6e:	50 40       	sbci	r21, 0x00	; 0
    3e70:	c1 f7       	brne	.-16     	; 0x3e62 <fmod+0x6e>
    3e72:	93 95       	inc	r25
    3e74:	30 c0       	rjmp	.+96     	; 0x3ed6 <__fp_mpack>
    3e76:	86 95       	lsr	r24
    3e78:	77 95       	ror	r23
    3e7a:	67 95       	ror	r22
    3e7c:	9f 5f       	subi	r25, 0xFF	; 255
    3e7e:	d9 f7       	brne	.-10     	; 0x3e76 <fmod+0x82>
    3e80:	f8 cf       	rjmp	.-16     	; 0x3e72 <fmod+0x7e>

00003e82 <__fp_cmp>:
    3e82:	99 0f       	add	r25, r25
    3e84:	00 08       	sbc	r0, r0
    3e86:	55 0f       	add	r21, r21
    3e88:	aa 0b       	sbc	r26, r26
    3e8a:	e0 e8       	ldi	r30, 0x80	; 128
    3e8c:	fe ef       	ldi	r31, 0xFE	; 254
    3e8e:	16 16       	cp	r1, r22
    3e90:	17 06       	cpc	r1, r23
    3e92:	e8 07       	cpc	r30, r24
    3e94:	f9 07       	cpc	r31, r25
    3e96:	c0 f0       	brcs	.+48     	; 0x3ec8 <__fp_cmp+0x46>
    3e98:	12 16       	cp	r1, r18
    3e9a:	13 06       	cpc	r1, r19
    3e9c:	e4 07       	cpc	r30, r20
    3e9e:	f5 07       	cpc	r31, r21
    3ea0:	98 f0       	brcs	.+38     	; 0x3ec8 <__fp_cmp+0x46>
    3ea2:	62 1b       	sub	r22, r18
    3ea4:	73 0b       	sbc	r23, r19
    3ea6:	84 0b       	sbc	r24, r20
    3ea8:	95 0b       	sbc	r25, r21
    3eaa:	39 f4       	brne	.+14     	; 0x3eba <__fp_cmp+0x38>
    3eac:	0a 26       	eor	r0, r26
    3eae:	61 f0       	breq	.+24     	; 0x3ec8 <__fp_cmp+0x46>
    3eb0:	23 2b       	or	r18, r19
    3eb2:	24 2b       	or	r18, r20
    3eb4:	25 2b       	or	r18, r21
    3eb6:	21 f4       	brne	.+8      	; 0x3ec0 <__fp_cmp+0x3e>
    3eb8:	08 95       	ret
    3eba:	0a 26       	eor	r0, r26
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <__fp_cmp+0x3e>
    3ebe:	a1 40       	sbci	r26, 0x01	; 1
    3ec0:	a6 95       	lsr	r26
    3ec2:	8f ef       	ldi	r24, 0xFF	; 255
    3ec4:	81 1d       	adc	r24, r1
    3ec6:	81 1d       	adc	r24, r1
    3ec8:	08 95       	ret

00003eca <__fp_inf>:
    3eca:	97 f9       	bld	r25, 7
    3ecc:	9f 67       	ori	r25, 0x7F	; 127
    3ece:	80 e8       	ldi	r24, 0x80	; 128
    3ed0:	70 e0       	ldi	r23, 0x00	; 0
    3ed2:	60 e0       	ldi	r22, 0x00	; 0
    3ed4:	08 95       	ret

00003ed6 <__fp_mpack>:
    3ed6:	9f 3f       	cpi	r25, 0xFF	; 255
    3ed8:	31 f0       	breq	.+12     	; 0x3ee6 <__fp_mpack_finite+0xc>

00003eda <__fp_mpack_finite>:
    3eda:	91 50       	subi	r25, 0x01	; 1
    3edc:	20 f4       	brcc	.+8      	; 0x3ee6 <__fp_mpack_finite+0xc>
    3ede:	87 95       	ror	r24
    3ee0:	77 95       	ror	r23
    3ee2:	67 95       	ror	r22
    3ee4:	b7 95       	ror	r27
    3ee6:	88 0f       	add	r24, r24
    3ee8:	91 1d       	adc	r25, r1
    3eea:	96 95       	lsr	r25
    3eec:	87 95       	ror	r24
    3eee:	97 f9       	bld	r25, 7
    3ef0:	08 95       	ret

00003ef2 <__fp_nan>:
    3ef2:	9f ef       	ldi	r25, 0xFF	; 255
    3ef4:	80 ec       	ldi	r24, 0xC0	; 192
    3ef6:	08 95       	ret

00003ef8 <__fp_powser>:
    3ef8:	df 93       	push	r29
    3efa:	cf 93       	push	r28
    3efc:	1f 93       	push	r17
    3efe:	0f 93       	push	r16
    3f00:	ff 92       	push	r15
    3f02:	ef 92       	push	r14
    3f04:	df 92       	push	r13
    3f06:	7b 01       	movw	r14, r22
    3f08:	8c 01       	movw	r16, r24
    3f0a:	68 94       	set
    3f0c:	05 c0       	rjmp	.+10     	; 0x3f18 <__fp_powser+0x20>
    3f0e:	da 2e       	mov	r13, r26
    3f10:	ef 01       	movw	r28, r30
    3f12:	af d0       	rcall	.+350    	; 0x4072 <__mulsf3x>
    3f14:	fe 01       	movw	r30, r28
    3f16:	e8 94       	clt
    3f18:	a5 91       	lpm	r26, Z+
    3f1a:	25 91       	lpm	r18, Z+
    3f1c:	35 91       	lpm	r19, Z+
    3f1e:	45 91       	lpm	r20, Z+
    3f20:	55 91       	lpm	r21, Z+
    3f22:	ae f3       	brts	.-22     	; 0x3f0e <__fp_powser+0x16>
    3f24:	ef 01       	movw	r28, r30
    3f26:	cd dd       	rcall	.-1126   	; 0x3ac2 <__addsf3x>
    3f28:	fe 01       	movw	r30, r28
    3f2a:	97 01       	movw	r18, r14
    3f2c:	a8 01       	movw	r20, r16
    3f2e:	da 94       	dec	r13
    3f30:	79 f7       	brne	.-34     	; 0x3f10 <__fp_powser+0x18>
    3f32:	df 90       	pop	r13
    3f34:	ef 90       	pop	r14
    3f36:	ff 90       	pop	r15
    3f38:	0f 91       	pop	r16
    3f3a:	1f 91       	pop	r17
    3f3c:	cf 91       	pop	r28
    3f3e:	df 91       	pop	r29
    3f40:	08 95       	ret

00003f42 <__fp_pscA>:
    3f42:	00 24       	eor	r0, r0
    3f44:	0a 94       	dec	r0
    3f46:	16 16       	cp	r1, r22
    3f48:	17 06       	cpc	r1, r23
    3f4a:	18 06       	cpc	r1, r24
    3f4c:	09 06       	cpc	r0, r25
    3f4e:	08 95       	ret

00003f50 <__fp_pscB>:
    3f50:	00 24       	eor	r0, r0
    3f52:	0a 94       	dec	r0
    3f54:	12 16       	cp	r1, r18
    3f56:	13 06       	cpc	r1, r19
    3f58:	14 06       	cpc	r1, r20
    3f5a:	05 06       	cpc	r0, r21
    3f5c:	08 95       	ret
    3f5e:	c9 cf       	rjmp	.-110    	; 0x3ef2 <__fp_nan>

00003f60 <__fp_rempio2>:
    3f60:	50 d0       	rcall	.+160    	; 0x4002 <__fp_splitA>
    3f62:	e8 f3       	brcs	.-6      	; 0x3f5e <__fp_pscB+0xe>
    3f64:	e8 94       	clt
    3f66:	e0 e0       	ldi	r30, 0x00	; 0
    3f68:	bb 27       	eor	r27, r27
    3f6a:	9f 57       	subi	r25, 0x7F	; 127
    3f6c:	f0 f0       	brcs	.+60     	; 0x3faa <__fp_rempio2+0x4a>
    3f6e:	2a ed       	ldi	r18, 0xDA	; 218
    3f70:	3f e0       	ldi	r19, 0x0F	; 15
    3f72:	49 ec       	ldi	r20, 0xC9	; 201
    3f74:	06 c0       	rjmp	.+12     	; 0x3f82 <__fp_rempio2+0x22>
    3f76:	ee 0f       	add	r30, r30
    3f78:	bb 0f       	add	r27, r27
    3f7a:	66 1f       	adc	r22, r22
    3f7c:	77 1f       	adc	r23, r23
    3f7e:	88 1f       	adc	r24, r24
    3f80:	28 f0       	brcs	.+10     	; 0x3f8c <__fp_rempio2+0x2c>
    3f82:	b2 3a       	cpi	r27, 0xA2	; 162
    3f84:	62 07       	cpc	r22, r18
    3f86:	73 07       	cpc	r23, r19
    3f88:	84 07       	cpc	r24, r20
    3f8a:	28 f0       	brcs	.+10     	; 0x3f96 <__fp_rempio2+0x36>
    3f8c:	b2 5a       	subi	r27, 0xA2	; 162
    3f8e:	62 0b       	sbc	r22, r18
    3f90:	73 0b       	sbc	r23, r19
    3f92:	84 0b       	sbc	r24, r20
    3f94:	e3 95       	inc	r30
    3f96:	9a 95       	dec	r25
    3f98:	72 f7       	brpl	.-36     	; 0x3f76 <__fp_rempio2+0x16>
    3f9a:	80 38       	cpi	r24, 0x80	; 128
    3f9c:	30 f4       	brcc	.+12     	; 0x3faa <__fp_rempio2+0x4a>
    3f9e:	9a 95       	dec	r25
    3fa0:	bb 0f       	add	r27, r27
    3fa2:	66 1f       	adc	r22, r22
    3fa4:	77 1f       	adc	r23, r23
    3fa6:	88 1f       	adc	r24, r24
    3fa8:	d2 f7       	brpl	.-12     	; 0x3f9e <__fp_rempio2+0x3e>
    3faa:	90 48       	sbci	r25, 0x80	; 128
    3fac:	96 cf       	rjmp	.-212    	; 0x3eda <__fp_mpack_finite>

00003fae <__fp_round>:
    3fae:	09 2e       	mov	r0, r25
    3fb0:	03 94       	inc	r0
    3fb2:	00 0c       	add	r0, r0
    3fb4:	11 f4       	brne	.+4      	; 0x3fba <__fp_round+0xc>
    3fb6:	88 23       	and	r24, r24
    3fb8:	52 f0       	brmi	.+20     	; 0x3fce <__fp_round+0x20>
    3fba:	bb 0f       	add	r27, r27
    3fbc:	40 f4       	brcc	.+16     	; 0x3fce <__fp_round+0x20>
    3fbe:	bf 2b       	or	r27, r31
    3fc0:	11 f4       	brne	.+4      	; 0x3fc6 <__fp_round+0x18>
    3fc2:	60 ff       	sbrs	r22, 0
    3fc4:	04 c0       	rjmp	.+8      	; 0x3fce <__fp_round+0x20>
    3fc6:	6f 5f       	subi	r22, 0xFF	; 255
    3fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fca:	8f 4f       	sbci	r24, 0xFF	; 255
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	08 95       	ret

00003fd0 <__fp_sinus>:
    3fd0:	ef 93       	push	r30
    3fd2:	e0 ff       	sbrs	r30, 0
    3fd4:	06 c0       	rjmp	.+12     	; 0x3fe2 <__fp_sinus+0x12>
    3fd6:	a2 ea       	ldi	r26, 0xA2	; 162
    3fd8:	2a ed       	ldi	r18, 0xDA	; 218
    3fda:	3f e0       	ldi	r19, 0x0F	; 15
    3fdc:	49 ec       	ldi	r20, 0xC9	; 201
    3fde:	5f eb       	ldi	r21, 0xBF	; 191
    3fe0:	70 dd       	rcall	.-1312   	; 0x3ac2 <__addsf3x>
    3fe2:	e5 df       	rcall	.-54     	; 0x3fae <__fp_round>
    3fe4:	0f 90       	pop	r0
    3fe6:	03 94       	inc	r0
    3fe8:	01 fc       	sbrc	r0, 1
    3fea:	90 58       	subi	r25, 0x80	; 128
    3fec:	e3 e2       	ldi	r30, 0x23	; 35
    3fee:	f1 e0       	ldi	r31, 0x01	; 1
    3ff0:	24 c1       	rjmp	.+584    	; 0x423a <__fp_powsodd>

00003ff2 <__fp_split3>:
    3ff2:	57 fd       	sbrc	r21, 7
    3ff4:	90 58       	subi	r25, 0x80	; 128
    3ff6:	44 0f       	add	r20, r20
    3ff8:	55 1f       	adc	r21, r21
    3ffa:	59 f0       	breq	.+22     	; 0x4012 <__fp_splitA+0x10>
    3ffc:	5f 3f       	cpi	r21, 0xFF	; 255
    3ffe:	71 f0       	breq	.+28     	; 0x401c <__fp_splitA+0x1a>
    4000:	47 95       	ror	r20

00004002 <__fp_splitA>:
    4002:	88 0f       	add	r24, r24
    4004:	97 fb       	bst	r25, 7
    4006:	99 1f       	adc	r25, r25
    4008:	61 f0       	breq	.+24     	; 0x4022 <__fp_splitA+0x20>
    400a:	9f 3f       	cpi	r25, 0xFF	; 255
    400c:	79 f0       	breq	.+30     	; 0x402c <__fp_splitA+0x2a>
    400e:	87 95       	ror	r24
    4010:	08 95       	ret
    4012:	12 16       	cp	r1, r18
    4014:	13 06       	cpc	r1, r19
    4016:	14 06       	cpc	r1, r20
    4018:	55 1f       	adc	r21, r21
    401a:	f2 cf       	rjmp	.-28     	; 0x4000 <__fp_split3+0xe>
    401c:	46 95       	lsr	r20
    401e:	f1 df       	rcall	.-30     	; 0x4002 <__fp_splitA>
    4020:	08 c0       	rjmp	.+16     	; 0x4032 <__fp_splitA+0x30>
    4022:	16 16       	cp	r1, r22
    4024:	17 06       	cpc	r1, r23
    4026:	18 06       	cpc	r1, r24
    4028:	99 1f       	adc	r25, r25
    402a:	f1 cf       	rjmp	.-30     	; 0x400e <__fp_splitA+0xc>
    402c:	86 95       	lsr	r24
    402e:	71 05       	cpc	r23, r1
    4030:	61 05       	cpc	r22, r1
    4032:	08 94       	sec
    4034:	08 95       	ret

00004036 <__fp_zero>:
    4036:	e8 94       	clt

00004038 <__fp_szero>:
    4038:	bb 27       	eor	r27, r27
    403a:	66 27       	eor	r22, r22
    403c:	77 27       	eor	r23, r23
    403e:	cb 01       	movw	r24, r22
    4040:	97 f9       	bld	r25, 7
    4042:	08 95       	ret

00004044 <__gesf2>:
    4044:	1e df       	rcall	.-452    	; 0x3e82 <__fp_cmp>
    4046:	08 f4       	brcc	.+2      	; 0x404a <__gesf2+0x6>
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	08 95       	ret

0000404c <inverse>:
    404c:	9b 01       	movw	r18, r22
    404e:	ac 01       	movw	r20, r24
    4050:	60 e0       	ldi	r22, 0x00	; 0
    4052:	70 e0       	ldi	r23, 0x00	; 0
    4054:	80 e8       	ldi	r24, 0x80	; 128
    4056:	9f e3       	ldi	r25, 0x3F	; 63
    4058:	f0 cd       	rjmp	.-1056   	; 0x3c3a <__divsf3>

0000405a <__mulsf3>:
    405a:	0b d0       	rcall	.+22     	; 0x4072 <__mulsf3x>
    405c:	a8 cf       	rjmp	.-176    	; 0x3fae <__fp_round>
    405e:	71 df       	rcall	.-286    	; 0x3f42 <__fp_pscA>
    4060:	28 f0       	brcs	.+10     	; 0x406c <__mulsf3+0x12>
    4062:	76 df       	rcall	.-276    	; 0x3f50 <__fp_pscB>
    4064:	18 f0       	brcs	.+6      	; 0x406c <__mulsf3+0x12>
    4066:	95 23       	and	r25, r21
    4068:	09 f0       	breq	.+2      	; 0x406c <__mulsf3+0x12>
    406a:	2f cf       	rjmp	.-418    	; 0x3eca <__fp_inf>
    406c:	42 cf       	rjmp	.-380    	; 0x3ef2 <__fp_nan>
    406e:	11 24       	eor	r1, r1
    4070:	e3 cf       	rjmp	.-58     	; 0x4038 <__fp_szero>

00004072 <__mulsf3x>:
    4072:	bf df       	rcall	.-130    	; 0x3ff2 <__fp_split3>
    4074:	a0 f3       	brcs	.-24     	; 0x405e <__mulsf3+0x4>

00004076 <__mulsf3_pse>:
    4076:	95 9f       	mul	r25, r21
    4078:	d1 f3       	breq	.-12     	; 0x406e <__mulsf3+0x14>
    407a:	95 0f       	add	r25, r21
    407c:	50 e0       	ldi	r21, 0x00	; 0
    407e:	55 1f       	adc	r21, r21
    4080:	62 9f       	mul	r22, r18
    4082:	f0 01       	movw	r30, r0
    4084:	72 9f       	mul	r23, r18
    4086:	bb 27       	eor	r27, r27
    4088:	f0 0d       	add	r31, r0
    408a:	b1 1d       	adc	r27, r1
    408c:	63 9f       	mul	r22, r19
    408e:	aa 27       	eor	r26, r26
    4090:	f0 0d       	add	r31, r0
    4092:	b1 1d       	adc	r27, r1
    4094:	aa 1f       	adc	r26, r26
    4096:	64 9f       	mul	r22, r20
    4098:	66 27       	eor	r22, r22
    409a:	b0 0d       	add	r27, r0
    409c:	a1 1d       	adc	r26, r1
    409e:	66 1f       	adc	r22, r22
    40a0:	82 9f       	mul	r24, r18
    40a2:	22 27       	eor	r18, r18
    40a4:	b0 0d       	add	r27, r0
    40a6:	a1 1d       	adc	r26, r1
    40a8:	62 1f       	adc	r22, r18
    40aa:	73 9f       	mul	r23, r19
    40ac:	b0 0d       	add	r27, r0
    40ae:	a1 1d       	adc	r26, r1
    40b0:	62 1f       	adc	r22, r18
    40b2:	83 9f       	mul	r24, r19
    40b4:	a0 0d       	add	r26, r0
    40b6:	61 1d       	adc	r22, r1
    40b8:	22 1f       	adc	r18, r18
    40ba:	74 9f       	mul	r23, r20
    40bc:	33 27       	eor	r19, r19
    40be:	a0 0d       	add	r26, r0
    40c0:	61 1d       	adc	r22, r1
    40c2:	23 1f       	adc	r18, r19
    40c4:	84 9f       	mul	r24, r20
    40c6:	60 0d       	add	r22, r0
    40c8:	21 1d       	adc	r18, r1
    40ca:	82 2f       	mov	r24, r18
    40cc:	76 2f       	mov	r23, r22
    40ce:	6a 2f       	mov	r22, r26
    40d0:	11 24       	eor	r1, r1
    40d2:	9f 57       	subi	r25, 0x7F	; 127
    40d4:	50 40       	sbci	r21, 0x00	; 0
    40d6:	8a f0       	brmi	.+34     	; 0x40fa <__mulsf3_pse+0x84>
    40d8:	e1 f0       	breq	.+56     	; 0x4112 <__mulsf3_pse+0x9c>
    40da:	88 23       	and	r24, r24
    40dc:	4a f0       	brmi	.+18     	; 0x40f0 <__mulsf3_pse+0x7a>
    40de:	ee 0f       	add	r30, r30
    40e0:	ff 1f       	adc	r31, r31
    40e2:	bb 1f       	adc	r27, r27
    40e4:	66 1f       	adc	r22, r22
    40e6:	77 1f       	adc	r23, r23
    40e8:	88 1f       	adc	r24, r24
    40ea:	91 50       	subi	r25, 0x01	; 1
    40ec:	50 40       	sbci	r21, 0x00	; 0
    40ee:	a9 f7       	brne	.-22     	; 0x40da <__mulsf3_pse+0x64>
    40f0:	9e 3f       	cpi	r25, 0xFE	; 254
    40f2:	51 05       	cpc	r21, r1
    40f4:	70 f0       	brcs	.+28     	; 0x4112 <__mulsf3_pse+0x9c>
    40f6:	e9 ce       	rjmp	.-558    	; 0x3eca <__fp_inf>
    40f8:	9f cf       	rjmp	.-194    	; 0x4038 <__fp_szero>
    40fa:	5f 3f       	cpi	r21, 0xFF	; 255
    40fc:	ec f3       	brlt	.-6      	; 0x40f8 <__mulsf3_pse+0x82>
    40fe:	98 3e       	cpi	r25, 0xE8	; 232
    4100:	dc f3       	brlt	.-10     	; 0x40f8 <__mulsf3_pse+0x82>
    4102:	86 95       	lsr	r24
    4104:	77 95       	ror	r23
    4106:	67 95       	ror	r22
    4108:	b7 95       	ror	r27
    410a:	f7 95       	ror	r31
    410c:	e7 95       	ror	r30
    410e:	9f 5f       	subi	r25, 0xFF	; 255
    4110:	c1 f7       	brne	.-16     	; 0x4102 <__mulsf3_pse+0x8c>
    4112:	fe 2b       	or	r31, r30
    4114:	88 0f       	add	r24, r24
    4116:	91 1d       	adc	r25, r1
    4118:	96 95       	lsr	r25
    411a:	87 95       	ror	r24
    411c:	97 f9       	bld	r25, 7
    411e:	08 95       	ret

00004120 <round>:
    4120:	70 df       	rcall	.-288    	; 0x4002 <__fp_splitA>
    4122:	e0 f0       	brcs	.+56     	; 0x415c <round+0x3c>
    4124:	9e 37       	cpi	r25, 0x7E	; 126
    4126:	d8 f0       	brcs	.+54     	; 0x415e <round+0x3e>
    4128:	96 39       	cpi	r25, 0x96	; 150
    412a:	b8 f4       	brcc	.+46     	; 0x415a <round+0x3a>
    412c:	9e 38       	cpi	r25, 0x8E	; 142
    412e:	48 f4       	brcc	.+18     	; 0x4142 <round+0x22>
    4130:	67 2f       	mov	r22, r23
    4132:	78 2f       	mov	r23, r24
    4134:	88 27       	eor	r24, r24
    4136:	98 5f       	subi	r25, 0xF8	; 248
    4138:	f9 cf       	rjmp	.-14     	; 0x412c <round+0xc>
    413a:	86 95       	lsr	r24
    413c:	77 95       	ror	r23
    413e:	67 95       	ror	r22
    4140:	93 95       	inc	r25
    4142:	95 39       	cpi	r25, 0x95	; 149
    4144:	d0 f3       	brcs	.-12     	; 0x413a <round+0x1a>
    4146:	b6 2f       	mov	r27, r22
    4148:	b1 70       	andi	r27, 0x01	; 1
    414a:	6b 0f       	add	r22, r27
    414c:	71 1d       	adc	r23, r1
    414e:	81 1d       	adc	r24, r1
    4150:	20 f4       	brcc	.+8      	; 0x415a <round+0x3a>
    4152:	87 95       	ror	r24
    4154:	77 95       	ror	r23
    4156:	67 95       	ror	r22
    4158:	93 95       	inc	r25
    415a:	4d c0       	rjmp	.+154    	; 0x41f6 <__fp_mintl>
    415c:	bc ce       	rjmp	.-648    	; 0x3ed6 <__fp_mpack>
    415e:	6c cf       	rjmp	.-296    	; 0x4038 <__fp_szero>

00004160 <sin>:
    4160:	9f 93       	push	r25
    4162:	fe de       	rcall	.-516    	; 0x3f60 <__fp_rempio2>
    4164:	0f 90       	pop	r0
    4166:	07 fc       	sbrc	r0, 7
    4168:	ee 5f       	subi	r30, 0xFE	; 254
    416a:	32 cf       	rjmp	.-412    	; 0x3fd0 <__fp_sinus>
    416c:	11 f4       	brne	.+4      	; 0x4172 <sin+0x12>
    416e:	0e f4       	brtc	.+2      	; 0x4172 <sin+0x12>
    4170:	c0 ce       	rjmp	.-640    	; 0x3ef2 <__fp_nan>
    4172:	b1 ce       	rjmp	.-670    	; 0x3ed6 <__fp_mpack>

00004174 <sqrt>:
    4174:	46 df       	rcall	.-372    	; 0x4002 <__fp_splitA>
    4176:	d0 f3       	brcs	.-12     	; 0x416c <sin+0xc>
    4178:	99 23       	and	r25, r25
    417a:	d9 f3       	breq	.-10     	; 0x4172 <sin+0x12>
    417c:	ce f3       	brts	.-14     	; 0x4170 <sin+0x10>
    417e:	9f 57       	subi	r25, 0x7F	; 127
    4180:	55 0b       	sbc	r21, r21
    4182:	87 ff       	sbrs	r24, 7
    4184:	53 d0       	rcall	.+166    	; 0x422c <__fp_norm2>
    4186:	00 24       	eor	r0, r0
    4188:	a0 e6       	ldi	r26, 0x60	; 96
    418a:	40 ea       	ldi	r20, 0xA0	; 160
    418c:	90 01       	movw	r18, r0
    418e:	80 58       	subi	r24, 0x80	; 128
    4190:	56 95       	lsr	r21
    4192:	97 95       	ror	r25
    4194:	28 f4       	brcc	.+10     	; 0x41a0 <sqrt+0x2c>
    4196:	80 5c       	subi	r24, 0xC0	; 192
    4198:	66 0f       	add	r22, r22
    419a:	77 1f       	adc	r23, r23
    419c:	88 1f       	adc	r24, r24
    419e:	20 f0       	brcs	.+8      	; 0x41a8 <sqrt+0x34>
    41a0:	26 17       	cp	r18, r22
    41a2:	37 07       	cpc	r19, r23
    41a4:	48 07       	cpc	r20, r24
    41a6:	30 f4       	brcc	.+12     	; 0x41b4 <sqrt+0x40>
    41a8:	62 1b       	sub	r22, r18
    41aa:	73 0b       	sbc	r23, r19
    41ac:	84 0b       	sbc	r24, r20
    41ae:	20 29       	or	r18, r0
    41b0:	31 29       	or	r19, r1
    41b2:	4a 2b       	or	r20, r26
    41b4:	a6 95       	lsr	r26
    41b6:	17 94       	ror	r1
    41b8:	07 94       	ror	r0
    41ba:	20 25       	eor	r18, r0
    41bc:	31 25       	eor	r19, r1
    41be:	4a 27       	eor	r20, r26
    41c0:	58 f7       	brcc	.-42     	; 0x4198 <sqrt+0x24>
    41c2:	66 0f       	add	r22, r22
    41c4:	77 1f       	adc	r23, r23
    41c6:	88 1f       	adc	r24, r24
    41c8:	20 f0       	brcs	.+8      	; 0x41d2 <sqrt+0x5e>
    41ca:	26 17       	cp	r18, r22
    41cc:	37 07       	cpc	r19, r23
    41ce:	48 07       	cpc	r20, r24
    41d0:	30 f4       	brcc	.+12     	; 0x41de <sqrt+0x6a>
    41d2:	62 0b       	sbc	r22, r18
    41d4:	73 0b       	sbc	r23, r19
    41d6:	84 0b       	sbc	r24, r20
    41d8:	20 0d       	add	r18, r0
    41da:	31 1d       	adc	r19, r1
    41dc:	41 1d       	adc	r20, r1
    41de:	a0 95       	com	r26
    41e0:	81 f7       	brne	.-32     	; 0x41c2 <sqrt+0x4e>
    41e2:	b9 01       	movw	r22, r18
    41e4:	84 2f       	mov	r24, r20
    41e6:	91 58       	subi	r25, 0x81	; 129
    41e8:	88 0f       	add	r24, r24
    41ea:	96 95       	lsr	r25
    41ec:	87 95       	ror	r24
    41ee:	08 95       	ret

000041f0 <square>:
    41f0:	9b 01       	movw	r18, r22
    41f2:	ac 01       	movw	r20, r24
    41f4:	32 cf       	rjmp	.-412    	; 0x405a <__mulsf3>

000041f6 <__fp_mintl>:
    41f6:	88 23       	and	r24, r24
    41f8:	71 f4       	brne	.+28     	; 0x4216 <__fp_mintl+0x20>
    41fa:	77 23       	and	r23, r23
    41fc:	21 f0       	breq	.+8      	; 0x4206 <__fp_mintl+0x10>
    41fe:	98 50       	subi	r25, 0x08	; 8
    4200:	87 2b       	or	r24, r23
    4202:	76 2f       	mov	r23, r22
    4204:	07 c0       	rjmp	.+14     	; 0x4214 <__fp_mintl+0x1e>
    4206:	66 23       	and	r22, r22
    4208:	11 f4       	brne	.+4      	; 0x420e <__fp_mintl+0x18>
    420a:	99 27       	eor	r25, r25
    420c:	0d c0       	rjmp	.+26     	; 0x4228 <__fp_mintl+0x32>
    420e:	90 51       	subi	r25, 0x10	; 16
    4210:	86 2b       	or	r24, r22
    4212:	70 e0       	ldi	r23, 0x00	; 0
    4214:	60 e0       	ldi	r22, 0x00	; 0
    4216:	2a f0       	brmi	.+10     	; 0x4222 <__fp_mintl+0x2c>
    4218:	9a 95       	dec	r25
    421a:	66 0f       	add	r22, r22
    421c:	77 1f       	adc	r23, r23
    421e:	88 1f       	adc	r24, r24
    4220:	da f7       	brpl	.-10     	; 0x4218 <__fp_mintl+0x22>
    4222:	88 0f       	add	r24, r24
    4224:	96 95       	lsr	r25
    4226:	87 95       	ror	r24
    4228:	97 f9       	bld	r25, 7
    422a:	08 95       	ret

0000422c <__fp_norm2>:
    422c:	91 50       	subi	r25, 0x01	; 1
    422e:	50 40       	sbci	r21, 0x00	; 0
    4230:	66 0f       	add	r22, r22
    4232:	77 1f       	adc	r23, r23
    4234:	88 1f       	adc	r24, r24
    4236:	d2 f7       	brpl	.-12     	; 0x422c <__fp_norm2>
    4238:	08 95       	ret

0000423a <__fp_powsodd>:
    423a:	9f 93       	push	r25
    423c:	8f 93       	push	r24
    423e:	7f 93       	push	r23
    4240:	6f 93       	push	r22
    4242:	ff 93       	push	r31
    4244:	ef 93       	push	r30
    4246:	9b 01       	movw	r18, r22
    4248:	ac 01       	movw	r20, r24
    424a:	07 df       	rcall	.-498    	; 0x405a <__mulsf3>
    424c:	ef 91       	pop	r30
    424e:	ff 91       	pop	r31
    4250:	53 de       	rcall	.-858    	; 0x3ef8 <__fp_powser>
    4252:	2f 91       	pop	r18
    4254:	3f 91       	pop	r19
    4256:	4f 91       	pop	r20
    4258:	5f 91       	pop	r21
    425a:	ff ce       	rjmp	.-514    	; 0x405a <__mulsf3>

0000425c <dtostrf>:
    425c:	ef 92       	push	r14
    425e:	0f 93       	push	r16
    4260:	1f 93       	push	r17
    4262:	cf 93       	push	r28
    4264:	df 93       	push	r29
    4266:	e8 01       	movw	r28, r16
    4268:	47 ff       	sbrs	r20, 7
    426a:	02 c0       	rjmp	.+4      	; 0x4270 <dtostrf+0x14>
    426c:	34 e1       	ldi	r19, 0x14	; 20
    426e:	01 c0       	rjmp	.+2      	; 0x4272 <dtostrf+0x16>
    4270:	34 e0       	ldi	r19, 0x04	; 4
    4272:	e4 2f       	mov	r30, r20
    4274:	ff 27       	eor	r31, r31
    4276:	e7 fd       	sbrc	r30, 7
    4278:	f0 95       	com	r31
    427a:	f7 ff       	sbrs	r31, 7
    427c:	03 c0       	rjmp	.+6      	; 0x4284 <dtostrf+0x28>
    427e:	f1 95       	neg	r31
    4280:	e1 95       	neg	r30
    4282:	f1 09       	sbc	r31, r1
    4284:	e3 2e       	mov	r14, r19
    4286:	02 2f       	mov	r16, r18
    4288:	2e 2f       	mov	r18, r30
    428a:	ae 01       	movw	r20, r28
    428c:	0e 94 9a 23 	call	0x4734	; 0x4734 <dtoa_prf>
    4290:	ce 01       	movw	r24, r28
    4292:	df 91       	pop	r29
    4294:	cf 91       	pop	r28
    4296:	1f 91       	pop	r17
    4298:	0f 91       	pop	r16
    429a:	ef 90       	pop	r14
    429c:	08 95       	ret

0000429e <atof>:
    429e:	66 27       	eor	r22, r22
    42a0:	77 27       	eor	r23, r23
    42a2:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <strtod>

000042a6 <atoi>:
    42a6:	fc 01       	movw	r30, r24
    42a8:	88 27       	eor	r24, r24
    42aa:	99 27       	eor	r25, r25
    42ac:	e8 94       	clt
    42ae:	21 91       	ld	r18, Z+
    42b0:	20 32       	cpi	r18, 0x20	; 32
    42b2:	e9 f3       	breq	.-6      	; 0x42ae <atoi+0x8>
    42b4:	29 30       	cpi	r18, 0x09	; 9
    42b6:	10 f0       	brcs	.+4      	; 0x42bc <atoi+0x16>
    42b8:	2e 30       	cpi	r18, 0x0E	; 14
    42ba:	c8 f3       	brcs	.-14     	; 0x42ae <atoi+0x8>
    42bc:	2b 32       	cpi	r18, 0x2B	; 43
    42be:	41 f0       	breq	.+16     	; 0x42d0 <atoi+0x2a>
    42c0:	2d 32       	cpi	r18, 0x2D	; 45
    42c2:	39 f4       	brne	.+14     	; 0x42d2 <atoi+0x2c>
    42c4:	68 94       	set
    42c6:	04 c0       	rjmp	.+8      	; 0x42d0 <atoi+0x2a>
    42c8:	0e 94 a8 22 	call	0x4550	; 0x4550 <__mulhi_const_10>
    42cc:	82 0f       	add	r24, r18
    42ce:	91 1d       	adc	r25, r1
    42d0:	21 91       	ld	r18, Z+
    42d2:	20 53       	subi	r18, 0x30	; 48
    42d4:	2a 30       	cpi	r18, 0x0A	; 10
    42d6:	c0 f3       	brcs	.-16     	; 0x42c8 <atoi+0x22>
    42d8:	1e f4       	brtc	.+6      	; 0x42e0 <atoi+0x3a>
    42da:	90 95       	com	r25
    42dc:	81 95       	neg	r24
    42de:	9f 4f       	sbci	r25, 0xFF	; 255
    42e0:	08 95       	ret

000042e2 <__ftoa_engine>:
    42e2:	28 30       	cpi	r18, 0x08	; 8
    42e4:	08 f0       	brcs	.+2      	; 0x42e8 <__ftoa_engine+0x6>
    42e6:	27 e0       	ldi	r18, 0x07	; 7
    42e8:	33 27       	eor	r19, r19
    42ea:	da 01       	movw	r26, r20
    42ec:	99 0f       	add	r25, r25
    42ee:	31 1d       	adc	r19, r1
    42f0:	87 fd       	sbrc	r24, 7
    42f2:	91 60       	ori	r25, 0x01	; 1
    42f4:	00 96       	adiw	r24, 0x00	; 0
    42f6:	61 05       	cpc	r22, r1
    42f8:	71 05       	cpc	r23, r1
    42fa:	39 f4       	brne	.+14     	; 0x430a <__ftoa_engine+0x28>
    42fc:	32 60       	ori	r19, 0x02	; 2
    42fe:	2e 5f       	subi	r18, 0xFE	; 254
    4300:	3d 93       	st	X+, r19
    4302:	30 e3       	ldi	r19, 0x30	; 48
    4304:	2a 95       	dec	r18
    4306:	e1 f7       	brne	.-8      	; 0x4300 <__ftoa_engine+0x1e>
    4308:	08 95       	ret
    430a:	9f 3f       	cpi	r25, 0xFF	; 255
    430c:	30 f0       	brcs	.+12     	; 0x431a <__ftoa_engine+0x38>
    430e:	80 38       	cpi	r24, 0x80	; 128
    4310:	71 05       	cpc	r23, r1
    4312:	61 05       	cpc	r22, r1
    4314:	09 f0       	breq	.+2      	; 0x4318 <__ftoa_engine+0x36>
    4316:	3c 5f       	subi	r19, 0xFC	; 252
    4318:	3c 5f       	subi	r19, 0xFC	; 252
    431a:	3d 93       	st	X+, r19
    431c:	91 30       	cpi	r25, 0x01	; 1
    431e:	08 f0       	brcs	.+2      	; 0x4322 <__ftoa_engine+0x40>
    4320:	80 68       	ori	r24, 0x80	; 128
    4322:	91 1d       	adc	r25, r1
    4324:	df 93       	push	r29
    4326:	cf 93       	push	r28
    4328:	1f 93       	push	r17
    432a:	0f 93       	push	r16
    432c:	ff 92       	push	r15
    432e:	ef 92       	push	r14
    4330:	19 2f       	mov	r17, r25
    4332:	98 7f       	andi	r25, 0xF8	; 248
    4334:	96 95       	lsr	r25
    4336:	e9 2f       	mov	r30, r25
    4338:	96 95       	lsr	r25
    433a:	96 95       	lsr	r25
    433c:	e9 0f       	add	r30, r25
    433e:	ff 27       	eor	r31, r31
    4340:	ee 55       	subi	r30, 0x5E	; 94
    4342:	fd 4f       	sbci	r31, 0xFD	; 253
    4344:	99 27       	eor	r25, r25
    4346:	33 27       	eor	r19, r19
    4348:	ee 24       	eor	r14, r14
    434a:	ff 24       	eor	r15, r15
    434c:	a7 01       	movw	r20, r14
    434e:	e7 01       	movw	r28, r14
    4350:	05 90       	lpm	r0, Z+
    4352:	08 94       	sec
    4354:	07 94       	ror	r0
    4356:	28 f4       	brcc	.+10     	; 0x4362 <__ftoa_engine+0x80>
    4358:	36 0f       	add	r19, r22
    435a:	e7 1e       	adc	r14, r23
    435c:	f8 1e       	adc	r15, r24
    435e:	49 1f       	adc	r20, r25
    4360:	51 1d       	adc	r21, r1
    4362:	66 0f       	add	r22, r22
    4364:	77 1f       	adc	r23, r23
    4366:	88 1f       	adc	r24, r24
    4368:	99 1f       	adc	r25, r25
    436a:	06 94       	lsr	r0
    436c:	a1 f7       	brne	.-24     	; 0x4356 <__ftoa_engine+0x74>
    436e:	05 90       	lpm	r0, Z+
    4370:	07 94       	ror	r0
    4372:	28 f4       	brcc	.+10     	; 0x437e <__ftoa_engine+0x9c>
    4374:	e7 0e       	add	r14, r23
    4376:	f8 1e       	adc	r15, r24
    4378:	49 1f       	adc	r20, r25
    437a:	56 1f       	adc	r21, r22
    437c:	c1 1d       	adc	r28, r1
    437e:	77 0f       	add	r23, r23
    4380:	88 1f       	adc	r24, r24
    4382:	99 1f       	adc	r25, r25
    4384:	66 1f       	adc	r22, r22
    4386:	06 94       	lsr	r0
    4388:	a1 f7       	brne	.-24     	; 0x4372 <__ftoa_engine+0x90>
    438a:	05 90       	lpm	r0, Z+
    438c:	07 94       	ror	r0
    438e:	28 f4       	brcc	.+10     	; 0x439a <__ftoa_engine+0xb8>
    4390:	f8 0e       	add	r15, r24
    4392:	49 1f       	adc	r20, r25
    4394:	56 1f       	adc	r21, r22
    4396:	c7 1f       	adc	r28, r23
    4398:	d1 1d       	adc	r29, r1
    439a:	88 0f       	add	r24, r24
    439c:	99 1f       	adc	r25, r25
    439e:	66 1f       	adc	r22, r22
    43a0:	77 1f       	adc	r23, r23
    43a2:	06 94       	lsr	r0
    43a4:	a1 f7       	brne	.-24     	; 0x438e <__ftoa_engine+0xac>
    43a6:	05 90       	lpm	r0, Z+
    43a8:	07 94       	ror	r0
    43aa:	20 f4       	brcc	.+8      	; 0x43b4 <__ftoa_engine+0xd2>
    43ac:	49 0f       	add	r20, r25
    43ae:	56 1f       	adc	r21, r22
    43b0:	c7 1f       	adc	r28, r23
    43b2:	d8 1f       	adc	r29, r24
    43b4:	99 0f       	add	r25, r25
    43b6:	66 1f       	adc	r22, r22
    43b8:	77 1f       	adc	r23, r23
    43ba:	88 1f       	adc	r24, r24
    43bc:	06 94       	lsr	r0
    43be:	a9 f7       	brne	.-22     	; 0x43aa <__ftoa_engine+0xc8>
    43c0:	84 91       	lpm	r24, Z
    43c2:	10 95       	com	r17
    43c4:	17 70       	andi	r17, 0x07	; 7
    43c6:	41 f0       	breq	.+16     	; 0x43d8 <__ftoa_engine+0xf6>
    43c8:	d6 95       	lsr	r29
    43ca:	c7 95       	ror	r28
    43cc:	57 95       	ror	r21
    43ce:	47 95       	ror	r20
    43d0:	f7 94       	ror	r15
    43d2:	e7 94       	ror	r14
    43d4:	1a 95       	dec	r17
    43d6:	c1 f7       	brne	.-16     	; 0x43c8 <__ftoa_engine+0xe6>
    43d8:	e8 e4       	ldi	r30, 0x48	; 72
    43da:	f2 e0       	ldi	r31, 0x02	; 2
    43dc:	68 94       	set
    43de:	15 90       	lpm	r1, Z+
    43e0:	15 91       	lpm	r17, Z+
    43e2:	35 91       	lpm	r19, Z+
    43e4:	65 91       	lpm	r22, Z+
    43e6:	95 91       	lpm	r25, Z+
    43e8:	05 90       	lpm	r0, Z+
    43ea:	7f e2       	ldi	r23, 0x2F	; 47
    43ec:	73 95       	inc	r23
    43ee:	e1 18       	sub	r14, r1
    43f0:	f1 0a       	sbc	r15, r17
    43f2:	43 0b       	sbc	r20, r19
    43f4:	56 0b       	sbc	r21, r22
    43f6:	c9 0b       	sbc	r28, r25
    43f8:	d0 09       	sbc	r29, r0
    43fa:	c0 f7       	brcc	.-16     	; 0x43ec <__ftoa_engine+0x10a>
    43fc:	e1 0c       	add	r14, r1
    43fe:	f1 1e       	adc	r15, r17
    4400:	43 1f       	adc	r20, r19
    4402:	56 1f       	adc	r21, r22
    4404:	c9 1f       	adc	r28, r25
    4406:	d0 1d       	adc	r29, r0
    4408:	7e f4       	brtc	.+30     	; 0x4428 <__ftoa_engine+0x146>
    440a:	70 33       	cpi	r23, 0x30	; 48
    440c:	11 f4       	brne	.+4      	; 0x4412 <__ftoa_engine+0x130>
    440e:	8a 95       	dec	r24
    4410:	e6 cf       	rjmp	.-52     	; 0x43de <__ftoa_engine+0xfc>
    4412:	e8 94       	clt
    4414:	01 50       	subi	r16, 0x01	; 1
    4416:	30 f0       	brcs	.+12     	; 0x4424 <__ftoa_engine+0x142>
    4418:	08 0f       	add	r16, r24
    441a:	0a f4       	brpl	.+2      	; 0x441e <__ftoa_engine+0x13c>
    441c:	00 27       	eor	r16, r16
    441e:	02 17       	cp	r16, r18
    4420:	08 f4       	brcc	.+2      	; 0x4424 <__ftoa_engine+0x142>
    4422:	20 2f       	mov	r18, r16
    4424:	23 95       	inc	r18
    4426:	02 2f       	mov	r16, r18
    4428:	7a 33       	cpi	r23, 0x3A	; 58
    442a:	28 f0       	brcs	.+10     	; 0x4436 <__ftoa_engine+0x154>
    442c:	79 e3       	ldi	r23, 0x39	; 57
    442e:	7d 93       	st	X+, r23
    4430:	2a 95       	dec	r18
    4432:	e9 f7       	brne	.-6      	; 0x442e <__ftoa_engine+0x14c>
    4434:	10 c0       	rjmp	.+32     	; 0x4456 <__ftoa_engine+0x174>
    4436:	7d 93       	st	X+, r23
    4438:	2a 95       	dec	r18
    443a:	89 f6       	brne	.-94     	; 0x43de <__ftoa_engine+0xfc>
    443c:	06 94       	lsr	r0
    443e:	97 95       	ror	r25
    4440:	67 95       	ror	r22
    4442:	37 95       	ror	r19
    4444:	17 95       	ror	r17
    4446:	17 94       	ror	r1
    4448:	e1 18       	sub	r14, r1
    444a:	f1 0a       	sbc	r15, r17
    444c:	43 0b       	sbc	r20, r19
    444e:	56 0b       	sbc	r21, r22
    4450:	c9 0b       	sbc	r28, r25
    4452:	d0 09       	sbc	r29, r0
    4454:	98 f0       	brcs	.+38     	; 0x447c <__ftoa_engine+0x19a>
    4456:	23 95       	inc	r18
    4458:	7e 91       	ld	r23, -X
    445a:	73 95       	inc	r23
    445c:	7a 33       	cpi	r23, 0x3A	; 58
    445e:	08 f0       	brcs	.+2      	; 0x4462 <__ftoa_engine+0x180>
    4460:	70 e3       	ldi	r23, 0x30	; 48
    4462:	7c 93       	st	X, r23
    4464:	20 13       	cpse	r18, r16
    4466:	b8 f7       	brcc	.-18     	; 0x4456 <__ftoa_engine+0x174>
    4468:	7e 91       	ld	r23, -X
    446a:	70 61       	ori	r23, 0x10	; 16
    446c:	7d 93       	st	X+, r23
    446e:	30 f0       	brcs	.+12     	; 0x447c <__ftoa_engine+0x19a>
    4470:	83 95       	inc	r24
    4472:	71 e3       	ldi	r23, 0x31	; 49
    4474:	7d 93       	st	X+, r23
    4476:	70 e3       	ldi	r23, 0x30	; 48
    4478:	2a 95       	dec	r18
    447a:	e1 f7       	brne	.-8      	; 0x4474 <__ftoa_engine+0x192>
    447c:	11 24       	eor	r1, r1
    447e:	ef 90       	pop	r14
    4480:	ff 90       	pop	r15
    4482:	0f 91       	pop	r16
    4484:	1f 91       	pop	r17
    4486:	cf 91       	pop	r28
    4488:	df 91       	pop	r29
    448a:	99 27       	eor	r25, r25
    448c:	87 fd       	sbrc	r24, 7
    448e:	90 95       	com	r25
    4490:	08 95       	ret

00004492 <strnlen_P>:
    4492:	fc 01       	movw	r30, r24
    4494:	05 90       	lpm	r0, Z+
    4496:	61 50       	subi	r22, 0x01	; 1
    4498:	70 40       	sbci	r23, 0x00	; 0
    449a:	01 10       	cpse	r0, r1
    449c:	d8 f7       	brcc	.-10     	; 0x4494 <strnlen_P+0x2>
    449e:	80 95       	com	r24
    44a0:	90 95       	com	r25
    44a2:	8e 0f       	add	r24, r30
    44a4:	9f 1f       	adc	r25, r31
    44a6:	08 95       	ret

000044a8 <strtok>:
    44a8:	4e eb       	ldi	r20, 0xBE	; 190
    44aa:	55 e0       	ldi	r21, 0x05	; 5
    44ac:	0e 94 76 22 	call	0x44ec	; 0x44ec <strtok_r>
    44b0:	08 95       	ret

000044b2 <strchr>:
    44b2:	fc 01       	movw	r30, r24
    44b4:	81 91       	ld	r24, Z+
    44b6:	86 17       	cp	r24, r22
    44b8:	21 f0       	breq	.+8      	; 0x44c2 <strchr+0x10>
    44ba:	88 23       	and	r24, r24
    44bc:	d9 f7       	brne	.-10     	; 0x44b4 <strchr+0x2>
    44be:	99 27       	eor	r25, r25
    44c0:	08 95       	ret
    44c2:	31 97       	sbiw	r30, 0x01	; 1
    44c4:	cf 01       	movw	r24, r30
    44c6:	08 95       	ret

000044c8 <strcpy>:
    44c8:	fb 01       	movw	r30, r22
    44ca:	dc 01       	movw	r26, r24
    44cc:	01 90       	ld	r0, Z+
    44ce:	0d 92       	st	X+, r0
    44d0:	00 20       	and	r0, r0
    44d2:	e1 f7       	brne	.-8      	; 0x44cc <strcpy+0x4>
    44d4:	08 95       	ret

000044d6 <strnlen>:
    44d6:	fc 01       	movw	r30, r24
    44d8:	61 50       	subi	r22, 0x01	; 1
    44da:	70 40       	sbci	r23, 0x00	; 0
    44dc:	01 90       	ld	r0, Z+
    44de:	01 10       	cpse	r0, r1
    44e0:	d8 f7       	brcc	.-10     	; 0x44d8 <strnlen+0x2>
    44e2:	80 95       	com	r24
    44e4:	90 95       	com	r25
    44e6:	8e 0f       	add	r24, r30
    44e8:	9f 1f       	adc	r25, r31
    44ea:	08 95       	ret

000044ec <strtok_r>:
    44ec:	fa 01       	movw	r30, r20
    44ee:	a1 91       	ld	r26, Z+
    44f0:	b0 81       	ld	r27, Z
    44f2:	00 97       	sbiw	r24, 0x00	; 0
    44f4:	19 f4       	brne	.+6      	; 0x44fc <strtok_r+0x10>
    44f6:	10 97       	sbiw	r26, 0x00	; 0
    44f8:	e1 f0       	breq	.+56     	; 0x4532 <strtok_r+0x46>
    44fa:	cd 01       	movw	r24, r26
    44fc:	dc 01       	movw	r26, r24
    44fe:	cd 01       	movw	r24, r26
    4500:	0d 90       	ld	r0, X+
    4502:	00 20       	and	r0, r0
    4504:	11 f4       	brne	.+4      	; 0x450a <strtok_r+0x1e>
    4506:	c0 01       	movw	r24, r0
    4508:	13 c0       	rjmp	.+38     	; 0x4530 <strtok_r+0x44>
    450a:	fb 01       	movw	r30, r22
    450c:	21 91       	ld	r18, Z+
    450e:	22 23       	and	r18, r18
    4510:	19 f0       	breq	.+6      	; 0x4518 <strtok_r+0x2c>
    4512:	20 15       	cp	r18, r0
    4514:	d9 f7       	brne	.-10     	; 0x450c <strtok_r+0x20>
    4516:	f3 cf       	rjmp	.-26     	; 0x44fe <strtok_r+0x12>
    4518:	fb 01       	movw	r30, r22
    451a:	21 91       	ld	r18, Z+
    451c:	20 15       	cp	r18, r0
    451e:	19 f4       	brne	.+6      	; 0x4526 <strtok_r+0x3a>
    4520:	1e 92       	st	-X, r1
    4522:	11 96       	adiw	r26, 0x01	; 1
    4524:	06 c0       	rjmp	.+12     	; 0x4532 <strtok_r+0x46>
    4526:	22 23       	and	r18, r18
    4528:	c1 f7       	brne	.-16     	; 0x451a <strtok_r+0x2e>
    452a:	0d 90       	ld	r0, X+
    452c:	00 20       	and	r0, r0
    452e:	a1 f7       	brne	.-24     	; 0x4518 <strtok_r+0x2c>
    4530:	d0 01       	movw	r26, r0
    4532:	fa 01       	movw	r30, r20
    4534:	a1 93       	st	Z+, r26
    4536:	b0 83       	st	Z, r27
    4538:	08 95       	ret

0000453a <__itoa_ncheck>:
    453a:	bb 27       	eor	r27, r27
    453c:	4a 30       	cpi	r20, 0x0A	; 10
    453e:	31 f4       	brne	.+12     	; 0x454c <__itoa_ncheck+0x12>
    4540:	99 23       	and	r25, r25
    4542:	22 f4       	brpl	.+8      	; 0x454c <__itoa_ncheck+0x12>
    4544:	bd e2       	ldi	r27, 0x2D	; 45
    4546:	90 95       	com	r25
    4548:	81 95       	neg	r24
    454a:	9f 4f       	sbci	r25, 0xFF	; 255
    454c:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__utoa_common>

00004550 <__mulhi_const_10>:
    4550:	7a e0       	ldi	r23, 0x0A	; 10
    4552:	97 9f       	mul	r25, r23
    4554:	90 2d       	mov	r25, r0
    4556:	87 9f       	mul	r24, r23
    4558:	80 2d       	mov	r24, r0
    455a:	91 0d       	add	r25, r1
    455c:	11 24       	eor	r1, r1
    455e:	08 95       	ret

00004560 <__utoa_ncheck>:
    4560:	bb 27       	eor	r27, r27

00004562 <__utoa_common>:
    4562:	fb 01       	movw	r30, r22
    4564:	55 27       	eor	r21, r21
    4566:	aa 27       	eor	r26, r26
    4568:	88 0f       	add	r24, r24
    456a:	99 1f       	adc	r25, r25
    456c:	aa 1f       	adc	r26, r26
    456e:	a4 17       	cp	r26, r20
    4570:	10 f0       	brcs	.+4      	; 0x4576 <__utoa_common+0x14>
    4572:	a4 1b       	sub	r26, r20
    4574:	83 95       	inc	r24
    4576:	50 51       	subi	r21, 0x10	; 16
    4578:	b9 f7       	brne	.-18     	; 0x4568 <__utoa_common+0x6>
    457a:	a0 5d       	subi	r26, 0xD0	; 208
    457c:	aa 33       	cpi	r26, 0x3A	; 58
    457e:	08 f0       	brcs	.+2      	; 0x4582 <__utoa_common+0x20>
    4580:	a9 5d       	subi	r26, 0xD9	; 217
    4582:	a1 93       	st	Z+, r26
    4584:	00 97       	sbiw	r24, 0x00	; 0
    4586:	79 f7       	brne	.-34     	; 0x4566 <__utoa_common+0x4>
    4588:	b1 11       	cpse	r27, r1
    458a:	b1 93       	st	Z+, r27
    458c:	11 92       	st	Z+, r1
    458e:	cb 01       	movw	r24, r22
    4590:	0c 94 9b 26 	jmp	0x4d36	; 0x4d36 <strrev>

00004594 <fputc>:
    4594:	0f 93       	push	r16
    4596:	1f 93       	push	r17
    4598:	cf 93       	push	r28
    459a:	df 93       	push	r29
    459c:	18 2f       	mov	r17, r24
    459e:	09 2f       	mov	r16, r25
    45a0:	eb 01       	movw	r28, r22
    45a2:	8b 81       	ldd	r24, Y+3	; 0x03
    45a4:	81 fd       	sbrc	r24, 1
    45a6:	03 c0       	rjmp	.+6      	; 0x45ae <fputc+0x1a>
    45a8:	8f ef       	ldi	r24, 0xFF	; 255
    45aa:	9f ef       	ldi	r25, 0xFF	; 255
    45ac:	20 c0       	rjmp	.+64     	; 0x45ee <fputc+0x5a>
    45ae:	82 ff       	sbrs	r24, 2
    45b0:	10 c0       	rjmp	.+32     	; 0x45d2 <fputc+0x3e>
    45b2:	4e 81       	ldd	r20, Y+6	; 0x06
    45b4:	5f 81       	ldd	r21, Y+7	; 0x07
    45b6:	2c 81       	ldd	r18, Y+4	; 0x04
    45b8:	3d 81       	ldd	r19, Y+5	; 0x05
    45ba:	42 17       	cp	r20, r18
    45bc:	53 07       	cpc	r21, r19
    45be:	7c f4       	brge	.+30     	; 0x45de <fputc+0x4a>
    45c0:	e8 81       	ld	r30, Y
    45c2:	f9 81       	ldd	r31, Y+1	; 0x01
    45c4:	9f 01       	movw	r18, r30
    45c6:	2f 5f       	subi	r18, 0xFF	; 255
    45c8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ca:	39 83       	std	Y+1, r19	; 0x01
    45cc:	28 83       	st	Y, r18
    45ce:	10 83       	st	Z, r17
    45d0:	06 c0       	rjmp	.+12     	; 0x45de <fputc+0x4a>
    45d2:	e8 85       	ldd	r30, Y+8	; 0x08
    45d4:	f9 85       	ldd	r31, Y+9	; 0x09
    45d6:	81 2f       	mov	r24, r17
    45d8:	09 95       	icall
    45da:	89 2b       	or	r24, r25
    45dc:	29 f7       	brne	.-54     	; 0x45a8 <fputc+0x14>
    45de:	2e 81       	ldd	r18, Y+6	; 0x06
    45e0:	3f 81       	ldd	r19, Y+7	; 0x07
    45e2:	2f 5f       	subi	r18, 0xFF	; 255
    45e4:	3f 4f       	sbci	r19, 0xFF	; 255
    45e6:	3f 83       	std	Y+7, r19	; 0x07
    45e8:	2e 83       	std	Y+6, r18	; 0x06
    45ea:	81 2f       	mov	r24, r17
    45ec:	90 2f       	mov	r25, r16
    45ee:	df 91       	pop	r29
    45f0:	cf 91       	pop	r28
    45f2:	1f 91       	pop	r17
    45f4:	0f 91       	pop	r16
    45f6:	08 95       	ret

000045f8 <sprintf>:
    45f8:	ae e0       	ldi	r26, 0x0E	; 14
    45fa:	b0 e0       	ldi	r27, 0x00	; 0
    45fc:	e2 e0       	ldi	r30, 0x02	; 2
    45fe:	f3 e2       	ldi	r31, 0x23	; 35
    4600:	0c 94 26 1d 	jmp	0x3a4c	; 0x3a4c <__prologue_saves__+0x1c>
    4604:	0d 89       	ldd	r16, Y+21	; 0x15
    4606:	1e 89       	ldd	r17, Y+22	; 0x16
    4608:	86 e0       	ldi	r24, 0x06	; 6
    460a:	8c 83       	std	Y+4, r24	; 0x04
    460c:	1a 83       	std	Y+2, r17	; 0x02
    460e:	09 83       	std	Y+1, r16	; 0x01
    4610:	8f ef       	ldi	r24, 0xFF	; 255
    4612:	9f e7       	ldi	r25, 0x7F	; 127
    4614:	9e 83       	std	Y+6, r25	; 0x06
    4616:	8d 83       	std	Y+5, r24	; 0x05
    4618:	ae 01       	movw	r20, r28
    461a:	47 5e       	subi	r20, 0xE7	; 231
    461c:	5f 4f       	sbci	r21, 0xFF	; 255
    461e:	6f 89       	ldd	r22, Y+23	; 0x17
    4620:	78 8d       	ldd	r23, Y+24	; 0x18
    4622:	ce 01       	movw	r24, r28
    4624:	01 96       	adiw	r24, 0x01	; 1
    4626:	0e 94 88 19 	call	0x3310	; 0x3310 <vfprintf>
    462a:	ef 81       	ldd	r30, Y+7	; 0x07
    462c:	f8 85       	ldd	r31, Y+8	; 0x08
    462e:	e0 0f       	add	r30, r16
    4630:	f1 1f       	adc	r31, r17
    4632:	10 82       	st	Z, r1
    4634:	2e 96       	adiw	r28, 0x0e	; 14
    4636:	e4 e0       	ldi	r30, 0x04	; 4
    4638:	0c 94 42 1d 	jmp	0x3a84	; 0x3a84 <__epilogue_restores__+0x1c>

0000463c <__ultoa_invert>:
    463c:	fa 01       	movw	r30, r20
    463e:	aa 27       	eor	r26, r26
    4640:	28 30       	cpi	r18, 0x08	; 8
    4642:	51 f1       	breq	.+84     	; 0x4698 <__ultoa_invert+0x5c>
    4644:	20 31       	cpi	r18, 0x10	; 16
    4646:	81 f1       	breq	.+96     	; 0x46a8 <__ultoa_invert+0x6c>
    4648:	e8 94       	clt
    464a:	6f 93       	push	r22
    464c:	6e 7f       	andi	r22, 0xFE	; 254
    464e:	6e 5f       	subi	r22, 0xFE	; 254
    4650:	7f 4f       	sbci	r23, 0xFF	; 255
    4652:	8f 4f       	sbci	r24, 0xFF	; 255
    4654:	9f 4f       	sbci	r25, 0xFF	; 255
    4656:	af 4f       	sbci	r26, 0xFF	; 255
    4658:	b1 e0       	ldi	r27, 0x01	; 1
    465a:	3e d0       	rcall	.+124    	; 0x46d8 <__ultoa_invert+0x9c>
    465c:	b4 e0       	ldi	r27, 0x04	; 4
    465e:	3c d0       	rcall	.+120    	; 0x46d8 <__ultoa_invert+0x9c>
    4660:	67 0f       	add	r22, r23
    4662:	78 1f       	adc	r23, r24
    4664:	89 1f       	adc	r24, r25
    4666:	9a 1f       	adc	r25, r26
    4668:	a1 1d       	adc	r26, r1
    466a:	68 0f       	add	r22, r24
    466c:	79 1f       	adc	r23, r25
    466e:	8a 1f       	adc	r24, r26
    4670:	91 1d       	adc	r25, r1
    4672:	a1 1d       	adc	r26, r1
    4674:	6a 0f       	add	r22, r26
    4676:	71 1d       	adc	r23, r1
    4678:	81 1d       	adc	r24, r1
    467a:	91 1d       	adc	r25, r1
    467c:	a1 1d       	adc	r26, r1
    467e:	20 d0       	rcall	.+64     	; 0x46c0 <__ultoa_invert+0x84>
    4680:	09 f4       	brne	.+2      	; 0x4684 <__ultoa_invert+0x48>
    4682:	68 94       	set
    4684:	3f 91       	pop	r19
    4686:	2a e0       	ldi	r18, 0x0A	; 10
    4688:	26 9f       	mul	r18, r22
    468a:	11 24       	eor	r1, r1
    468c:	30 19       	sub	r19, r0
    468e:	30 5d       	subi	r19, 0xD0	; 208
    4690:	31 93       	st	Z+, r19
    4692:	de f6       	brtc	.-74     	; 0x464a <__ultoa_invert+0xe>
    4694:	cf 01       	movw	r24, r30
    4696:	08 95       	ret
    4698:	46 2f       	mov	r20, r22
    469a:	47 70       	andi	r20, 0x07	; 7
    469c:	40 5d       	subi	r20, 0xD0	; 208
    469e:	41 93       	st	Z+, r20
    46a0:	b3 e0       	ldi	r27, 0x03	; 3
    46a2:	0f d0       	rcall	.+30     	; 0x46c2 <__ultoa_invert+0x86>
    46a4:	c9 f7       	brne	.-14     	; 0x4698 <__ultoa_invert+0x5c>
    46a6:	f6 cf       	rjmp	.-20     	; 0x4694 <__ultoa_invert+0x58>
    46a8:	46 2f       	mov	r20, r22
    46aa:	4f 70       	andi	r20, 0x0F	; 15
    46ac:	40 5d       	subi	r20, 0xD0	; 208
    46ae:	4a 33       	cpi	r20, 0x3A	; 58
    46b0:	18 f0       	brcs	.+6      	; 0x46b8 <__ultoa_invert+0x7c>
    46b2:	49 5d       	subi	r20, 0xD9	; 217
    46b4:	31 fd       	sbrc	r19, 1
    46b6:	40 52       	subi	r20, 0x20	; 32
    46b8:	41 93       	st	Z+, r20
    46ba:	02 d0       	rcall	.+4      	; 0x46c0 <__ultoa_invert+0x84>
    46bc:	a9 f7       	brne	.-22     	; 0x46a8 <__ultoa_invert+0x6c>
    46be:	ea cf       	rjmp	.-44     	; 0x4694 <__ultoa_invert+0x58>
    46c0:	b4 e0       	ldi	r27, 0x04	; 4
    46c2:	a6 95       	lsr	r26
    46c4:	97 95       	ror	r25
    46c6:	87 95       	ror	r24
    46c8:	77 95       	ror	r23
    46ca:	67 95       	ror	r22
    46cc:	ba 95       	dec	r27
    46ce:	c9 f7       	brne	.-14     	; 0x46c2 <__ultoa_invert+0x86>
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	61 05       	cpc	r22, r1
    46d4:	71 05       	cpc	r23, r1
    46d6:	08 95       	ret
    46d8:	9b 01       	movw	r18, r22
    46da:	ac 01       	movw	r20, r24
    46dc:	0a 2e       	mov	r0, r26
    46de:	06 94       	lsr	r0
    46e0:	57 95       	ror	r21
    46e2:	47 95       	ror	r20
    46e4:	37 95       	ror	r19
    46e6:	27 95       	ror	r18
    46e8:	ba 95       	dec	r27
    46ea:	c9 f7       	brne	.-14     	; 0x46de <__ultoa_invert+0xa2>
    46ec:	62 0f       	add	r22, r18
    46ee:	73 1f       	adc	r23, r19
    46f0:	84 1f       	adc	r24, r20
    46f2:	95 1f       	adc	r25, r21
    46f4:	a0 1d       	adc	r26, r0
    46f6:	08 95       	ret

000046f8 <__eerd_dword_m328p>:
    46f8:	a6 e1       	ldi	r26, 0x16	; 22
    46fa:	b0 e0       	ldi	r27, 0x00	; 0
    46fc:	44 e0       	ldi	r20, 0x04	; 4
    46fe:	50 e0       	ldi	r21, 0x00	; 0
    4700:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__eerd_blraw_m328p>

00004704 <__eerd_word_m328p>:
    4704:	a8 e1       	ldi	r26, 0x18	; 24
    4706:	b0 e0       	ldi	r27, 0x00	; 0
    4708:	42 e0       	ldi	r20, 0x02	; 2
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	0c 94 ad 26 	jmp	0x4d5a	; 0x4d5a <__eerd_blraw_m328p>

00004710 <__eeupd_dword_m328p>:
    4710:	03 96       	adiw	r24, 0x03	; 3
    4712:	27 2f       	mov	r18, r23
    4714:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__eeupd_r18_m328p>
    4718:	0e 94 bb 26 	call	0x4d76	; 0x4d76 <__eeupd_byte_m328p>
    471c:	25 2f       	mov	r18, r21
    471e:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__eeupd_r18_m328p>
    4722:	24 2f       	mov	r18, r20
    4724:	0c 94 bc 26 	jmp	0x4d78	; 0x4d78 <__eeupd_r18_m328p>

00004728 <__eeupd_word_m328p>:
    4728:	01 96       	adiw	r24, 0x01	; 1
    472a:	27 2f       	mov	r18, r23
    472c:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__eeupd_r18_m328p>
    4730:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <__eeupd_byte_m328p>

00004734 <dtoa_prf>:
    4734:	6f 92       	push	r6
    4736:	7f 92       	push	r7
    4738:	9f 92       	push	r9
    473a:	af 92       	push	r10
    473c:	bf 92       	push	r11
    473e:	cf 92       	push	r12
    4740:	df 92       	push	r13
    4742:	ef 92       	push	r14
    4744:	ff 92       	push	r15
    4746:	0f 93       	push	r16
    4748:	1f 93       	push	r17
    474a:	cf 93       	push	r28
    474c:	df 93       	push	r29
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	29 97       	sbiw	r28, 0x09	; 9
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	de bf       	out	0x3e, r29	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	6a 01       	movw	r12, r20
    4760:	b2 2e       	mov	r11, r18
    4762:	10 2f       	mov	r17, r16
    4764:	0c 33       	cpi	r16, 0x3C	; 60
    4766:	20 f4       	brcc	.+8      	; 0x4770 <dtoa_prf+0x3c>
    4768:	ff 24       	eor	r15, r15
    476a:	f3 94       	inc	r15
    476c:	f0 0e       	add	r15, r16
    476e:	02 c0       	rjmp	.+4      	; 0x4774 <dtoa_prf+0x40>
    4770:	4c e3       	ldi	r20, 0x3C	; 60
    4772:	f4 2e       	mov	r15, r20
    4774:	0f 2d       	mov	r16, r15
    4776:	27 e0       	ldi	r18, 0x07	; 7
    4778:	ae 01       	movw	r20, r28
    477a:	4f 5f       	subi	r20, 0xFF	; 255
    477c:	5f 4f       	sbci	r21, 0xFF	; 255
    477e:	0e 94 71 21 	call	0x42e2	; 0x42e2 <__ftoa_engine>
    4782:	79 81       	ldd	r23, Y+1	; 0x01
    4784:	27 2f       	mov	r18, r23
    4786:	29 70       	andi	r18, 0x09	; 9
    4788:	21 30       	cpi	r18, 0x01	; 1
    478a:	31 f0       	breq	.+12     	; 0x4798 <dtoa_prf+0x64>
    478c:	e1 fc       	sbrc	r14, 1
    478e:	06 c0       	rjmp	.+12     	; 0x479c <dtoa_prf+0x68>
    4790:	e0 fc       	sbrc	r14, 0
    4792:	06 c0       	rjmp	.+12     	; 0x47a0 <dtoa_prf+0x6c>
    4794:	60 e0       	ldi	r22, 0x00	; 0
    4796:	05 c0       	rjmp	.+10     	; 0x47a2 <dtoa_prf+0x6e>
    4798:	6d e2       	ldi	r22, 0x2D	; 45
    479a:	03 c0       	rjmp	.+6      	; 0x47a2 <dtoa_prf+0x6e>
    479c:	6b e2       	ldi	r22, 0x2B	; 43
    479e:	01 c0       	rjmp	.+2      	; 0x47a2 <dtoa_prf+0x6e>
    47a0:	60 e2       	ldi	r22, 0x20	; 32
    47a2:	ae 2d       	mov	r26, r14
    47a4:	a0 71       	andi	r26, 0x10	; 16
    47a6:	73 ff       	sbrs	r23, 3
    47a8:	36 c0       	rjmp	.+108    	; 0x4816 <dtoa_prf+0xe2>
    47aa:	66 23       	and	r22, r22
    47ac:	11 f0       	breq	.+4      	; 0x47b2 <dtoa_prf+0x7e>
    47ae:	84 e0       	ldi	r24, 0x04	; 4
    47b0:	01 c0       	rjmp	.+2      	; 0x47b4 <dtoa_prf+0x80>
    47b2:	83 e0       	ldi	r24, 0x03	; 3
    47b4:	8b 15       	cp	r24, r11
    47b6:	10 f4       	brcc	.+4      	; 0x47bc <dtoa_prf+0x88>
    47b8:	b8 1a       	sub	r11, r24
    47ba:	01 c0       	rjmp	.+2      	; 0x47be <dtoa_prf+0x8a>
    47bc:	b1 2c       	mov	r11, r1
    47be:	a1 11       	cpse	r26, r1
    47c0:	0b c0       	rjmp	.+22     	; 0x47d8 <dtoa_prf+0xa4>
    47c2:	f6 01       	movw	r30, r12
    47c4:	8b 2d       	mov	r24, r11
    47c6:	90 e2       	ldi	r25, 0x20	; 32
    47c8:	88 23       	and	r24, r24
    47ca:	19 f0       	breq	.+6      	; 0x47d2 <dtoa_prf+0x9e>
    47cc:	91 93       	st	Z+, r25
    47ce:	81 50       	subi	r24, 0x01	; 1
    47d0:	fb cf       	rjmp	.-10     	; 0x47c8 <dtoa_prf+0x94>
    47d2:	cb 0c       	add	r12, r11
    47d4:	d1 1c       	adc	r13, r1
    47d6:	b1 2c       	mov	r11, r1
    47d8:	66 23       	and	r22, r22
    47da:	31 f0       	breq	.+12     	; 0x47e8 <dtoa_prf+0xb4>
    47dc:	f6 01       	movw	r30, r12
    47de:	60 83       	st	Z, r22
    47e0:	96 01       	movw	r18, r12
    47e2:	2f 5f       	subi	r18, 0xFF	; 255
    47e4:	3f 4f       	sbci	r19, 0xFF	; 255
    47e6:	69 01       	movw	r12, r18
    47e8:	c6 01       	movw	r24, r12
    47ea:	03 96       	adiw	r24, 0x03	; 3
    47ec:	e2 fe       	sbrs	r14, 2
    47ee:	05 c0       	rjmp	.+10     	; 0x47fa <dtoa_prf+0xc6>
    47f0:	2e e4       	ldi	r18, 0x4E	; 78
    47f2:	f6 01       	movw	r30, r12
    47f4:	20 83       	st	Z, r18
    47f6:	31 e4       	ldi	r19, 0x41	; 65
    47f8:	04 c0       	rjmp	.+8      	; 0x4802 <dtoa_prf+0xce>
    47fa:	2e e6       	ldi	r18, 0x6E	; 110
    47fc:	f6 01       	movw	r30, r12
    47fe:	20 83       	st	Z, r18
    4800:	31 e6       	ldi	r19, 0x61	; 97
    4802:	31 83       	std	Z+1, r19	; 0x01
    4804:	22 83       	std	Z+2, r18	; 0x02
    4806:	fc 01       	movw	r30, r24
    4808:	2b 2d       	mov	r18, r11
    480a:	30 e2       	ldi	r19, 0x20	; 32
    480c:	22 23       	and	r18, r18
    480e:	f1 f1       	breq	.+124    	; 0x488c <dtoa_prf+0x158>
    4810:	31 93       	st	Z+, r19
    4812:	21 50       	subi	r18, 0x01	; 1
    4814:	fb cf       	rjmp	.-10     	; 0x480c <dtoa_prf+0xd8>
    4816:	72 ff       	sbrs	r23, 2
    4818:	40 c0       	rjmp	.+128    	; 0x489a <dtoa_prf+0x166>
    481a:	66 23       	and	r22, r22
    481c:	11 f0       	breq	.+4      	; 0x4822 <dtoa_prf+0xee>
    481e:	84 e0       	ldi	r24, 0x04	; 4
    4820:	01 c0       	rjmp	.+2      	; 0x4824 <dtoa_prf+0xf0>
    4822:	83 e0       	ldi	r24, 0x03	; 3
    4824:	8b 15       	cp	r24, r11
    4826:	10 f4       	brcc	.+4      	; 0x482c <dtoa_prf+0xf8>
    4828:	b8 1a       	sub	r11, r24
    482a:	01 c0       	rjmp	.+2      	; 0x482e <dtoa_prf+0xfa>
    482c:	b1 2c       	mov	r11, r1
    482e:	a1 11       	cpse	r26, r1
    4830:	0b c0       	rjmp	.+22     	; 0x4848 <dtoa_prf+0x114>
    4832:	f6 01       	movw	r30, r12
    4834:	8b 2d       	mov	r24, r11
    4836:	90 e2       	ldi	r25, 0x20	; 32
    4838:	88 23       	and	r24, r24
    483a:	19 f0       	breq	.+6      	; 0x4842 <dtoa_prf+0x10e>
    483c:	91 93       	st	Z+, r25
    483e:	81 50       	subi	r24, 0x01	; 1
    4840:	fb cf       	rjmp	.-10     	; 0x4838 <dtoa_prf+0x104>
    4842:	cb 0c       	add	r12, r11
    4844:	d1 1c       	adc	r13, r1
    4846:	b1 2c       	mov	r11, r1
    4848:	66 23       	and	r22, r22
    484a:	31 f0       	breq	.+12     	; 0x4858 <dtoa_prf+0x124>
    484c:	f6 01       	movw	r30, r12
    484e:	60 83       	st	Z, r22
    4850:	96 01       	movw	r18, r12
    4852:	2f 5f       	subi	r18, 0xFF	; 255
    4854:	3f 4f       	sbci	r19, 0xFF	; 255
    4856:	69 01       	movw	r12, r18
    4858:	c6 01       	movw	r24, r12
    485a:	03 96       	adiw	r24, 0x03	; 3
    485c:	e2 fe       	sbrs	r14, 2
    485e:	07 c0       	rjmp	.+14     	; 0x486e <dtoa_prf+0x13a>
    4860:	29 e4       	ldi	r18, 0x49	; 73
    4862:	f6 01       	movw	r30, r12
    4864:	20 83       	st	Z, r18
    4866:	2e e4       	ldi	r18, 0x4E	; 78
    4868:	21 83       	std	Z+1, r18	; 0x01
    486a:	26 e4       	ldi	r18, 0x46	; 70
    486c:	06 c0       	rjmp	.+12     	; 0x487a <dtoa_prf+0x146>
    486e:	29 e6       	ldi	r18, 0x69	; 105
    4870:	f6 01       	movw	r30, r12
    4872:	20 83       	st	Z, r18
    4874:	2e e6       	ldi	r18, 0x6E	; 110
    4876:	21 83       	std	Z+1, r18	; 0x01
    4878:	26 e6       	ldi	r18, 0x66	; 102
    487a:	22 83       	std	Z+2, r18	; 0x02
    487c:	fc 01       	movw	r30, r24
    487e:	2b 2d       	mov	r18, r11
    4880:	30 e2       	ldi	r19, 0x20	; 32
    4882:	22 23       	and	r18, r18
    4884:	19 f0       	breq	.+6      	; 0x488c <dtoa_prf+0x158>
    4886:	31 93       	st	Z+, r19
    4888:	21 50       	subi	r18, 0x01	; 1
    488a:	fb cf       	rjmp	.-10     	; 0x4882 <dtoa_prf+0x14e>
    488c:	fc 01       	movw	r30, r24
    488e:	eb 0d       	add	r30, r11
    4890:	f1 1d       	adc	r31, r1
    4892:	10 82       	st	Z, r1
    4894:	8e ef       	ldi	r24, 0xFE	; 254
    4896:	9f ef       	ldi	r25, 0xFF	; 255
    4898:	b7 c0       	rjmp	.+366    	; 0x4a08 <dtoa_prf+0x2d4>
    489a:	b1 e0       	ldi	r27, 0x01	; 1
    489c:	61 11       	cpse	r22, r1
    489e:	01 c0       	rjmp	.+2      	; 0x48a2 <dtoa_prf+0x16e>
    48a0:	b0 e0       	ldi	r27, 0x00	; 0
    48a2:	4b 2f       	mov	r20, r27
    48a4:	50 e0       	ldi	r21, 0x00	; 0
    48a6:	18 16       	cp	r1, r24
    48a8:	19 06       	cpc	r1, r25
    48aa:	24 f4       	brge	.+8      	; 0x48b4 <dtoa_prf+0x180>
    48ac:	9c 01       	movw	r18, r24
    48ae:	2f 5f       	subi	r18, 0xFF	; 255
    48b0:	3f 4f       	sbci	r19, 0xFF	; 255
    48b2:	02 c0       	rjmp	.+4      	; 0x48b8 <dtoa_prf+0x184>
    48b4:	21 e0       	ldi	r18, 0x01	; 1
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	24 0f       	add	r18, r20
    48ba:	35 1f       	adc	r19, r21
    48bc:	11 23       	and	r17, r17
    48be:	29 f0       	breq	.+10     	; 0x48ca <dtoa_prf+0x196>
    48c0:	41 2f       	mov	r20, r17
    48c2:	50 e0       	ldi	r21, 0x00	; 0
    48c4:	4f 5f       	subi	r20, 0xFF	; 255
    48c6:	5f 4f       	sbci	r21, 0xFF	; 255
    48c8:	02 c0       	rjmp	.+4      	; 0x48ce <dtoa_prf+0x19a>
    48ca:	40 e0       	ldi	r20, 0x00	; 0
    48cc:	50 e0       	ldi	r21, 0x00	; 0
    48ce:	42 0f       	add	r20, r18
    48d0:	53 1f       	adc	r21, r19
    48d2:	2b 2d       	mov	r18, r11
    48d4:	30 e0       	ldi	r19, 0x00	; 0
    48d6:	42 17       	cp	r20, r18
    48d8:	53 07       	cpc	r21, r19
    48da:	14 f4       	brge	.+4      	; 0x48e0 <dtoa_prf+0x1ac>
    48dc:	b4 1a       	sub	r11, r20
    48de:	01 c0       	rjmp	.+2      	; 0x48e2 <dtoa_prf+0x1ae>
    48e0:	b1 2c       	mov	r11, r1
    48e2:	2e 2d       	mov	r18, r14
    48e4:	28 71       	andi	r18, 0x18	; 24
    48e6:	59 f4       	brne	.+22     	; 0x48fe <dtoa_prf+0x1ca>
    48e8:	f6 01       	movw	r30, r12
    48ea:	2b 2d       	mov	r18, r11
    48ec:	30 e2       	ldi	r19, 0x20	; 32
    48ee:	22 23       	and	r18, r18
    48f0:	19 f0       	breq	.+6      	; 0x48f8 <dtoa_prf+0x1c4>
    48f2:	31 93       	st	Z+, r19
    48f4:	21 50       	subi	r18, 0x01	; 1
    48f6:	fb cf       	rjmp	.-10     	; 0x48ee <dtoa_prf+0x1ba>
    48f8:	cb 0c       	add	r12, r11
    48fa:	d1 1c       	adc	r13, r1
    48fc:	b1 2c       	mov	r11, r1
    48fe:	bb 23       	and	r27, r27
    4900:	31 f0       	breq	.+12     	; 0x490e <dtoa_prf+0x1da>
    4902:	f6 01       	movw	r30, r12
    4904:	60 83       	st	Z, r22
    4906:	96 01       	movw	r18, r12
    4908:	2f 5f       	subi	r18, 0xFF	; 255
    490a:	3f 4f       	sbci	r19, 0xFF	; 255
    490c:	69 01       	movw	r12, r18
    490e:	a1 11       	cpse	r26, r1
    4910:	0b c0       	rjmp	.+22     	; 0x4928 <dtoa_prf+0x1f4>
    4912:	f6 01       	movw	r30, r12
    4914:	2b 2d       	mov	r18, r11
    4916:	30 e3       	ldi	r19, 0x30	; 48
    4918:	22 23       	and	r18, r18
    491a:	19 f0       	breq	.+6      	; 0x4922 <dtoa_prf+0x1ee>
    491c:	31 93       	st	Z+, r19
    491e:	21 50       	subi	r18, 0x01	; 1
    4920:	fb cf       	rjmp	.-10     	; 0x4918 <dtoa_prf+0x1e4>
    4922:	cb 0c       	add	r12, r11
    4924:	d1 1c       	adc	r13, r1
    4926:	b1 2c       	mov	r11, r1
    4928:	f8 0e       	add	r15, r24
    492a:	0a 81       	ldd	r16, Y+2	; 0x02
    492c:	37 2f       	mov	r19, r23
    492e:	30 71       	andi	r19, 0x10	; 16
    4930:	a3 2e       	mov	r10, r19
    4932:	74 ff       	sbrs	r23, 4
    4934:	03 c0       	rjmp	.+6      	; 0x493c <dtoa_prf+0x208>
    4936:	01 33       	cpi	r16, 0x31	; 49
    4938:	09 f4       	brne	.+2      	; 0x493c <dtoa_prf+0x208>
    493a:	fa 94       	dec	r15
    493c:	1f 14       	cp	r1, r15
    493e:	2c f4       	brge	.+10     	; 0x494a <dtoa_prf+0x216>
    4940:	2f 2d       	mov	r18, r15
    4942:	29 30       	cpi	r18, 0x09	; 9
    4944:	18 f0       	brcs	.+6      	; 0x494c <dtoa_prf+0x218>
    4946:	28 e0       	ldi	r18, 0x08	; 8
    4948:	01 c0       	rjmp	.+2      	; 0x494c <dtoa_prf+0x218>
    494a:	21 e0       	ldi	r18, 0x01	; 1
    494c:	68 2f       	mov	r22, r24
    494e:	39 2f       	mov	r19, r25
    4950:	97 ff       	sbrs	r25, 7
    4952:	02 c0       	rjmp	.+4      	; 0x4958 <dtoa_prf+0x224>
    4954:	60 e0       	ldi	r22, 0x00	; 0
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	46 2f       	mov	r20, r22
    495a:	53 2f       	mov	r21, r19
    495c:	61 2c       	mov	r6, r1
    495e:	71 2c       	mov	r7, r1
    4960:	3e e2       	ldi	r19, 0x2E	; 46
    4962:	93 2e       	mov	r9, r19
    4964:	bc 01       	movw	r22, r24
    4966:	62 1b       	sub	r22, r18
    4968:	71 09       	sbc	r23, r1
    496a:	9b 01       	movw	r18, r22
    496c:	dc 01       	movw	r26, r24
    496e:	a4 1b       	sub	r26, r20
    4970:	b5 0b       	sbc	r27, r21
    4972:	e1 e0       	ldi	r30, 0x01	; 1
    4974:	f0 e0       	ldi	r31, 0x00	; 0
    4976:	ec 0f       	add	r30, r28
    4978:	fd 1f       	adc	r31, r29
    497a:	ae 0f       	add	r26, r30
    497c:	bf 1f       	adc	r27, r31
    497e:	e1 2e       	mov	r14, r17
    4980:	f1 2c       	mov	r15, r1
    4982:	f1 94       	neg	r15
    4984:	e1 94       	neg	r14
    4986:	f1 08       	sbc	r15, r1
    4988:	4f 3f       	cpi	r20, 0xFF	; 255
    498a:	ff ef       	ldi	r31, 0xFF	; 255
    498c:	5f 07       	cpc	r21, r31
    498e:	31 f4       	brne	.+12     	; 0x499c <dtoa_prf+0x268>
    4990:	f6 01       	movw	r30, r12
    4992:	90 82       	st	Z, r9
    4994:	b6 01       	movw	r22, r12
    4996:	6f 5f       	subi	r22, 0xFF	; 255
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	6b 01       	movw	r12, r22
    499c:	84 17       	cp	r24, r20
    499e:	95 07       	cpc	r25, r21
    49a0:	4c f0       	brlt	.+18     	; 0x49b4 <dtoa_prf+0x280>
    49a2:	24 17       	cp	r18, r20
    49a4:	35 07       	cpc	r19, r21
    49a6:	34 f4       	brge	.+12     	; 0x49b4 <dtoa_prf+0x280>
    49a8:	bd 01       	movw	r22, r26
    49aa:	66 0d       	add	r22, r6
    49ac:	77 1d       	adc	r23, r7
    49ae:	fb 01       	movw	r30, r22
    49b0:	11 81       	ldd	r17, Z+1	; 0x01
    49b2:	01 c0       	rjmp	.+2      	; 0x49b6 <dtoa_prf+0x282>
    49b4:	10 e3       	ldi	r17, 0x30	; 48
    49b6:	41 50       	subi	r20, 0x01	; 1
    49b8:	51 09       	sbc	r21, r1
    49ba:	ff ef       	ldi	r31, 0xFF	; 255
    49bc:	6f 1a       	sub	r6, r31
    49be:	7f 0a       	sbc	r7, r31
    49c0:	b6 01       	movw	r22, r12
    49c2:	6f 5f       	subi	r22, 0xFF	; 255
    49c4:	7f 4f       	sbci	r23, 0xFF	; 255
    49c6:	4e 15       	cp	r20, r14
    49c8:	5f 05       	cpc	r21, r15
    49ca:	24 f0       	brlt	.+8      	; 0x49d4 <dtoa_prf+0x2a0>
    49cc:	f6 01       	movw	r30, r12
    49ce:	10 83       	st	Z, r17
    49d0:	6b 01       	movw	r12, r22
    49d2:	da cf       	rjmp	.-76     	; 0x4988 <dtoa_prf+0x254>
    49d4:	48 17       	cp	r20, r24
    49d6:	59 07       	cpc	r21, r25
    49d8:	39 f4       	brne	.+14     	; 0x49e8 <dtoa_prf+0x2b4>
    49da:	06 33       	cpi	r16, 0x36	; 54
    49dc:	20 f4       	brcc	.+8      	; 0x49e6 <dtoa_prf+0x2b2>
    49de:	05 33       	cpi	r16, 0x35	; 53
    49e0:	19 f4       	brne	.+6      	; 0x49e8 <dtoa_prf+0x2b4>
    49e2:	a1 10       	cpse	r10, r1
    49e4:	01 c0       	rjmp	.+2      	; 0x49e8 <dtoa_prf+0x2b4>
    49e6:	11 e3       	ldi	r17, 0x31	; 49
    49e8:	f6 01       	movw	r30, r12
    49ea:	10 83       	st	Z, r17
    49ec:	fb 01       	movw	r30, r22
    49ee:	8b 2d       	mov	r24, r11
    49f0:	90 e2       	ldi	r25, 0x20	; 32
    49f2:	88 23       	and	r24, r24
    49f4:	19 f0       	breq	.+6      	; 0x49fc <dtoa_prf+0x2c8>
    49f6:	91 93       	st	Z+, r25
    49f8:	81 50       	subi	r24, 0x01	; 1
    49fa:	fb cf       	rjmp	.-10     	; 0x49f2 <dtoa_prf+0x2be>
    49fc:	fb 01       	movw	r30, r22
    49fe:	eb 0d       	add	r30, r11
    4a00:	f1 1d       	adc	r31, r1
    4a02:	10 82       	st	Z, r1
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	29 96       	adiw	r28, 0x09	; 9
    4a0a:	0f b6       	in	r0, 0x3f	; 63
    4a0c:	f8 94       	cli
    4a0e:	de bf       	out	0x3e, r29	; 62
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	cd bf       	out	0x3d, r28	; 61
    4a14:	df 91       	pop	r29
    4a16:	cf 91       	pop	r28
    4a18:	1f 91       	pop	r17
    4a1a:	0f 91       	pop	r16
    4a1c:	ff 90       	pop	r15
    4a1e:	ef 90       	pop	r14
    4a20:	df 90       	pop	r13
    4a22:	cf 90       	pop	r12
    4a24:	bf 90       	pop	r11
    4a26:	af 90       	pop	r10
    4a28:	9f 90       	pop	r9
    4a2a:	7f 90       	pop	r7
    4a2c:	6f 90       	pop	r6
    4a2e:	08 95       	ret

00004a30 <strtod>:
    4a30:	a0 e0       	ldi	r26, 0x00	; 0
    4a32:	b0 e0       	ldi	r27, 0x00	; 0
    4a34:	ee e1       	ldi	r30, 0x1E	; 30
    4a36:	f5 e2       	ldi	r31, 0x25	; 37
    4a38:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <__prologue_saves__+0xc>
    4a3c:	8b 01       	movw	r16, r22
    4a3e:	61 15       	cp	r22, r1
    4a40:	71 05       	cpc	r23, r1
    4a42:	21 f0       	breq	.+8      	; 0x4a4c <strtod+0x1c>
    4a44:	db 01       	movw	r26, r22
    4a46:	8c 93       	st	X, r24
    4a48:	11 96       	adiw	r26, 0x01	; 1
    4a4a:	9c 93       	st	X, r25
    4a4c:	ec 01       	movw	r28, r24
    4a4e:	5e 01       	movw	r10, r28
    4a50:	bf ef       	ldi	r27, 0xFF	; 255
    4a52:	ab 1a       	sub	r10, r27
    4a54:	bb 0a       	sbc	r11, r27
    4a56:	75 01       	movw	r14, r10
    4a58:	c8 80       	ld	r12, Y
    4a5a:	8c 2d       	mov	r24, r12
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	0e 94 7b 26 	call	0x4cf6	; 0x4cf6 <isspace>
    4a62:	89 2b       	or	r24, r25
    4a64:	11 f0       	breq	.+4      	; 0x4a6a <strtod+0x3a>
    4a66:	e5 01       	movw	r28, r10
    4a68:	f2 cf       	rjmp	.-28     	; 0x4a4e <strtod+0x1e>
    4a6a:	ed e2       	ldi	r30, 0x2D	; 45
    4a6c:	ce 12       	cpse	r12, r30
    4a6e:	08 c0       	rjmp	.+16     	; 0x4a80 <strtod+0x50>
    4a70:	7e 01       	movw	r14, r28
    4a72:	f2 e0       	ldi	r31, 0x02	; 2
    4a74:	ef 0e       	add	r14, r31
    4a76:	f1 1c       	adc	r15, r1
    4a78:	c9 80       	ldd	r12, Y+1	; 0x01
    4a7a:	dd 24       	eor	r13, r13
    4a7c:	d3 94       	inc	r13
    4a7e:	09 c0       	rjmp	.+18     	; 0x4a92 <strtod+0x62>
    4a80:	2b e2       	ldi	r18, 0x2B	; 43
    4a82:	c2 12       	cpse	r12, r18
    4a84:	05 c0       	rjmp	.+10     	; 0x4a90 <strtod+0x60>
    4a86:	7e 01       	movw	r14, r28
    4a88:	42 e0       	ldi	r20, 0x02	; 2
    4a8a:	e4 0e       	add	r14, r20
    4a8c:	f1 1c       	adc	r15, r1
    4a8e:	c9 80       	ldd	r12, Y+1	; 0x01
    4a90:	d1 2c       	mov	r13, r1
    4a92:	e7 01       	movw	r28, r14
    4a94:	21 97       	sbiw	r28, 0x01	; 1
    4a96:	43 e0       	ldi	r20, 0x03	; 3
    4a98:	50 e0       	ldi	r21, 0x00	; 0
    4a9a:	6a e4       	ldi	r22, 0x4A	; 74
    4a9c:	73 e0       	ldi	r23, 0x03	; 3
    4a9e:	ce 01       	movw	r24, r28
    4aa0:	0e 94 83 26 	call	0x4d06	; 0x4d06 <strncasecmp_P>
    4aa4:	89 2b       	or	r24, r25
    4aa6:	c1 f4       	brne	.+48     	; 0x4ad8 <strtod+0xa8>
    4aa8:	23 96       	adiw	r28, 0x03	; 3
    4aaa:	45 e0       	ldi	r20, 0x05	; 5
    4aac:	50 e0       	ldi	r21, 0x00	; 0
    4aae:	65 e4       	ldi	r22, 0x45	; 69
    4ab0:	73 e0       	ldi	r23, 0x03	; 3
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	0e 94 83 26 	call	0x4d06	; 0x4d06 <strncasecmp_P>
    4ab8:	89 2b       	or	r24, r25
    4aba:	09 f4       	brne	.+2      	; 0x4abe <strtod+0x8e>
    4abc:	25 96       	adiw	r28, 0x05	; 5
    4abe:	01 15       	cp	r16, r1
    4ac0:	11 05       	cpc	r17, r1
    4ac2:	19 f0       	breq	.+6      	; 0x4aca <strtod+0x9a>
    4ac4:	d8 01       	movw	r26, r16
    4ac6:	cd 93       	st	X+, r28
    4ac8:	dc 93       	st	X, r29
    4aca:	d1 10       	cpse	r13, r1
    4acc:	06 c1       	rjmp	.+524    	; 0x4cda <strtod+0x2aa>
    4ace:	60 e0       	ldi	r22, 0x00	; 0
    4ad0:	70 e0       	ldi	r23, 0x00	; 0
    4ad2:	80 e8       	ldi	r24, 0x80	; 128
    4ad4:	9f e7       	ldi	r25, 0x7F	; 127
    4ad6:	0a c1       	rjmp	.+532    	; 0x4cec <strtod+0x2bc>
    4ad8:	43 e0       	ldi	r20, 0x03	; 3
    4ada:	50 e0       	ldi	r21, 0x00	; 0
    4adc:	62 e4       	ldi	r22, 0x42	; 66
    4ade:	73 e0       	ldi	r23, 0x03	; 3
    4ae0:	ce 01       	movw	r24, r28
    4ae2:	0e 94 83 26 	call	0x4d06	; 0x4d06 <strncasecmp_P>
    4ae6:	89 2b       	or	r24, r25
    4ae8:	59 f4       	brne	.+22     	; 0x4b00 <strtod+0xd0>
    4aea:	01 15       	cp	r16, r1
    4aec:	11 05       	cpc	r17, r1
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <strtod+0xc2>
    4af0:	f9 c0       	rjmp	.+498    	; 0x4ce4 <strtod+0x2b4>
    4af2:	b2 e0       	ldi	r27, 0x02	; 2
    4af4:	eb 0e       	add	r14, r27
    4af6:	f1 1c       	adc	r15, r1
    4af8:	f8 01       	movw	r30, r16
    4afa:	f1 82       	std	Z+1, r15	; 0x01
    4afc:	e0 82       	st	Z, r14
    4afe:	f2 c0       	rjmp	.+484    	; 0x4ce4 <strtod+0x2b4>
    4b00:	f7 01       	movw	r30, r14
    4b02:	60 e0       	ldi	r22, 0x00	; 0
    4b04:	70 e0       	ldi	r23, 0x00	; 0
    4b06:	cb 01       	movw	r24, r22
    4b08:	c0 e0       	ldi	r28, 0x00	; 0
    4b0a:	d0 e0       	ldi	r29, 0x00	; 0
    4b0c:	7f 01       	movw	r14, r30
    4b0e:	a0 ed       	ldi	r26, 0xD0	; 208
    4b10:	aa 2e       	mov	r10, r26
    4b12:	ac 0c       	add	r10, r12
    4b14:	29 e0       	ldi	r18, 0x09	; 9
    4b16:	2a 15       	cp	r18, r10
    4b18:	30 f1       	brcs	.+76     	; 0x4b66 <strtod+0x136>
    4b1a:	4d 2d       	mov	r20, r13
    4b1c:	42 60       	ori	r20, 0x02	; 2
    4b1e:	b4 2e       	mov	r11, r20
    4b20:	2d 2d       	mov	r18, r13
    4b22:	28 70       	andi	r18, 0x08	; 8
    4b24:	d2 fe       	sbrs	r13, 2
    4b26:	04 c0       	rjmp	.+8      	; 0x4b30 <strtod+0x100>
    4b28:	21 11       	cpse	r18, r1
    4b2a:	25 c0       	rjmp	.+74     	; 0x4b76 <strtod+0x146>
    4b2c:	21 96       	adiw	r28, 0x01	; 1
    4b2e:	23 c0       	rjmp	.+70     	; 0x4b76 <strtod+0x146>
    4b30:	21 11       	cpse	r18, r1
    4b32:	21 97       	sbiw	r28, 0x01	; 1
    4b34:	a5 e0       	ldi	r26, 0x05	; 5
    4b36:	b0 e0       	ldi	r27, 0x00	; 0
    4b38:	9b 01       	movw	r18, r22
    4b3a:	ac 01       	movw	r20, r24
    4b3c:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <__muluhisi3>
    4b40:	66 0f       	add	r22, r22
    4b42:	77 1f       	adc	r23, r23
    4b44:	88 1f       	adc	r24, r24
    4b46:	99 1f       	adc	r25, r25
    4b48:	6a 0d       	add	r22, r10
    4b4a:	71 1d       	adc	r23, r1
    4b4c:	81 1d       	adc	r24, r1
    4b4e:	91 1d       	adc	r25, r1
    4b50:	68 39       	cpi	r22, 0x98	; 152
    4b52:	a9 e9       	ldi	r26, 0x99	; 153
    4b54:	7a 07       	cpc	r23, r26
    4b56:	8a 07       	cpc	r24, r26
    4b58:	a9 e1       	ldi	r26, 0x19	; 25
    4b5a:	9a 07       	cpc	r25, r26
    4b5c:	60 f0       	brcs	.+24     	; 0x4b76 <strtod+0x146>
    4b5e:	bd 2d       	mov	r27, r13
    4b60:	b6 60       	ori	r27, 0x06	; 6
    4b62:	bb 2e       	mov	r11, r27
    4b64:	08 c0       	rjmp	.+16     	; 0x4b76 <strtod+0x146>
    4b66:	2e ef       	ldi	r18, 0xFE	; 254
    4b68:	a2 12       	cpse	r10, r18
    4b6a:	0a c0       	rjmp	.+20     	; 0x4b80 <strtod+0x150>
    4b6c:	d3 fc       	sbrc	r13, 3
    4b6e:	50 c0       	rjmp	.+160    	; 0x4c10 <strtod+0x1e0>
    4b70:	4d 2d       	mov	r20, r13
    4b72:	48 60       	ori	r20, 0x08	; 8
    4b74:	b4 2e       	mov	r11, r20
    4b76:	31 96       	adiw	r30, 0x01	; 1
    4b78:	d7 01       	movw	r26, r14
    4b7a:	cc 90       	ld	r12, X
    4b7c:	db 2c       	mov	r13, r11
    4b7e:	c6 cf       	rjmp	.-116    	; 0x4b0c <strtod+0xdc>
    4b80:	2c 2d       	mov	r18, r12
    4b82:	2f 7d       	andi	r18, 0xDF	; 223
    4b84:	25 34       	cpi	r18, 0x45	; 69
    4b86:	09 f0       	breq	.+2      	; 0x4b8a <strtod+0x15a>
    4b88:	43 c0       	rjmp	.+134    	; 0x4c10 <strtod+0x1e0>
    4b8a:	a0 81       	ld	r26, Z
    4b8c:	ad 32       	cpi	r26, 0x2D	; 45
    4b8e:	41 f4       	brne	.+16     	; 0x4ba0 <strtod+0x170>
    4b90:	bd 2d       	mov	r27, r13
    4b92:	b0 61       	ori	r27, 0x10	; 16
    4b94:	db 2e       	mov	r13, r27
    4b96:	7f 01       	movw	r14, r30
    4b98:	22 e0       	ldi	r18, 0x02	; 2
    4b9a:	e2 0e       	add	r14, r18
    4b9c:	f1 1c       	adc	r15, r1
    4b9e:	0c c0       	rjmp	.+24     	; 0x4bb8 <strtod+0x188>
    4ba0:	7f 01       	movw	r14, r30
    4ba2:	ab 32       	cpi	r26, 0x2B	; 43
    4ba4:	31 f0       	breq	.+12     	; 0x4bb2 <strtod+0x182>
    4ba6:	4f ef       	ldi	r20, 0xFF	; 255
    4ba8:	e4 1a       	sub	r14, r20
    4baa:	f4 0a       	sbc	r15, r20
    4bac:	21 e0       	ldi	r18, 0x01	; 1
    4bae:	30 e0       	ldi	r19, 0x00	; 0
    4bb0:	06 c0       	rjmp	.+12     	; 0x4bbe <strtod+0x18e>
    4bb2:	a2 e0       	ldi	r26, 0x02	; 2
    4bb4:	ea 0e       	add	r14, r26
    4bb6:	f1 1c       	adc	r15, r1
    4bb8:	a1 81       	ldd	r26, Z+1	; 0x01
    4bba:	22 e0       	ldi	r18, 0x02	; 2
    4bbc:	30 e0       	ldi	r19, 0x00	; 0
    4bbe:	a0 53       	subi	r26, 0x30	; 48
    4bc0:	aa 30       	cpi	r26, 0x0A	; 10
    4bc2:	18 f0       	brcs	.+6      	; 0x4bca <strtod+0x19a>
    4bc4:	e2 1a       	sub	r14, r18
    4bc6:	f3 0a       	sbc	r15, r19
    4bc8:	23 c0       	rjmp	.+70     	; 0x4c10 <strtod+0x1e0>
    4bca:	f7 01       	movw	r30, r14
    4bcc:	20 e0       	ldi	r18, 0x00	; 0
    4bce:	30 e0       	ldi	r19, 0x00	; 0
    4bd0:	20 38       	cpi	r18, 0x80	; 128
    4bd2:	bc e0       	ldi	r27, 0x0C	; 12
    4bd4:	3b 07       	cpc	r19, r27
    4bd6:	5c f4       	brge	.+22     	; 0x4bee <strtod+0x1be>
    4bd8:	a9 01       	movw	r20, r18
    4bda:	44 0f       	add	r20, r20
    4bdc:	55 1f       	adc	r21, r21
    4bde:	44 0f       	add	r20, r20
    4be0:	55 1f       	adc	r21, r21
    4be2:	24 0f       	add	r18, r20
    4be4:	35 1f       	adc	r19, r21
    4be6:	22 0f       	add	r18, r18
    4be8:	33 1f       	adc	r19, r19
    4bea:	2a 0f       	add	r18, r26
    4bec:	31 1d       	adc	r19, r1
    4bee:	af 01       	movw	r20, r30
    4bf0:	4f 5f       	subi	r20, 0xFF	; 255
    4bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    4bf4:	7a 01       	movw	r14, r20
    4bf6:	a0 81       	ld	r26, Z
    4bf8:	a0 53       	subi	r26, 0x30	; 48
    4bfa:	aa 30       	cpi	r26, 0x0A	; 10
    4bfc:	10 f4       	brcc	.+4      	; 0x4c02 <strtod+0x1d2>
    4bfe:	fa 01       	movw	r30, r20
    4c00:	e7 cf       	rjmp	.-50     	; 0x4bd0 <strtod+0x1a0>
    4c02:	d4 fe       	sbrs	r13, 4
    4c04:	03 c0       	rjmp	.+6      	; 0x4c0c <strtod+0x1dc>
    4c06:	31 95       	neg	r19
    4c08:	21 95       	neg	r18
    4c0a:	31 09       	sbc	r19, r1
    4c0c:	c2 0f       	add	r28, r18
    4c0e:	d3 1f       	adc	r29, r19
    4c10:	d1 fe       	sbrs	r13, 1
    4c12:	09 c0       	rjmp	.+18     	; 0x4c26 <strtod+0x1f6>
    4c14:	01 15       	cp	r16, r1
    4c16:	11 05       	cpc	r17, r1
    4c18:	31 f0       	breq	.+12     	; 0x4c26 <strtod+0x1f6>
    4c1a:	e1 e0       	ldi	r30, 0x01	; 1
    4c1c:	ee 1a       	sub	r14, r30
    4c1e:	f1 08       	sbc	r15, r1
    4c20:	d8 01       	movw	r26, r16
    4c22:	ed 92       	st	X+, r14
    4c24:	fc 92       	st	X, r15
    4c26:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <__floatunsisf>
    4c2a:	2d 2d       	mov	r18, r13
    4c2c:	23 70       	andi	r18, 0x03	; 3
    4c2e:	23 30       	cpi	r18, 0x03	; 3
    4c30:	19 f0       	breq	.+6      	; 0x4c38 <strtod+0x208>
    4c32:	4b 01       	movw	r8, r22
    4c34:	5c 01       	movw	r10, r24
    4c36:	06 c0       	rjmp	.+12     	; 0x4c44 <strtod+0x214>
    4c38:	4b 01       	movw	r8, r22
    4c3a:	5c 01       	movw	r10, r24
    4c3c:	b7 fa       	bst	r11, 7
    4c3e:	b0 94       	com	r11
    4c40:	b7 f8       	bld	r11, 7
    4c42:	b0 94       	com	r11
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	a9 01       	movw	r20, r18
    4c4a:	c5 01       	movw	r24, r10
    4c4c:	b4 01       	movw	r22, r8
    4c4e:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    4c52:	88 23       	and	r24, r24
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <strtod+0x228>
    4c56:	3e c0       	rjmp	.+124    	; 0x4cd4 <strtod+0x2a4>
    4c58:	d7 ff       	sbrs	r29, 7
    4c5a:	06 c0       	rjmp	.+12     	; 0x4c68 <strtod+0x238>
    4c5c:	d1 95       	neg	r29
    4c5e:	c1 95       	neg	r28
    4c60:	d1 09       	sbc	r29, r1
    4c62:	01 e6       	ldi	r16, 0x61	; 97
    4c64:	13 e0       	ldi	r17, 0x03	; 3
    4c66:	02 c0       	rjmp	.+4      	; 0x4c6c <strtod+0x23c>
    4c68:	09 e7       	ldi	r16, 0x79	; 121
    4c6a:	13 e0       	ldi	r17, 0x03	; 3
    4c6c:	68 01       	movw	r12, r16
    4c6e:	b8 e1       	ldi	r27, 0x18	; 24
    4c70:	cb 1a       	sub	r12, r27
    4c72:	d1 08       	sbc	r13, r1
    4c74:	90 e2       	ldi	r25, 0x20	; 32
    4c76:	e9 2e       	mov	r14, r25
    4c78:	f1 2c       	mov	r15, r1
    4c7a:	ce 15       	cp	r28, r14
    4c7c:	df 05       	cpc	r29, r15
    4c7e:	74 f0       	brlt	.+28     	; 0x4c9c <strtod+0x26c>
    4c80:	f8 01       	movw	r30, r16
    4c82:	25 91       	lpm	r18, Z+
    4c84:	35 91       	lpm	r19, Z+
    4c86:	45 91       	lpm	r20, Z+
    4c88:	54 91       	lpm	r21, Z
    4c8a:	c5 01       	movw	r24, r10
    4c8c:	b4 01       	movw	r22, r8
    4c8e:	0e 94 2d 20 	call	0x405a	; 0x405a <__mulsf3>
    4c92:	4b 01       	movw	r8, r22
    4c94:	5c 01       	movw	r10, r24
    4c96:	ce 19       	sub	r28, r14
    4c98:	df 09       	sbc	r29, r15
    4c9a:	ef cf       	rjmp	.-34     	; 0x4c7a <strtod+0x24a>
    4c9c:	04 50       	subi	r16, 0x04	; 4
    4c9e:	11 09       	sbc	r17, r1
    4ca0:	f5 94       	asr	r15
    4ca2:	e7 94       	ror	r14
    4ca4:	0c 15       	cp	r16, r12
    4ca6:	1d 05       	cpc	r17, r13
    4ca8:	41 f7       	brne	.-48     	; 0x4c7a <strtod+0x24a>
    4caa:	8a 2d       	mov	r24, r10
    4cac:	88 0f       	add	r24, r24
    4cae:	8b 2d       	mov	r24, r11
    4cb0:	88 1f       	adc	r24, r24
    4cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    4cb4:	49 f0       	breq	.+18     	; 0x4cc8 <strtod+0x298>
    4cb6:	20 e0       	ldi	r18, 0x00	; 0
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	a9 01       	movw	r20, r18
    4cbc:	c5 01       	movw	r24, r10
    4cbe:	b4 01       	movw	r22, r8
    4cc0:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <__cmpsf2>
    4cc4:	81 11       	cpse	r24, r1
    4cc6:	06 c0       	rjmp	.+12     	; 0x4cd4 <strtod+0x2a4>
    4cc8:	82 e2       	ldi	r24, 0x22	; 34
    4cca:	90 e0       	ldi	r25, 0x00	; 0
    4ccc:	90 93 19 08 	sts	0x0819, r25
    4cd0:	80 93 18 08 	sts	0x0818, r24
    4cd4:	c5 01       	movw	r24, r10
    4cd6:	b4 01       	movw	r22, r8
    4cd8:	09 c0       	rjmp	.+18     	; 0x4cec <strtod+0x2bc>
    4cda:	60 e0       	ldi	r22, 0x00	; 0
    4cdc:	70 e0       	ldi	r23, 0x00	; 0
    4cde:	80 e8       	ldi	r24, 0x80	; 128
    4ce0:	9f ef       	ldi	r25, 0xFF	; 255
    4ce2:	04 c0       	rjmp	.+8      	; 0x4cec <strtod+0x2bc>
    4ce4:	60 e0       	ldi	r22, 0x00	; 0
    4ce6:	70 e0       	ldi	r23, 0x00	; 0
    4ce8:	80 ec       	ldi	r24, 0xC0	; 192
    4cea:	9f e7       	ldi	r25, 0x7F	; 127
    4cec:	cd b7       	in	r28, 0x3d	; 61
    4cee:	de b7       	in	r29, 0x3e	; 62
    4cf0:	ec e0       	ldi	r30, 0x0C	; 12
    4cf2:	0c 94 3a 1d 	jmp	0x3a74	; 0x3a74 <__epilogue_restores__+0xc>

00004cf6 <isspace>:
    4cf6:	91 11       	cpse	r25, r1
    4cf8:	50 c0       	rjmp	.+160    	; 0x4d9a <__ctype_isfalse>
    4cfa:	80 32       	cpi	r24, 0x20	; 32
    4cfc:	19 f0       	breq	.+6      	; 0x4d04 <isspace+0xe>
    4cfe:	89 50       	subi	r24, 0x09	; 9
    4d00:	85 50       	subi	r24, 0x05	; 5
    4d02:	d0 f7       	brcc	.-12     	; 0x4cf8 <isspace+0x2>
    4d04:	08 95       	ret

00004d06 <strncasecmp_P>:
    4d06:	fb 01       	movw	r30, r22
    4d08:	dc 01       	movw	r26, r24
    4d0a:	41 50       	subi	r20, 0x01	; 1
    4d0c:	50 40       	sbci	r21, 0x00	; 0
    4d0e:	88 f0       	brcs	.+34     	; 0x4d32 <strncasecmp_P+0x2c>
    4d10:	8d 91       	ld	r24, X+
    4d12:	81 34       	cpi	r24, 0x41	; 65
    4d14:	1c f0       	brlt	.+6      	; 0x4d1c <strncasecmp_P+0x16>
    4d16:	8b 35       	cpi	r24, 0x5B	; 91
    4d18:	0c f4       	brge	.+2      	; 0x4d1c <strncasecmp_P+0x16>
    4d1a:	80 5e       	subi	r24, 0xE0	; 224
    4d1c:	65 91       	lpm	r22, Z+
    4d1e:	61 34       	cpi	r22, 0x41	; 65
    4d20:	1c f0       	brlt	.+6      	; 0x4d28 <strncasecmp_P+0x22>
    4d22:	6b 35       	cpi	r22, 0x5B	; 91
    4d24:	0c f4       	brge	.+2      	; 0x4d28 <strncasecmp_P+0x22>
    4d26:	60 5e       	subi	r22, 0xE0	; 224
    4d28:	86 1b       	sub	r24, r22
    4d2a:	61 11       	cpse	r22, r1
    4d2c:	71 f3       	breq	.-36     	; 0x4d0a <strncasecmp_P+0x4>
    4d2e:	99 0b       	sbc	r25, r25
    4d30:	08 95       	ret
    4d32:	88 1b       	sub	r24, r24
    4d34:	fc cf       	rjmp	.-8      	; 0x4d2e <strncasecmp_P+0x28>

00004d36 <strrev>:
    4d36:	dc 01       	movw	r26, r24
    4d38:	fc 01       	movw	r30, r24
    4d3a:	67 2f       	mov	r22, r23
    4d3c:	71 91       	ld	r23, Z+
    4d3e:	77 23       	and	r23, r23
    4d40:	e1 f7       	brne	.-8      	; 0x4d3a <strrev+0x4>
    4d42:	32 97       	sbiw	r30, 0x02	; 2
    4d44:	04 c0       	rjmp	.+8      	; 0x4d4e <strrev+0x18>
    4d46:	7c 91       	ld	r23, X
    4d48:	6d 93       	st	X+, r22
    4d4a:	70 83       	st	Z, r23
    4d4c:	62 91       	ld	r22, -Z
    4d4e:	ae 17       	cp	r26, r30
    4d50:	bf 07       	cpc	r27, r31
    4d52:	c8 f3       	brcs	.-14     	; 0x4d46 <strrev+0x10>
    4d54:	08 95       	ret

00004d56 <__eerd_block_m328p>:
    4d56:	dc 01       	movw	r26, r24
    4d58:	cb 01       	movw	r24, r22

00004d5a <__eerd_blraw_m328p>:
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	f9 99       	sbic	0x1f, 1	; 31
    4d5e:	fe cf       	rjmp	.-4      	; 0x4d5c <__eerd_blraw_m328p+0x2>
    4d60:	06 c0       	rjmp	.+12     	; 0x4d6e <__eerd_blraw_m328p+0x14>
    4d62:	f2 bd       	out	0x22, r31	; 34
    4d64:	e1 bd       	out	0x21, r30	; 33
    4d66:	f8 9a       	sbi	0x1f, 0	; 31
    4d68:	31 96       	adiw	r30, 0x01	; 1
    4d6a:	00 b4       	in	r0, 0x20	; 32
    4d6c:	0d 92       	st	X+, r0
    4d6e:	41 50       	subi	r20, 0x01	; 1
    4d70:	50 40       	sbci	r21, 0x00	; 0
    4d72:	b8 f7       	brcc	.-18     	; 0x4d62 <__eerd_blraw_m328p+0x8>
    4d74:	08 95       	ret

00004d76 <__eeupd_byte_m328p>:
    4d76:	26 2f       	mov	r18, r22

00004d78 <__eeupd_r18_m328p>:
    4d78:	f9 99       	sbic	0x1f, 1	; 31
    4d7a:	fe cf       	rjmp	.-4      	; 0x4d78 <__eeupd_r18_m328p>
    4d7c:	92 bd       	out	0x22, r25	; 34
    4d7e:	81 bd       	out	0x21, r24	; 33
    4d80:	f8 9a       	sbi	0x1f, 0	; 31
    4d82:	01 97       	sbiw	r24, 0x01	; 1
    4d84:	00 b4       	in	r0, 0x20	; 32
    4d86:	02 16       	cp	r0, r18
    4d88:	39 f0       	breq	.+14     	; 0x4d98 <__eeupd_r18_m328p+0x20>
    4d8a:	1f ba       	out	0x1f, r1	; 31
    4d8c:	20 bd       	out	0x20, r18	; 32
    4d8e:	0f b6       	in	r0, 0x3f	; 63
    4d90:	f8 94       	cli
    4d92:	fa 9a       	sbi	0x1f, 2	; 31
    4d94:	f9 9a       	sbi	0x1f, 1	; 31
    4d96:	0f be       	out	0x3f, r0	; 63
    4d98:	08 95       	ret

00004d9a <__ctype_isfalse>:
    4d9a:	99 27       	eor	r25, r25
    4d9c:	88 27       	eor	r24, r24

00004d9e <__ctype_istrue>:
    4d9e:	08 95       	ret

00004da0 <__muluhisi3>:
    4da0:	0e 94 09 1d 	call	0x3a12	; 0x3a12 <__umulhisi3>
    4da4:	a5 9f       	mul	r26, r21
    4da6:	90 0d       	add	r25, r0
    4da8:	b4 9f       	mul	r27, r20
    4daa:	90 0d       	add	r25, r0
    4dac:	a4 9f       	mul	r26, r20
    4dae:	80 0d       	add	r24, r0
    4db0:	91 1d       	adc	r25, r1
    4db2:	11 24       	eor	r1, r1
    4db4:	08 95       	ret

00004db6 <_exit>:
    4db6:	f8 94       	cli

00004db8 <__stop_program>:
    4db8:	ff cf       	rjmp	.-2      	; 0x4db8 <__stop_program>
